
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003e4  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000728  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  7c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  84:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  88:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  8c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  90:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e6       	ldi	r30, 0x6A	; 106
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  be:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <main>:

void SPI_MasterInit(void);
void SPI_MasterTransmit(char cData);

int main(void)
{
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (0x01 << PB4);
  ce:	a4 e2       	ldi	r26, 0x24	; 36
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e4 e2       	ldi	r30, 0x24	; 36
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	8c 93       	st	X, r24
	
	SPI_MasterInit();
  dc:	0e 94 82 00 	call	0x104	; 0x104 <SPI_MasterInit>
	while(1)
	{
		PORTB |= (0x01 << PB4);
  e0:	a5 e2       	ldi	r26, 0x25	; 37
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e2       	ldi	r30, 0x25	; 37
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	8c 93       	st	X, r24
		PORTB &= ~(0x01 << PB4);
  ee:	a5 e2       	ldi	r26, 0x25	; 37
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e5 e2       	ldi	r30, 0x25	; 37
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8f 7e       	andi	r24, 0xEF	; 239
  fa:	8c 93       	st	X, r24
		SPI_MasterTransmit('A');
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_MasterTransmit>
 102:	ee cf       	rjmp	.-36     	; 0xe0 <main+0x1a>

00000104 <SPI_MasterInit>:
	}
}

void SPI_MasterInit(void)
{
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	// SCK, SS!!, MOSI as outputs
	SPIDDR |= (1<<SPISCK)|(1<<SPISS)|(1<<SPIMOSI);
 10c:	a4 e2       	ldi	r26, 0x24	; 36
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e4 e2       	ldi	r30, 0x24	; 36
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	87 60       	ori	r24, 0x07	; 7
 118:	8c 93       	st	X, r24
	// MISO as input
	SPIDDR &= ~(1<<SPIMISO);	// cbi(SPIDDR,SPIMISO);
 11a:	a4 e2       	ldi	r26, 0x24	; 36
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e4 e2       	ldi	r30, 0x24	; 36
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	87 7f       	andi	r24, 0xF7	; 247
 126:	8c 93       	st	X, r24
	// INIT interface, Master, set clock rate fck/128 TODO: check prescaler
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
 128:	ec e4       	ldi	r30, 0x4C	; 76
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	83 e5       	ldi	r24, 0x53	; 83
 12e:	80 83       	st	Z, r24
}
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	08 95       	ret

00000136 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	00 d0       	rcall	.+0      	; 0x13c <SPI_MasterTransmit+0x6>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char dummy_read;
	/* Start transmission */
	SPDR = cData;
 142:	ee e4       	ldi	r30, 0x4E	; 78
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 14a:	ed e4       	ldi	r30, 0x4D	; 77
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	dc f7       	brge	.-10     	; 0x14a <SPI_MasterTransmit+0x14>
	dummy_read = SPDR;
 154:	ee e4       	ldi	r30, 0x4E	; 78
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>

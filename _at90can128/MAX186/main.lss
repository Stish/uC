
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000005ac  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000077f  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  7c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  84:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  88:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  8c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  90:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 e5       	ldi	r30, 0x52	; 82
  a8:	f2 e0       	ldi	r31, 0x02	; 2
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  be:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <main>:
#include "main.h"

int main(void)
{
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <main+0x6>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	unsigned int iResult_ADC = 0x0000;
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	19 82       	std	Y+1, r1	; 0x01
	
	SW_SPI_MasterInit();
  d4:	0e 94 a5 00 	call	0x14a	; 0x14a <SW_SPI_MasterInit>
	
	while(1)
	{
		iResult_ADC = SW_SPI_ReadMAX186(0x00 | (0x01 << MAX186_START) | (0x01 << MAX186_SGL_DIF) | (0x01 << MAX186_PD1) | (0x01 << MAX186_PD0));
  d8:	87 e8       	ldi	r24, 0x87	; 135
  da:	0e 94 b7 00 	call	0x16e	; 0x16e <SW_SPI_ReadMAX186>
  de:	9a 83       	std	Y+2, r25	; 0x02
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <main+0x12>

000000e4 <SW_SPI_Wait>:
	}
}

void SW_SPI_Wait(void)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	00 d0       	rcall	.+0      	; 0xea <SW_SPI_Wait+0x6>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	for (int i = 1; i <= 250; i++)
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	06 c0       	rjmp	.+12     	; 0x104 <SW_SPI_Wait+0x20>
	{
		asm("nop");
  f8:	00 00       	nop
	}
}

void SW_SPI_Wait(void)
{
	for (int i = 1; i <= 250; i++)
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	9a 83       	std	Y+2, r25	; 0x02
 102:	89 83       	std	Y+1, r24	; 0x01
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	9a 81       	ldd	r25, Y+2	; 0x02
 108:	8b 3f       	cpi	r24, 0xFB	; 251
 10a:	91 05       	cpc	r25, r1
 10c:	ac f3       	brlt	.-22     	; 0xf8 <SW_SPI_Wait+0x14>
	{
		asm("nop");
	}
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <SW_SPI_SCK_Strope>:

void SW_SPI_SCK_Strope(void)
{
 118:	df 93       	push	r29
 11a:	cf 93       	push	r28
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	SPI_PORT &= ~(0x01 << SPI_SCK);
 120:	a5 e2       	ldi	r26, 0x25	; 37
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e5 e2       	ldi	r30, 0x25	; 37
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	8c 93       	st	X, r24
	SW_SPI_Wait();
 12e:	0e 94 72 00 	call	0xe4	; 0xe4 <SW_SPI_Wait>
	SPI_PORT |= (0x01 << SPI_SCK);
 132:	a5 e2       	ldi	r26, 0x25	; 37
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e5 e2       	ldi	r30, 0x25	; 37
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	8c 93       	st	X, r24
	SW_SPI_Wait();
 140:	0e 94 72 00 	call	0xe4	; 0xe4 <SW_SPI_Wait>
}
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	08 95       	ret

0000014a <SW_SPI_MasterInit>:

void SW_SPI_MasterInit(void)
{
 14a:	df 93       	push	r29
 14c:	cf 93       	push	r28
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	SPI_DDR = (0x01 << SPI_MOSI) | (0x01 << SPI_SCK);
 152:	e4 e2       	ldi	r30, 0x24	; 36
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	80 83       	st	Z, r24
	SPI_DDR &= ~(0x01 << SPI_MISO);
 15a:	a4 e2       	ldi	r26, 0x24	; 36
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e4 e2       	ldi	r30, 0x24	; 36
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	8f 7e       	andi	r24, 0xEF	; 239
 166:	8c 93       	st	X, r24
}
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <SW_SPI_ReadMAX186>:

unsigned int SW_SPI_ReadMAX186(char cData)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <SW_SPI_ReadMAX186+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <SW_SPI_ReadMAX186+0x8>
 176:	0f 92       	push	r0
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int iInputData = 0x0000;
 17e:	1c 82       	std	Y+4, r1	; 0x04
 180:	1b 82       	std	Y+3, r1	; 0x03
	
	for (char i = 0; i <= 7; i++)
 182:	1a 82       	std	Y+2, r1	; 0x02
 184:	26 c0       	rjmp	.+76     	; 0x1d2 <SW_SPI_ReadMAX186+0x64>
	{
		if (cData & (0x80 >> i))
 186:	8d 81       	ldd	r24, Y+5	; 0x05
 188:	48 2f       	mov	r20, r24
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 2e       	mov	r0, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <SW_SPI_ReadMAX186+0x30>
 19a:	95 95       	asr	r25
 19c:	87 95       	ror	r24
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <SW_SPI_ReadMAX186+0x2c>
 1a2:	84 23       	and	r24, r20
 1a4:	95 23       	and	r25, r21
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	41 f0       	breq	.+16     	; 0x1ba <SW_SPI_ReadMAX186+0x4c>
		{
			SPI_PORT |= (0x01 << SPI_MOSI);
 1aa:	a5 e2       	ldi	r26, 0x25	; 37
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e5 e2       	ldi	r30, 0x25	; 37
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	8c 93       	st	X, r24
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <SW_SPI_ReadMAX186+0x5a>
		}
		else
		{
			SPI_PORT &= ~(0x01 << SPI_MOSI);
 1ba:	a5 e2       	ldi	r26, 0x25	; 37
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	e5 e2       	ldi	r30, 0x25	; 37
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	8c 93       	st	X, r24
		}
		
		SW_SPI_SCK_Strope();
 1c8:	0e 94 8c 00 	call	0x118	; 0x118 <SW_SPI_SCK_Strope>

unsigned int SW_SPI_ReadMAX186(char cData)
{
	unsigned int iInputData = 0x0000;
	
	for (char i = 0; i <= 7; i++)
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	88 30       	cpi	r24, 0x08	; 8
 1d6:	b8 f2       	brcs	.-82     	; 0x186 <SW_SPI_ReadMAX186+0x18>
		}
		
		SW_SPI_SCK_Strope();
	}
	
	SPI_PORT &= ~(0x01 << SPI_MOSI);
 1d8:	a5 e2       	ldi	r26, 0x25	; 37
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e5 e2       	ldi	r30, 0x25	; 37
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	8c 93       	st	X, r24
	SW_SPI_SCK_Strope();
 1e6:	0e 94 8c 00 	call	0x118	; 0x118 <SW_SPI_SCK_Strope>
		
	for (char i = 0; i <= 11; i++)
 1ea:	19 82       	std	Y+1, r1	; 0x01
 1ec:	1f c0       	rjmp	.+62     	; 0x22c <SW_SPI_ReadMAX186+0xbe>
	{
		if (SPI_PIN & (0x01 << SPI_MISO))
 1ee:	e3 e2       	ldi	r30, 0x23	; 35
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	80 71       	andi	r24, 0x10	; 16
 1fa:	90 70       	andi	r25, 0x00	; 0
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	89 f0       	breq	.+34     	; 0x222 <SW_SPI_ReadMAX186+0xb4>
		{
			iInputData |= (0x800 >> i);
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	98 e0       	ldi	r25, 0x08	; 8
 20a:	02 c0       	rjmp	.+4      	; 0x210 <SW_SPI_ReadMAX186+0xa2>
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	2a 95       	dec	r18
 212:	e2 f7       	brpl	.-8      	; 0x20c <SW_SPI_ReadMAX186+0x9e>
 214:	9c 01       	movw	r18, r24
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	82 2b       	or	r24, r18
 21c:	93 2b       	or	r25, r19
 21e:	9c 83       	std	Y+4, r25	; 0x04
 220:	8b 83       	std	Y+3, r24	; 0x03
		}
		SW_SPI_SCK_Strope();
 222:	0e 94 8c 00 	call	0x118	; 0x118 <SW_SPI_SCK_Strope>
	}
	
	SPI_PORT &= ~(0x01 << SPI_MOSI);
	SW_SPI_SCK_Strope();
		
	for (char i = 0; i <= 11; i++)
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	8c 30       	cpi	r24, 0x0C	; 12
 230:	f0 f2       	brcs	.-68     	; 0x1ee <SW_SPI_ReadMAX186+0x80>
		{
			iInputData |= (0x800 >> i);
		}
		SW_SPI_SCK_Strope();
	}
	SW_SPI_SCK_Strope();
 232:	0e 94 8c 00 	call	0x118	; 0x118 <SW_SPI_SCK_Strope>
	SW_SPI_SCK_Strope();
 236:	0e 94 8c 00 	call	0x118	; 0x118 <SW_SPI_SCK_Strope>
	
	return iInputData;
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>

   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  74               	.global	can_set_baudrate
  76               	can_set_baudrate:
  78               	.Ltext1:
   1:can_at90can128.c **** /* <Type Definitions> */
   2:can_at90can128.c **** enum mob_mode {DISABLED, TRANSMIT_DATA, TRANSMIT_REMOTE, RECEIVE_DATA, AUTO_REPLY};	// Message obje
   3:can_at90can128.c **** enum int_mode {NONE, TX, RX, TXRX};	// Interrupt mode
   4:can_at90can128.c **** // Message object structure
   5:can_at90can128.c **** typedef struct
   6:can_at90can128.c **** {	
   7:can_at90can128.c **** 	uint32_t	id;			// Identifier (29 Bits)
   8:can_at90can128.c **** 	uint32_t	idm;		// ID-Mask
   9:can_at90can128.c **** 	uint8_t		length;		// Length of dataframe 
  10:can_at90can128.c **** 	uint8_t		data[8];	// Dataframe
  11:can_at90can128.c **** }
  12:can_at90can128.c **** can_message;
  13:can_at90can128.c **** /* </Type Definitions> */
  14:can_at90can128.c **** 
  15:can_at90can128.c **** /* <Defines> */
  16:can_at90can128.c **** #define MOBS_NUM 15		// Number of available MOBs
  17:can_at90can128.c **** #define NOMOB   0xff	// Definition of prohibited MOB
  18:can_at90can128.c **** /* </Defines> */
  19:can_at90can128.c **** 
  20:can_at90can128.c **** /* <Macros> */
  21:can_at90can128.c **** #define setbit(ADR,BIT)		(ADR|=(1<<BIT))		// Macro to set a bit
  22:can_at90can128.c **** #define clearbit(ADR,BIT)	(ADR&=~(1<<BIT))	// Macro to clear a bit
  23:can_at90can128.c **** #define getbit(ADR, BIT)	(ADR & (1<<BIT))	// Macro to get status of a bit
  24:can_at90can128.c **** /* </Macros> */
  25:can_at90can128.c **** 
  26:can_at90can128.c **** /* <Function declarations> */
  27:can_at90can128.c **** /* Return void */
  28:can_at90can128.c **** void can_set_baudrate(uint16_t baud);
  29:can_at90can128.c **** void can_set_interrupt(uint8_t mode);
  30:can_at90can128.c **** void can_select_mob(uint8_t mob);
  31:can_at90can128.c **** void can_set_mob_id_mask(uint32_t idm);
  32:can_at90can128.c **** void can_set_mob_id(uint32_t id);
  33:can_at90can128.c **** void can_set_mob_mode(uint8_t mode);
  34:can_at90can128.c **** void can_set_mob_data(uint8_t *data, uint8_t length);
  35:can_at90can128.c **** void can_set_mob_interrupt(uint8_t object);
  36:can_at90can128.c **** void can_clear_mob_interrupt(uint8_t object);
  37:can_at90can128.c **** void can_init(uint16_t baud, uint8_t intmode);
  38:can_at90can128.c **** void can_enable_mob(uint8_t object, uint8_t mode, can_message msg);
  39:can_at90can128.c **** void can_disable_mob(uint8_t object);
  40:can_at90can128.c **** void can_send_data(uint8_t mob, uint8_t *data, uint8_t length);
  41:can_at90can128.c **** /* Return int */
  42:can_at90can128.c **** uint32_t can_get_mob_id(void);
  43:can_at90can128.c **** uint8_t can_get_mob_mode(void);
  44:can_at90can128.c **** uint8_t can_get_mob_interrupt(void);
  45:can_at90can128.c **** /* Return can_message */
  46:can_at90can128.c **** can_message can_get_mob_data(void);
  47:can_at90can128.c **** /* </Function declarations> */
  48:can_at90can128.c **** 
  49:can_at90can128.c **** /* Set baudrate (1000, 500, 250, 200, 125, 100kbits/s) for cpu clock (16, 12, 8, 6, 4MHz) */
  50:can_at90can128.c **** void can_set_baudrate(uint16_t baud)
  51:can_at90can128.c **** {
  79               	.
  80               		in r28,__SP_L__
  81               		in r29,__SP_H__
  82 0000 DF93      	/* prologue: function */
  83 0002 CF93      	/* frame size = 4 */
  84 0004 00D0      		std Y+2,r25
  85 0006 00D0      		std Y+1,r24
  87 000a DEB7      	.LM1:
  88               		ldd r24,Y+1
  89               		ldd r25,Y+2
  90 000c 9A83      		std Y+4,r25
  91 000e 8983      		std Y+3,r24
  52:can_at90can128.c **** #if F_CPU	== 16000000
  53:can_at90can128.c **** 	switch(baud)
  92               		ldd r25,Y+4
  93               		cpi r24,200
  94 0010 8981      		cpc r25,__zero_reg__
  95 0012 9A81      		brne .+2
  96 0014 9C83      		rjmp .L5
  97 0016 8B83      		ldd r24,Y+3
  98 0018 8B81      		ldd r25,Y+4
  99 001a 9C81      		cpi r24,201
 100 001c 883C      		cpc r25,__zero_reg__
 101 001e 9105      		brsh .L9
 102 0020 01F4      		ldd r24,Y+3
 103 0022 00C0      		ldd r25,Y+4
 104 0024 8B81      		cpi r24,100
 105 0026 9C81      		cpc r25,__zero_reg__
 106 0028 893C      		brne .+2
 107 002a 9105      		rjmp .L3
 108 002c 00F4      		ldd r24,Y+3
 109 002e 8B81      		ldd r25,Y+4
 110 0030 9C81      		cpi r24,125
 111 0032 8436      		cpc r25,__zero_reg__
 112 0034 9105      		brne .+2
 113 0036 01F4      		rjmp .L4
 114 0038 00C0      		rjmp .L10
 115 003a 8B81      	.L9:
 116 003c 9C81      		ldd r24,Y+3
 117 003e 8D37      		ldd r25,Y+4
 118 0040 9105      		ldi r18,hi8(500)
 119 0042 01F4      		cpi r24,lo8(500)
 120 0044 00C0      		cpc r25,r18
 121 0046 00C0      		breq .L7
 122               		ldd r24,Y+3
 123 0048 8B81      		ldd r25,Y+4
 124 004a 9C81      		ldi r18,hi8(1000)
 125 004c 21E0      		cpi r24,lo8(1000)
 126 004e 843F      		cpc r25,r18
 127 0050 9207      		breq .L8
 128 0052 01F0      		ldd r24,Y+3
 129 0054 8B81      		ldd r25,Y+4
 130 0056 9C81      		cpi r24,250
 131 0058 23E0      		cpc r25,__zero_reg__
 132 005a 883E      		breq .L6
 133 005c 9207      		rjmp .L10
 134 005e 01F0      	.L8:
 136 0062 9C81      	.LM2:
 137 0064 8A3F      		ldi r30,lo8(226)
 138 0066 9105      		ldi r31,hi8(226)
 139 0068 01F0      		st Z,__zero_reg__
 141               	.LM3:
  54:can_at90can128.c **** 	{
  55:can_at90can128.c **** 		case 1000:
  56:can_at90can128.c **** 			CANBT1		= 0x00;
 142               	2)
 143               		st Z,r24
 145 006e F0E0      	.LM4:
 146 0070 1082      		ldi r30,lo8(228)
  57:can_at90can128.c **** 			CANBT2		= 0x0c;
 147               	r31,hi8(228)
 148               		ldi r24,lo8(55)
 149 0072 E3EE      		st Z,r24
 150 0074 F0E0      		rjmp .L10
 151 0076 8CE0      	.L7:
  58:can_at90can128.c **** 			CANBT3		= 0x37;
 153               		ldi r30,lo8(226)
 154               		ldi r31,hi8(226)
 155 007a E4EE      		ldi r24,lo8(2)
 156 007c F0E0      		st Z,r24
 158 0080 8083      	.LM6:
 159 0082 00C0      		ldi r30,lo8(227)
 160               		ldi r31,hi8(227)
  59:can_at90can128.c **** 			break;
  60:can_at90can128.c **** 		case 500:
  61:can_at90can128.c **** 			CANBT1		= 0x02;
 161               	,lo8(12)
 162               		st Z,r24
 164 0086 F0E0      	.LM7:
 165 0088 82E0      		ldi r30,lo8(228)
 166 008a 8083      		ldi r31,hi8(228)
  62:can_at90can128.c **** 			CANBT2		= 0x0c;
 167               	24,lo8(55)
 168               		st Z,r24
 169 008c E3EE      		rjmp .L10
 170 008e F0E0      	.L6:
 172 0092 8083      	.LM8:
  63:can_at90can128.c **** 			CANBT3		= 0x37;
 173               	30,lo8(226)
 174               		ldi r31,hi8(226)
 175 0094 E4EE      		ldi r24,lo8(6)
 176 0096 F0E0      		st Z,r24
 178 009a 8083      	.LM9:
 179 009c 00C0      		ldi r30,lo8(227)
 180               		ldi r31,hi8(227)
  64:can_at90can128.c **** 			break;
  65:can_at90can128.c **** 		case 250:
  66:can_at90can128.c **** 			CANBT1		= 0x06;
 181               	,lo8(12)
 182               		st Z,r24
 184 00a0 F0E0      	.LM10:
 185 00a2 86E0      		ldi r30,lo8(228)
 186 00a4 8083      		ldi r31,hi8(228)
  67:can_at90can128.c **** 			CANBT2		= 0x0c;
 187               	24,lo8(55)
 188               		st Z,r24
 189 00a6 E3EE      		rjmp .L10
 190 00a8 F0E0      	.L5:
 192 00ac 8083      	.LM11:
  68:can_at90can128.c **** 			CANBT3		= 0x37;
 193               	30,lo8(226)
 194               		ldi r31,hi8(226)
 195 00ae E4EE      		ldi r24,lo8(8)
 196 00b0 F0E0      		st Z,r24
 198 00b4 8083      	.LM12:
 199 00b6 00C0      		ldi r30,lo8(227)
 200               		ldi r31,hi8(227)
  69:can_at90can128.c **** 			break;
  70:can_at90can128.c **** 		case 200:
  71:can_at90can128.c **** 			CANBT1		= 0x08;
 201               	,lo8(12)
 202               		st Z,r24
 204 00ba F0E0      	.LM13:
 205 00bc 88E0      		ldi r30,lo8(228)
 206 00be 8083      		ldi r31,hi8(228)
  72:can_at90can128.c **** 			CANBT2		= 0x0c;
 207               	24,lo8(55)
 208               		st Z,r24
 209 00c0 E3EE      		rjmp .L10
 210 00c2 F0E0      	.L4:
 212 00c6 8083      	.LM14:
  73:can_at90can128.c **** 			CANBT3		= 0x37;
 213               	30,lo8(226)
 214               		ldi r31,hi8(226)
 215 00c8 E4EE      		ldi r24,lo8(14)
 216 00ca F0E0      		st Z,r24
 218 00ce 8083      	.LM15:
 219 00d0 00C0      		ldi r30,lo8(227)
 220               		ldi r31,hi8(227)
  74:can_at90can128.c **** 			break;
  75:can_at90can128.c **** 		case 125:
  76:can_at90can128.c **** 			CANBT1		= 0x0e;
 221               	,lo8(12)
 222               		st Z,r24
 224 00d4 F0E0      	.LM16:
 225 00d6 8EE0      		ldi r30,lo8(228)
 226 00d8 8083      		ldi r31,hi8(228)
  77:can_at90can128.c **** 			CANBT2		= 0x0c;
 227               	24,lo8(55)
 228               		st Z,r24
 229 00da E3EE      		rjmp .L10
 230 00dc F0E0      	.L3:
 232 00e0 8083      	.LM17:
  78:can_at90can128.c **** 			CANBT3		= 0x37;
 233               	30,lo8(226)
 234               		ldi r31,hi8(226)
 235 00e2 E4EE      		ldi r24,lo8(18)
 236 00e4 F0E0      		st Z,r24
 238 00e8 8083      	.LM18:
 239 00ea 00C0      		ldi r30,lo8(227)
 240               		ldi r31,hi8(227)
  79:can_at90can128.c **** 			break;
  80:can_at90can128.c **** 		case 100:
  81:can_at90can128.c **** 			CANBT1		= 0x12;
 241               	,lo8(12)
 242               		st Z,r24
 244 00ee F0E0      	.LM19:
 245 00f0 82E1      		ldi r30,lo8(228)
 246 00f2 8083      		ldi r31,hi8(228)
  82:can_at90can128.c **** 			CANBT2		= 0x0c;
 247               	24,lo8(55)
 248               		st Z,r24
 249 00f4 E3EE      	.L10:
 250 00f6 F0E0      	/* epilogue start */
 252 00fa 8083      	.LM20:
  83:can_at90can128.c **** 			CANBT3		= 0x37;
 253               	_tmp_reg__
 254               		pop __tmp_reg__
 255 00fc E4EE      		pop __tmp_reg__
 256 00fe F0E0      		pop __tmp_reg__
 257 0100 87E3      		pop r28
 258 0102 8083      		pop r29
 259               		ret
  84:can_at90can128.c **** 			break;
  85:can_at90can128.c **** 		default:
  86:can_at90can128.c **** 			break;
  87:can_at90can128.c **** 	}
  88:can_at90can128.c **** #elif F_CPU	== 12000000
  89:can_at90can128.c **** 	switch(baud)
  90:can_at90can128.c **** 	{
  91:can_at90can128.c **** 		case 1000:
  92:can_at90can128.c **** 			CANBT1		= 0x00;
  93:can_at90can128.c **** 			CANBT2		= 0x08;
  94:can_at90can128.c **** 			CANBT3		= 0x25;
  95:can_at90can128.c **** 			break;
  96:can_at90can128.c **** 		case 500:
  97:can_at90can128.c **** 			CANBT1		= 0x02;
  98:can_at90can128.c **** 			CANBT2		= 0x08;
  99:can_at90can128.c **** 			CANBT3		= 0x25;
 100:can_at90can128.c **** 			break;
 101:can_at90can128.c **** 		case 250:
 102:can_at90can128.c **** 			CANBT1		= 0x04;
 103:can_at90can128.c **** 			CANBT2		= 0x0c;
 104:can_at90can128.c **** 			CANBT3		= 0x37;
 105:can_at90can128.c **** 			break;
 106:can_at90can128.c **** 		case 200:
 107:can_at90can128.c **** 			CANBT1		= 0x04;
 108:can_at90can128.c **** 			CANBT2		= 0x0e;
 109:can_at90can128.c **** 			CANBT3		= 0x4b;
 110:can_at90can128.c **** 			break;
 111:can_at90can128.c **** 		case 125:
 112:can_at90can128.c **** 			CANBT1		= 0x0a;
 113:can_at90can128.c **** 			CANBT2		= 0x0c;
 114:can_at90can128.c **** 			CANBT3		= 0x37;
 115:can_at90can128.c **** 			break;
 116:can_at90can128.c **** 		case 100:
 117:can_at90can128.c **** 			CANBT1		= 0x0a;
 118:can_at90can128.c **** 			CANBT2		= 0x0e;
 119:can_at90can128.c **** 			CANBT3		= 0x4b;
 120:can_at90can128.c **** 			break;
 121:can_at90can128.c **** 		default:
 122:can_at90can128.c **** 			break;
 123:can_at90can128.c **** 	}
 124:can_at90can128.c **** #elif F_CPU	==  8000000
 125:can_at90can128.c **** 	switch(baud)
 126:can_at90can128.c **** 	{
 127:can_at90can128.c **** 		case 1000:
 128:can_at90can128.c **** 			CANBT1		= 0x00;
 129:can_at90can128.c **** 			CANBT2		= 0x04;
 130:can_at90can128.c **** 			CANBT3		= 0x13;
 131:can_at90can128.c **** 			break;
 132:can_at90can128.c **** 		case 500:
 133:can_at90can128.c **** 			CANBT1		= 0x00;
 134:can_at90can128.c **** 			CANBT2		= 0x0c;
 135:can_at90can128.c **** 			CANBT3		= 0x37;
 136:can_at90can128.c **** 			break;
 137:can_at90can128.c **** 		case 250:
 138:can_at90can128.c **** 			CANBT1		= 0x02;
 139:can_at90can128.c **** 			CANBT2		= 0x0c;
 140:can_at90can128.c **** 			CANBT3		= 0x37;
 141:can_at90can128.c **** 			break;
 142:can_at90can128.c **** 		case 200:
 143:can_at90can128.c **** 			CANBT1		= 0x02;
 144:can_at90can128.c **** 			CANBT2		= 0x0e;
 145:can_at90can128.c **** 			CANBT3		= 0x4b;
 146:can_at90can128.c **** 			break;
 147:can_at90can128.c **** 		case 125:
 148:can_at90can128.c **** 			CANBT1		= 0x06;
 149:can_at90can128.c **** 			CANBT2		= 0x0c;
 150:can_at90can128.c **** 			CANBT3		= 0x37;
 151:can_at90can128.c **** 			break;
 152:can_at90can128.c **** 		case 100:
 153:can_at90can128.c **** 			CANBT1		= 0x08;
 154:can_at90can128.c **** 			CANBT2		= 0x0c;
 155:can_at90can128.c **** 			CANBT3		= 0x37;
 156:can_at90can128.c **** 			break;
 157:can_at90can128.c **** 		default:
 158:can_at90can128.c **** 			break;
 159:can_at90can128.c **** 	}
 160:can_at90can128.c **** #elif F_CPU	==  6000000
 161:can_at90can128.c **** 	switch(baud)
 162:can_at90can128.c **** 	{
 163:can_at90can128.c **** 		case 1000:
 164:can_at90can128.c **** 			break;
 165:can_at90can128.c **** 		case 500:
 166:can_at90can128.c **** 			CANBT1		= 0x00;
 167:can_at90can128.c **** 			CANBT2		= 0x08;
 168:can_at90can128.c **** 			CANBT3		= 0x25;
 169:can_at90can128.c **** 			break;
 170:can_at90can128.c **** 		case 250:
 171:can_at90can128.c **** 			CANBT1		= 0x02;
 172:can_at90can128.c **** 			CANBT2		= 0x08;
 173:can_at90can128.c **** 			CANBT3		= 0x25;
 174:can_at90can128.c **** 			break;
 175:can_at90can128.c **** 		case 200:
 176:can_at90can128.c **** 			CANBT1		= 0x02;
 177:can_at90can128.c **** 			CANBT2		= 0x0c;
 178:can_at90can128.c **** 			CANBT3		= 0x35;
 179:can_at90can128.c **** 			break;
 180:can_at90can128.c **** 		case 125:
 181:can_at90can128.c **** 			CANBT1		= 0x04;
 182:can_at90can128.c **** 			CANBT2		= 0x0c;
 183:can_at90can128.c **** 			CANBT3		= 0x37;
 184:can_at90can128.c **** 			break;
 185:can_at90can128.c **** 		case 100:
 186:can_at90can128.c **** 			CANBT1		= 0x04;
 187:can_at90can128.c **** 			CANBT2		= 0x0e;
 188:can_at90can128.c **** 			CANBT3		= 0x4b;
 189:can_at90can128.c **** 			break;
 190:can_at90can128.c **** 		default:
 191:can_at90can128.c **** 			break;
 192:can_at90can128.c **** 	}
 193:can_at90can128.c **** #elif F_CPU	==  4000000
 194:can_at90can128.c **** 	switch(baud)
 195:can_at90can128.c **** 	{
 196:can_at90can128.c **** 		case 1000:
 197:can_at90can128.c **** 			break;
 198:can_at90can128.c **** 		case 500:
 199:can_at90can128.c **** 			CANBT1		= 0x00;
 200:can_at90can128.c **** 			CANBT2		= 0x04;
 201:can_at90can128.c **** 			CANBT3		= 0x13;
 202:can_at90can128.c **** 			break;
 203:can_at90can128.c **** 		case 250:
 204:can_at90can128.c **** 			CANBT1		= 0x02;
 205:can_at90can128.c **** 			CANBT2		= 0x04;
 206:can_at90can128.c **** 			CANBT3		= 0x13;
 207:can_at90can128.c **** 			break;
 208:can_at90can128.c **** 		case 200:
 209:can_at90can128.c **** 			CANBT1		= 0x00;
 210:can_at90can128.c **** 			CANBT2		= 0x0e;
 211:can_at90can128.c **** 			CANBT3		= 0x4b;
 212:can_at90can128.c **** 			break;
 213:can_at90can128.c **** 		case 125:
 214:can_at90can128.c **** 			CANBT1		= 0x02;
 215:can_at90can128.c **** 			CANBT2		= 0x0c;
 216:can_at90can128.c **** 			CANBT3		= 0x37;
 217:can_at90can128.c **** 			break;
 218:can_at90can128.c **** 		case 100:
 219:can_at90can128.c **** 			CANBT1		= 0x02;
 220:can_at90can128.c **** 			CANBT2		= 0x0e;
 221:can_at90can128.c **** 			CANBT3		= 0x4b;
 222:can_at90can128.c **** 			break;
 223:can_at90can128.c **** 		default:
 224:can_at90can128.c **** 			break;
 225:can_at90can128.c **** 	}
 226:can_at90can128.c **** #endif
 227:can_at90can128.c **** }
 261               	:
 264 0106 0F90      	.global	can_set_interrupt
 266 010a 0F90      	can_set_interrupt:
 268 010e DF91      	.LM21:
 269 0110 0895      	.LFBB2:
 270               		push r29
 271               		push r28
 272               		rcall .
 273               		push __tmp_reg__
 274               		in r28,__SP_L__
 275               		in r29,__SP_H__
 276               	/* prologue: function */
 228:can_at90can128.c **** /* Set interrupt mode */
 229:can_at90can128.c **** void can_set_interrupt(uint8_t mode)
 230:can_at90can128.c **** {
 277               	3 */
 278               		std Y+1,r24
 280 0112 DF93      	.LM22:
 281 0114 CF93      		ldd r24,Y+1
 282 0116 00D0      		mov r18,r24
 283 0118 0F92      		ldi r19,lo8(0)
 284 011a CDB7      		std Y+3,r19
 285 011c DEB7      		std Y+2,r18
 286               		ldd r24,Y+2
 287               		ldd r25,Y+3
 288 011e 8983      		cpi r24,1
 231:can_at90can128.c **** 	switch(mode)
 289               	ero_reg__
 290               		breq .L14
 291 0120 8981      		ldd r18,Y+2
 292 0122 282F      		ldd r19,Y+3
 293 0124 30E0      		cpi r18,2
 294 0126 3B83      		cpc r19,__zero_reg__
 295 0128 2A83      		brge .L17
 296 012a 8A81      		ldd r24,Y+2
 297 012c 9B81      		ldd r25,Y+3
 298 012e 8130      		sbiw r24,0
 299 0130 9105      		breq .L13
 300 0132 01F0      		rjmp .L18
 301 0134 2A81      	.L17:
 302 0136 3B81      		ldd r18,Y+2
 303 0138 2230      		ldd r19,Y+3
 304 013a 3105      		cpi r18,2
 305 013c 04F4      		cpc r19,__zero_reg__
 306 013e 8A81      		breq .L15
 307 0140 9B81      		ldd r24,Y+2
 308 0142 0097      		ldd r25,Y+3
 309 0144 01F0      		cpi r24,3
 310 0146 00C0      		cpc r25,__zero_reg__
 311               		brne .+2
 312 0148 2A81      		rjmp .L16
 313 014a 3B81      		rjmp .L18
 314 014c 2230      	.L13:
 316 0150 01F0      	.LM23:
 317 0152 8A81      		ldi r26,lo8(219)
 318 0154 9B81      		ldi r27,hi8(219)
 319 0156 8330      		ldi r30,lo8(219)
 320 0158 9105      		ldi r31,hi8(219)
 321 015a 01F4      		ld r24,Z
 322 015c 00C0      		andi r24,lo8(127)
 323 015e 00C0      		st X,r24
 232:can_at90can128.c **** 	{
 233:can_at90can128.c **** 		case NONE:
 234:can_at90can128.c **** 			clearbit(CANGIE, ENIT);
 325               	8(219)
 326               		ldi r30,lo8(219)
 327 0160 ABED      		ldi r31,hi8(219)
 328 0162 B0E0      		ld r24,Z
 329 0164 EBED      		andi r24,lo8(-33)
 330 0166 F0E0      		st X,r24
 332 016a 8F77      	.LM25:
 333 016c 8C93      		ldi r26,lo8(219)
 235:can_at90can128.c **** 		  	clearbit(CANGIE, ENRX);
 334               	hi8(219)
 335               		ldi r30,lo8(219)
 336 016e ABED      		ldi r31,hi8(219)
 337 0170 B0E0      		ld r24,Z
 338 0172 EBED      		andi r24,lo8(-17)
 339 0174 F0E0      		st X,r24
 340 0176 8081      		rjmp .L18
 341 0178 8F7D      	.L14:
 236:can_at90can128.c **** 			clearbit(CANGIE, ENTX);
 343               	di r26,lo8(219)
 344               		ldi r27,hi8(219)
 345 017c ABED      		ldi r30,lo8(219)
 346 017e B0E0      		ldi r31,hi8(219)
 347 0180 EBED      		ld r24,Z
 348 0182 F0E0      		ori r24,lo8(-128)
 349 0184 8081      		st X,r24
 351 0188 8C93      	.LM27:
 352 018a 00C0      		ldi r26,lo8(219)
 353               		ldi r27,hi8(219)
 237:can_at90can128.c **** 			break;
 238:can_at90can128.c **** 		case TX:
 239:can_at90can128.c **** 			setbit(CANGIE, ENIT);
 354               	8(219)
 355               		ldi r31,hi8(219)
 356 018c ABED      		ld r24,Z
 357 018e B0E0      		andi r24,lo8(-33)
 358 0190 EBED      		st X,r24
 360 0194 8081      	.LM28:
 361 0196 8068      		ldi r26,lo8(219)
 362 0198 8C93      		ldi r27,hi8(219)
 240:can_at90can128.c **** 		  	clearbit(CANGIE, ENRX);
 363               	lo8(219)
 364               		ldi r31,hi8(219)
 365 019a ABED      		ld r24,Z
 366 019c B0E0      		ori r24,lo8(16)
 367 019e EBED      		st X,r24
 368 01a0 F0E0      		rjmp .L18
 369 01a2 8081      	.L15:
 371 01a6 8C93      	.LM29:
 241:can_at90can128.c **** 			setbit(CANGIE, ENTX);
 372               	lo8(219)
 373               		ldi r27,hi8(219)
 374 01a8 ABED      		ldi r30,lo8(219)
 375 01aa B0E0      		ldi r31,hi8(219)
 376 01ac EBED      		ld r24,Z
 377 01ae F0E0      		ori r24,lo8(-128)
 378 01b0 8081      		st X,r24
 380 01b4 8C93      	.LM30:
 381 01b6 00C0      		ldi r26,lo8(219)
 382               		ldi r27,hi8(219)
 242:can_at90can128.c **** 			break;
 243:can_at90can128.c **** 		case RX:
 244:can_at90can128.c **** 			setbit(CANGIE, ENIT);
 383               	8(219)
 384               		ldi r31,hi8(219)
 385 01b8 ABED      		ld r24,Z
 386 01ba B0E0      		ori r24,lo8(32)
 387 01bc EBED      		st X,r24
 389 01c0 8081      	.LM31:
 390 01c2 8068      		ldi r26,lo8(219)
 391 01c4 8C93      		ldi r27,hi8(219)
 245:can_at90can128.c **** 		  	setbit(CANGIE, ENRX);
 392               	lo8(219)
 393               		ldi r31,hi8(219)
 394 01c6 ABED      		ld r24,Z
 395 01c8 B0E0      		andi r24,lo8(-17)
 396 01ca EBED      		st X,r24
 397 01cc F0E0      		rjmp .L18
 398 01ce 8081      	.L16:
 400 01d2 8C93      	.LM32:
 246:can_at90can128.c **** 			clearbit(CANGIE, ENTX);
 401               	lo8(219)
 402               		ldi r27,hi8(219)
 403 01d4 ABED      		ldi r30,lo8(219)
 404 01d6 B0E0      		ldi r31,hi8(219)
 405 01d8 EBED      		ld r24,Z
 406 01da F0E0      		ori r24,lo8(-128)
 407 01dc 8081      		st X,r24
 409 01e0 8C93      	.LM33:
 410 01e2 00C0      		ldi r26,lo8(219)
 411               		ldi r27,hi8(219)
 247:can_at90can128.c **** 			break;
 248:can_at90can128.c **** 		case TXRX:
 249:can_at90can128.c **** 			setbit(CANGIE, ENIT);
 412               	8(219)
 413               		ldi r31,hi8(219)
 414 01e4 ABED      		ld r24,Z
 415 01e6 B0E0      		ori r24,lo8(32)
 416 01e8 EBED      		st X,r24
 418 01ec 8081      	.LM34:
 419 01ee 8068      		ldi r26,lo8(219)
 420 01f0 8C93      		ldi r27,hi8(219)
 250:can_at90can128.c **** 		  	setbit(CANGIE, ENRX);
 421               	lo8(219)
 422               		ldi r31,hi8(219)
 423 01f2 ABED      		ld r24,Z
 424 01f4 B0E0      		ori r24,lo8(16)
 425 01f6 EBED      		st X,r24
 426 01f8 F0E0      	.L18:
 427 01fa 8081      	/* epilogue start */
 429 01fe 8C93      	.LM35:
 251:can_at90can128.c **** 			setbit(CANGIE, ENTX);
 430               	p_reg__
 431               		pop __tmp_reg__
 432 0200 ABED      		pop __tmp_reg__
 433 0202 B0E0      		pop r28
 434 0204 EBED      		pop r29
 435 0206 F0E0      		ret
 437 020a 8061      	.Lscope2:
 440               	.global	can_select_mob
 252:can_at90can128.c **** 			break;
 253:can_at90can128.c **** 		default:
 254:can_at90can128.c **** 			break;
 255:can_at90can128.c **** 	}
 256:can_at90can128.c **** }
 441               	select_mob, @function
 442               	can_select_mob:
 444 0210 0F90      	.LM36:
 445 0212 0F90      	.LFBB3:
 446 0214 CF91      		push r29
 447 0216 DF91      		push r28
 448 0218 0895      		push __tmp_reg__
 449               		in r28,__SP_L__
 450               		in r29,__SP_H__
 451               	/* prologue: function */
 452               	/* frame size = 1 */
 453               		std Y+1,r24
 455               	.LM37:
 257:can_at90can128.c **** /* Select MOB */
 258:can_at90can128.c **** void can_select_mob(uint8_t mob)
 259:can_at90can128.c **** {
 456               	7)
 457               		ldi r31,hi8(237)
 458               		ldd r24,Y+1
 459 021a DF93      		swap r24
 460 021c CF93      		andi r24,lo8(-16)
 461 021e 0F92      		st Z,r24
 462 0220 CDB7      	/* epilogue start */
 464               	.LM38:
 465               		pop __tmp_reg__
 466 0224 8983      		pop r28
 260:can_at90can128.c **** 	CANPAGE	= (mob << 4);
 467               	et
 469 0226 EDEE      	.Lscope3:
 472 022c 8295      	.global	can_set_id_mask
 474 0230 8083      	can_set_id_mask:
 261:can_at90can128.c **** }
 476               	FBB4:
 477               		push r29
 478 0232 0F90      		push r28
 479 0234 CF91      		rcall .
 480 0236 DF91      		rcall .
 481 0238 0895      		in r28,__SP_L__
 482               		in r29,__SP_H__
 483               	/* prologue: function */
 484               	/* frame size = 4 */
 485               		std Y+1,r22
 486               		std Y+2,r23
 487               		std Y+3,r24
 488               		std Y+4,r25
 262:can_at90can128.c **** /* Set ID mask for selected MOB */
 263:can_at90can128.c **** void can_set_id_mask(uint32_t idm)
 264:can_at90can128.c **** {
 489               	265,.LM40-.LFBB4
 490               	.LM40:
 491               		ldd r24,Y+1
 492 023a DF93      		ldd r25,Y+2
 493 023c CF93      		ldd r26,Y+3
 494 023e 00D0      		ldd r27,Y+4
 495 0240 00D0      		add r24,r24
 496 0242 CDB7      		adc r25,r25
 497 0244 DEB7      		adc r26,r26
 498               		adc r27,r27
 499               		add r24,r24
 500 0246 6983      		adc r25,r25
 501 0248 7A83      		adc r26,r26
 502 024a 8B83      		adc r27,r27
 503 024c 9C83      		add r24,r24
 265:can_at90can128.c **** 	idm	<<= 3;
 504               	dc r26,r26
 505               		adc r27,r27
 506 024e 8981      		std Y+1,r24
 507 0250 9A81      		std Y+2,r25
 508 0252 AB81      		std Y+3,r26
 509 0254 BC81      		std Y+4,r27
 511 0258 991F      	.LM41:
 512 025a AA1F      		ldi r30,lo8(244)
 513 025c BB1F      		ldi r31,hi8(244)
 514 025e 880F      		ldd r24,Y+1
 515 0260 991F      		st Z,r24
 517 0264 BB1F      	.LM42:
 518 0266 880F      		ldi r26,lo8(244)
 519 0268 991F      		ldi r27,hi8(244)
 520 026a AA1F      		ldi r30,lo8(244)
 521 026c BB1F      		ldi r31,hi8(244)
 522 026e 8983      		ld r24,Z
 523 0270 9A83      		ori r24,lo8(5)
 524 0272 AB83      		st X,r24
 266:can_at90can128.c **** 	CANIDM4 = ((unsigned char) (idm));
 526               	5)
 527               		ldi r31,hi8(245)
 528 0276 E4EF      		ldd r24,Y+1
 529 0278 F0E0      		ldd r25,Y+2
 530 027a 8981      		ldd r26,Y+3
 531 027c 8083      		ldd r27,Y+4
 267:can_at90can128.c **** 	CANIDM4 |= (0x01 << RTRMSK) | (0x01 << IDEMSK);
 532               	24,r25
 533               		mov r25,r26
 534 027e A4EF      		mov r26,r27
 535 0280 B0E0      		clr r27
 536 0282 E4EF      		st Z,r24
 538 0286 8081      	.LM44:
 539 0288 8560      		ldi r30,lo8(246)
 540 028a 8C93      		ldi r31,hi8(246)
 268:can_at90can128.c **** 	CANIDM3 = (unsigned char) (idm >> 8);
 541               	Y+1
 542               		ldd r25,Y+2
 543 028c E5EF      		ldd r26,Y+3
 544 028e F0E0      		ldd r27,Y+4
 545 0290 8981      		movw r24,r26
 546 0292 9A81      		clr r26
 547 0294 AB81      		clr r27
 548 0296 BC81      		st Z,r24
 550 029a 9A2F      	.LM45:
 551 029c AB2F      		ldi r30,lo8(247)
 552 029e BB27      		ldi r31,hi8(247)
 553 02a0 8083      		ldd r24,Y+1
 269:can_at90can128.c **** 	CANIDM2 = (unsigned char) (idm >> 16);
 554               		ldd r26,Y+3
 555               		ldd r27,Y+4
 556 02a2 E6EF      		mov r24,r27
 557 02a4 F0E0      		clr r25
 558 02a6 8981      		clr r26
 559 02a8 9A81      		clr r27
 560 02aa AB81      		st Z,r24
 561 02ac BC81      	/* epilogue start */
 563 02b0 AA27      	.LM46:
 564 02b2 BB27      		pop __tmp_reg__
 565 02b4 8083      		pop __tmp_reg__
 270:can_at90can128.c **** 	CANIDM1 = (unsigned char) (idm >> 24);
 566               	eg__
 567               		pop __tmp_reg__
 568 02b6 E7EF      		pop r28
 569 02b8 F0E0      		pop r29
 570 02ba 8981      		ret
 572 02be AB81      	.Lscope4:
 575 02c4 9927      	.global	can_set_id
 577 02c8 BB27      	can_set_id:
 579               	.LM47:
 271:can_at90can128.c **** }
 580               	r29
 581               		push r28
 582 02cc 0F90      		rcall .
 583 02ce 0F90      		rcall .
 584 02d0 0F90      		in r28,__SP_L__
 585 02d2 0F90      		in r29,__SP_H__
 586 02d4 CF91      	/* prologue: function */
 587 02d6 DF91      	/* frame size = 4 */
 588 02d8 0895      		std Y+1,r22
 589               		std Y+2,r23
 590               		std Y+3,r24
 591               		std Y+4,r25
 593               	.LM48:
 594               		ldd r24,Y+1
 595               		ldd r25,Y+2
 272:can_at90can128.c **** /* Set ID for selected MOB */
 273:can_at90can128.c **** void can_set_id(uint32_t id)
 274:can_at90can128.c **** {
 596               	d r27,Y+4
 597               		add r24,r24
 598               		adc r25,r25
 599 02da DF93      		adc r26,r26
 600 02dc CF93      		adc r27,r27
 601 02de 00D0      		add r24,r24
 602 02e0 00D0      		adc r25,r25
 603 02e2 CDB7      		adc r26,r26
 604 02e4 DEB7      		adc r27,r27
 605               		add r24,r24
 606               		adc r25,r25
 607 02e6 6983      		adc r26,r26
 608 02e8 7A83      		adc r27,r27
 609 02ea 8B83      		std Y+1,r24
 610 02ec 9C83      		std Y+2,r25
 275:can_at90can128.c **** 	id <<= 3;
 611               	td Y+4,r27
 613 02ee 8981      	.LM49:
 614 02f0 9A81      		ldi r30,lo8(240)
 615 02f2 AB81      		ldi r31,hi8(240)
 616 02f4 BC81      		ld r24,Z
 617 02f6 880F      		mov r24,r24
 618 02f8 991F      		ldi r25,lo8(0)
 619 02fa AA1F      		ldi r26,lo8(0)
 620 02fc BB1F      		ldi r27,hi8(0)
 621 02fe 880F      		movw r18,r24
 622 0300 991F      		movw r20,r26
 623 0302 AA1F      		andi r18,lo8(7)
 624 0304 BB1F      		andi r19,hi8(7)
 625 0306 880F      		andi r20,hlo8(7)
 626 0308 991F      		andi r21,hhi8(7)
 627 030a AA1F      		ldd r24,Y+1
 628 030c BB1F      		ldd r25,Y+2
 629 030e 8983      		ldd r26,Y+3
 630 0310 9A83      		ldd r27,Y+4
 631 0312 AB83      		or r24,r18
 632 0314 BC83      		or r25,r19
 276:can_at90can128.c **** 	id |= (CANIDT4 & 0x07);
 633               	1
 634               		std Y+1,r24
 635 0316 E0EF      		std Y+2,r25
 636 0318 F0E0      		std Y+3,r26
 637 031a 8081      		std Y+4,r27
 639 031e 90E0      	.LM50:
 640 0320 A0E0      		ldi r30,lo8(240)
 641 0322 B0E0      		ldi r31,hi8(240)
 642 0324 9C01      		ldd r24,Y+1
 643 0326 AD01      		st Z,r24
 645 032a 3070      	.LM51:
 646 032c 4070      		ldi r30,lo8(241)
 647 032e 5070      		ldi r31,hi8(241)
 648 0330 8981      		ldd r24,Y+1
 649 0332 9A81      		ldd r25,Y+2
 650 0334 AB81      		ldd r26,Y+3
 651 0336 BC81      		ldd r27,Y+4
 652 0338 822B      		mov r24,r25
 653 033a 932B      		mov r25,r26
 654 033c A42B      		mov r26,r27
 655 033e B52B      		clr r27
 656 0340 8983      		st Z,r24
 658 0344 AB83      	.LM52:
 659 0346 BC83      		ldi r30,lo8(242)
 277:can_at90can128.c **** 
 278:can_at90can128.c **** 	CANIDT4 = (unsigned char) (id);
 660               	Y+1
 661               		ldd r25,Y+2
 662 0348 E0EF      		ldd r26,Y+3
 663 034a F0E0      		ldd r27,Y+4
 664 034c 8981      		movw r24,r26
 665 034e 8083      		clr r26
 279:can_at90can128.c **** 	CANIDT3 = (unsigned char) (id >> 8);
 666               	27
 667               		st Z,r24
 669 0352 F0E0      	.LM53:
 670 0354 8981      		ldi r30,lo8(243)
 671 0356 9A81      		ldi r31,hi8(243)
 672 0358 AB81      		ldd r24,Y+1
 673 035a BC81      		ldd r25,Y+2
 674 035c 892F      		ldd r26,Y+3
 675 035e 9A2F      		ldd r27,Y+4
 676 0360 AB2F      		mov r24,r27
 677 0362 BB27      		clr r25
 678 0364 8083      		clr r26
 280:can_at90can128.c **** 	CANIDT2 = (unsigned char) (id >> 16);
 679               	Z,r24
 680               	/* epilogue start */
 682 0368 F0E0      	.LM54:
 683 036a 8981      		pop __tmp_reg__
 684 036c 9A81      		pop __tmp_reg__
 685 036e AB81      		pop __tmp_reg__
 686 0370 BC81      		pop __tmp_reg__
 687 0372 CD01      		pop r28
 688 0374 AA27      		pop r29
 689 0376 BB27      		ret
 281:can_at90can128.c **** 	CANIDT1 = (unsigned char) (id >> 24);
 691               	stabs	"can_get_mob_id:F(4,6)",36,0,0,can_get_mob_id
 692               	.global	can_get_mob_id
 694 037c F0E0      	can_get_mob_id:
 696 0380 9A81      	.LM55:
 697 0382 AB81      	.LFBB6:
 698 0384 BC81      		push r29
 699 0386 8B2F      		push r28
 700 0388 9927      		rcall .
 701 038a AA27      		rcall .
 702 038c BB27      		in r28,__SP_L__
 703 038e 8083      		in r29,__SP_H__
 704               	/* prologue: function */
 282:can_at90can128.c **** }
 705               	= 4 */
 707 0390 0F90      	.LM56:
 708 0392 0F90      		std Y+1,__zero_reg__
 709 0394 0F90      		std Y+2,__zero_reg__
 710 0396 0F90      		std Y+3,__zero_reg__
 711 0398 CF91      		std Y+4,__zero_reg__
 713 039c 0895      	.LM57:
 714               		ldi r30,lo8(243)
 715               		ldi r31,hi8(243)
 716               		ld r24,Z
 717               		mov r24,r24
 718               		ldi r25,lo8(0)
 719               		ldi r26,lo8(0)
 283:can_at90can128.c **** /* Get ID mask for selected MOB */
 284:can_at90can128.c **** uint32_t can_get_mob_id(void)
 285:can_at90can128.c **** {
 720               	
 721               		mov r21,r24
 722               		clr r20
 723 039e DF93      		clr r19
 724 03a0 CF93      		clr r18
 725 03a2 00D0      		ldd r24,Y+1
 726 03a4 00D0      		ldd r25,Y+2
 727 03a6 CDB7      		ldd r26,Y+3
 728 03a8 DEB7      		ldd r27,Y+4
 729               		or r24,r18
 730               		or r25,r19
 286:can_at90can128.c **** 	uint32_t id = 0;
 731               	0
 732               		or r27,r21
 733 03aa 1982      		std Y+1,r24
 734 03ac 1A82      		std Y+2,r25
 735 03ae 1B82      		std Y+3,r26
 736 03b0 1C82      		std Y+4,r27
 287:can_at90can128.c **** 
 288:can_at90can128.c **** 	id |= ((uint32_t) CANIDT1) << 24;
 737               	n	68,0,289,.LM58-.LFBB6
 738               	.LM58:
 739 03b2 E3EF      		ldi r30,lo8(242)
 740 03b4 F0E0      		ldi r31,hi8(242)
 741 03b6 8081      		ld r24,Z
 742 03b8 882F      		mov r24,r24
 743 03ba 90E0      		ldi r25,lo8(0)
 744 03bc A0E0      		ldi r26,lo8(0)
 745 03be B0E0      		ldi r27,hi8(0)
 746 03c0 582F      		movw r20,r24
 747 03c2 4427      		clr r19
 748 03c4 3327      		clr r18
 749 03c6 2227      		ldd r24,Y+1
 750 03c8 8981      		ldd r25,Y+2
 751 03ca 9A81      		ldd r26,Y+3
 752 03cc AB81      		ldd r27,Y+4
 753 03ce BC81      		or r24,r18
 754 03d0 822B      		or r25,r19
 755 03d2 932B      		or r26,r20
 756 03d4 A42B      		or r27,r21
 757 03d6 B52B      		std Y+1,r24
 758 03d8 8983      		std Y+2,r25
 759 03da 9A83      		std Y+3,r26
 760 03dc AB83      		std Y+4,r27
 289:can_at90can128.c **** 	id |= ((uint32_t) CANIDT2) << 16;
 762               		ldi r31,hi8(241)
 763               		ld r24,Z
 764 03e0 E2EF      		mov r24,r24
 765 03e2 F0E0      		ldi r25,lo8(0)
 766 03e4 8081      		ldi r26,lo8(0)
 767 03e6 882F      		ldi r27,hi8(0)
 768 03e8 90E0      		clr r18
 769 03ea A0E0      		mov r19,r24
 770 03ec B0E0      		mov r20,r25
 771 03ee AC01      		mov r21,r26
 772 03f0 3327      		ldd r24,Y+1
 773 03f2 2227      		ldd r25,Y+2
 774 03f4 8981      		ldd r26,Y+3
 775 03f6 9A81      		ldd r27,Y+4
 776 03f8 AB81      		or r24,r18
 777 03fa BC81      		or r25,r19
 778 03fc 822B      		or r26,r20
 779 03fe 932B      		or r27,r21
 780 0400 A42B      		std Y+1,r24
 781 0402 B52B      		std Y+2,r25
 782 0404 8983      		std Y+3,r26
 783 0406 9A83      		std Y+4,r27
 785 040a BC83      	.LM60:
 290:can_at90can128.c **** 	id |= ((uint32_t) CANIDT3) << 8;
 786               	31,hi8(240)
 787               		ld r24,Z
 788 040c E1EF      		mov r24,r24
 789 040e F0E0      		ldi r25,lo8(0)
 790 0410 8081      		ldi r26,lo8(0)
 791 0412 882F      		ldi r27,hi8(0)
 792 0414 90E0      		movw r18,r24
 793 0416 A0E0      		movw r20,r26
 794 0418 B0E0      		andi r18,lo8(248)
 795 041a 2227      		andi r19,hi8(248)
 796 041c 382F      		andi r20,hlo8(248)
 797 041e 492F      		andi r21,hhi8(248)
 798 0420 5A2F      		ldd r24,Y+1
 799 0422 8981      		ldd r25,Y+2
 800 0424 9A81      		ldd r26,Y+3
 801 0426 AB81      		ldd r27,Y+4
 802 0428 BC81      		or r24,r18
 803 042a 822B      		or r25,r19
 804 042c 932B      		or r26,r20
 805 042e A42B      		or r27,r21
 806 0430 B52B      		std Y+1,r24
 807 0432 8983      		std Y+2,r25
 808 0434 9A83      		std Y+3,r26
 809 0436 AB83      		std Y+4,r27
 291:can_at90can128.c **** 	id |= (CANIDT4 & 0xF8);	//last 3 bits are functional bits
 811               	r25,Y+2
 812               		ldd r26,Y+3
 813 043a E0EF      		ldd r27,Y+4
 814 043c F0E0      		set
 815 043e 8081      		bld __zero_reg__,3-1
 816 0440 882F      	1:	lsr r27
 817 0442 90E0      		ror r26
 818 0444 A0E0      		ror r25
 819 0446 B0E0      		ror r24
 820 0448 9C01      		lsr __zero_reg__
 821 044a AD01      		brne 1b
 822 044c 287F      		std Y+1,r24
 823 044e 3070      		std Y+2,r25
 824 0450 4070      		std Y+3,r26
 825 0452 5070      		std Y+4,r27
 827 0456 9A81      	.LM62:
 828 0458 AB81      		ldd r24,Y+1
 829 045a BC81      		ldd r25,Y+2
 830 045c 822B      		ldd r26,Y+3
 831 045e 932B      		ldd r27,Y+4
 833 0462 B52B      	.LM63:
 834 0464 8983      		movw r22,r24
 835 0466 9A83      		movw r24,r26
 836 0468 AB83      	/* epilogue start */
 837 046a BC83      		pop __tmp_reg__
 292:can_at90can128.c **** 	id >>= 3;
 838               	_reg__
 839               		pop __tmp_reg__
 840 046c 8981      		pop r28
 841 046e 9A81      		pop r29
 842 0470 AB81      		ret
 847 047a A795      	.Lscope6:
 850 0480 1694      	.global	can_set_mob_mode
 852 0484 8983      	can_set_mob_mode:
 854 0488 AB83      	.LM64:
 855 048a BC83      	.LFBB7:
 293:can_at90can128.c **** 
 294:can_at90can128.c **** 	return id;
 856               	8
 857               		rcall .
 858 048c 8981      		push __tmp_reg__
 859 048e 9A81      		in r28,__SP_L__
 860 0490 AB81      		in r29,__SP_H__
 861 0492 BC81      	/* prologue: function */
 295:can_at90can128.c **** }
 862               	me size = 3 */
 863               		std Y+1,r24
 865 0496 CD01      	.LM65:
 866               		ldi r26,lo8(239)
 867 0498 0F90      		ldi r27,hi8(239)
 868 049a 0F90      		ldi r30,lo8(239)
 869 049c 0F90      		ldi r31,hi8(239)
 870 049e 0F90      		ld r24,Z
 871 04a0 CF91      		ori r24,lo8(16)
 872 04a2 DF91      		st X,r24
 874               	.LM66:
 875               		ldd r24,Y+1
 876               		mov r18,r24
 877               		ldi r19,lo8(0)
 878               		std Y+3,r19
 879               		std Y+2,r18
 880               		ldd r24,Y+2
 881               		ldd r25,Y+3
 882               		cpi r24,2
 883               		cpc r25,__zero_reg__
 296:can_at90can128.c **** /* Set mode for selected MOB */
 297:can_at90can128.c **** void can_set_mob_mode(uint8_t mode)
 298:can_at90can128.c **** {
 884               	ldd r18,Y+2
 885               		ldd r19,Y+3
 886               		cpi r18,3
 887 04a6 DF93      		cpc r19,__zero_reg__
 888 04a8 CF93      		brge .L34
 889 04aa 00D0      		ldd r24,Y+2
 890 04ac 0F92      		ldd r25,Y+3
 891 04ae CDB7      		sbiw r24,0
 892 04b0 DEB7      		breq .L29
 893               		ldd r18,Y+2
 894               		ldd r19,Y+3
 895 04b2 8983      		cpi r18,1
 299:can_at90can128.c **** 	setbit(CANCDMOB, IDE);
 896               	ero_reg__
 897               		breq .L30
 898 04b4 AFEE      		rjmp .L35
 899 04b6 B0E0      	.L34:
 900 04b8 EFEE      		ldd r24,Y+2
 901 04ba F0E0      		ldd r25,Y+3
 902 04bc 8081      		cpi r24,3
 903 04be 8061      		cpc r25,__zero_reg__
 904 04c0 8C93      		brne .+2
 300:can_at90can128.c **** 
 301:can_at90can128.c **** 	switch(mode)
 905               	2
 906               		ldd r18,Y+2
 907 04c2 8981      		ldd r19,Y+3
 908 04c4 282F      		cpi r18,4
 909 04c6 30E0      		cpc r19,__zero_reg__
 910 04c8 3B83      		brne .+2
 911 04ca 2A83      		rjmp .L33
 912 04cc 8A81      		rjmp .L35
 913 04ce 9B81      	.L29:
 915 04d2 9105      	.LM67:
 916 04d4 01F4      		ldi r26,lo8(239)
 917 04d6 00C0      		ldi r27,hi8(239)
 918 04d8 2A81      		ldi r30,lo8(239)
 919 04da 3B81      		ldi r31,hi8(239)
 920 04dc 2330      		ld r24,Z
 921 04de 3105      		andi r24,lo8(-65)
 922 04e0 04F4      		st X,r24
 924 04e4 9B81      	.LM68:
 925 04e6 0097      		ldi r26,lo8(239)
 926 04e8 01F0      		ldi r27,hi8(239)
 927 04ea 2A81      		ldi r30,lo8(239)
 928 04ec 3B81      		ldi r31,hi8(239)
 929 04ee 2130      		ld r24,Z
 930 04f0 3105      		andi r24,lo8(127)
 931 04f2 01F0      		st X,r24
 933               	.LM69:
 934 04f6 8A81      		ldi r26,lo8(239)
 935 04f8 9B81      		ldi r27,hi8(239)
 936 04fa 8330      		ldi r30,lo8(239)
 937 04fc 9105      		ldi r31,hi8(239)
 938 04fe 01F4      		ld r24,Z
 939 0500 00C0      		andi r24,lo8(-33)
 940 0502 2A81      		st X,r24
 942 0506 2430      	.LM70:
 943 0508 3105      		ldi r26,lo8(240)
 944 050a 01F4      		ldi r27,hi8(240)
 945 050c 00C0      		ldi r30,lo8(240)
 946 050e 00C0      		ldi r31,hi8(240)
 947               		ld r24,Z
 302:can_at90can128.c **** 	{
 303:can_at90can128.c **** 		case DISABLED:
 304:can_at90can128.c **** 			clearbit(CANCDMOB, CONMOB0);
 948               	8,.LM71-.LFBB7
 949               	.LM71:
 950 0510 AFEE      		ldi r26,lo8(244)
 951 0512 B0E0      		ldi r27,hi8(244)
 952 0514 EFEE      		ldi r30,lo8(244)
 953 0516 F0E0      		ldi r31,hi8(244)
 954 0518 8081      		ld r24,Z
 955 051a 8F7B      		andi r24,lo8(-5)
 956 051c 8C93      		st X,r24
 305:can_at90can128.c **** 			clearbit(CANCDMOB, CONMOB1);
 957               	5
 958               	.L30:
 960 0520 B0E0      	.LM72:
 961 0522 EFEE      		ldi r26,lo8(239)
 962 0524 F0E0      		ldi r27,hi8(239)
 963 0526 8081      		ldi r30,lo8(239)
 964 0528 8F77      		ldi r31,hi8(239)
 965 052a 8C93      		ld r24,Z
 306:can_at90can128.c **** 			clearbit(CANCDMOB,RPLV);
 966               	lo8(64)
 967               		st X,r24
 969 052e B0E0      	.LM73:
 970 0530 EFEE      		ldi r26,lo8(239)
 971 0532 F0E0      		ldi r27,hi8(239)
 972 0534 8081      		ldi r30,lo8(239)
 973 0536 8F7D      		ldi r31,hi8(239)
 974 0538 8C93      		ld r24,Z
 307:can_at90can128.c **** 			clearbit(CANIDT4, RTRTAG);
 975               	,lo8(127)
 976               		st X,r24
 978 053c B0E0      	.LM74:
 979 053e E0EF      		ldi r26,lo8(239)
 980 0540 F0E0      		ldi r27,hi8(239)
 981 0542 8081      		ldi r30,lo8(239)
 982 0544 8B7F      		ldi r31,hi8(239)
 983 0546 8C93      		ld r24,Z
 308:can_at90can128.c **** 			clearbit(CANIDM4, RTRMSK);
 984               	,lo8(-33)
 985               		st X,r24
 987 054a B0E0      	.LM75:
 988 054c E4EF      		ldi r26,lo8(240)
 989 054e F0E0      		ldi r27,hi8(240)
 990 0550 8081      		ldi r30,lo8(240)
 991 0552 8B7F      		ldi r31,hi8(240)
 992 0554 8C93      		ld r24,Z
 993 0556 00C0      		andi r24,lo8(-5)
 994               		st X,r24
 309:can_at90can128.c **** 			break;
 310:can_at90can128.c **** 		case TRANSMIT_DATA:
 311:can_at90can128.c **** 			setbit(CANCDMOB, CONMOB0);
 995               	.L31:
 997 0558 AFEE      	.LM76:
 998 055a B0E0      		ldi r26,lo8(239)
 999 055c EFEE      		ldi r27,hi8(239)
 1000 055e F0E0      		ldi r30,lo8(239)
 1001 0560 8081      		ldi r31,hi8(239)
 1002 0562 8064      		ld r24,Z
 1003 0564 8C93      		andi r24,lo8(127)
 312:can_at90can128.c **** 			clearbit(CANCDMOB, CONMOB1);
 1004               	
 1006 0566 AFEE      	.LM77:
 1007 0568 B0E0      		ldi r26,lo8(239)
 1008 056a EFEE      		ldi r27,hi8(239)
 1009 056c F0E0      		ldi r30,lo8(239)
 1010 056e 8081      		ldi r31,hi8(239)
 1011 0570 8F77      		ld r24,Z
 1012 0572 8C93      		ori r24,lo8(64)
 313:can_at90can128.c **** 			clearbit(CANCDMOB,RPLV);
 1013               	4
 1015 0574 AFEE      	.LM78:
 1016 0576 B0E0      		ldi r26,lo8(239)
 1017 0578 EFEE      		ldi r27,hi8(239)
 1018 057a F0E0      		ldi r30,lo8(239)
 1019 057c 8081      		ldi r31,hi8(239)
 1020 057e 8F7D      		ld r24,Z
 1021 0580 8C93      		andi r24,lo8(-33)
 314:can_at90can128.c **** 			clearbit(CANIDT4, RTRTAG);
 1022               	
 1024 0582 A0EF      	.LM79:
 1025 0584 B0E0      		ldi r26,lo8(240)
 1026 0586 E0EF      		ldi r27,hi8(240)
 1027 0588 F0E0      		ldi r30,lo8(240)
 1028 058a 8081      		ldi r31,hi8(240)
 1029 058c 8B7F      		ld r24,Z
 1030 058e 8C93      		ori r24,lo8(4)
 1031 0590 00C0      		st X,r24
 1032               		rjmp .L35
 315:can_at90can128.c **** 			break;
 316:can_at90can128.c **** 		case TRANSMIT_REMOTE:
 317:can_at90can128.c **** 			clearbit(CANCDMOB, CONMOB1);
 1033               	abn	68,0,323,.LM80-.LFBB7
 1034               	.LM80:
 1035 0592 AFEE      		ldi r26,lo8(239)
 1036 0594 B0E0      		ldi r27,hi8(239)
 1037 0596 EFEE      		ldi r30,lo8(239)
 1038 0598 F0E0      		ldi r31,hi8(239)
 1039 059a 8081      		ld r24,Z
 1040 059c 8F77      		andi r24,lo8(-65)
 1041 059e 8C93      		st X,r24
 318:can_at90can128.c **** 			setbit(CANCDMOB, CONMOB0);
 1042               	8,0,324,.LM81-.LFBB7
 1043               	.LM81:
 1044 05a0 AFEE      		ldi r26,lo8(239)
 1045 05a2 B0E0      		ldi r27,hi8(239)
 1046 05a4 EFEE      		ldi r30,lo8(239)
 1047 05a6 F0E0      		ldi r31,hi8(239)
 1048 05a8 8081      		ld r24,Z
 1049 05aa 8064      		ori r24,lo8(-128)
 1050 05ac 8C93      		st X,r24
 319:can_at90can128.c **** 			clearbit(CANCDMOB,RPLV);
 1051               	8,0,325,.LM82-.LFBB7
 1052               	.LM82:
 1053 05ae AFEE      		ldi r26,lo8(239)
 1054 05b0 B0E0      		ldi r27,hi8(239)
 1055 05b2 EFEE      		ldi r30,lo8(239)
 1056 05b4 F0E0      		ldi r31,hi8(239)
 1057 05b6 8081      		ld r24,Z
 1058 05b8 8F7D      		andi r24,lo8(-33)
 1059 05ba 8C93      		st X,r24
 320:can_at90can128.c **** 			setbit(CANIDT4, RTRTAG);
 1060               	8,0,326,.LM83-.LFBB7
 1061               	.LM83:
 1062 05bc A0EF      		ldi r26,lo8(240)
 1063 05be B0E0      		ldi r27,hi8(240)
 1064 05c0 E0EF      		ldi r30,lo8(240)
 1065 05c2 F0E0      		ldi r31,hi8(240)
 1066 05c4 8081      		ld r24,Z
 1067 05c6 8460      		andi r24,lo8(-5)
 1068 05c8 8C93      		st X,r24
 1069 05ca 00C0      		rjmp .L35
 1070               	.L33:
 321:can_at90can128.c **** 			break;
 322:can_at90can128.c **** 		case RECEIVE_DATA:
 323:can_at90can128.c **** 			clearbit(CANCDMOB, CONMOB0);
 1071               	0,329,.LM84-.LFBB7
 1072               	.LM84:
 1073 05cc AFEE      		ldi r26,lo8(239)
 1074 05ce B0E0      		ldi r27,hi8(239)
 1075 05d0 EFEE      		ldi r30,lo8(239)
 1076 05d2 F0E0      		ldi r31,hi8(239)
 1077 05d4 8081      		ld r24,Z
 1078 05d6 8F7B      		andi r24,lo8(-65)
 1079 05d8 8C93      		st X,r24
 324:can_at90can128.c **** 			setbit(CANCDMOB, CONMOB1);
 1080               	8,0,330,.LM85-.LFBB7
 1081               	.LM85:
 1082 05da AFEE      		ldi r26,lo8(239)
 1083 05dc B0E0      		ldi r27,hi8(239)
 1084 05de EFEE      		ldi r30,lo8(239)
 1085 05e0 F0E0      		ldi r31,hi8(239)
 1086 05e2 8081      		ld r24,Z
 1087 05e4 8068      		ori r24,lo8(-128)
 1088 05e6 8C93      		st X,r24
 325:can_at90can128.c **** 			clearbit(CANCDMOB,RPLV);
 1089               	8,0,331,.LM86-.LFBB7
 1090               	.LM86:
 1091 05e8 AFEE      		ldi r26,lo8(239)
 1092 05ea B0E0      		ldi r27,hi8(239)
 1093 05ec EFEE      		ldi r30,lo8(239)
 1094 05ee F0E0      		ldi r31,hi8(239)
 1095 05f0 8081      		ld r24,Z
 1096 05f2 8F7D      		ori r24,lo8(32)
 1097 05f4 8C93      		st X,r24
 326:can_at90can128.c **** 			clearbit(CANIDT4, RTRTAG);
 1098               	8,0,332,.LM87-.LFBB7
 1099               	.LM87:
 1100 05f6 A0EF      		ldi r26,lo8(240)
 1101 05f8 B0E0      		ldi r27,hi8(240)
 1102 05fa E0EF      		ldi r30,lo8(240)
 1103 05fc F0E0      		ldi r31,hi8(240)
 1104 05fe 8081      		ld r24,Z
 1105 0600 8B7F      		ori r24,lo8(4)
 1106 0602 8C93      		st X,r24
 1107 0604 00C0      	.L35:
 1108               	/* epilogue start */
 327:can_at90can128.c **** 			break;
 328:can_at90can128.c **** 		case AUTO_REPLY:
 329:can_at90can128.c **** 			clearbit(CANCDMOB, CONMOB0);
 1109               	0,337,.LM88-.LFBB7
 1110               	.LM88:
 1111 0606 AFEE      		pop __tmp_reg__
 1112 0608 B0E0      		pop __tmp_reg__
 1113 060a EFEE      		pop __tmp_reg__
 1114 060c F0E0      		pop r28
 1115 060e 8081      		pop r29
 1116 0610 8F7B      		ret
 330:can_at90can128.c **** 			setbit(CANCDMOB, CONMOB1);
 1118               	
 1120 0614 AFEE      	.global	can_get_mob_mode
 1122 0618 EFEE      	can_get_mob_mode:
 1124 061c 8081      	.LM89:
 1125 061e 8068      	.LFBB8:
 1126 0620 8C93      		push r29
 331:can_at90can128.c **** 			setbit(CANCDMOB,RPLV);
 1127               	8
 1128               		push __tmp_reg__
 1129 0622 AFEE      		in r28,__SP_L__
 1130 0624 B0E0      		in r29,__SP_H__
 1131 0626 EFEE      	/* prologue: function */
 1132 0628 F0E0      	/* frame size = 1 */
 1134 062c 8062      	.LM90:
 1135 062e 8C93      		std Y+1,__zero_reg__
 332:can_at90can128.c **** 			setbit(CANIDT4, RTRTAG);
 1136               	8,0,344,.LM91-.LFBB8
 1137               	.LM91:
 1138 0630 A0EF      		ldi r30,lo8(239)
 1139 0632 B0E0      		ldi r31,hi8(239)
 1140 0634 E0EF      		ld r24,Z
 1141 0636 F0E0      		tst r24
 1142 0638 8081      		brlt .L37
 1143 063a 8460      		ldi r30,lo8(239)
 1144 063c 8C93      		ldi r31,hi8(239)
 1145               		ld r24,Z
 1146               		mov r24,r24
 333:can_at90can128.c **** 			break;
 334:can_at90can128.c **** 		default:
 335:can_at90can128.c **** 			break;
 336:can_at90can128.c **** 	}
 337:can_at90can128.c **** }
 1147               	8(0)
 1148               		andi r24,lo8(64)
 1149 063e 0F90      		andi r25,hi8(64)
 1150 0640 0F90      		sbiw r24,0
 1151 0642 0F90      		brne .L37
 1153 0646 DF91      	.LM92:
 1154 0648 0895      		std Y+1,__zero_reg__
 1155               		rjmp .L38
 1156               	.L37:
 1158               	.LM93:
 1159               		ldi r30,lo8(239)
 1160               		ldi r31,hi8(239)
 338:can_at90can128.c **** /* Get mode for selected MOB */
 339:can_at90can128.c **** uint8_t can_get_mob_mode(void)
 340:can_at90can128.c **** {
 1161               	 r24
 1162               		brlt .L39
 1163               		ldi r30,lo8(239)
 1164 064a DF93      		ldi r31,hi8(239)
 1165 064c CF93      		ld r24,Z
 1166 064e 0F92      		mov r24,r24
 1167 0650 CDB7      		ldi r25,lo8(0)
 1168 0652 DEB7      		andi r24,lo8(64)
 1169               		andi r25,hi8(64)
 1170               		sbiw r24,0
 341:can_at90can128.c **** 	uint8_t	mode;
 342:can_at90can128.c **** 	mode = 0;
 1171               	
 1172               		ldi r30,lo8(240)
 1173 0654 1982      		ldi r31,hi8(240)
 343:can_at90can128.c **** 
 344:can_at90can128.c **** 	if (!getbit(CANCDMOB, CONMOB1) && !getbit(CANCDMOB, CONMOB0))
 1174               	d r24,Z
 1175               		mov r24,r24
 1176 0656 EFEE      		ldi r25,lo8(0)
 1177 0658 F0E0      		andi r24,lo8(4)
 1178 065a 8081      		andi r25,hi8(4)
 1179 065c 8823      		sbiw r24,0
 1180 065e 04F0      		brne .L39
 1182 0662 F0E0      	.LM94:
 1183 0664 8081      		ldi r24,lo8(1)
 1184 0666 882F      		std Y+1,r24
 1185 0668 90E0      		rjmp .L38
 1186 066a 8074      	.L39:
 1188 066e 0097      	.LM95:
 1189 0670 01F4      		ldi r30,lo8(239)
 345:can_at90can128.c **** 	{
 346:can_at90can128.c **** 		mode = DISABLED;
 1190               	)
 1191               		ld r24,Z
 1192 0672 1982      		tst r24
 1193 0674 00C0      		brlt .L40
 1194               		ldi r30,lo8(239)
 347:can_at90can128.c **** 	}
 348:can_at90can128.c **** 	else if (!getbit(CANCDMOB, CONMOB1) && getbit(CANCDMOB, CONMOB0) && !getbit(CANIDT4, RTRTAG))
 1195               	r31,hi8(239)
 1196               		ld r24,Z
 1197 0676 EFEE      		mov r24,r24
 1198 0678 F0E0      		ldi r25,lo8(0)
 1199 067a 8081      		andi r24,lo8(64)
 1200 067c 8823      		andi r25,hi8(64)
 1201 067e 04F0      		sbiw r24,0
 1202 0680 EFEE      		breq .L40
 1203 0682 F0E0      		ldi r30,lo8(240)
 1204 0684 8081      		ldi r31,hi8(240)
 1205 0686 882F      		ld r24,Z
 1206 0688 90E0      		mov r24,r24
 1207 068a 8074      		ldi r25,lo8(0)
 1208 068c 9070      		andi r24,lo8(4)
 1209 068e 0097      		andi r25,hi8(4)
 1210 0690 01F0      		sbiw r24,0
 1211 0692 E0EF      		breq .L40
 1213 0696 8081      	.LM96:
 1214 0698 882F      		ldi r24,lo8(2)
 1215 069a 90E0      		std Y+1,r24
 1216 069c 8470      		rjmp .L38
 1217 069e 9070      	.L40:
 1219 06a2 01F4      	.LM97:
 349:can_at90can128.c **** 	{
 350:can_at90can128.c **** 		mode = TRANSMIT_DATA;
 1220               	1,hi8(239)
 1221               		ld r24,Z
 1222 06a4 81E0      		tst r24
 1223 06a6 8983      		brge .L41
 1224 06a8 00C0      		ldi r30,lo8(239)
 1225               		ldi r31,hi8(239)
 351:can_at90can128.c **** 	}
 352:can_at90can128.c **** 	else if (!getbit(CANCDMOB, CONMOB1) && getbit(CANCDMOB, CONMOB0) && getbit(CANIDT4, RTRTAG))
 1226               	4,Z
 1227               		mov r24,r24
 1228 06aa EFEE      		ldi r25,lo8(0)
 1229 06ac F0E0      		andi r24,lo8(64)
 1230 06ae 8081      		andi r25,hi8(64)
 1231 06b0 8823      		sbiw r24,0
 1232 06b2 04F0      		brne .L41
 1233 06b4 EFEE      		ldi r30,lo8(240)
 1234 06b6 F0E0      		ldi r31,hi8(240)
 1235 06b8 8081      		ld r24,Z
 1236 06ba 882F      		mov r24,r24
 1237 06bc 90E0      		ldi r25,lo8(0)
 1238 06be 8074      		andi r24,lo8(4)
 1239 06c0 9070      		andi r25,hi8(4)
 1240 06c2 0097      		sbiw r24,0
 1241 06c4 01F0      		brne .L41
 1243 06c8 F0E0      	.LM98:
 1244 06ca 8081      		ldi r24,lo8(3)
 1245 06cc 882F      		std Y+1,r24
 1246 06ce 90E0      		rjmp .L38
 1247 06d0 8470      	.L41:
 1249 06d4 0097      	.LM99:
 1250 06d6 01F0      		ldi r30,lo8(239)
 353:can_at90can128.c **** 	{
 354:can_at90can128.c **** 		mode = TRANSMIT_REMOTE;
 1251               	,Z
 1252               		tst r24
 1253 06d8 82E0      		brge .L38
 1254 06da 8983      		ldi r30,lo8(239)
 1255 06dc 00C0      		ldi r31,hi8(239)
 1256               		ld r24,Z
 355:can_at90can128.c **** 	}
 356:can_at90can128.c **** 	else if (getbit(CANCDMOB, CONMOB1) && !getbit(CANCDMOB, CONMOB0) && !getbit(CANIDT4, RTRTAG))
 1257               	24,r24
 1258               		ldi r25,lo8(0)
 1259 06de EFEE      		andi r24,lo8(64)
 1260 06e0 F0E0      		andi r25,hi8(64)
 1261 06e2 8081      		sbiw r24,0
 1262 06e4 8823      		brne .L38
 1263 06e6 04F4      		ldi r30,lo8(239)
 1264 06e8 EFEE      		ldi r31,hi8(239)
 1265 06ea F0E0      		ld r24,Z
 1266 06ec 8081      		mov r24,r24
 1267 06ee 882F      		ldi r25,lo8(0)
 1268 06f0 90E0      		andi r24,lo8(32)
 1269 06f2 8074      		andi r25,hi8(32)
 1270 06f4 9070      		sbiw r24,0
 1271 06f6 0097      		breq .L38
 1272 06f8 01F4      		ldi r30,lo8(240)
 1273 06fa E0EF      		ldi r31,hi8(240)
 1274 06fc F0E0      		ld r24,Z
 1275 06fe 8081      		mov r24,r24
 1276 0700 882F      		ldi r25,lo8(0)
 1277 0702 90E0      		andi r24,lo8(4)
 1278 0704 8470      		andi r25,hi8(4)
 1279 0706 9070      		sbiw r24,0
 1280 0708 0097      		breq .L38
 357:can_at90can128.c **** 	{
 358:can_at90can128.c **** 		mode = RECEIVE_DATA;
 1282               	std Y+1,r24
 1283               	.L38:
 1285 070e 8983      	.LM101:
 1286 0710 00C0      		ldd r24,Y+1
 1287               	/* epilogue start */
 359:can_at90can128.c **** 	}else if (getbit(CANCDMOB, CONMOB1) && !getbit(CANCDMOB, CONMOB0) && getbit(CANCDMOB,RPLV) && getb
 1288               	n	68,0,365,.LM102-.LFBB8
 1289               	.LM102:
 1290 0712 EFEE      		pop __tmp_reg__
 1291 0714 F0E0      		pop r28
 1292 0716 8081      		pop r29
 1293 0718 8823      		ret
 1298 0722 882F      	.Lscope8:
 1302 072a 0097      	.global	can_set_mob_data
 1304 072e EFEE      	can_set_mob_data:
 1306 0732 8081      	.LM103:
 1307 0734 882F      	.LFBB9:
 1308 0736 90E0      		push r29
 1309 0738 8072      		push r28
 1310 073a 9070      		rcall .
 1311 073c 0097      		rcall .
 1312 073e 01F0      		in r28,__SP_L__
 1313 0740 E0EF      		in r29,__SP_H__
 1314 0742 F0E0      	/* prologue: function */
 1315 0744 8081      	/* frame size = 4 */
 1316 0746 882F      		std Y+3,r25
 1317 0748 90E0      		std Y+2,r24
 1318 074a 8470      		std Y+4,r22
 1320 074e 0097      	.LM104:
 1321 0750 01F0      		ldd r24,Y+4
 360:can_at90can128.c **** 	{
 361:can_at90can128.c **** 		mode = AUTO_REPLY;
 1322               	 r24,lo8(8)
 1323               		andi r25,hi8(8)
 1324 0752 84E0      		sbiw r24,0
 1325 0754 8983      		breq .L44
 362:can_at90can128.c **** 	}
 363:can_at90can128.c **** 
 364:can_at90can128.c **** 	return mode;
 1327               	5:
 1328               		ldi r26,lo8(239)
 1329 0756 8981      		ldi r27,hi8(239)
 1330               		ldi r30,lo8(239)
 365:can_at90can128.c **** }
 1331               	 r31,hi8(239)
 1332               		ld r24,Z
 1333 0758 0F90      		ori r24,lo8(8)
 1334 075a CF91      		st X,r24
 1335 075c DF91      		rjmp .L45
 1336 075e 0895      	.L44:
 1338               	.LM106:
 1339               		ldi r26,lo8(239)
 1340               		ldi r27,hi8(239)
 1341               		ldi r30,lo8(239)
 1342               		ldi r31,hi8(239)
 1343               		ld r24,Z
 1344               		andi r24,lo8(-9)
 1345               		st X,r24
 1346               	.L45:
 366:can_at90can128.c **** /* Set data length for selected MOB */
 367:can_at90can128.c **** void can_set_mob_data(uint8_t *data, uint8_t length)
 368:can_at90can128.c **** {
 1348               	Y+4
 1349               		mov r24,r24
 1350               		ldi r25,lo8(0)
 1351 0760 DF93      		andi r24,lo8(4)
 1352 0762 CF93      		andi r25,hi8(4)
 1353 0764 00D0      		sbiw r24,0
 1354 0766 00D0      		breq .L46
 1356 076a DEB7      	.LM108:
 1357               		ldi r26,lo8(239)
 1358               		ldi r27,hi8(239)
 1359 076c 9B83      		ldi r30,lo8(239)
 1360 076e 8A83      		ldi r31,hi8(239)
 1361 0770 6C83      		ld r24,Z
 369:can_at90can128.c **** 	uint8_t	i;
 370:can_at90can128.c **** 	// Set data length
 371:can_at90can128.c **** 	if (length & (0x01 << 3))
 1362               	)
 1363               		st X,r24
 1364 0772 8C81      		rjmp .L47
 1365 0774 882F      	.L46:
 1367 0778 8870      	.LM109:
 1368 077a 9070      		ldi r26,lo8(239)
 1369 077c 0097      		ldi r27,hi8(239)
 1370 077e 01F0      		ldi r30,lo8(239)
 372:can_at90can128.c **** 	{
 373:can_at90can128.c **** 		setbit(CANCDMOB, DLC3);
 1371               	hi8(239)
 1372               		ld r24,Z
 1373 0780 AFEE      		andi r24,lo8(-5)
 1374 0782 B0E0      		st X,r24
 1375 0784 EFEE      	.L47:
 1377 0788 8081      	.LM110:
 1378 078a 8860      		ldd r24,Y+4
 1379 078c 8C93      		mov r24,r24
 1380 078e 00C0      		ldi r25,lo8(0)
 1381               		andi r24,lo8(2)
 374:can_at90can128.c **** 	}
 375:can_at90can128.c **** 	else
 376:can_at90can128.c **** 	{
 377:can_at90can128.c **** 		clearbit(CANCDMOB, DLC3);
 1382               	i8(2)
 1383               		sbiw r24,0
 1384 0790 AFEE      		breq .L48
 1386 0794 EFEE      	.LM111:
 1387 0796 F0E0      		ldi r26,lo8(239)
 1388 0798 8081      		ldi r27,hi8(239)
 1389 079a 877F      		ldi r30,lo8(239)
 1390 079c 8C93      		ldi r31,hi8(239)
 1391               		ld r24,Z
 378:can_at90can128.c **** 	}
 379:can_at90can128.c **** 	
 380:can_at90can128.c **** 	if (length & (0x01 << 2))
 1392               	o8(2)
 1393               		st X,r24
 1394 079e 8C81      		rjmp .L49
 1395 07a0 882F      	.L48:
 1397 07a4 8470      	.LM112:
 1398 07a6 9070      		ldi r26,lo8(239)
 1399 07a8 0097      		ldi r27,hi8(239)
 1400 07aa 01F0      		ldi r30,lo8(239)
 381:can_at90can128.c **** 	{
 382:can_at90can128.c **** 		setbit(CANCDMOB, DLC2);
 1401               	hi8(239)
 1402               		ld r24,Z
 1403 07ac AFEE      		andi r24,lo8(-3)
 1404 07ae B0E0      		st X,r24
 1405 07b0 EFEE      	.L49:
 1407 07b4 8081      	.LM113:
 1408 07b6 8460      		ldd r24,Y+4
 1409 07b8 8C93      		mov r24,r24
 1410 07ba 00C0      		ldi r25,lo8(0)
 1411               		andi r24,lo8(1)
 383:can_at90can128.c **** 	}
 384:can_at90can128.c **** 	else
 385:can_at90can128.c **** 	{
 386:can_at90can128.c **** 		clearbit(CANCDMOB, DLC2);
 1412               	i8(1)
 1413               		tst r24
 1414 07bc AFEE      		breq .L50
 1416 07c0 EFEE      	.LM114:
 1417 07c2 F0E0      		ldi r26,lo8(239)
 1418 07c4 8081      		ldi r27,hi8(239)
 1419 07c6 8B7F      		ldi r30,lo8(239)
 1420 07c8 8C93      		ldi r31,hi8(239)
 1421               		ld r24,Z
 387:can_at90can128.c **** 	}
 388:can_at90can128.c **** 	
 389:can_at90can128.c **** 	if (length & (0x01 << 1))
 1422               	o8(1)
 1423               		st X,r24
 1424 07ca 8C81      		rjmp .L51
 1425 07cc 882F      	.L50:
 1427 07d0 8270      	.LM115:
 1428 07d2 9070      		ldi r26,lo8(239)
 1429 07d4 0097      		ldi r27,hi8(239)
 1430 07d6 01F0      		ldi r30,lo8(239)
 390:can_at90can128.c **** 	{
 391:can_at90can128.c **** 		setbit(CANCDMOB, DLC1);
 1431               	hi8(239)
 1432               		ld r24,Z
 1433 07d8 AFEE      		andi r24,lo8(-2)
 1434 07da B0E0      		st X,r24
 1435 07dc EFEE      	.L51:
 1437 07e0 8081      	.LM116:
 1438 07e2 8260      		std Y+1,__zero_reg__
 1439 07e4 8C93      		rjmp .L52
 1440 07e6 00C0      	.L53:
 392:can_at90can128.c **** 	}
 393:can_at90can128.c **** 	else
 394:can_at90can128.c **** 	{
 395:can_at90can128.c **** 		clearbit(CANCDMOB, DLC1);
 1442               	i r26,lo8(250)
 1443               		ldi r27,hi8(250)
 1444 07e8 AFEE      		ldd r24,Y+1
 1445 07ea B0E0      		mov r18,r24
 1446 07ec EFEE      		ldi r19,lo8(0)
 1447 07ee F0E0      		ldd r24,Y+2
 1448 07f0 8081      		ldd r25,Y+3
 1449 07f2 8D7F      		movw r30,r24
 1450 07f4 8C93      		add r30,r18
 1451               		adc r31,r19
 396:can_at90can128.c **** 	}
 397:can_at90can128.c **** 	
 398:can_at90can128.c **** 	if (length & (0x01 << 0))
 1452               		st X,r24
 1454 07f6 8C81      	.LM118:
 1455 07f8 882F      		ldd r24,Y+1
 1456 07fa 90E0      		subi r24,lo8(-(1))
 1457 07fc 8170      		std Y+1,r24
 1458 07fe 9070      	.L52:
 1459 0800 8823      		ldd r25,Y+1
 1460 0802 01F0      		ldd r24,Y+4
 399:can_at90can128.c **** 	{
 400:can_at90can128.c **** 		setbit(CANCDMOB, DLC0);
 1461               	24
 1462               		brlo .L53
 1463 0804 AFEE      	/* epilogue start */
 1465 0808 EFEE      	.LM119:
 1466 080a F0E0      		pop __tmp_reg__
 1467 080c 8081      		pop __tmp_reg__
 1468 080e 8160      		pop __tmp_reg__
 1469 0810 8C93      		pop __tmp_reg__
 1470 0812 00C0      		pop r28
 1471               		pop r29
 401:can_at90can128.c **** 	}
 402:can_at90can128.c **** 	else
 403:can_at90can128.c **** 	{
 404:can_at90can128.c **** 		clearbit(CANCDMOB, DLC0);
 1472               		can_set_mob_data, .-can_set_mob_data
 1476 0818 EFEE      	.Lscope9:
 1478 081c 8081      	.global	can_get_mob_data
 1480 0820 8C93      	can_get_mob_data:
 405:can_at90can128.c **** 	}
 406:can_at90can128.c **** 	// Set data
 407:can_at90can128.c **** 	for (i = 0; i < length; i++)
 1482               	FBB10:
 1483               		push r29
 1484 0822 1982      		push r28
 1485 0824 00C0      		in r28,__SP_L__
 1486               		in r29,__SP_H__
 408:can_at90can128.c **** 	{
 409:can_at90can128.c **** 		CANMSG	= data[i];
 1487               	 r28,25
 1488               		in __tmp_reg__,__SREG__
 1489 0826 AAEF      		cli
 1490 0828 B0E0      		out __SP_H__,r29
 1491 082a 8981      		out __SREG__,__tmp_reg__
 1492 082c 282F      		out __SP_L__,r28
 1493 082e 30E0      	/* prologue: function */
 1494 0830 8A81      	/* frame size = 25 */
 1495 0832 9B81      		std Y+20,r25
 1496 0834 FC01      		std Y+19,r24
 1498 0838 F31F      	.LM121:
 1499 083a 8081      		std Y+1,__zero_reg__
 1500 083c 8C93      		rjmp .L56
 1501               	.L57:
 1503 083e 8981      	.LM122:
 1504 0840 8F5F      		ldd r24,Y+1
 1505 0842 8983      		mov r18,r24
 1506               		ldi r19,lo8(0)
 1507 0844 9981      		ldi r30,lo8(250)
 1508 0846 8C81      		ldi r31,hi8(250)
 1509 0848 9817      		ld r20,Z
 1510 084a 00F0      		movw r24,r28
 1511               		adiw r24,11
 410:can_at90can128.c **** 	}
 411:can_at90can128.c **** }
 1512               	8
 1513               		adc r31,r19
 1514 084c 0F90      		st Z,r20
 1516 0850 0F90      	.LM123:
 1517 0852 0F90      		ldd r24,Y+1
 1518 0854 CF91      		subi r24,lo8(-(1))
 1519 0856 DF91      		std Y+1,r24
 1520 0858 0895      	.L56:
 1521               		ldd r24,Y+1
 1522               		cpi r24,lo8(8)
 1523               		brlo .L57
 1525               	.LM124:
 1526               		ldd r24,Y+19
 1527               		ldd r25,Y+20
 1528               		std Y+22,r25
 1529               		std Y+21,r24
 412:can_at90can128.c **** /* Get data for selected MOB */
 413:can_at90can128.c **** can_message can_get_mob_data(void)
 414:can_at90can128.c **** {
 1530               	w r30,2
 1531               		std Y+24,r31
 1532               		std Y+23,r30
 1533 085a DF93      		ldi r31,lo8(17)
 1534 085c CF93      		std Y+25,r31
 1535 085e CDB7      	.L58:
 1536 0860 DEB7      		ldd r30,Y+23
 1537 0862 6997      		ldd r31,Y+24
 1538 0864 0FB6      		ld r0,Z
 1539 0866 F894      		ldd r24,Y+23
 1540 0868 DEBF      		ldd r25,Y+24
 1541 086a 0FBE      		adiw r24,1
 1542 086c CDBF      		std Y+24,r25
 1543               		std Y+23,r24
 1544               		ldd r30,Y+21
 1545 086e 9C8B      		ldd r31,Y+22
 1546 0870 8B8B      		st Z,r0
 415:can_at90can128.c **** 	uint8_t	i;
 416:can_at90can128.c **** 	can_message	msg;
 417:can_at90can128.c **** 
 418:can_at90can128.c **** 	for (i = 0; i < 8; i++)
 1547               	d r25,Y+22
 1548               		adiw r24,1
 1549 0872 1982      		std Y+22,r25
 1550 0874 00C0      		std Y+21,r24
 1551               		ldd r25,Y+25
 419:can_at90can128.c **** 	{
 420:can_at90can128.c **** 		msg.data[i]	= CANMSG;
 1552               	 r25,lo8(-(-1))
 1553               		std Y+25,r25
 1554 0876 8981      		ldd r30,Y+25
 1555 0878 282F      		tst r30
 1556 087a 30E0      		brne .L58
 1558 087e F0E0      	.LM125:
 1559 0880 4081      		ldd r24,Y+19
 1560 0882 CE01      		ldd r25,Y+20
 1561 0884 0B96      	/* epilogue start */
 1562 0886 FC01      		adiw r28,25
 1563 0888 E20F      		in __tmp_reg__,__SREG__
 1564 088a F31F      		cli
 1565 088c 4083      		out __SP_H__,r29
 1566               		out __SREG__,__tmp_reg__
 1567               		out __SP_L__,r28
 1568 088e 8981      		pop r28
 1569 0890 8F5F      		pop r29
 1570 0892 8983      		ret
 421:can_at90can128.c **** 	}
 422:can_at90can128.c **** 
 423:can_at90can128.c **** 	return msg;
 1575               	10-.LFBB10
 1576               	.Lscope10:
 1579 089e 9E8B      	.global	can_set_mob_interrupt
 1581 08a2 FE01      	can_set_mob_interrupt:
 1583 08a6 F88F      	.LM126:
 1584 08a8 EF8B      	.LFBB11:
 1585 08aa F1E1      		push r29
 1586 08ac F98F      		push r28
 1587               		push __tmp_reg__
 1588 08ae EF89      		in r28,__SP_L__
 1589 08b0 F88D      		in r29,__SP_H__
 1590 08b2 0080      	/* prologue: function */
 1591 08b4 8F89      	/* frame size = 1 */
 1592 08b6 988D      		std Y+1,r24
 1594 08ba 988F      	.LM127:
 1595 08bc 8F8B      		ldd r24,Y+1
 1596 08be ED89      		cpi r24,lo8(8)
 1597 08c0 FE89      		brsh .L61
 1599 08c4 8D89      	.LM128:
 1600 08c6 9E89      		ldi r26,lo8(222)
 1601 08c8 0196      		ldi r27,hi8(222)
 1602 08ca 9E8B      		ldi r30,lo8(222)
 1603 08cc 8D8B      		ldi r31,hi8(222)
 1604 08ce 998D      		ld r24,Z
 1605 08d0 9150      		mov r20,r24
 1606 08d2 998F      		ldd r24,Y+1
 1607 08d4 E98D      		mov r18,r24
 1608 08d6 EE23      		ldi r19,lo8(0)
 1609 08d8 01F4      		ldi r24,lo8(1)
 424:can_at90can128.c **** }
 1610               	f
 1611               	1:	lsl r24
 1612 08da 8B89      		rol r25
 1613 08dc 9C89      	2:	dec r0
 1614               		brpl 1b
 1615 08de 6996      		or r24,r20
 1616 08e0 0FB6      		st X,r24
 1617 08e2 F894      		rjmp .L63
 1618 08e4 DEBF      	.L61:
 1620 08e8 CDBF      	.LM129:
 1621 08ea CF91      		ldd r24,Y+1
 1622 08ec DF91      		cpi r24,lo8(8)
 1623 08ee 0895      		brlo .L63
 1624               		ldd r24,Y+1
 1625               		cpi r24,lo8(15)
 1626               		brsh .L63
 1628               	.LM130:
 1629               		ldi r26,lo8(223)
 1630               		ldi r27,hi8(223)
 1631               		ldi r30,lo8(223)
 1632               		ldi r31,hi8(223)
 1633               		ld r24,Z
 1634               		mov r20,r24
 425:can_at90can128.c **** /* Set interrupt for given MOB */
 426:can_at90can128.c **** void can_set_mob_interrupt(uint8_t object)
 427:can_at90can128.c **** {
 1635               	
 1636               		ldi r25,lo8(0)
 1637               		movw r18,r24
 1638 08f0 DF93      		subi r18,lo8(-(-8))
 1639 08f2 CF93      		sbci r19,hi8(-(-8))
 1640 08f4 0F92      		ldi r24,lo8(1)
 1641 08f6 CDB7      		ldi r25,hi8(1)
 1642 08f8 DEB7      		mov r0,r18
 1643               		rjmp 2f
 1644               	1:	lsl r24
 1645 08fa 8983      		rol r25
 428:can_at90can128.c **** 	if ((object >= 0) && (object <= 7))
 1646               		brpl 1b
 1647               		or r24,r20
 1648 08fc 8981      		st X,r24
 1649 08fe 8830      	.L63:
 1650 0900 00F4      	/* epilogue start */
 429:can_at90can128.c **** 	{
 430:can_at90can128.c **** 		CANIE2 |= (0x01 << object);
 1651               	bn	68,0,436,.LM131-.LFBB11
 1652               	.LM131:
 1653 0902 AEED      		pop __tmp_reg__
 1654 0904 B0E0      		pop r28
 1655 0906 EEED      		pop r29
 1656 0908 F0E0      		ret
 1658 090c 482F      	.Lscope11:
 1660 0910 282F      	.global	can_get_mob_interrupt
 1662 0914 81E0      	can_get_mob_interrupt:
 1664 0918 022E      	.LM132:
 1665 091a 00C0      	.LFBB12:
 1666 091c 880F      		push r29
 1667 091e 991F      		push r28
 1668 0920 0A94      		rcall .
 1669 0922 02F4      		rcall .
 1670 0924 842B      		in r28,__SP_L__
 1671 0926 8C93      		in r29,__SP_H__
 1672 0928 00C0      	/* prologue: function */
 1673               	/* frame size = 4 */
 431:can_at90can128.c **** 	}
 432:can_at90can128.c **** 	else if ((object >= 8) && (object <= 14))
 1674               	-.LFBB12
 1675               	.LM133:
 1676 092a 8981      		ldi r30,lo8(224)
 1677 092c 8830      		ldi r31,hi8(224)
 1678 092e 00F0      		ld r24,Z
 1679 0930 8981      		mov r18,r24
 1680 0932 8F30      		ldi r19,lo8(0)
 1681 0934 00F4      		ldi r30,lo8(225)
 433:can_at90can128.c **** 	{
 434:can_at90can128.c **** 		CANIE1 |= (0x01 << (object - 8));
 1682               	,hi8(225)
 1683               		ld r24,Z
 1684 0936 AFED      		mov r24,r24
 1685 0938 B0E0      		ldi r25,lo8(0)
 1686 093a EFED      		mov r25,r24
 1687 093c F0E0      		clr r24
 1688 093e 8081      		or r24,r18
 1689 0940 482F      		or r25,r19
 1690 0942 8981      		std Y+2,r25
 1691 0944 882F      		std Y+1,r24
 1693 0948 9C01      	.LM134:
 1694 094a 2850      		ldd r24,Y+1
 1695 094c 3040      		ldd r25,Y+2
 1696 094e 81E0      		sbiw r24,0
 1697 0950 90E0      		brne .L65
 1699 0954 00C0      	.LM135:
 1700 0956 880F      		ldi r24,lo8(-1)
 1701 0958 991F      		std Y+4,r24
 1702 095a 0A94      		rjmp .L66
 1703 095c 02F4      	.L65:
 1705 0960 8C93      	.LM136:
 1706               		std Y+3,__zero_reg__
 1707               		rjmp .L67
 435:can_at90can128.c **** 	}
 436:can_at90can128.c **** }
 1708               	137-.LFBB12
 1709               	.LM137:
 1710 0962 0F90      		ldd r24,Y+1
 1711 0964 CF91      		ldd r25,Y+2
 1712 0966 DF91      		lsr r25
 1713 0968 0895      		ror r24
 1714               		std Y+2,r25
 1715               		std Y+1,r24
 1717               	.LM138:
 1718               		ldd r24,Y+3
 1719               		subi r24,lo8(-(1))
 437:can_at90can128.c **** /* Get MOB which has forced an interrupt */
 438:can_at90can128.c **** uint8_t can_get_mob_interrupt(void)
 439:can_at90can128.c **** {
 1720               	
 1721               	.L67:
 1722               		ldd r24,Y+1
 1723 096a DF93      		ldd r25,Y+2
 1724 096c CF93      		andi r24,lo8(1)
 1725 096e 00D0      		andi r25,hi8(1)
 1726 0970 00D0      		sbiw r24,0
 1727 0972 CDB7      		breq .L68
 1729               	.LM139:
 1730               		ldd r24,Y+3
 440:can_at90can128.c **** 	uint8_t mob;
 441:can_at90can128.c **** 	uint16_t maske;
 442:can_at90can128.c **** 	
 443:can_at90can128.c **** 	maske = CANSIT2 | (CANSIT1 << 8);
 1731               	o8(15)
 1732               		brlo .L69
 1734 0978 F0E0      	.LM140:
 1735 097a 8081      		ldi r24,lo8(-1)
 1736 097c 282F      		std Y+4,r24
 1737 097e 30E0      		rjmp .L66
 1738 0980 E1EE      	.L69:
 1740 0984 8081      	.LM141:
 1741 0986 882F      		ldd r24,Y+3
 1742 0988 90E0      		std Y+4,r24
 1743 098a 982F      	.L66:
 1744 098c 8827      		ldd r24,Y+4
 1745 098e 822B      	/* epilogue start */
 1747 0992 9A83      	.LM142:
 1748 0994 8983      		pop __tmp_reg__
 444:can_at90can128.c **** 	// Error if mask equals zero
 445:can_at90can128.c **** 	if (maske == 0)
 1749               	pop __tmp_reg__
 1750               		pop __tmp_reg__
 1751 0996 8981      		pop r28
 1752 0998 9A81      		pop r29
 1753 099a 0097      		ret
 446:can_at90can128.c **** 	{
 447:can_at90can128.c **** 		return NOMOB;
 1755               	s	"mob:(4,2)",128,0,0,3
 1759 09a2 00C0      	.Lscope12:
 448:can_at90can128.c **** 	}
 449:can_at90can128.c **** 	// Right shifting mask, number of shifts equals MOB number
 450:can_at90can128.c **** 	for (mob = 0; (maske & 0x01) == 0; mob++)
 1761               	s	"object:p(4,2)",160,0,0,1
 1762               	.global	can_clear_mob_interrupt
 1764 09a6 00C0      	can_clear_mob_interrupt:
 451:can_at90can128.c **** 	{
 452:can_at90can128.c **** 		maske >>= 1;
 1766               	3:
 1767               	.LFBB13:
 1768 09a8 8981      		push r29
 1769 09aa 9A81      		push r28
 1770 09ac 9695      		push __tmp_reg__
 1771 09ae 8795      		in r28,__SP_L__
 1772 09b0 9A83      		in r29,__SP_H__
 1773 09b2 8983      	/* prologue: function */
 1774               	/* frame size = 1 */
 1775               		std Y+1,r24
 1777 09b6 8F5F      	.LM144:
 1778 09b8 8B83      		ldd r24,Y+1
 1779               		cpi r24,lo8(8)
 1780 09ba 8981      		brsh .L72
 1782 09be 8170      	.LM145:
 1783 09c0 9070      		ldi r26,lo8(222)
 1784 09c2 0097      		ldi r27,hi8(222)
 1785 09c4 01F0      		ldi r30,lo8(222)
 453:can_at90can128.c **** 	}
 454:can_at90can128.c **** 	//  Error if MOB number not in range
 455:can_at90can128.c **** 	if (mob > (MOBS_NUM - 1))
 1786               	d r24,Z
 1787               		mov r20,r24
 1788 09c6 8B81      		ldd r24,Y+1
 1789 09c8 8F30      		mov r18,r24
 1790 09ca 00F0      		ldi r19,lo8(0)
 456:can_at90can128.c **** 	{
 457:can_at90can128.c **** 		return NOMOB;
 1791               	r24,lo8(1)
 1792               		ldi r25,hi8(1)
 1793 09cc 8FEF      		mov r0,r18
 1794 09ce 8C83      		rjmp 2f
 1795 09d0 00C0      	1:	lsl r24
 1796               		rol r25
 458:can_at90can128.c **** 	}
 459:can_at90can128.c **** 	else
 460:can_at90can128.c **** 	{
 461:can_at90can128.c **** 		return mob;
 1797               	 r0
 1798               		brpl 1b
 1799 09d2 8B81      		com r24
 1800 09d4 8C83      		and r24,r20
 1801               		st X,r24
 1802 09d6 8C81      		rjmp .L74
 1803               	.L72:
 462:can_at90can128.c **** 	}
 463:can_at90can128.c **** }
 1804               		68,0,471,.LM146-.LFBB13
 1805               	.LM146:
 1806 09d8 0F90      		ldd r24,Y+1
 1807 09da 0F90      		cpi r24,lo8(8)
 1808 09dc 0F90      		brlo .L74
 1809 09de 0F90      		ldd r24,Y+1
 1810 09e0 CF91      		cpi r24,lo8(15)
 1811 09e2 DF91      		brsh .L74
 1813               	.LM147:
 1814               		ldi r26,lo8(223)
 1815               		ldi r27,hi8(223)
 1816               		ldi r30,lo8(223)
 1817               		ldi r31,hi8(223)
 1818               		ld r24,Z
 1819               		mov r20,r24
 1820               		ldd r24,Y+1
 1821               		mov r24,r24
 1822               		ldi r25,lo8(0)
 1823               		movw r18,r24
 464:can_at90can128.c **** /* Clear interrupt for given MOB */
 465:can_at90can128.c **** void can_clear_mob_interrupt(uint8_t object)
 466:can_at90can128.c **** {
 1824               	
 1825               		sbci r19,hi8(-(-8))
 1826               		ldi r24,lo8(1)
 1827 09e6 DF93      		ldi r25,hi8(1)
 1828 09e8 CF93      		mov r0,r18
 1829 09ea 0F92      		rjmp 2f
 1830 09ec CDB7      	1:	lsl r24
 1831 09ee DEB7      		rol r25
 1832               	2:	dec r0
 1833               		brpl 1b
 1834 09f0 8983      		com r24
 467:can_at90can128.c **** 	if ((object >= 0) && (object <= 7))
 1835               	20
 1836               		st X,r24
 1837 09f2 8981      	.L74:
 1838 09f4 8830      	/* epilogue start */
 468:can_at90can128.c **** 	{
 469:can_at90can128.c **** 		CANIE2 &= ~(0x01 << object);
 1840               	8:
 1841               		pop __tmp_reg__
 1842 09f8 AEED      		pop r28
 1843 09fa B0E0      		pop r29
 1844 09fc EEED      		ret
 1846 0a00 8081      	.Lscope13:
 1850 0a08 30E0      	.global	can_init
 1852 0a0c 90E0      	can_init:
 1854 0a10 00C0      	.LM149:
 1855 0a12 880F      	.LFBB14:
 1856 0a14 991F      		push r29
 1857 0a16 0A94      		push r28
 1858 0a18 02F4      		rcall .
 1859 0a1a 8095      		push __tmp_reg__
 1860 0a1c 8423      		in r28,__SP_L__
 1861 0a1e 8C93      		in r29,__SP_H__
 1862 0a20 00C0      	/* prologue: function */
 1863               	/* frame size = 3 */
 470:can_at90can128.c **** 	}
 471:can_at90can128.c **** 	else if ((object >= 8) && (object <= 14))
 1864               	4
 1865               		std Y+3,r22
 1867 0a24 8830      	.LM150:
 1868 0a26 00F0      		ldi r26,lo8(216)
 1869 0a28 8981      		ldi r27,hi8(216)
 1870 0a2a 8F30      		ldi r30,lo8(216)
 1871 0a2c 00F4      		ldi r31,hi8(216)
 472:can_at90can128.c **** 	{
 473:can_at90can128.c **** 		CANIE1 &= ~(0x01 << (object - 8));
 1872               	Z
 1873               		ori r24,lo8(1)
 1874 0a2e AFED      		st X,r24
 1876 0a32 EFED      	.LM151:
 1877 0a34 F0E0      		ldi r24,lo8(125)
 1878 0a36 8081      		ldi r25,hi8(125)
 1879 0a38 482F      		call can_set_baudrate
 1881 0a3c 882F      	.LM152:
 1882 0a3e 90E0      		ldd r24,Y+3
 1883 0a40 9C01      		call can_set_interrupt
 1885 0a44 3040      	.LM153:
 1886 0a46 81E0      		ldi r26,lo8(216)
 1887 0a48 90E0      		ldi r27,hi8(216)
 1888 0a4a 022E      		ldi r30,lo8(216)
 1889 0a4c 00C0      		ldi r31,hi8(216)
 1890 0a4e 880F      		ld r24,Z
 1891 0a50 991F      		ori r24,lo8(2)
 1892 0a52 0A94      		st X,r24
 1893 0a54 02F4      	/* epilogue start */
 1895 0a58 8423      	.LM154:
 1896 0a5a 8C93      		pop __tmp_reg__
 1897               		pop __tmp_reg__
 1898               		pop __tmp_reg__
 474:can_at90can128.c **** 	}
 475:can_at90can128.c **** }
 1899               	ze	can_init, .-can_init
 1900               	.Lscope14:
 1905               	.global	can_enable_mob
 1907               	can_enable_mob:
 1909               	.LM155:
 1910               	.LFBB15:
 1911               		push r29
 1912               		push r28
 476:can_at90can128.c **** /* Init CAN controller */
 477:can_at90can128.c **** void can_init(uint16_t baud, uint8_t intmode)
 478:can_at90can128.c **** {
 1913               	28,__SP_L__
 1914               		in r29,__SP_H__
 1915               	/* prologue: function */
 1916 0a64 DF93      	/* frame size = 2 */
 1917 0a66 CF93      		std Y+1,r24
 1918 0a68 00D0      		std Y+2,r22
 1920 0a6c CDB7      	.LM156:
 1921 0a6e DEB7      		ldd r24,Y+1
 1922               		call can_select_mob
 1924 0a70 9A83      	.LM157:
 1925 0a72 8983      		ldd r24,Y+1
 1926 0a74 6B83      		call can_set_mob_interrupt
 479:can_at90can128.c **** 	CANGCON |= (1 << SWRES);			// Force software reset
 1927               	89,.LM158-.LFBB15
 1928               	.LM158:
 1929 0a76 A8ED      		ldd r24,Y+11
 1930 0a78 B0E0      		ldd r25,Y+12
 1931 0a7a E8ED      		ldd r26,Y+13
 1932 0a7c F0E0      		ldd r27,Y+14
 1933 0a7e 8081      		movw r22,r24
 1934 0a80 8160      		movw r24,r26
 1935 0a82 8C93      		call can_set_id_mask
 480:can_at90can128.c **** 	can_set_baudrate(125);				// Set baudrate
 1936               	8,0,490,.LM159-.LFBB15
 1937               	.LM159:
 1938 0a84 8DE7      		ldd r24,Y+7
 1939 0a86 90E0      		ldd r25,Y+8
 1940 0a88 0E94 0000 		ldd r26,Y+9
 481:can_at90can128.c **** 	can_set_interrupt(intmode);			// Set interrupt mode
 1941               	r27,Y+10
 1942               		movw r22,r24
 1943 0a8c 8B81      		movw r24,r26
 1944 0a8e 0E94 0000 		call can_set_id
 482:can_at90can128.c **** 	setbit(CANGCON, ENASTB);			// Enable CAN controller
 1945               	abn	68,0,491,.LM160-.LFBB15
 1946               	.LM160:
 1947 0a92 A8ED      		ldd r24,Y+2
 1948 0a94 B0E0      		mov r24,r24
 1949 0a96 E8ED      		ldi r25,lo8(0)
 1950 0a98 F0E0      		cpi r24,4
 1951 0a9a 8081      		cpc r25,__zero_reg__
 1952 0a9c 8260      		brne .L78
 1953 0a9e 8C93      	.L79:
 483:can_at90can128.c **** }
 1955               	dd r18,Y+15
 1956               		movw r24,r28
 1957 0aa0 0F90      		adiw r24,16
 1958 0aa2 0F90      		mov r22,r18
 1959 0aa4 0F90      		call can_set_mob_data
 1960 0aa6 CF91      	.L78:
 1962 0aaa 0895      	.LM162:
 1963               		ldd r24,Y+2
 1964               		call can_set_mob_mode
 1965               	/* epilogue start */
 1967               	.LM163:
 1968               		pop __tmp_reg__
 1969               		pop __tmp_reg__
 1970               		pop r28
 1971               		pop r29
 484:can_at90can128.c **** /* Enable the given MOB */
 485:can_at90can128.c **** void can_enable_mob(uint8_t object, uint8_t mode, can_message msg)
 486:can_at90can128.c **** {
 1972               	nable_mob, .-can_enable_mob
 1973               	.Lscope15:
 1976 0aae CF93      	.global	can_disable_mob
 1978 0ab2 CDB7      	can_disable_mob:
 1980               	.LM164:
 1981               	.LFBB16:
 1982 0ab6 8983      		push r29
 1983 0ab8 6A83      		push r28
 487:can_at90can128.c **** 	can_select_mob(object);				// Select MOB
 1984               	reg__
 1985               		in r28,__SP_L__
 1986 0aba 8981      		in r29,__SP_H__
 1987 0abc 0E94 0000 	/* prologue: function */
 488:can_at90can128.c **** 	can_set_mob_interrupt(object);		// Set interrupt
 1988               	rame size = 1 */
 1989               		std Y+1,r24
 1991 0ac2 0E94 0000 	.LM165:
 489:can_at90can128.c **** 	can_set_id_mask(msg.idm);			// Set ID mask
 1992               	 r24,Y+1
 1993               		call can_select_mob
 1995 0ac8 9C85      	.LM166:
 1996 0aca AD85      		ldd r24,Y+1
 1997 0acc BE85      		call can_clear_mob_interrupt
 1999 0ad0 CD01      	.LM167:
 2000 0ad2 0E94 0000 		ldi r24,lo8(0)
 490:can_at90can128.c **** 	can_set_id(msg.id);					// Set ID
 2001               	_set_mob_mode
 2002               	/* epilogue start */
 2004 0ad8 9885      	.LM168:
 2005 0ada A985      		pop __tmp_reg__
 2006 0adc BA85      		pop r28
 2007 0ade BC01      		pop r29
 2008 0ae0 CD01      		ret
 491:can_at90can128.c **** 	switch(mode)
 2010               	:
 2015 0aec 8430      	.global	can_send_data
 2017 0af0 01F4      	can_send_data:
 492:can_at90can128.c **** 	{
 493:can_at90can128.c **** 		case AUTO_REPLY:
 494:can_at90can128.c **** 			can_set_mob_data(msg.data, msg.length);
 2019               	LFBB17:
 2020               		push r29
 2021 0af2 2F85      		push r28
 2022 0af4 CE01      		in r28,__SP_L__
 2023 0af6 4096      		in r29,__SP_H__
 2024 0af8 622F      		sbiw r28,9
 2025 0afa 0E94 0000 		in __tmp_reg__,__SREG__
 2026               		cli
 495:can_at90can128.c **** 			break;
 496:can_at90can128.c **** 		default:
 497:can_at90can128.c **** 			break;
 498:can_at90can128.c **** 	}
 499:can_at90can128.c **** 	can_set_mob_mode(mode);				// Set mode
 2027               	P_H__,r29
 2028               		out __SREG__,__tmp_reg__
 2029 0afe 8A81      		out __SP_L__,r28
 2030 0b00 0E94 0000 	/* prologue: function */
 2031               	/* frame size = 9 */
 500:can_at90can128.c **** }
 2032               	Y+6,r24
 2033               		std Y+8,r23
 2034 0b04 0F90      		std Y+7,r22
 2035 0b06 0F90      		std Y+9,r20
 2037 0b0a DF91      	.LM170:
 2038 0b0c 0895      		ldi r24,lo8(1)
 2039               		ldi r25,hi8(1)
 2040               		ldi r26,hlo8(1)
 2041               		ldi r27,hhi8(1)
 2042               		std Y+1,r24
 2043               		std Y+2,r25
 2044               		std Y+3,r26
 2045               		std Y+4,r27
 501:can_at90can128.c **** /* Disable the given MOB */
 502:can_at90can128.c **** void can_disable_mob(uint8_t object)
 503:can_at90can128.c **** {
 2046               	14,.LM171-.LFBB17
 2047               	.LM171:
 2048               		ldd r24,Y+6
 2049 0b0e DF93      		call can_select_mob
 2051 0b12 0F92      	.LM172:
 2052 0b14 CDB7      		call can_get_mob_mode
 2053 0b16 DEB7      		std Y+5,r24
 2055               	.LM173:
 2056 0b18 8983      		ldd r24,Y+7
 504:can_at90can128.c **** 	can_select_mob(object);				// Select MOB
 2057               	8
 2058               		ldd r22,Y+9
 2059 0b1a 8981      		call can_set_mob_data
 505:can_at90can128.c **** 	can_clear_mob_interrupt(object);	// Clear interrupt
 2061               	74:
 2062               		ldi r24,lo8(1)
 2063 0b20 8981      		call can_set_mob_mode
 2064 0b22 0E94 0000 		rjmp .L84
 506:can_at90can128.c **** 	can_set_mob_mode(DISABLED);			// Set mode
 2065               	:
 2067 0b26 80E0      	.LM175:
 2068 0b28 0E94 0000 		ldd r24,Y+1
 2069               		ldd r25,Y+2
 507:can_at90can128.c **** }
 2070               	r26,Y+3
 2071               		ldd r27,Y+4
 2072 0b2c 0F90      		adiw r24,1
 2073 0b2e CF91      		adc r26,__zero_reg__
 2074 0b30 DF91      		adc r27,__zero_reg__
 2075 0b32 0895      		std Y+1,r24
 2076               		std Y+2,r25
 2077               		std Y+3,r26
 2078               		std Y+4,r27
 2079               	.L84:
 2081               	.LM176:
 2082               		ldi r30,lo8(238)
 2083               		ldi r31,hi8(238)
 2084               		ld r24,Z
 508:can_at90can128.c **** /* Send data */
 509:can_at90can128.c **** void can_send_data(uint8_t mob, uint8_t *data, uint8_t length)
 510:can_at90can128.c **** {
 2085               	di r25,lo8(0)
 2086               		andi r24,lo8(64)
 2087               		andi r25,hi8(64)
 2088 0b34 DF93      		sbiw r24,0
 2089 0b36 CF93      		brne .L85
 2090 0b38 CDB7      		ldd r24,Y+1
 2091 0b3a DEB7      		ldd r25,Y+2
 2092 0b3c 2997      		ldd r26,Y+3
 2093 0b3e 0FB6      		ldd r27,Y+4
 2094 0b40 F894      		sbiw r24,0
 2095 0b42 DEBF      		cpc r26,__zero_reg__
 2096 0b44 0FBE      		cpc r27,__zero_reg__
 2097 0b46 CDBF      		brne .L86
 2098               	.L85:
 2100 0b48 8E83      	.LM177:
 2101 0b4a 7887      		ldi r26,lo8(238)
 2102 0b4c 6F83      		ldi r27,hi8(238)
 2103 0b4e 4987      		ldi r30,lo8(238)
 511:can_at90can128.c **** 	uint8_t	mode_buffer;
 512:can_at90can128.c **** 	uint32_t timeout = 1;
 2104               	ld r24,Z
 2105               		andi r24,lo8(-65)
 2106 0b50 81E0      		st X,r24
 2108 0b54 A0E0      	.LM178:
 2109 0b56 B0E0      		ldd r24,Y+5
 2110 0b58 8983      		call can_set_mob_mode
 2111 0b5a 9A83      	/* epilogue start */
 2113 0b5e BC83      	.LM179:
 513:can_at90can128.c **** 	
 514:can_at90can128.c **** 	can_select_mob(mob);				// Select MOB
 2114               	9
 2115               		in __tmp_reg__,__SREG__
 2116 0b60 8E81      		cli
 2117 0b62 0E94 0000 		out __SP_H__,r29
 515:can_at90can128.c **** 	mode_buffer = can_get_mob_mode();	// Save mode
 2118               	 __SREG__,__tmp_reg__
 2119               		out __SP_L__,r28
 2120 0b66 0E94 0000 		pop r28
 2121 0b6a 8D83      		pop r29
 516:can_at90can128.c **** 	can_set_mob_data(data, length);		// Set data and length
 2122               	
 517:can_at90can128.c **** 	can_set_mob_mode(TRANSMIT_DATA);	// Set transmiter mode
 2128               	pe17:
 2130 0b76 81E0      	.global	ad_channel_select
 2131 0b78 0E94 0000 	.global	ad_channel_select
 2132 0b7c 00C0      		.section .bss
 518:can_at90can128.c **** 	while ((!getbit(CANSTMOB, TXOK))  && (timeout != 0))	// Wait for transmission complete flag or tim
 519:can_at90can128.c **** 	{
 520:can_at90can128.c **** 		timeout++;
 2134               		ad_channel_select, 1
 2135               	ad_channel_select:
 2136 0b7e 8981      		.skip 1,0
 2137 0b80 9A81      	.global	ulspeed
 2138 0b82 AB81      	.global	ulspeed
 2141 0b88 A11D      	ulspeed:
 2142 0b8a B11D      		.skip 4,0
 2143 0b8c 8983      	.global	ulangle
 2144 0b8e 9A83      	.global	ulangle
 2147               	ulangle:
 2148               		.skip 4,0
 2149               	.global	timer0_cnt
 2150 0b94 EEEE      	.global	timer0_cnt
 2153 0b9a 882F      	timer0_cnt:
 2154 0b9c 90E0      		.skip 1,0
 2155 0b9e 8074      	.global	change
 2156 0ba0 9070      	.global	change
 2159 0ba6 8981      	change:
 2160 0ba8 9A81      		.skip 1,0
 2161 0baa AB81      	.global	direction
 2162 0bac BC81      	.global	direction
 2165 0bb2 B105      	direction:
 2166 0bb4 01F4      		.skip 1,0
 2167               	.global	overflow
 521:can_at90can128.c **** 	}			
 522:can_at90can128.c **** 	clearbit(CANSTMOB, TXOK);			// Reset transmission complete flag
 2168               	@object
 2170 0bb6 AEEE      	overflow:
 2171 0bb8 B0E0      		.skip 4,0
 2172 0bba EEEE      	.global	speed_left
 2173 0bbc F0E0      	.global	speed_left
 2176 0bc2 8C93      	speed_left:
 523:can_at90can128.c **** 	can_set_mob_mode(mode_buffer);		// Recover MOB mode
 2177               	0
 2178               	.global	speed_right
 2179 0bc4 8D81      	.global	speed_right
 524:can_at90can128.c **** }
 2182               	_right:
 2183               		.skip 4,0
 2184 0bca 2996      		.text
 2186 0bce F894      	.global	PWM_TIM1_Init
 2188 0bd2 0FBE      	PWM_TIM1_Init:
 2190 0bd6 CF91      	.Ltext2:
 2192 0bda 0895      	.LM180:
 2193               	.LFBB18:
 2194               		push r29
 2195               		push r28
 2196               		in r28,__SP_L__
 2197               		in r29,__SP_H__
 2198               	/* prologue: function */
 2199               	/* frame size = 0 */
 2201               	.LM181:
 2202               		ldi r30,lo8(68)
 2203               		ldi r31,hi8(68)
 2204               		ldi r24,lo8(2)
 2205               		st Z,r24
 2207               	.LM182:
 2208               		ldi r30,lo8(110)
 2209               		ldi r31,hi8(110)
 2210               		ldi r24,lo8(1)
 2211               		st Z,r24
 2212 0001 0000 0000 	/* epilogue start */
 2214               	.LM183:
 2215               		pop r28
 2216               		pop r29
 2217               		ret
 2219               	.Lscope18:
 2221               	.global	__vector_17
 2223               	__vector_17:
 2225               	.LM184:
 2226               	.LFBB19:
 2227               		push __zero_reg__
 2228               		push r0
 2229               		in r0,__SREG__
 2230 000a 00        		push r0
 2231               		lds r0,91
 2232               		push r0
 2233               		clr __zero_reg__
 2234               		push r18
 2235               		push r19
 2236 000b 00        		push r20
 2237               		push r21
 2238               		push r24
 2239               		push r25
 2240               		push r26
 2241               		push r27
 2242 000c 0000 0000 		push r30
 2243               		push r31
 2244               		push r29
 2245               		push r28
 2246               		in r28,__SP_L__
 2247               		in r29,__SP_H__
 2248 0010 0000 0000 	/* prologue: Signal */
 2249               	/* frame size = 0 */
 2251               	.LM185:
 2252               		lds r24,overflow
 2253               		lds r25,(overflow)+1
 2254 0014 0000 0000 		lds r26,(overflow)+2
 2255               		lds r27,(overflow)+3
 2256               		adiw r24,1
 2257               		adc r26,__zero_reg__
 2258               		adc r27,__zero_reg__
 2259               		sts overflow,r24
 2260               		sts (overflow)+1,r25
 2261               		sts (overflow)+2,r26
   1:main.c        **** // TX Module
   2:main.c        **** 
   3:main.c        **** #define AD_PIN_0 0			//Connect ADC to adc0
   4:main.c        **** #define AD_PIN_1 1			//Connect ADC to adc1
   5:main.c        **** #define F_CPU	16000000	//Board frequency
   6:main.c        **** 
   7:main.c        **** #include <avr/io.h>			//IO Ports library
   8:main.c        **** #include <avr/interrupt.h>						//library for interrupt functions
   9:main.c        **** #include "can_at90can128.c"
  10:main.c        **** #include <util/delay.h>
  11:main.c        **** 
  12:main.c        **** 
  13:main.c        **** unsigned char ad_channel_select = 0;
  14:main.c        **** unsigned long ulspeed = 0;						//ad value decimal, channel 1, voltage
  15:main.c        **** unsigned long ulangle = 0;						//ad value decimal, channel 2, voltage
  16:main.c        **** unsigned char timer0_cnt = 0;
  17:main.c        **** unsigned char change = 0;
  18:main.c        **** unsigned char direction = 0;
  19:main.c        **** unsigned long overflow =0;
  20:main.c        **** unsigned long speed_left = 0;
  21:main.c        **** unsigned long speed_right = 0;
  22:main.c        **** 
  23:main.c        **** void PWM_TIM1_Init (void) 
  24:main.c        **** { 
 2262               	lds r19,(overflow)+1
 2263               		lds r20,(overflow)+2
 2264               		lds r21,(overflow)+3
 2265 0bdc DF93      		lds r24,speed_left
 2266 0bde CF93      		lds r25,(speed_left)+1
 2267 0be0 CDB7      		lds r26,(speed_left)+2
 2268 0be2 DEB7      		lds r27,(speed_left)+3
 2269               		cp r18,r24
 2270               		cpc r19,r25
  25:main.c        **** 	TCCR0A = (1<<CS01)|(0<<CS00); 
 2271               	r26
 2272               		cpc r21,r27
 2273 0be4 E4E4      		brlo .L91
 2275 0be8 82E0      	.LM187:
 2276 0bea 8083      		ldi r26,lo8(37)
  26:main.c        **** 	TIMSK0 = 1<<TOIE0;
 2277               	27,hi8(37)
 2278               		ldi r30,lo8(37)
 2279 0bec EEE6      		ldi r31,hi8(37)
 2280 0bee F0E0      		ld r24,Z
 2281 0bf0 81E0      		andi r24,lo8(-33)
 2282 0bf2 8083      		st X,r24
 2283               		rjmp .L92
  27:main.c        **** } 
 2285               	.LM188:
 2286 0bf4 CF91      		ldi r26,lo8(37)
 2287 0bf6 DF91      		ldi r27,hi8(37)
 2288 0bf8 0895      		ldi r30,lo8(37)
 2289               		ldi r31,hi8(37)
 2290               		ld r24,Z
 2291               		ori r24,lo8(32)
 2292               		st X,r24
 2293               	.L92:
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** SIGNAL (SIG_OVERFLOW0)
  31:main.c        **** {
 2295               	s r18,overflow
 2296               		lds r19,(overflow)+1
 2297               		lds r20,(overflow)+2
 2298 0bfa 1F92      		lds r21,(overflow)+3
 2299 0bfc 0F92      		lds r24,speed_right
 2300 0bfe 0FB6      		lds r25,(speed_right)+1
 2301 0c00 0F92      		lds r26,(speed_right)+2
 2302 0c02 0090 5B00 		lds r27,(speed_right)+3
 2303 0c06 0F92      		cp r18,r24
 2304 0c08 1124      		cpc r19,r25
 2305 0c0a 2F93      		cpc r20,r26
 2306 0c0c 3F93      		cpc r21,r27
 2307 0c0e 4F93      		brlo .L93
 2309 0c12 8F93      	.LM190:
 2310 0c14 9F93      		ldi r26,lo8(37)
 2311 0c16 AF93      		ldi r27,hi8(37)
 2312 0c18 BF93      		ldi r30,lo8(37)
 2313 0c1a EF93      		ldi r31,hi8(37)
 2314 0c1c FF93      		ld r24,Z
 2315 0c1e DF93      		andi r24,lo8(-65)
 2316 0c20 CF93      		st X,r24
 2317 0c22 CDB7      		rjmp .L94
 2318 0c24 DEB7      	.L93:
 2320               	.LM191:
  32:main.c        **** 	overflow++;
 2321               	hi8(37)
 2322               		ldi r30,lo8(37)
 2323 0c26 8091 0000 		ldi r31,hi8(37)
 2324 0c2a 9091 0000 		ld r24,Z
 2325 0c2e A091 0000 		ori r24,lo8(64)
 2326 0c32 B091 0000 		st X,r24
 2327 0c36 0196      	.L94:
 2329 0c3a B11D      	.LM192:
 2330 0c3c 8093 0000 		lds r24,overflow
 2331 0c40 9093 0000 		lds r25,(overflow)+1
 2332 0c44 A093 0000 		lds r26,(overflow)+2
 2333 0c48 B093 0000 		lds r27,(overflow)+3
  33:main.c        **** 	
  34:main.c        **** 	if (overflow >= speed_left)
 2334               	100)
 2335               		cpc r25,__zero_reg__
 2336 0c4c 2091 0000 		cpc r26,__zero_reg__
 2337 0c50 3091 0000 		cpc r27,__zero_reg__
 2338 0c54 4091 0000 		brne .L96
 2340 0c5c 8091 0000 	.LM193:
 2341 0c60 9091 0000 		sts overflow,__zero_reg__
 2342 0c64 A091 0000 		sts (overflow)+1,__zero_reg__
 2343 0c68 B091 0000 		sts (overflow)+2,__zero_reg__
 2344 0c6c 2817      		sts (overflow)+3,__zero_reg__
 2345 0c6e 3907      	.L96:
 2346 0c70 4A07      	/* epilogue start */
 2348 0c74 00F0      	.LM194:
  35:main.c        **** 	{
  36:main.c        **** 		PORTB &= ~(1<<5);
 2349               	29
 2350               		pop r31
 2351 0c76 A5E2      		pop r30
 2352 0c78 B0E0      		pop r27
 2353 0c7a E5E2      		pop r26
 2354 0c7c F0E0      		pop r25
 2355 0c7e 8081      		pop r24
 2356 0c80 8F7D      		pop r21
 2357 0c82 8C93      		pop r20
 2358 0c84 00C0      		pop r19
 2359               		pop r18
  37:main.c        **** 	}
  38:main.c        **** 	else
  39:main.c        **** 	{
  40:main.c        **** 		PORTB |= (1<<5);
 2360               	s 91,r0
 2361               		pop r0
 2362 0c86 A5E2      		out __SREG__,r0
 2363 0c88 B0E0      		pop r0
 2364 0c8a E5E2      		pop __zero_reg__
 2365 0c8c F0E0      		reti
 2367 0c90 8062      	.Lscope19:
 2369               	.global	__vector_25
  41:main.c        **** 	}	
  42:main.c        **** 	
  43:main.c        **** 	if (overflow>=speed_right)	
 2370               	ector_25, @function
 2371               	__vector_25:
 2373 0c98 3091 0000 	.LM195:
 2374 0c9c 4091 0000 	.LFBB20:
 2375 0ca0 5091 0000 		push __zero_reg__
 2376 0ca4 8091 0000 		push r0
 2377 0ca8 9091 0000 		in r0,__SREG__
 2378 0cac A091 0000 		push r0
 2379 0cb0 B091 0000 		lds r0,91
 2380 0cb4 2817      		push r0
 2381 0cb6 3907      		clr __zero_reg__
 2382 0cb8 4A07      		push r18
 2383 0cba 5B07      		push r19
 2384 0cbc 00F0      		push r20
  44:main.c        **** 	{
  45:main.c        **** 		PORTB &= ~(1<<6);
 2385               	 r22
 2386               		push r23
 2387 0cbe A5E2      		push r24
 2388 0cc0 B0E0      		push r25
 2389 0cc2 E5E2      		push r26
 2390 0cc4 F0E0      		push r27
 2391 0cc6 8081      		push r30
 2392 0cc8 8F7B      		push r31
 2393 0cca 8C93      		push r29
 2394 0ccc 00C0      		push r28
 2395               		in r28,__SP_L__
  46:main.c        **** 	}
  47:main.c        **** 	else
  48:main.c        **** 	{
  49:main.c        **** 		PORTB |= (1<<6);
 2396               	P_H__
 2397               	/* prologue: Signal */
 2398 0cce A5E2      	/* frame size = 0 */
 2400 0cd2 E5E2      	.LM196:
 2401 0cd4 F0E0      		lds r24,ad_channel_select
 2402 0cd6 8081      		tst r24
 2403 0cd8 8064      		brne .L98
 2405               	.LM197:
  50:main.c        **** 	}
  51:main.c        **** 	
  52:main.c        **** 	if (overflow == 100)
 2406               	o8(120)
 2407               		ldi r31,hi8(120)
 2408 0cdc 8091 0000 		ld r24,Z
 2409 0ce0 9091 0000 		mov r24,r24
 2410 0ce4 A091 0000 		ldi r25,lo8(0)
 2411 0ce8 B091 0000 		ldi r26,lo8(0)
 2412 0cec 8436      		ldi r27,hi8(0)
 2413 0cee 9105      		sts ulspeed,r24
 2414 0cf0 A105      		sts (ulspeed)+1,r25
 2415 0cf2 B105      		sts (ulspeed)+2,r26
 2416 0cf4 01F4      		sts (ulspeed)+3,r27
  53:main.c        **** 	{
  54:main.c        **** 		overflow = 0;
 2417               	0,63,.LM198-.LFBB20
 2418               	.LM198:
 2419 0cf6 1092 0000 		ldi r30,lo8(121)
 2420 0cfa 1092 0000 		ldi r31,hi8(121)
 2421 0cfe 1092 0000 		ld r24,Z
 2422 0d02 1092 0000 		mov r24,r24
 2423               		ldi r25,lo8(0)
 2424               		mov r25,r24
  55:main.c        **** 	}
  56:main.c        **** }
 2425               	
 2426               		movw r18,r24
 2427 0d06 CF91      		clr r20
 2428 0d08 DF91      		sbrc r19,7
 2429 0d0a FF91      		com r20
 2430 0d0c EF91      		mov r21,r20
 2431 0d0e BF91      		lds r24,ulspeed
 2432 0d10 AF91      		lds r25,(ulspeed)+1
 2433 0d12 9F91      		lds r26,(ulspeed)+2
 2434 0d14 8F91      		lds r27,(ulspeed)+3
 2435 0d16 5F91      		or r24,r18
 2436 0d18 4F91      		or r25,r19
 2437 0d1a 3F91      		or r26,r20
 2438 0d1c 2F91      		or r27,r21
 2439 0d1e 0F90      		sts ulspeed,r24
 2440 0d20 0092 5B00 		sts (ulspeed)+1,r25
 2441 0d24 0F90      		sts (ulspeed)+2,r26
 2442 0d26 0FBE      		sts (ulspeed)+3,r27
 2444 0d2a 1F90      	.LM199:
 2445 0d2c 1895      		ldi r24,lo8(1)
 2446               		sts ad_channel_select,r24
 2448               	.LM200:
 2449               		ldi r30,lo8(124)
 2450               		ldi r31,hi8(124)
 2451               		ldi r24,lo8(64)
  57:main.c        **** 
  58:main.c        **** SIGNAL (SIG_ADC)								//A/D converter in interrupt mode
  59:main.c        **** {	
 2452               	
 2454               	.LM201:
 2455 0d2e 1F92      		lds r24,ad_channel_select
 2456 0d30 0F92      		cpi r24,lo8(1)
 2457 0d32 0FB6      		brne .L99
 2459 0d36 0090 5B00 	.LM202:
 2460 0d3a 0F92      		ldi r30,lo8(120)
 2461 0d3c 1124      		ldi r31,hi8(120)
 2462 0d3e 2F93      		ld r24,Z
 2463 0d40 3F93      		mov r24,r24
 2464 0d42 4F93      		ldi r25,lo8(0)
 2465 0d44 5F93      		ldi r26,lo8(0)
 2466 0d46 6F93      		ldi r27,hi8(0)
 2467 0d48 7F93      		sts ulangle,r24
 2468 0d4a 8F93      		sts (ulangle)+1,r25
 2469 0d4c 9F93      		sts (ulangle)+2,r26
 2470 0d4e AF93      		sts (ulangle)+3,r27
 2472 0d52 EF93      	.LM203:
 2473 0d54 FF93      		ldi r30,lo8(121)
 2474 0d56 DF93      		ldi r31,hi8(121)
 2475 0d58 CF93      		ld r24,Z
 2476 0d5a CDB7      		mov r24,r24
 2477 0d5c DEB7      		ldi r25,lo8(0)
 2478               		mov r25,r24
 2479               		clr r24
  60:main.c        **** 	if (ad_channel_select == 0)					// Geschwindigkeit (ADC 1), EXT1 - 17
 2480               	c r19,7
 2481               		com r20
 2482 0d5e 8091 0000 		mov r21,r20
 2483 0d62 8823      		lds r24,ulangle
 2484 0d64 01F4      		lds r25,(ulangle)+1
  61:main.c        **** 	{
  62:main.c        **** 		ulspeed = ADCL;
 2485               	r26,(ulangle)+2
 2486               		lds r27,(ulangle)+3
 2487 0d66 E8E7      		or r24,r18
 2488 0d68 F0E0      		or r25,r19
 2489 0d6a 8081      		or r26,r20
 2490 0d6c 882F      		or r27,r21
 2491 0d6e 90E0      		sts ulangle,r24
 2492 0d70 A0E0      		sts (ulangle)+1,r25
 2493 0d72 B0E0      		sts (ulangle)+2,r26
 2494 0d74 8093 0000 		sts (ulangle)+3,r27
 2496 0d7c A093 0000 	.LM204:
 2497 0d80 B093 0000 		sts ad_channel_select,__zero_reg__
  63:main.c        **** 		ulspeed |= (ADCH<<8);
 2498               	78,.LM205-.LFBB20
 2499               	.LM205:
 2500 0d84 E9E7      		ldi r30,lo8(124)
 2501 0d86 F0E0      		ldi r31,hi8(124)
 2502 0d88 8081      		ldi r24,lo8(65)
 2503 0d8a 882F      		st Z,r24
 2504 0d8c 90E0      	.L99:
 2506 0d90 8827      	.LM206:
 2507 0d92 9C01      		lds r24,ulangle
 2508 0d94 4427      		lds r25,(ulangle)+1
 2509 0d96 37FD      		lds r26,(ulangle)+2
 2510 0d98 4095      		lds r27,(ulangle)+3
 2511 0d9a 542F      		cpi r24,lo8(128)
 2512 0d9c 8091 0000 		cpc r25,__zero_reg__
 2513 0da0 9091 0000 		cpc r26,__zero_reg__
 2514 0da4 A091 0000 		cpc r27,__zero_reg__
 2515 0da8 B091 0000 		brsh .L100
 2517 0dae 932B      	.LM207:
 2518 0db0 A42B      		ldi r24,lo8(4)
 2519 0db2 B52B      		sts change,r24
 2521 0db8 9093 0000 	.LM208:
 2522 0dbc A093 0000 		sts direction,__zero_reg__
 2523 0dc0 B093 0000 		rjmp .L101
  64:main.c        **** 		//ulspeed &= 0x3ff; 
  65:main.c        **** 		ad_channel_select = 1;
 2524               	209-.LFBB20
 2525               	.LM209:
 2526 0dc4 81E0      		lds r24,ulangle
 2527 0dc6 8093 0000 		lds r25,(ulangle)+1
  66:main.c        **** 		//ADCSRA &= ~(1 << ADEN);		
  67:main.c        **** 		ADMUX = 0x40 | AD_PIN_0;
 2528               	 r26,(ulangle)+2
 2529               		lds r27,(ulangle)+3
 2530 0dca ECE7      		cpi r24,lo8(128)
 2531 0dcc F0E0      		cpc r25,__zero_reg__
 2532 0dce 80E4      		cpc r26,__zero_reg__
 2533 0dd0 8083      		cpc r27,__zero_reg__
 2534 0dd2 00C0      		brlo .L102
 2535               		lds r24,ulangle
  68:main.c        **** 		//ADCSRA |= (1 << ADEN);
  69:main.c        **** 
  70:main.c        **** 	}
  71:main.c        **** 	else if (ad_channel_select == 1)			//Lenkeinschlag (ADC 0), EXT1 - 16
 2536               	,(ulangle)+1
 2537               		lds r26,(ulangle)+2
 2538 0dd4 8091 0000 		lds r27,(ulangle)+3
 2539 0dd8 8130      		cpi r24,lo8(255)
 2540 0dda 01F4      		cpc r25,__zero_reg__
  72:main.c        **** 	{
  73:main.c        **** 		ulangle = ADCL;
 2541               	r26,__zero_reg__
 2542               		cpc r27,__zero_reg__
 2543 0ddc E8E7      		breq .+2
 2544 0dde F0E0      		brsh .L102
 2546 0de2 882F      	.LM210:
 2547 0de4 90E0      		ldi r24,lo8(3)
 2548 0de6 A0E0      		sts change,r24
 2550 0dea 8093 0000 	.LM211:
 2551 0dee 9093 0000 		sts direction,__zero_reg__
 2552 0df2 A093 0000 		rjmp .L101
 2553 0df6 B093 0000 	.L102:
  74:main.c        **** 		ulangle |= (ADCH<<8);
 2554               	104,.LM212-.LFBB20
 2555               	.LM212:
 2556 0dfa E9E7      		lds r24,ulangle
 2557 0dfc F0E0      		lds r25,(ulangle)+1
 2558 0dfe 8081      		lds r26,(ulangle)+2
 2559 0e00 882F      		lds r27,(ulangle)+3
 2560 0e02 90E0      		cpi r24,lo8(255)
 2561 0e04 982F      		cpc r25,__zero_reg__
 2562 0e06 8827      		cpc r26,__zero_reg__
 2563 0e08 9C01      		cpc r27,__zero_reg__
 2564 0e0a 4427      		breq .L103
 2565 0e0c 37FD      		brlo .L103
 2566 0e0e 4095      		lds r24,ulangle
 2567 0e10 542F      		lds r25,(ulangle)+1
 2568 0e12 8091 0000 		lds r26,(ulangle)+2
 2569 0e16 9091 0000 		lds r27,(ulangle)+3
 2570 0e1a A091 0000 		cpi r24,lo8(384)
 2571 0e1e B091 0000 		ldi r18,hi8(384)
 2572 0e22 822B      		cpc r25,r18
 2573 0e24 932B      		ldi r18,hlo8(384)
 2574 0e26 A42B      		cpc r26,r18
 2575 0e28 B52B      		ldi r18,hhi8(384)
 2576 0e2a 8093 0000 		cpc r27,r18
 2577 0e2e 9093 0000 		brsh .L103
 2579 0e36 B093 0000 	.LM213:
  75:main.c        **** 		//ulangle &= 0x3ff; 
  76:main.c        **** 		ad_channel_select = 0;		
 2580               	e,r24
 2582 0e3a 1092 0000 	.LM214:
  77:main.c        **** 		//ADCSRA &= ~(1 << ADEN);
  78:main.c        **** 		ADMUX = 0x40 | AD_PIN_1;
 2583               	s direction,__zero_reg__
 2584               		rjmp .L101
 2585 0e3e ECE7      	.L103:
 2587 0e42 81E4      	.LM215:
 2588 0e44 8083      		lds r24,ulangle
 2589               		lds r25,(ulangle)+1
  79:main.c        **** 		//ADCSRA |= (1 << ADEN);
  80:main.c        **** 	}
  81:main.c        **** /*	
  82:main.c        **** 	if ((ulangle>=0)&&(ulangle<512))
  83:main.c        ****  	{
  84:main.c        ****  		change = 1;
  85:main.c        **** 		direction = 0;
  86:main.c        ****  	}
  87:main.c        ****  	else if ((ulangle>=512))
  88:main.c        ****  	{
  89:main.c        ****  		change = 1;
  90:main.c        **** 		direction = 1;
  91:main.c        ****  	}
  92:main.c        **** */	
  93:main.c        **** 
  94:main.c        **** 	if ((ulangle>=0)&&(ulangle<128))
 2590               	6,(ulangle)+2
 2591               		lds r27,(ulangle)+3
 2592 0e46 8091 0000 		cpi r24,lo8(384)
 2593 0e4a 9091 0000 		ldi r18,hi8(384)
 2594 0e4e A091 0000 		cpc r25,r18
 2595 0e52 B091 0000 		ldi r18,hlo8(384)
 2596 0e56 8038      		cpc r26,r18
 2597 0e58 9105      		ldi r18,hhi8(384)
 2598 0e5a A105      		cpc r27,r18
 2599 0e5c B105      		brlo .L104
 2600 0e5e 00F4      		lds r24,ulangle
  95:main.c        ****  	{
  96:main.c        ****  		change = 4;
 2601               	langle)+1
 2602               		lds r26,(ulangle)+2
 2603 0e60 84E0      		lds r27,(ulangle)+3
 2604 0e62 8093 0000 		cpi r24,lo8(512)
  97:main.c        **** 		direction = 0;
 2605               	 r18,hi8(512)
 2606               		cpc r25,r18
 2607 0e66 1092 0000 		ldi r18,hlo8(512)
 2608 0e6a 00C0      		cpc r26,r18
 2609               		ldi r18,hhi8(512)
  98:main.c        ****  	}
  99:main.c        ****  	else if ((ulangle>=128)&&(ulangle<256))
 2610               	r27,r18
 2611               		brsh .L104
 2613 0e70 9091 0000 	.LM216:
 2614 0e74 A091 0000 		ldi r24,lo8(1)
 2615 0e78 B091 0000 		sts change,r24
 2617 0e7e 9105      	.LM217:
 2618 0e80 A105      		sts direction,__zero_reg__
 2619 0e82 B105      		rjmp .L101
 2620 0e84 00F0      	.L104:
 2622 0e8a 9091 0000 	.LM218:
 2623 0e8e A091 0000 		lds r24,ulangle
 2624 0e92 B091 0000 		lds r25,(ulangle)+1
 2625 0e96 8F3F      		lds r26,(ulangle)+2
 2626 0e98 9105      		lds r27,(ulangle)+3
 2627 0e9a A105      		cpi r24,lo8(512)
 2628 0e9c B105      		ldi r18,hi8(512)
 2629 0e9e 01F0      		cpc r25,r18
 2630 0ea0 00F4      		ldi r18,hlo8(512)
 100:main.c        ****  	{
 101:main.c        ****  		change = 3;
 2631               	,hhi8(512)
 2632               		cpc r27,r18
 2633 0ea2 83E0      		brlo .L105
 2634 0ea4 8093 0000 		lds r24,ulangle
 102:main.c        **** 		direction = 0;
 2635               	 r25,(ulangle)+1
 2636               		lds r26,(ulangle)+2
 2637 0ea8 1092 0000 		lds r27,(ulangle)+3
 2638 0eac 00C0      		cpi r24,lo8(640)
 2639               		ldi r18,hi8(640)
 103:main.c        ****  	}
 104:main.c        ****  	else if ((ulangle>=256)&&(ulangle<384))
 2640               	r25,r18
 2641               		ldi r18,hlo8(640)
 2642 0eae 8091 0000 		cpc r26,r18
 2643 0eb2 9091 0000 		ldi r18,hhi8(640)
 2644 0eb6 A091 0000 		cpc r27,r18
 2645 0eba B091 0000 		brsh .L105
 2647 0ec0 9105      	.LM219:
 2648 0ec2 A105      		ldi r24,lo8(1)
 2649 0ec4 B105      		sts change,r24
 2651 0ec8 00F0      	.LM220:
 2652 0eca 8091 0000 		ldi r24,lo8(1)
 2653 0ece 9091 0000 		sts direction,r24
 2654 0ed2 A091 0000 		rjmp .L101
 2655 0ed6 B091 0000 	.L105:
 2657 0edc 21E0      	.LM221:
 2658 0ede 9207      		lds r24,ulangle
 2659 0ee0 20E0      		lds r25,(ulangle)+1
 2660 0ee2 A207      		lds r26,(ulangle)+2
 2661 0ee4 20E0      		lds r27,(ulangle)+3
 2662 0ee6 B207      		cpi r24,lo8(640)
 2663 0ee8 00F4      		ldi r18,hi8(640)
 105:main.c        ****  	{
 106:main.c        ****  		change = 2;
 2664               	o8(640)
 2665               		cpc r26,r18
 2666 0eea 82E0      		ldi r18,hhi8(640)
 2667 0eec 8093 0000 		cpc r27,r18
 107:main.c        **** 		direction = 0;
 2668               	o .L106
 2669               		lds r24,ulangle
 2670 0ef0 1092 0000 		lds r25,(ulangle)+1
 2671 0ef4 00C0      		lds r26,(ulangle)+2
 2672               		lds r27,(ulangle)+3
 108:main.c        ****  	}
 109:main.c        ****  	else if ((ulangle>=384)&&(ulangle<512))
 2673               	r24,lo8(768)
 2674               		ldi r18,hi8(768)
 2675 0ef6 8091 0000 		cpc r25,r18
 2676 0efa 9091 0000 		ldi r18,hlo8(768)
 2677 0efe A091 0000 		cpc r26,r18
 2678 0f02 B091 0000 		ldi r18,hhi8(768)
 2679 0f06 8038      		cpc r27,r18
 2680 0f08 21E0      		brsh .L106
 2682 0f0c 20E0      	.LM222:
 2683 0f0e A207      		ldi r24,lo8(2)
 2684 0f10 20E0      		sts change,r24
 2686 0f14 00F0      	.LM223:
 2687 0f16 8091 0000 		ldi r24,lo8(1)
 2688 0f1a 9091 0000 		sts direction,r24
 2689 0f1e A091 0000 		rjmp .L101
 2690 0f22 B091 0000 	.L106:
 2692 0f28 22E0      	.LM224:
 2693 0f2a 9207      		lds r24,ulangle
 2694 0f2c 20E0      		lds r25,(ulangle)+1
 2695 0f2e A207      		lds r26,(ulangle)+2
 2696 0f30 20E0      		lds r27,(ulangle)+3
 2697 0f32 B207      		cpi r24,lo8(768)
 2698 0f34 00F4      		ldi r18,hi8(768)
 110:main.c        ****  	{
 111:main.c        ****  		change = 1;
 2699               	(768)
 2700               		cpc r26,r18
 2701 0f36 81E0      		ldi r18,hhi8(768)
 2702 0f38 8093 0000 		cpc r27,r18
 112:main.c        **** 		direction = 0;
 2703               	o .L107
 2704               		lds r24,ulangle
 2705 0f3c 1092 0000 		lds r25,(ulangle)+1
 2706 0f40 00C0      		lds r26,(ulangle)+2
 2707               		lds r27,(ulangle)+3
 113:main.c        ****  	}
 114:main.c        ****  	else if ((ulangle>=512)&&(ulangle<640))
 2708               	r24,lo8(896)
 2709               		ldi r18,hi8(896)
 2710 0f42 8091 0000 		cpc r25,r18
 2711 0f46 9091 0000 		ldi r18,hlo8(896)
 2712 0f4a A091 0000 		cpc r26,r18
 2713 0f4e B091 0000 		ldi r18,hhi8(896)
 2714 0f52 8030      		cpc r27,r18
 2715 0f54 22E0      		brsh .L107
 2717 0f58 20E0      	.LM225:
 2718 0f5a A207      		ldi r24,lo8(3)
 2719 0f5c 20E0      		sts change,r24
 2721 0f60 00F0      	.LM226:
 2722 0f62 8091 0000 		ldi r24,lo8(1)
 2723 0f66 9091 0000 		sts direction,r24
 2724 0f6a A091 0000 		rjmp .L101
 2725 0f6e B091 0000 	.L107:
 2727 0f74 22E0      	.LM227:
 2728 0f76 9207      		lds r24,ulangle
 2729 0f78 20E0      		lds r25,(ulangle)+1
 2730 0f7a A207      		lds r26,(ulangle)+2
 2731 0f7c 20E0      		lds r27,(ulangle)+3
 2732 0f7e B207      		cpi r24,lo8(896)
 2733 0f80 00F4      		ldi r18,hi8(896)
 115:main.c        ****  	{
 116:main.c        ****  		change = 1;
 2734               	(896)
 2735               		cpc r26,r18
 2736 0f82 81E0      		ldi r18,hhi8(896)
 2737 0f84 8093 0000 		cpc r27,r18
 117:main.c        **** 		direction = 1;
 2738               	o .L101
 2740 0f88 81E0      	.LM228:
 2741 0f8a 8093 0000 		ldi r24,lo8(4)
 2742 0f8e 00C0      		sts change,r24
 118:main.c        ****  	}
 119:main.c        ****  	else if ((ulangle>=640)&&(ulangle<768))
 2744               	:
 2745               		ldi r24,lo8(1)
 2746 0f90 8091 0000 		sts direction,r24
 2747 0f94 9091 0000 	.L101:
 2749 0f9c B091 0000 	.LM230:
 2750 0fa0 8038      		lds r24,direction
 2751 0fa2 22E0      		tst r24
 2752 0fa4 9207      		breq .+2
 2753 0fa6 20E0      		rjmp .L108
 2755 0faa 20E0      	.LM231:
 2756 0fac B207      		ldi r26,lo8(46)
 2757 0fae 00F0      		ldi r27,hi8(46)
 2758 0fb0 8091 0000 		ldi r30,lo8(46)
 2759 0fb4 9091 0000 		ldi r31,hi8(46)
 2760 0fb8 A091 0000 		ld r24,Z
 2761 0fbc B091 0000 		andi r24,lo8(-17)
 2762 0fc0 8030      		st X,r24
 2764 0fc4 9207      	.LM232:
 2765 0fc6 20E0      		lds r24,ulspeed
 2766 0fc8 A207      		lds r25,(ulspeed)+1
 2767 0fca 20E0      		lds r26,(ulspeed)+2
 2768 0fcc B207      		lds r27,(ulspeed)+3
 2769 0fce 00F4      		ldi r18,lo8(10)
 120:main.c        ****  	{
 121:main.c        ****  		change = 2;
 2770               	hlo8(10)
 2771               		ldi r21,hhi8(10)
 2772 0fd0 82E0      		movw r22,r24
 2773 0fd2 8093 0000 		movw r24,r26
 122:main.c        **** 		direction = 1;
 2775               	.LM232:
 2776 0fd6 81E0      		lds r24,ulspeed
 2777 0fd8 8093 0000 		lds r25,(ulspeed)+1
 2778 0fdc 00C0      		lds r26,(ulspeed)+2
 2779               		lds r27,(ulspeed)+3
 123:main.c        ****  	}
 124:main.c        ****  	else if ((ulangle>=768)&&(ulangle<896))
 2780               	i r26,lo8(46)
 2781               		ldi r27,hi8(46)
 2782 0fde 8091 0000 		ldi r30,lo8(46)
 2783 0fe2 9091 0000 		ldi r31,hi8(46)
 2784 0fe6 A091 0000 		ld r24,Z
 2785 0fea B091 0000 		andi r24,lo8(-17)
 2786 0fee 8030      		st X,r24
 2788 0ff2 9207      	.LM232:
 2789 0ff4 20E0      		lds r24,ulspeed
 2790 0ff6 A207      		lds r25,(ulspeed)+1
 2791 0ff8 20E0      		lds r26,(ulspeed)+2
 2792 0ffa B207      		lds r27,(ulspeed)+3
 2793 0ffc 00F0      		ldi r18,lo8(10)
 2794 0ffe 8091 0000 		ldi r19,hi8(10)
 2795 1002 9091 0000 		ldi r20,hlo8(10)
 2796 1006 A091 0000 		ldi r21,hhi8(10)
 2797 100a B091 0000 		movw r22,r24
 2798 100e 8038      		movw r24,r26
 2799 1010 23E0      		call __udivmodsi4
 2800 1012 9207      		movw r26,r20
 2801 1014 20E0      		movw r24,r18
 2802 1016 A207      		sts speed_right,r24
 2803 1018 20E0      		sts (speed_right)+1,r25
 2804 101a B207      		sts (speed_right)+2,r26
 2805 101c 00F4      		sts (speed_right)+3,r27
 125:main.c        ****  	{
 126:main.c        ****  		change = 3;
 2806               	10)
 2807               		ldi r20,hlo8(10)
 2808 101e 83E0      		ldi r21,hhi8(10)
 2809 1020 8093 0000 		movw r22,r24
 127:main.c        **** 		direction = 1;
 2810               	-17)
 2811               		st X,r24
 2813 1026 8093 0000 	.LM232:
 2814 102a 00C0      		lds r24,ulspeed
 2815               		lds r25,(ulspeed)+1
 128:main.c        ****  	}
 129:main.c        ****  	else if ((ulangle>=896))
 2816               	
 2818 102c 8091 0000 	.LM231:
 2819 1030 9091 0000 		ldi r26,lo8(46)
 2820 1034 A091 0000 		ldi r27,hi8(46)
 2821 1038 B091 0000 		ldi r30,lo8(46)
 2822 103c 8038      		ldi r31,hi8(46)
 2823 103e 23E0      		ld r24,Z
 2824 1040 9207      		andi r24,lo8(-17)
 2825 1042 20E0      		st X,r24
 2827 1046 20E0      	.LM232:
 2828 1048 B207      		lds r24,ulspeed
 2829 104a 00F0      		lds r25,(ulspeed)+1
 130:main.c        ****  	{
 131:main.c        ****  		change = 4;
 2830               	
 2832 104c 84E0      	.LM231:
 2833 104e 8093 0000 		ldi r26,lo8(46)
 132:main.c        **** 		direction = 1;
 2834               	ge,r24
 2836 1052 81E0      	.LM229:
 2837 1054 8093 0000 		ldi r24,lo8(1)
 2838               		sts direction,r24
 133:main.c        ****  	}
 134:main.c        **** 
 135:main.c        **** 	if (direction == 0)			//Lenkrad nach links eingeschlagen
 2839               	:
 2841 1058 8091 0000 	.LM230:
 2842 105c 8823      		lds r24,direction
 2843 105e 01F0      		tst r24
 2844 1060 00C0      		breq .+2
 136:main.c        **** 	{
 137:main.c        **** 	 	PORTE &= ~(0x01 << 4);											//Status LED on
 2845               	.L108
 2847 1062 AEE2      	.LM231:
 2848 1064 B0E0      		ldi r26,lo8(46)
 2849 1066 EEE2      		ldi r27,hi8(46)
 2850 1068 F0E0      		ldi r30,lo8(46)
 2851 106a 8081      		ldi r31,hi8(46)
 2852 106c 8F7E      		ld r24,Z
 2853 106e 8C93      		andi r24,lo8(-17)
 138:main.c        **** 		speed_right = (ulspeed / 10);
 2854               	01:
 2856 1070 8091 0000 	.LM230:
 2857 1074 9091 0000 		lds r24,direction
 2858 1078 A091 0000 		tst r24
 2859 107c B091 0000 		breq .+2
 2860 1080 2AE0      		rjmp .L108
 2862 1084 40E0      	.LM231:
 2863 1086 50E0      		ldi r26,lo8(46)
 2864 1088 BC01      		ldi r27,hi8(46)
 2865 108a CD01      		ldi r30,lo8(46)
 2866 108c 0E94 0000 		ldi r31,hi8(46)
 2867 1090 DA01      		ld r24,Z
 2868 1092 C901      		andi r24,lo8(-17)
 2869 1094 8093 0000 		st X,r24
 2871 109c A093 0000 	.LM232:
 2872 10a0 B093 0000 		lds r24,ulspeed
 139:main.c        **** 		speed_left = ((ulspeed * (10 - change)) / 100);
 2873               	1
 2874               		lds r26,(ulspeed)+2
 2875 10a4 8091 0000 		lds r27,(ulspeed)+3
 2876 10a8 282F      		ldi r18,lo8(10)
 2877 10aa 30E0      		ldi r19,hi8(10)
 2878 10ac 8AE0      		ldi r20,hlo8(10)
 2879 10ae 90E0      		ldi r21,hhi8(10)
 2880 10b0 821B      		movw r22,r24
 2881 10b2 930B      		movw r24,r26
 2882 10b4 AA27      		call __udivmodsi4
 2883 10b6 97FD      		movw r26,r20
 2884 10b8 A095      		movw r24,r18
 2885 10ba BA2F      		sts speed_right,r24
 2886 10bc 2091 0000 		sts (speed_right)+1,r25
 2887 10c0 3091 0000 		sts (speed_right)+2,r26
 2888 10c4 4091 0000 		sts (speed_right)+3,r27
 2890 10cc BC01      	.LM233:
 2891 10ce CD01      		lds r24,change
 2892 10d0 0E94 0000 		mov r18,r24
 2893 10d4 DC01      		ldi r19,lo8(0)
 2894 10d6 CB01      		ldi r24,lo8(10)
 2895 10d8 24E6      		ldi r25,hi8(10)
 2896 10da 30E0      		sub r24,r18
 2897 10dc 40E0      		sbc r25,r19
 2898 10de 50E0      		clr r26
 2899 10e0 BC01      		sbrc r25,7
 2900 10e2 CD01      		com r26
 2901 10e4 0E94 0000 		mov r27,r26
 2902 10e8 DA01      		lds r18,ulspeed
 2903 10ea C901      		lds r19,(ulspeed)+1
 2904 10ec 8093 0000 		lds r20,(ulspeed)+2
 2905 10f0 9093 0000 		lds r21,(ulspeed)+3
 2906 10f4 A093 0000 		movw r22,r24
 2907 10f8 B093 0000 		movw r24,r26
 2908 10fc 00C0      		call __mulsi3
 2909               		movw r26,r24
 140:main.c        **** 	}
 141:main.c        **** 	else if (direction == 1)	//Lenkrad nach rechts eingeschlagen
 2910               	c r25,r19
 2911               		clr r26
 2912 10fe 8091 0000 		sbrc r25,7
 2913 1102 8130      		com r26
 2914 1104 01F0      		mov r27,r26
 2915 1106 00C0      		lds r18,ulspeed
 142:main.c        **** 	{
 143:main.c        **** 		PORTE |= (0x01 << 4);											//Status LED off
 2916               	68,0,139,.LM233-.LFBB20
 2917               	.LM233:
 2918 1108 AEE2      		lds r24,change
 2919 110a B0E0      		mov r18,r24
 2920 110c EEE2      		ldi r19,lo8(0)
 2921 110e F0E0      		ldi r24,lo8(10)
 2922 1110 8081      		ldi r25,hi8(10)
 2923 1112 8061      		sub r24,r18
 2924 1114 8C93      		sbc r25,r19
 144:main.c        **** 		speed_right = ((ulspeed * (10 - change)) / 100);
 2925               	+1,r25
 2926               		sts (speed_right)+2,r26
 2927 1116 8091 0000 		sts (speed_right)+3,r27
 2929 111c 30E0      	.LM233:
 2930 111e 8AE0      		lds r24,change
 2931 1120 90E0      		mov r18,r24
 2932 1122 821B      		ldi r19,lo8(0)
 2933 1124 930B      		ldi r24,lo8(10)
 2934 1126 AA27      		ldi r25,hi8(10)
 2935 1128 97FD      		sub r24,r18
 2936 112a A095      		sbc r25,r19
 2937 112c BA2F      		clr r26
 2938 112e 2091 0000 		sbrc r25,7
 2939 1132 3091 0000 		com r26
 2940 1136 4091 0000 		mov r27,r26
 2941 113a 5091 0000 		lds r18,ulspeed
 2942 113e BC01      		lds r19,(ulspeed)+1
 2943 1140 CD01      		lds r20,(ulspeed)+2
 2944 1142 0E94 0000 		lds r21,(ulspeed)+3
 2945 1146 DC01      		movw r22,r24
 2946 1148 CB01      		movw r24,r26
 2947 114a 24E6      		call __mulsi3
 2948 114c 30E0      		movw r26,r24
 2949 114e 40E0      		movw r24,r22
 2950 1150 50E0      		ldi r18,lo8(100)
 2951 1152 BC01      		ldi r19,hi8(100)
 2952 1154 CD01      		ldi r20,hlo8(100)
 2953 1156 0E94 0000 		ldi r21,hhi8(100)
 2954 115a DA01      		movw r22,r24
 2955 115c C901      		movw r24,r26
 2956 115e 8093 0000 		call __udivmodsi4
 2957 1162 9093 0000 		movw r26,r20
 2958 1166 A093 0000 		movw r24,r18
 2959 116a B093 0000 		sts speed_left,r24
 145:main.c        **** 		speed_left = (ulspeed / 10);
 2960               	w r24,r22
 2961               		ldi r18,lo8(100)
 2962 116e 8091 0000 		ldi r19,hi8(100)
 2963 1172 9091 0000 		ldi r20,hlo8(100)
 2964 1176 A091 0000 		ldi r21,hhi8(100)
 2965 117a B091 0000 		movw r22,r24
 2966 117e 2AE0      		movw r24,r26
 2967 1180 30E0      		call __udivmodsi4
 2968 1182 40E0      		movw r26,r20
 2969 1184 50E0      		movw r24,r18
 2970 1186 BC01      		sts speed_left,r24
 2971 1188 CD01      		sts (speed_left)+1,r25
 2972 118a 0E94 0000 		sts (speed_left)+2,r26
 2973 118e DA01      		sts (speed_left)+3,r27
 2974 1190 C901      		rjmp .L110
 2975 1192 8093 0000 	.L108:
 2977 119a A093 0000 	.LM234:
 2978 119e B093 0000 		lds r24,direction
 2979               		cpi r24,lo8(1)
 2980               		breq .+2
 146:main.c        **** 	}
 147:main.c        **** }
 2981               	peed_left)+1,r25
 2982               		sts (speed_left)+2,r26
 2983 11a2 CF91      		sts (speed_left)+3,r27
 2984 11a4 DF91      		rjmp .L110
 2985 11a6 FF91      	.L108:
 2987 11aa BF91      	.LM234:
 2988 11ac AF91      		lds r24,direction
 2989 11ae 9F91      		cpi r24,lo8(1)
 2990 11b0 8F91      		breq .+2
 2991 11b2 7F91      		rjmp .L110
 2993 11b6 5F91      	.LM235:
 2994 11b8 4F91      		ldi r26,lo8(46)
 2995 11ba 3F91      		ldi r27,hi8(46)
 2996 11bc 2F91      		ldi r30,lo8(46)
 2997 11be 0F90      		ldi r31,hi8(46)
 2998 11c0 0092 5B00 		ld r24,Z
 2999 11c4 0F90      		ori r24,lo8(16)
 3000 11c6 0FBE      		st X,r24
 3002 11ca 1F90      	.LM236:
 3003 11cc 1895      		lds r24,change
 3004               		mov r18,r24
 3005               		ldi r19,lo8(0)
 3006               		ldi r24,lo8(10)
 3007               		ldi r25,hi8(10)
 3008               		sub r24,r18
 3009               		sbc r25,r19
 148:main.c        **** 
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** int main(void)								//main program
 153:main.c        **** {
 3010               	,r24
 3012               	.LM236:
 3013 11ce DF93      		lds r24,change
 3014 11d0 CF93      		mov r18,r24
 3015 11d2 CDB7      		ldi r19,lo8(0)
 3016 11d4 DEB7      		ldi r24,lo8(10)
 3017               		ldi r25,hi8(10)
 3018               		sub r24,r18
 154:main.c        **** 	
 155:main.c        **** 	DDRB |= (1 << 6)|(1 << 5);		//enable OC1B (PB6) & OC1A (PB5) as output
 3019               	,lo8(16)
 3020               		st X,r24
 3022 11d8 B0E0      	.LM236:
 3023 11da E4E2      		lds r24,change
 3024 11dc F0E0      		mov r18,r24
 3025 11de 8081      		ldi r19,lo8(0)
 3026 11e0 8066      		ldi r24,lo8(10)
 3027 11e2 8C93      		ldi r25,hi8(10)
 156:main.c        **** 	DDRE |= (1 << 4);
 3028               	r24,Z
 3029               		ori r24,lo8(16)
 3030 11e4 ADE2      		st X,r24
 3032 11e8 EDE2      	.LM236:
 3033 11ea F0E0      		lds r24,change
 3034 11ec 8081      		mov r18,r24
 3035 11ee 8061      		ldi r19,lo8(0)
 3036 11f0 8C93      		ldi r24,lo8(10)
 157:main.c        **** 
 158:main.c        **** 
 159:main.c        **** 	sei();										//global interrupt enable on
 3037               	i r31,hi8(46)
 3038               		ld r24,Z
 3039               		ori r24,lo8(16)
 3040               		st X,r24
 3042               	.LM236:
 160:main.c        **** 	ADMUX = 0x40 | AD_PIN_0;					//connect to AD_PIN
 3043               	B20
 3044               	.LM235:
 3045               		ldi r26,lo8(46)
 3046 11f4 ECE7      		ldi r27,hi8(46)
 3047 11f6 F0E0      		ldi r30,lo8(46)
 3048 11f8 80E4      		ldi r31,hi8(46)
 3049 11fa 8083      		ld r24,Z
 161:main.c        **** 	ADCSRA = 0x8f;								//enable ad converter
 3050               	tion
 3051               		cpi r24,lo8(1)
 3052 11fc EAE7      		breq .+2
 3053 11fe F0E0      		rjmp .L110
 3055 1202 8083      	.LM235:
 162:main.c        **** 	ADCSRA |= 0x60;								//start converter
 3056               	ft)+3,r27
 3057               		rjmp .L110
 3058 1204 AAE7      	.L108:
 3060 1208 EAE7      	.LM234:
 3061 120a F0E0      		lds r24,direction
 3062 120c 8081      		cpi r24,lo8(1)
 3063 120e 8066      		breq .+2
 3064 1210 8C93      		rjmp .L110
 163:main.c        **** 
 164:main.c        **** 	PWM_TIM1_Init();
 3065               	r25
 3066               		sts (speed_left)+2,r26
 3067 1212 0E94 0000 		sts (speed_left)+3,r27
 3068               		rjmp .L110
 3069 1216 00C0      	.L108:
 3071               	.LM234:
 3072               		lds r24,direction
 3073               		cpi r24,lo8(1)
 3074               		breq .+2
 3075               		rjmp .L110
 3077               	.LM235:
 3078               		ldi r26,lo8(46)
 3079               		ldi r27,hi8(46)
 3080               		ldi r30,lo8(46)
 3081               		ldi r31,hi8(46)
 3082               		ld r24,Z
 3083               		ori r24,lo8(16)
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:5      *ABS*:00000034 __CCP__
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:76     .text:00000000 can_set_baudrate
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:276    .text:00000112 can_set_interrupt
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:455    .text:0000021a can_select_mob
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:488    .text:0000023a can_set_id_mask
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:595    .text:000002da can_set_id
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:719    .text:0000039e can_get_mob_id
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:883    .text:000004a6 can_set_mob_mode
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1160   .text:0000064a can_get_mob_mode
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1347   .text:00000760 can_set_mob_data
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1529   .text:0000085a can_get_mob_data
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1634   .text:000008f0 can_set_mob_interrupt
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1719   .text:0000096a can_get_mob_interrupt
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1823   .text:000009e6 can_clear_mob_interrupt
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1912   .text:00000a64 can_init
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:1971   .text:00000aac can_enable_mob
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2045   .text:00000b0e can_disable_mob
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2084   .text:00000b34 can_send_data
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2205   .bss:00000000 ad_channel_select
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2211   .bss:00000001 ulspeed
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2217   .bss:00000005 ulangle
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2223   .bss:00000009 timer0_cnt
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2229   .bss:0000000a change
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2235   .bss:0000000b direction
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2241   .bss:0000000c overflow
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2247   .bss:00000010 speed_left
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2253   .bss:00000014 speed_right
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2259   .text:00000bdc PWM_TIM1_Init
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2294   .text:00000bfa __vector_17
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:2451   .text:00000d2e __vector_25
C:\DOCUME~1\SMARTG~1\LOCALS~1\Temp/ccCJfQva.s:3009   .text:000011ce main

UNDEFINED SYMBOLS
__udivmodsi4
__mulsi3
__do_clear_bss

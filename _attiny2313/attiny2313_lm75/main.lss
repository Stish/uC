
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000262  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800064  00800064  000002fa  2**0
                  ALLOC
  3 .stab         00000a20  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000082e  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	4f c0       	rjmp	.+158    	; 0xac <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__vector_9>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e6       	ldi	r30, 0x62	; 98
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	aa 36       	cpi	r26, 0x6A	; 106
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	db d0       	rcall	.+438    	; 0x20c <main>
  56:	03 c1       	rjmp	.+518    	; 0x25e <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_9>:
void lm75_read_temp(void);
void scl_clk(void);
unsigned char get_data(void);

ISR (USART_TX_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	2f 93       	push	r18
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
  6a:	ef 93       	push	r30
  6c:	ff 93       	push	r31
	if (send_data == 1)
  6e:	20 91 66 00 	lds	r18, 0x0066
  72:	21 30       	cpi	r18, 0x01	; 1
  74:	89 f4       	brne	.+34     	; 0x98 <__vector_9+0x3e>
	{
		UDR = tx_frame[tx_frame_index];
  76:	80 91 67 00 	lds	r24, 0x0067
  7a:	e8 2f       	mov	r30, r24
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	e0 5a       	subi	r30, 0xA0	; 160
  80:	ff 4f       	sbci	r31, 0xFF	; 255
  82:	90 81       	ld	r25, Z
  84:	9c b9       	out	0x0c, r25	; 12
		tx_frame_index++;
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	80 93 67 00 	sts	0x0067, r24
		if (tx_frame_index == 3)
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	21 f4       	brne	.+8      	; 0x98 <__vector_9+0x3e>
		{
			tx_frame_index = 1;
  90:	20 93 67 00 	sts	0x0067, r18
			send_data = 0;
  94:	10 92 66 00 	sts	0x0066, r1
		}
	}
} 
  98:	ff 91       	pop	r31
  9a:	ef 91       	pop	r30
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	2f 91       	pop	r18
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_6>:

SIGNAL (SIG_TIMER0_OVF)								//a/d converter in interrupt mode
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	//TCNT0 = 0x01;
	
	timer0_cnt++;
  ba:	80 91 64 00 	lds	r24, 0x0064
  be:	90 91 65 00 	lds	r25, 0x0065
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	90 93 65 00 	sts	0x0065, r25
  c8:	80 93 64 00 	sts	0x0064, r24
	if (timer0_cnt == 61)
  cc:	cd 97       	sbiw	r24, 0x3d	; 61
  ce:	81 f4       	brne	.+32     	; 0xf0 <__stack+0x11>
	{
		PORTB ^= (0x01 << PB2);
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	94 e0       	ldi	r25, 0x04	; 4
  d4:	89 27       	eor	r24, r25
  d6:	88 bb       	out	0x18, r24	; 24
		timer0_cnt = 0;
  d8:	10 92 65 00 	sts	0x0065, r1
  dc:	10 92 64 00 	sts	0x0064, r1
		send_data = 1;
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	90 93 66 00 	sts	0x0066, r25
		UDR = tx_frame[0];
  e6:	80 91 60 00 	lds	r24, 0x0060
  ea:	8c b9       	out	0x0c, r24	; 12
		tx_frame_index = 1;
  ec:	90 93 67 00 	sts	0x0067, r25
	}
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <vTIMER0_ini>:
	}
}

void vTIMER0_ini (void)
{
	TCCR0A = 0x00 | (0 << COM0A1) | (0 << COM0A0) | (0 << COM0B1) | (0 << COM0B0) | (0 << WGM01) | (0 << WGM00);
  fe:	10 be       	out	0x30, r1	; 48
	// TCCR0A = 0x00
	TCCR0B = 0x00 | (0 << FOC0A) | (0 << FOC0B) | (0 << WGM02) | (1 << CS02) | (0 << CS01) | (0 << CS00); //100 - 256 prescaler
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	83 bf       	out	0x33, r24	; 51
	// TCCR0B = 0x01
	//TCNT0 = 0x05;
	// TCNT0 = 0
	TIMSK |= (0 << OCIE0B) | (1 << TOIE0) | (0 << OCIE0A);
 104:	89 b7       	in	r24, 0x39	; 57
 106:	82 60       	ori	r24, 0x02	; 2
 108:	89 bf       	out	0x39, r24	; 57
	// TIMSK = 0x02
}
 10a:	08 95       	ret

0000010c <scl_clk>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	98 2f       	mov	r25, r24
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <scl_clk+0x4>
}

void scl_clk(void)
{
	_delay_us(4);
	SCL_HIGH;
 114:	c1 9a       	sbi	0x18, 1	; 24
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <scl_clk+0xa>
	_delay_us(4);
	SCL_LOW;
 11a:	c1 98       	cbi	0x18, 1	; 24
	//_delay_us(10);
}
 11c:	08 95       	ret

0000011e <get_data>:
 11e:	8a e0       	ldi	r24, 0x0A	; 10
 120:	98 2f       	mov	r25, r24
 122:	9a 95       	dec	r25
 124:	f1 f7       	brne	.-4      	; 0x122 <get_data+0x4>
unsigned char get_data(void)
{
	unsigned char buffer = 0;
	
	_delay_us(4);
	SCL_HIGH;
 126:	c1 9a       	sbi	0x18, 1	; 24
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <get_data+0xa>
	_delay_us(4);
	if (PIN_SDA & (0x01 << SDA))
 12c:	86 b3       	in	r24, 0x16	; 22
	}
	else
	{
		buffer = 0;
	}
	SCL_LOW;
 12e:	c1 98       	cbi	0x18, 1	; 24

	return buffer;
 130:	81 70       	andi	r24, 0x01	; 1
 132:	08 95       	ret

00000134 <lm75_read_temp>:
	TIMSK |= (0 << OCIE0B) | (1 << TOIE0) | (0 << OCIE0A);
	// TIMSK = 0x02
}

void lm75_read_temp(void)
{
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	unsigned char i;
	
// ================================
	/* Start condition */
	SDA_HIGH;	
 13a:	c0 9a       	sbi	0x18, 0	; 24
 13c:	1a e0       	ldi	r17, 0x0A	; 10
 13e:	81 2f       	mov	r24, r17
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <lm75_read_temp+0xc>
	_delay_us(4);
	SCL_HIGH;
 144:	c1 9a       	sbi	0x18, 1	; 24
	//_delay_us(10);

	PORTD |= (0x01 << PD5);
 146:	95 9a       	sbi	0x12, 5	; 18
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <lm75_read_temp+0x16>
	_delay_us(1);
	PORTD &= ~(0x01 << PD5);
 14e:	95 98       	cbi	0x12, 5	; 18
	
	SDA_LOW;
 150:	c0 98       	cbi	0x18, 0	; 24
 152:	81 2f       	mov	r24, r17
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <lm75_read_temp+0x20>
	_delay_us(4);
	SCL_LOW;
 158:	c1 98       	cbi	0x18, 1	; 24
 15a:	81 2f       	mov	r24, r17
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <lm75_read_temp+0x28>
	_delay_us(4);
	/* Address bit 6 */
	SDA_HIGH;
 160:	c0 9a       	sbi	0x18, 0	; 24
	scl_clk();	
 162:	d4 df       	rcall	.-88     	; 0x10c <scl_clk>
	/* Address bit 5 */
	SDA_LOW;
 164:	c0 98       	cbi	0x18, 0	; 24
	scl_clk();
 166:	d2 df       	rcall	.-92     	; 0x10c <scl_clk>
	/* Address bit 4 */
	SDA_LOW;
 168:	c0 98       	cbi	0x18, 0	; 24
	scl_clk();
 16a:	d0 df       	rcall	.-96     	; 0x10c <scl_clk>
	/* Address bit 3 */
	SDA_HIGH;
 16c:	c0 9a       	sbi	0x18, 0	; 24
	scl_clk();	
 16e:	ce df       	rcall	.-100    	; 0x10c <scl_clk>
	/* Address bit 2 */
	SDA_LOW;
 170:	c0 98       	cbi	0x18, 0	; 24
	scl_clk();	
 172:	cc df       	rcall	.-104    	; 0x10c <scl_clk>
	/* Address bit 1 */
	SDA_LOW;
 174:	c0 98       	cbi	0x18, 0	; 24
	scl_clk();	
 176:	ca df       	rcall	.-108    	; 0x10c <scl_clk>
	/* Address bit 0 */
	SDA_LOW;
 178:	c0 98       	cbi	0x18, 0	; 24
	scl_clk();
 17a:	c8 df       	rcall	.-112    	; 0x10c <scl_clk>
	/* R/W */
	SDA_HIGH;
 17c:	c0 9a       	sbi	0x18, 0	; 24
 17e:	81 2f       	mov	r24, r17
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <lm75_read_temp+0x4c>
	_delay_us(4);
	SCL_HIGH;
 184:	c1 9a       	sbi	0x18, 1	; 24
 186:	1a 95       	dec	r17
 188:	f1 f7       	brne	.-4      	; 0x186 <lm75_read_temp+0x52>
	_delay_us(4);
	SCL_LOW;
 18a:	c1 98       	cbi	0x18, 1	; 24
	/* Ack from LM75 */
	DDR_SDA &= ~(0x01 << SDA); // Input
 18c:	b8 98       	cbi	0x17, 0	; 23
	scl_clk();
 18e:	be df       	rcall	.-132    	; 0x10c <scl_clk>
	/* Data bits 7-0 high byte */
	temp_h = 0;
 190:	10 92 68 00 	sts	0x0068, r1
 194:	c7 e0       	ldi	r28, 0x07	; 7
 196:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i <= 7; i++)
	{
		temp_h |= get_data() << (7 - i);
 198:	10 91 68 00 	lds	r17, 0x0068
 19c:	c0 df       	rcall	.-128    	; 0x11e <get_data>
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0c 2e       	mov	r0, r28
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <lm75_read_temp+0x74>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <lm75_read_temp+0x70>
 1ac:	18 2b       	or	r17, r24
 1ae:	10 93 68 00 	sts	0x0068, r17
 1b2:	21 97       	sbiw	r28, 0x01	; 1
	/* Ack from LM75 */
	DDR_SDA &= ~(0x01 << SDA); // Input
	scl_clk();
	/* Data bits 7-0 high byte */
	temp_h = 0;
	for (i = 0; i <= 7; i++)
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	cf 3f       	cpi	r28, 0xFF	; 255
 1b8:	d8 07       	cpc	r29, r24
 1ba:	71 f7       	brne	.-36     	; 0x198 <lm75_read_temp+0x64>
	{
		temp_h |= get_data() << (7 - i);
	}
	tx_frame[0] = temp_h;
 1bc:	10 93 60 00 	sts	0x0060, r17
	/* Ack from master */
	DDR_SDA |= (0x01 << SDA); // Output
 1c0:	b8 9a       	sbi	0x17, 0	; 23
	//_delay_us(1);
	SDA_LOW;
 1c2:	c0 98       	cbi	0x18, 0	; 24
	scl_clk();
 1c4:	a3 df       	rcall	.-186    	; 0x10c <scl_clk>
	DDR_SDA &= ~(0x01 << SDA); // Input
 1c6:	b8 98       	cbi	0x17, 0	; 23
	/* Data bits 7-0 low byte */
	temp_l = 0;
 1c8:	10 92 69 00 	sts	0x0069, r1
 1cc:	c7 e0       	ldi	r28, 0x07	; 7
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i <= 7; i++)
	{
		temp_l |= get_data() << (7 - i);
 1d0:	10 91 69 00 	lds	r17, 0x0069
 1d4:	a4 df       	rcall	.-184    	; 0x11e <get_data>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0c 2e       	mov	r0, r28
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <lm75_read_temp+0xac>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <lm75_read_temp+0xa8>
 1e4:	18 2b       	or	r17, r24
 1e6:	10 93 69 00 	sts	0x0069, r17
 1ea:	21 97       	sbiw	r28, 0x01	; 1
	SDA_LOW;
	scl_clk();
	DDR_SDA &= ~(0x01 << SDA); // Input
	/* Data bits 7-0 low byte */
	temp_l = 0;
	for (i = 0; i <= 7; i++)
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	cf 3f       	cpi	r28, 0xFF	; 255
 1f0:	d8 07       	cpc	r29, r24
 1f2:	71 f7       	brne	.-36     	; 0x1d0 <lm75_read_temp+0x9c>
	{
		temp_l |= get_data() << (7 - i);
	}
	tx_frame[1] = temp_l;
 1f4:	10 93 61 00 	sts	0x0061, r17
	/* No Ack from master */
	DDR_SDA |= (0x01 << SDA); // Output
 1f8:	b8 9a       	sbi	0x17, 0	; 23
	SDA_HIGH;
 1fa:	c0 9a       	sbi	0x18, 0	; 24
	scl_clk();
 1fc:	87 df       	rcall	.-242    	; 0x10c <scl_clk>
	/* Stop condition */
	SDA_LOW;
 1fe:	c0 98       	cbi	0x18, 0	; 24
	//_delay_us(4);
	SCL_HIGH;
 200:	c1 9a       	sbi	0x18, 1	; 24
	//_delay_us(4);
	SDA_HIGH;
 202:	c0 9a       	sbi	0x18, 0	; 24
	//_delay_ms(10);
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	08 95       	ret

0000020c <main>:
		tx_frame_index = 1;
	}
}

int main(void)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	DDRB |= (0x01 << PB2);
 210:	ba 9a       	sbi	0x17, 2	; 23
	PORTB &= ~(0x01 << PB2);
 212:	c2 98       	cbi	0x18, 2	; 24
	DDRD |= (0x01 << PD5);
 214:	8d 9a       	sbi	0x11, 5	; 17
	PORTD &= ~(0x01 << PD5);
 216:	95 98       	cbi	0x12, 5	; 18
	
	DDR_SDA |= (0x01 << SDA);
 218:	b8 9a       	sbi	0x17, 0	; 23
	DDR_SCL |= (0x01 << SCL);
 21a:	b9 9a       	sbi	0x17, 1	; 23
	for (int i = 0; i <= 40; i++)
	{
		_delay_ms(10);
	}*/
	
	SDA_HIGH;
 21c:	c0 9a       	sbi	0x18, 0	; 24
	SCL_HIGH;
 21e:	c1 9a       	sbi	0x18, 1	; 24
	
	
	sei();										//global interrupt enable on
 220:	78 94       	sei
	}
}

void vTIMER0_ini (void)
{
	TCCR0A = 0x00 | (0 << COM0A1) | (0 << COM0A0) | (0 << COM0B1) | (0 << COM0B0) | (0 << WGM01) | (0 << WGM00);
 222:	10 be       	out	0x30, r1	; 48
	// TCCR0A = 0x00
	TCCR0B = 0x00 | (0 << FOC0A) | (0 << FOC0B) | (0 << WGM02) | (1 << CS02) | (0 << CS01) | (0 << CS00); //100 - 256 prescaler
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	83 bf       	out	0x33, r24	; 51
	// TCCR0B = 0x01
	//TCNT0 = 0x05;
	// TCNT0 = 0
	TIMSK |= (0 << OCIE0B) | (1 << TOIE0) | (0 << OCIE0A);
 228:	89 b7       	in	r24, 0x39	; 57
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	89 bf       	out	0x39, r24	; 57
	
	
	sei();										//global interrupt enable on
	vTIMER0_ini();

	UBRRH = 0;		//UBRR to 51 for 9600 baud @ 8MHz
 22e:	12 b8       	out	0x02, r1	; 2
	UBRRL = 51;
 230:	83 e3       	ldi	r24, 0x33	; 51
 232:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1 << UDRE);	//Buffer is empty
 234:	5d 9a       	sbi	0x0b, 5	; 11
	UCSRB |= (1 << TXCIE); 	//Interrupt enable for RX
 236:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << TXEN);	//RX enable, pin is used as RX signal
 238:	53 9a       	sbi	0x0a, 3	; 10
	//UCSRB |= (1 << RXCIE); 	//Interrupt enable for RX
	//UCSRB |= (1 << RXEN);	//RX enable, pin is used as RX signal
	UCSRC |= (1 << UCSZ1);	//UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 : 8 data bits
 23a:	1a 9a       	sbi	0x03, 2	; 3
	UCSRC |= (1 << UCSZ0);	
 23c:	19 9a       	sbi	0x03, 1	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23e:	c0 e2       	ldi	r28, 0x20	; 32
 240:	de e4       	ldi	r29, 0x4E	; 78

	//lm75_read_temp();

	while(1)
	{
		SDA_LOW;
 242:	c0 98       	cbi	0x18, 0	; 24
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fe 01       	movw	r30, r28
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x3e>
		
		for (int i = 0; i <= 200; i++)
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	89 3c       	cpi	r24, 0xC9	; 201
 252:	91 05       	cpc	r25, r1
 254:	c9 f7       	brne	.-14     	; 0x248 <main+0x3c>
		{
			_delay_ms(10);
		}
		
		SDA_HIGH;
 256:	c0 9a       	sbi	0x18, 0	; 24
		SCL_HIGH;
 258:	c1 9a       	sbi	0x18, 1	; 24
		lm75_read_temp();
 25a:	6c df       	rcall	.-296    	; 0x134 <lm75_read_temp>
 25c:	f2 cf       	rjmp	.-28     	; 0x242 <main+0x36>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>

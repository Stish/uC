
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  00000358  2**0
                  ALLOC
  2 .stab         00000564  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000795  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__vector_7>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a9 36       	cpi	r26, 0x69	; 105
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	43 d0       	rcall	.+134    	; 0xc6 <main>
  40:	4f c1       	rjmp	.+670    	; 0x2e0 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_7>:
unsigned char rec_char_buffer = 0;
unsigned char data_incoming = 0;
unsigned char i = 0;

ISR (USART_RX_vect)
{
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	2f 93       	push	r18
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
  54:	ef 93       	push	r30
  56:	ff 93       	push	r31
  58:	df 93       	push	r29
  5a:	cf 93       	push	r28
  5c:	cd b7       	in	r28, 0x3d	; 61
  5e:	de b7       	in	r29, 0x3e	; 62
	rec_char_buffer = UDR;
  60:	ec e2       	ldi	r30, 0x2C	; 44
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	80 93 66 00 	sts	0x0066, r24
	//colums[0] = 0xff;
	//if (rec_char_buffer == DEVICE_NUMBER)
		//colums[0] += 0x01;
	
	if (data_incoming)
  6a:	80 91 67 00 	lds	r24, 0x0067
  6e:	88 23       	and	r24, r24
  70:	a9 f0       	breq	.+42     	; 0x9c <__vector_7+0x58>
	{
		colums[i] = rec_char_buffer;
  72:	80 91 68 00 	lds	r24, 0x0068
  76:	88 2f       	mov	r24, r24
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	20 91 66 00 	lds	r18, 0x0066
  7e:	fc 01       	movw	r30, r24
  80:	e0 5a       	subi	r30, 0xA0	; 160
  82:	ff 4f       	sbci	r31, 0xFF	; 255
  84:	20 83       	st	Z, r18
		i++;
  86:	80 91 68 00 	lds	r24, 0x0068
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	80 93 68 00 	sts	0x0068, r24
		if (i == 5)
  90:	80 91 68 00 	lds	r24, 0x0068
  94:	85 30       	cpi	r24, 0x05	; 5
  96:	11 f4       	brne	.+4      	; 0x9c <__vector_7+0x58>
			data_incoming = 0;
  98:	10 92 67 00 	sts	0x0067, r1
	}
	
	if (rec_char_buffer == DEVICE_NUMBER)
  9c:	80 91 66 00 	lds	r24, 0x0066
  a0:	81 38       	cpi	r24, 0x81	; 129
  a2:	29 f4       	brne	.+10     	; 0xae <__vector_7+0x6a>
	{
		data_incoming = 1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 67 00 	sts	0x0067, r24
		i = 0;
  aa:	10 92 68 00 	sts	0x0068, r1
	}
} 
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	2f 91       	pop	r18
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

int main(void)
{
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	//unsigned char colums_h[5] = {0x7f, 0x08, 0x08, 0x08, 0x7f};
	//unsigned char colums_l[5] = {0x7f, 0x01, 0x01, 0x01, 0x01};
	//unsigned char colums_o[5] = {0x3e, 0x41, 0x41, 0x41, 0x3e};
	//unsigned int i;
	
	DDRB |= 0x1f;
  ce:	a7 e3       	ldi	r26, 0x37	; 55
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e7 e3       	ldi	r30, 0x37	; 55
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 61       	ori	r24, 0x1F	; 31
  da:	8c 93       	st	X, r24
	DDRD |= 0x7c;
  dc:	a1 e3       	ldi	r26, 0x31	; 49
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e1 e3       	ldi	r30, 0x31	; 49
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8c 67       	ori	r24, 0x7C	; 124
  e8:	8c 93       	st	X, r24
	DDRA |= 0x03;
  ea:	aa e3       	ldi	r26, 0x3A	; 58
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	ea e3       	ldi	r30, 0x3A	; 58
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	8c 93       	st	X, r24

	UBRRH = 0;		//UBRR to 15 for 115200bps with 14.7456Mhz
  f8:	e2 e2       	ldi	r30, 0x22	; 34
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
	UBRRL = 25;
  fe:	e9 e2       	ldi	r30, 0x29	; 41
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	89 e1       	ldi	r24, 0x19	; 25
 104:	80 83       	st	Z, r24
	
	UCSRA = 0x62;	// 
 106:	eb e2       	ldi	r30, 0x2B	; 43
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	82 e6       	ldi	r24, 0x62	; 98
 10c:	80 83       	st	Z, r24
	UCSRB = 0x18;	// interrupts disabled, transmitter and reciever enabled, 8bit, no 9th bit
 10e:	ea e2       	ldi	r30, 0x2A	; 42
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 83       	st	Z, r24
	UCSRC = 0x86; 	// no parity, asynchronous, 1 stopbit, 8bit number
 116:	e3 e2       	ldi	r30, 0x23	; 35
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	86 e8       	ldi	r24, 0x86	; 134
 11c:	80 83       	st	Z, r24
	UCSRB |= (1 << RXCIE);
 11e:	aa e2       	ldi	r26, 0x2A	; 42
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	ea e2       	ldi	r30, 0x2A	; 42
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8c 93       	st	X, r24
	sei();
 12c:	78 94       	sei
	
	PORTB &= ~0x1f;
 12e:	a8 e3       	ldi	r26, 0x38	; 56
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e8 e3       	ldi	r30, 0x38	; 56
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 7e       	andi	r24, 0xE0	; 224
 13a:	8c 93       	st	X, r24
	
	while(1)
	{
		disp_char(colums);
 13c:	80 e6       	ldi	r24, 0x60	; 96
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 d0       	rcall	.+2      	; 0x144 <disp_char>
 142:	fc cf       	rjmp	.-8      	; 0x13c <__stack+0x5d>

00000144 <disp_char>:
	}
}

void disp_char(unsigned char *colums)
{
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	00 d0       	rcall	.+0      	; 0x14a <disp_char+0x6>
 14a:	00 d0       	rcall	.+0      	; 0x14c <disp_char+0x8>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	9c 83       	std	Y+4, r25	; 0x04
 152:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char i, j;
	
	for (j = 0; j <= 4; j++)
 154:	19 82       	std	Y+1, r1	; 0x01
 156:	b9 c0       	rjmp	.+370    	; 0x2ca <disp_char+0x186>
	{
		if (colums[j] & (0x01 << 0))
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	9c 81       	ldd	r25, Y+4	; 0x04
 162:	fc 01       	movw	r30, r24
 164:	e2 0f       	add	r30, r18
 166:	f3 1f       	adc	r31, r19
 168:	80 81       	ld	r24, Z
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	81 70       	andi	r24, 0x01	; 1
 170:	90 70       	andi	r25, 0x00	; 0
 172:	88 23       	and	r24, r24
 174:	41 f0       	breq	.+16     	; 0x186 <disp_char+0x42>
			PORTA &= ~(0x01 << 0);
 176:	ab e3       	ldi	r26, 0x3B	; 59
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	eb e3       	ldi	r30, 0x3B	; 59
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	8c 93       	st	X, r24
 184:	07 c0       	rjmp	.+14     	; 0x194 <disp_char+0x50>
		else
			PORTA |= (0x01 << 0);
 186:	ab e3       	ldi	r26, 0x3B	; 59
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	eb e3       	ldi	r30, 0x3B	; 59
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8c 93       	st	X, r24
		if (colums[j] & (0x01 << 1))
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	fc 01       	movw	r30, r24
 1a0:	e2 0f       	add	r30, r18
 1a2:	f3 1f       	adc	r31, r19
 1a4:	80 81       	ld	r24, Z
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	82 70       	andi	r24, 0x02	; 2
 1ac:	90 70       	andi	r25, 0x00	; 0
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	41 f0       	breq	.+16     	; 0x1c2 <disp_char+0x7e>
			PORTA &= ~(0x01 << 1);
 1b2:	ab e3       	ldi	r26, 0x3B	; 59
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	eb e3       	ldi	r30, 0x3B	; 59
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	8c 93       	st	X, r24
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <disp_char+0x8c>
		else
			PORTA |= (0x01 << 1);
 1c2:	ab e3       	ldi	r26, 0x3B	; 59
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	eb e3       	ldi	r30, 0x3B	; 59
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	8c 93       	st	X, r24
		for (i = 2; i <= 6; i++)
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	8a 83       	std	Y+2, r24	; 0x02
 1d4:	44 c0       	rjmp	.+136    	; 0x25e <disp_char+0x11a>
		{
			if (colums[j] & (0x01 << i))
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	9c 81       	ldd	r25, Y+4	; 0x04
 1e0:	fc 01       	movw	r30, r24
 1e2:	e2 0f       	add	r30, r18
 1e4:	f3 1f       	adc	r31, r19
 1e6:	80 81       	ld	r24, Z
 1e8:	28 2f       	mov	r18, r24
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	a9 01       	movw	r20, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <disp_char+0xb6>
 1f6:	55 95       	asr	r21
 1f8:	47 95       	ror	r20
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <disp_char+0xb2>
 1fe:	ca 01       	movw	r24, r20
 200:	81 70       	andi	r24, 0x01	; 1
 202:	90 70       	andi	r25, 0x00	; 0
 204:	88 23       	and	r24, r24
 206:	a9 f0       	breq	.+42     	; 0x232 <disp_char+0xee>
				PORTD &= ~(0x01 << i);
 208:	a2 e3       	ldi	r26, 0x32	; 50
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e2 e3       	ldi	r30, 0x32	; 50
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 2e       	mov	r0, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <disp_char+0xe2>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <disp_char+0xde>
 22a:	80 95       	com	r24
 22c:	84 23       	and	r24, r20
 22e:	8c 93       	st	X, r24
 230:	13 c0       	rjmp	.+38     	; 0x258 <disp_char+0x114>
			else
				PORTD |= (0x01 << i);
 232:	a2 e3       	ldi	r26, 0x32	; 50
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	e2 e3       	ldi	r30, 0x32	; 50
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 2e       	mov	r0, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <disp_char+0x10c>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <disp_char+0x108>
 254:	84 2b       	or	r24, r20
 256:	8c 93       	st	X, r24
			PORTA |= (0x01 << 0);
		if (colums[j] & (0x01 << 1))
			PORTA &= ~(0x01 << 1);
		else
			PORTA |= (0x01 << 1);
		for (i = 2; i <= 6; i++)
 258:	8a 81       	ldd	r24, Y+2	; 0x02
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	87 30       	cpi	r24, 0x07	; 7
 262:	08 f4       	brcc	.+2      	; 0x266 <disp_char+0x122>
 264:	b8 cf       	rjmp	.-144    	; 0x1d6 <disp_char+0x92>
			if (colums[j] & (0x01 << i))
				PORTD &= ~(0x01 << i);
			else
				PORTD |= (0x01 << i);
		}
		PORTB |= (0x01 << j);
 266:	a8 e3       	ldi	r26, 0x38	; 56
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e8 e3       	ldi	r30, 0x38	; 56
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	48 2f       	mov	r20, r24
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 2e       	mov	r0, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <disp_char+0x140>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <disp_char+0x13c>
 288:	84 2b       	or	r24, r20
 28a:	8c 93       	st	X, r24
		for (i = 0; i <= 100; i++);
 28c:	1a 82       	std	Y+2, r1	; 0x02
 28e:	03 c0       	rjmp	.+6      	; 0x296 <disp_char+0x152>
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	8a 83       	std	Y+2, r24	; 0x02
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	85 36       	cpi	r24, 0x65	; 101
 29a:	d0 f3       	brcs	.-12     	; 0x290 <disp_char+0x14c>
			//for (k = 0; k <= 100; k++);
		PORTB &= ~(0x01 << j);
 29c:	a8 e3       	ldi	r26, 0x38	; 56
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e8 e3       	ldi	r30, 0x38	; 56
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	48 2f       	mov	r20, r24
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <disp_char+0x176>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <disp_char+0x172>
 2be:	80 95       	com	r24
 2c0:	84 23       	and	r24, r20
 2c2:	8c 93       	st	X, r24

void disp_char(unsigned char *colums)
{
	unsigned char i, j;
	
	for (j = 0; j <= 4; j++)
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	85 30       	cpi	r24, 0x05	; 5
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <disp_char+0x18e>
 2d0:	43 cf       	rjmp	.-378    	; 0x158 <disp_char+0x14>
		PORTB |= (0x01 << j);
		for (i = 0; i <= 100; i++);
			//for (k = 0; k <= 100; k++);
		PORTB &= ~(0x01 << j);
	}
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	cf 91       	pop	r28
 2dc:	df 91       	pop	r29
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>

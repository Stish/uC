   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  72               	.global	set_pin
  74               	set_pin:
  76               	.Ltext1:
   1:lib/io_fct.c  **** #define ADC_VREF_TYPE 0xC0				// ADC Used Internal Reference
   2:lib/io_fct.c  **** 
   3:lib/io_fct.c  **** #include <avr/io.h>
   4:lib/io_fct.c  **** 
   5:lib/io_fct.c  **** void set_pin(char port, char pin)
   6:lib/io_fct.c  **** {
  77               	 .
  78               		in r28,__SP_L__
  79               		in r29,__SP_H__
  80 0000 DF93      	/* prologue: function */
  81 0002 CF93      	/* frame size = 4 */
  82 0004 00D0      		std Y+1,r24
  83 0006 00D0      		std Y+2,r22
  85 000a DEB7      	.LM1:
  86               		ldd r24,Y+1
  87               		mov r18,r24
  88 000c 8983      		ldi r19,lo8(0)
  89 000e 6A83      		std Y+4,r19
   7:lib/io_fct.c  **** 	switch(port)
  90               		ldd r24,Y+3
  91               		ldd r25,Y+4
  92 0010 8981      		cpi r24,99
  93 0012 282F      		cpc r25,__zero_reg__
  94 0014 30E0      		brne .+2
  95 0016 3C83      		rjmp .L5
  96 0018 2B83      		ldd r18,Y+3
  97 001a 8B81      		ldd r19,Y+4
  98 001c 9C81      		cpi r18,100
  99 001e 8336      		cpc r19,__zero_reg__
 100 0020 9105      		brge .L9
 101 0022 01F4      		ldd r24,Y+3
 102 0024 00C0      		ldd r25,Y+4
 103 0026 2B81      		cpi r24,97
 104 0028 3C81      		cpc r25,__zero_reg__
 105 002a 2436      		breq .L3
 106 002c 3105      		ldd r18,Y+3
 107 002e 04F4      		ldd r19,Y+4
 108 0030 8B81      		cpi r18,98
 109 0032 9C81      		cpc r19,__zero_reg__
 110 0034 8136      		breq .L4
 111 0036 9105      		rjmp .L10
 112 0038 01F0      	.L9:
 113 003a 2B81      		ldd r24,Y+3
 114 003c 3C81      		ldd r25,Y+4
 115 003e 2236      		cpi r24,101
 116 0040 3105      		cpc r25,__zero_reg__
 117 0042 01F0      		brne .+2
 118 0044 00C0      		rjmp .L7
 119               		ldd r18,Y+3
 120 0046 8B81      		ldd r19,Y+4
 121 0048 9C81      		cpi r18,101
 122 004a 8536      		cpc r19,__zero_reg__
 123 004c 9105      		brge .+2
 124 004e 01F4      		rjmp .L6
 125 0050 00C0      		ldd r24,Y+3
 126 0052 2B81      		ldd r25,Y+4
 127 0054 3C81      		cpi r24,102
 128 0056 2536      		cpc r25,__zero_reg__
 129 0058 3105      		brne .+2
 130 005a 04F4      		rjmp .L8
 131 005c 00C0      		rjmp .L10
 132 005e 8B81      	.L3:
 134 0062 8636      	.LM2:
 135 0064 9105      		ldi r26,lo8(59)
 136 0066 01F4      		ldi r27,hi8(59)
 137 0068 00C0      		ldi r30,lo8(59)
 138 006a 00C0      		ldi r31,hi8(59)
 139               		ld r24,Z
   8:lib/io_fct.c  **** 	{
   9:lib/io_fct.c  **** 		case ('a'):
  10:lib/io_fct.c  **** 			PORTA |= (0x01 << pin);
 140               	8(0)
 141               		ldi r24,lo8(1)
 142 006c ABE3      		ldi r25,hi8(1)
 143 006e B0E0      		mov r0,r18
 144 0070 EBE3      		rjmp 2f
 145 0072 F0E0      	1:	lsl r24
 146 0074 8081      		rol r25
 147 0076 482F      	2:	dec r0
 148 0078 8A81      		brpl 1b
 149 007a 282F      		or r24,r20
 150 007c 30E0      		st X,r24
 151 007e 81E0      		rjmp .L10
 152 0080 90E0      	.L4:
 154 0084 00C0      	.LM3:
 155 0086 880F      		ldi r26,lo8(56)
 156 0088 991F      		ldi r27,hi8(56)
 157 008a 0A94      		ldi r30,lo8(56)
 158 008c 02F4      		ldi r31,hi8(56)
 159 008e 842B      		ld r24,Z
 160 0090 8C93      		mov r20,r24
 161 0092 00C0      		ldd r24,Y+2
 162               		mov r18,r24
  11:lib/io_fct.c  **** 			break;
  12:lib/io_fct.c  **** 		case ('b'):
  13:lib/io_fct.c  **** 			PORTB |= (0x01 << pin);
 163               	4,lo8(1)
 164               		ldi r25,hi8(1)
 165 0094 A8E3      		mov r0,r18
 166 0096 B0E0      		rjmp 2f
 167 0098 E8E3      	1:	lsl r24
 168 009a F0E0      		rol r25
 169 009c 8081      	2:	dec r0
 170 009e 482F      		brpl 1b
 171 00a0 8A81      		or r24,r20
 172 00a2 282F      		st X,r24
 173 00a4 30E0      		rjmp .L10
 174 00a6 81E0      	.L5:
 176 00aa 022E      	.LM4:
 177 00ac 00C0      		ldi r26,lo8(53)
 178 00ae 880F      		ldi r27,hi8(53)
 179 00b0 991F      		ldi r30,lo8(53)
 180 00b2 0A94      		ldi r31,hi8(53)
 181 00b4 02F4      		ld r24,Z
 182 00b6 842B      		mov r20,r24
 183 00b8 8C93      		ldd r24,Y+2
 184 00ba 00C0      		mov r18,r24
 185               		ldi r19,lo8(0)
  14:lib/io_fct.c  **** 			break;
  15:lib/io_fct.c  **** 		case ('c'):
  16:lib/io_fct.c  **** 			PORTC |= (0x01 << pin);
 186               	5,hi8(1)
 187               		mov r0,r18
 188 00bc A5E3      		rjmp 2f
 189 00be B0E0      	1:	lsl r24
 190 00c0 E5E3      		rol r25
 191 00c2 F0E0      	2:	dec r0
 192 00c4 8081      		brpl 1b
 193 00c6 482F      		or r24,r20
 194 00c8 8A81      		st X,r24
 195 00ca 282F      		rjmp .L10
 196 00cc 30E0      	.L6:
 198 00d0 90E0      	.LM5:
 199 00d2 022E      		ldi r26,lo8(50)
 200 00d4 00C0      		ldi r27,hi8(50)
 201 00d6 880F      		ldi r30,lo8(50)
 202 00d8 991F      		ldi r31,hi8(50)
 203 00da 0A94      		ld r24,Z
 204 00dc 02F4      		mov r20,r24
 205 00de 842B      		ldd r24,Y+2
 206 00e0 8C93      		mov r18,r24
 207 00e2 00C0      		ldi r19,lo8(0)
 208               		ldi r24,lo8(1)
  17:lib/io_fct.c  **** 			break;
  18:lib/io_fct.c  **** 		case ('d'):
  19:lib/io_fct.c  **** 			PORTD |= (0x01 << pin);
 209               	,r18
 210               		rjmp 2f
 211 00e4 A2E3      	1:	lsl r24
 212 00e6 B0E0      		rol r25
 213 00e8 E2E3      	2:	dec r0
 214 00ea F0E0      		brpl 1b
 215 00ec 8081      		or r24,r20
 216 00ee 482F      		st X,r24
 217 00f0 8A81      		rjmp .L10
 218 00f2 282F      	.L7:
 220 00f6 81E0      	.LM6:
 221 00f8 90E0      		ldi r26,lo8(35)
 222 00fa 022E      		ldi r27,hi8(35)
 223 00fc 00C0      		ldi r30,lo8(35)
 224 00fe 880F      		ldi r31,hi8(35)
 225 0100 991F      		ld r24,Z
 226 0102 0A94      		mov r20,r24
 227 0104 02F4      		ldd r24,Y+2
 228 0106 842B      		mov r18,r24
 229 0108 8C93      		ldi r19,lo8(0)
 230 010a 00C0      		ldi r24,lo8(1)
 231               		ldi r25,hi8(1)
  20:lib/io_fct.c  **** 			break;
  21:lib/io_fct.c  **** 		case ('e'):
  22:lib/io_fct.c  **** 			PORTE |= (0x01 << pin);
 232               		lsl r24
 233               		rol r25
 234 010c A3E2      	2:	dec r0
 235 010e B0E0      		brpl 1b
 236 0110 E3E2      		or r24,r20
 237 0112 F0E0      		st X,r24
 238 0114 8081      		rjmp .L10
 239 0116 482F      	.L8:
 241 011a 282F      	.LM7:
 242 011c 30E0      		ldi r26,lo8(98)
 243 011e 81E0      		ldi r27,hi8(98)
 244 0120 90E0      		ldi r30,lo8(98)
 245 0122 022E      		ldi r31,hi8(98)
 246 0124 00C0      		ld r24,Z
 247 0126 880F      		mov r20,r24
 248 0128 991F      		ldd r24,Y+2
 249 012a 0A94      		mov r18,r24
 250 012c 02F4      		ldi r19,lo8(0)
 251 012e 842B      		ldi r24,lo8(1)
 252 0130 8C93      		ldi r25,hi8(1)
 253 0132 00C0      		mov r0,r18
 254               		rjmp 2f
  23:lib/io_fct.c  **** 			break;
  24:lib/io_fct.c  **** 		case ('f'):
  25:lib/io_fct.c  **** 			PORTF |= (0x01 << pin);
 255               	dec r0
 256               		brpl 1b
 257 0134 A2E6      		or r24,r20
 258 0136 B0E0      		st X,r24
 259 0138 E2E6      	.L10:
 260 013a F0E0      	/* epilogue start */
 262 013e 482F      	.LM8:
 263 0140 8A81      		pop __tmp_reg__
 264 0142 282F      		pop __tmp_reg__
 265 0144 30E0      		pop __tmp_reg__
 266 0146 81E0      		pop __tmp_reg__
 267 0148 90E0      		pop r28
 268 014a 022E      		pop r29
 269 014c 00C0      		ret
 271 0150 991F      	.Lscope1:
 275 0158 8C93      	.global	reset_pin
 277               	reset_pin:
  26:lib/io_fct.c  **** 			break;
  27:lib/io_fct.c  **** 		default:
  28:lib/io_fct.c  **** 			break;
  29:lib/io_fct.c  **** 	}
  30:lib/io_fct.c  **** }
 278               	FBB2
 279               	.LM9:
 280 015a 0F90      	.LFBB2:
 281 015c 0F90      		push r29
 282 015e 0F90      		push r28
 283 0160 0F90      		rcall .
 284 0162 CF91      		rcall .
 285 0164 DF91      		in r28,__SP_L__
 286 0166 0895      		in r29,__SP_H__
 287               	/* prologue: function */
 288               	/* frame size = 4 */
 289               		std Y+1,r24
 290               		std Y+2,r22
 292               	.LM10:
 293               		ldd r24,Y+1
 294               		mov r18,r24
  31:lib/io_fct.c  **** 
  32:lib/io_fct.c  **** void reset_pin(char port, char pin)
  33:lib/io_fct.c  **** {
 295               	std Y+4,r19
 296               		std Y+3,r18
 297               		ldd r24,Y+3
 298 0168 DF93      		ldd r25,Y+4
 299 016a CF93      		cpi r24,99
 300 016c 00D0      		cpc r25,__zero_reg__
 301 016e 00D0      		brne .+2
 302 0170 CDB7      		rjmp .L15
 303 0172 DEB7      		ldd r18,Y+3
 304               		ldd r19,Y+4
 305               		cpi r18,100
 306 0174 8983      		cpc r19,__zero_reg__
 307 0176 6A83      		brge .L19
  34:lib/io_fct.c  **** 	switch(port)
 308               		ldd r25,Y+4
 309               		cpi r24,97
 310 0178 8981      		cpc r25,__zero_reg__
 311 017a 282F      		breq .L13
 312 017c 30E0      		ldd r18,Y+3
 313 017e 3C83      		ldd r19,Y+4
 314 0180 2B83      		cpi r18,98
 315 0182 8B81      		cpc r19,__zero_reg__
 316 0184 9C81      		breq .L14
 317 0186 8336      		rjmp .L20
 318 0188 9105      	.L19:
 319 018a 01F4      		ldd r24,Y+3
 320 018c 00C0      		ldd r25,Y+4
 321 018e 2B81      		cpi r24,101
 322 0190 3C81      		cpc r25,__zero_reg__
 323 0192 2436      		brne .+2
 324 0194 3105      		rjmp .L17
 325 0196 04F4      		ldd r18,Y+3
 326 0198 8B81      		ldd r19,Y+4
 327 019a 9C81      		cpi r18,101
 328 019c 8136      		cpc r19,__zero_reg__
 329 019e 9105      		brge .+2
 330 01a0 01F0      		rjmp .L16
 331 01a2 2B81      		ldd r24,Y+3
 332 01a4 3C81      		ldd r25,Y+4
 333 01a6 2236      		cpi r24,102
 334 01a8 3105      		cpc r25,__zero_reg__
 335 01aa 01F0      		brne .+2
 336 01ac 00C0      		rjmp .L18
 337               		rjmp .L20
 338 01ae 8B81      	.L13:
 340 01b2 8536      	.LM11:
 341 01b4 9105      		ldi r26,lo8(59)
 342 01b6 01F4      		ldi r27,hi8(59)
 343 01b8 00C0      		ldi r30,lo8(59)
 344 01ba 2B81      		ldi r31,hi8(59)
 345 01bc 3C81      		ld r24,Z
 346 01be 2536      		mov r20,r24
 347 01c0 3105      		ldd r24,Y+2
 348 01c2 04F4      		mov r18,r24
 349 01c4 00C0      		ldi r19,lo8(0)
 350 01c6 8B81      		ldi r24,lo8(1)
 351 01c8 9C81      		ldi r25,hi8(1)
 352 01ca 8636      		mov r0,r18
 353 01cc 9105      		rjmp 2f
 354 01ce 01F4      	1:	lsl r24
 355 01d0 00C0      		rol r25
 356 01d2 00C0      	2:	dec r0
 357               		brpl 1b
  35:lib/io_fct.c  **** 	{
  36:lib/io_fct.c  **** 		case ('a'):
  37:lib/io_fct.c  **** 			PORTA &= ~(0x01 << pin);
 359               	.LM12:
 360 01d4 ABE3      		ldi r26,lo8(56)
 361 01d6 B0E0      		ldi r27,hi8(56)
 362 01d8 EBE3      		ldi r30,lo8(56)
 363 01da F0E0      		ldi r31,hi8(56)
 364 01dc 8081      		ld r24,Z
 365 01de 482F      		mov r20,r24
 366 01e0 8A81      		ldd r24,Y+2
 367 01e2 282F      		mov r18,r24
 368 01e4 30E0      		ldi r19,lo8(0)
 369 01e6 81E0      		ldi r24,lo8(1)
 370 01e8 90E0      		ldi r25,hi8(1)
 371 01ea 022E      		mov r0,r18
 372 01ec 00C0      		rjmp 2f
 373 01ee 880F      	1:	lsl r24
 374 01f0 991F      		rol r25
 375 01f2 0A94      	2:	dec r0
 376 01f4 02F4      		brpl 1b
 377 01f6 8095      		com r24
 378 01f8 8423      		and r24,r20
 379 01fa 8C93      		st X,r24
 380 01fc 00C0      		rjmp .L20
 381               	.L15:
  38:lib/io_fct.c  **** 			break;
  39:lib/io_fct.c  **** 		case ('b'):
  40:lib/io_fct.c  **** 			PORTB &= ~(0x01 << pin);
 382               	FBB2
 383               	.LM13:
 384 01fe A8E3      		ldi r26,lo8(53)
 385 0200 B0E0      		ldi r27,hi8(53)
 386 0202 E8E3      		ldi r30,lo8(53)
 387 0204 F0E0      		ldi r31,hi8(53)
 388 0206 8081      		ld r24,Z
 389 0208 482F      		mov r20,r24
 390 020a 8A81      		ldd r24,Y+2
 391 020c 282F      		mov r18,r24
 392 020e 30E0      		ldi r19,lo8(0)
 393 0210 81E0      		ldi r24,lo8(1)
 394 0212 90E0      		ldi r25,hi8(1)
 395 0214 022E      		mov r0,r18
 396 0216 00C0      		rjmp 2f
 397 0218 880F      	1:	lsl r24
 398 021a 991F      		rol r25
 399 021c 0A94      	2:	dec r0
 400 021e 02F4      		brpl 1b
 401 0220 8095      		com r24
 402 0222 8423      		and r24,r20
 403 0224 8C93      		st X,r24
 404 0226 00C0      		rjmp .L20
 405               	.L16:
  41:lib/io_fct.c  **** 			break;
  42:lib/io_fct.c  **** 		case ('c'):
  43:lib/io_fct.c  **** 			PORTC &= ~(0x01 << pin);
 406               	FBB2
 407               	.LM14:
 408 0228 A5E3      		ldi r26,lo8(50)
 409 022a B0E0      		ldi r27,hi8(50)
 410 022c E5E3      		ldi r30,lo8(50)
 411 022e F0E0      		ldi r31,hi8(50)
 412 0230 8081      		ld r24,Z
 413 0232 482F      		mov r20,r24
 414 0234 8A81      		ldd r24,Y+2
 415 0236 282F      		mov r18,r24
 416 0238 30E0      		ldi r19,lo8(0)
 417 023a 81E0      		ldi r24,lo8(1)
 418 023c 90E0      		ldi r25,hi8(1)
 419 023e 022E      		mov r0,r18
 420 0240 00C0      		rjmp 2f
 421 0242 880F      	1:	lsl r24
 422 0244 991F      		rol r25
 423 0246 0A94      	2:	dec r0
 424 0248 02F4      		brpl 1b
 425 024a 8095      		com r24
 426 024c 8423      		and r24,r20
 427 024e 8C93      		st X,r24
 428 0250 00C0      		rjmp .L20
 429               	.L17:
  44:lib/io_fct.c  **** 			break;
  45:lib/io_fct.c  **** 		case ('d'):
  46:lib/io_fct.c  **** 			PORTD &= ~(0x01 << pin);
 430               	FBB2
 431               	.LM15:
 432 0252 A2E3      		ldi r26,lo8(35)
 433 0254 B0E0      		ldi r27,hi8(35)
 434 0256 E2E3      		ldi r30,lo8(35)
 435 0258 F0E0      		ldi r31,hi8(35)
 436 025a 8081      		ld r24,Z
 437 025c 482F      		mov r20,r24
 438 025e 8A81      		ldd r24,Y+2
 439 0260 282F      		mov r18,r24
 440 0262 30E0      		ldi r19,lo8(0)
 441 0264 81E0      		ldi r24,lo8(1)
 442 0266 90E0      		ldi r25,hi8(1)
 443 0268 022E      		mov r0,r18
 444 026a 00C0      		rjmp 2f
 445 026c 880F      	1:	lsl r24
 446 026e 991F      		rol r25
 447 0270 0A94      	2:	dec r0
 448 0272 02F4      		brpl 1b
 449 0274 8095      		com r24
 450 0276 8423      		and r24,r20
 451 0278 8C93      		st X,r24
 452 027a 00C0      		rjmp .L20
 453               	.L18:
  47:lib/io_fct.c  **** 			break;
  48:lib/io_fct.c  **** 		case ('e'):
  49:lib/io_fct.c  **** 			PORTE &= ~(0x01 << pin);
 454               	FBB2
 455               	.LM16:
 456 027c A3E2      		ldi r26,lo8(98)
 457 027e B0E0      		ldi r27,hi8(98)
 458 0280 E3E2      		ldi r30,lo8(98)
 459 0282 F0E0      		ldi r31,hi8(98)
 460 0284 8081      		ld r24,Z
 461 0286 482F      		mov r20,r24
 462 0288 8A81      		ldd r24,Y+2
 463 028a 282F      		mov r18,r24
 464 028c 30E0      		ldi r19,lo8(0)
 465 028e 81E0      		ldi r24,lo8(1)
 466 0290 90E0      		ldi r25,hi8(1)
 467 0292 022E      		mov r0,r18
 468 0294 00C0      		rjmp 2f
 469 0296 880F      	1:	lsl r24
 470 0298 991F      		rol r25
 471 029a 0A94      	2:	dec r0
 472 029c 02F4      		brpl 1b
 473 029e 8095      		com r24
 474 02a0 8423      		and r24,r20
 475 02a2 8C93      		st X,r24
 476 02a4 00C0      	.L20:
 477               	/* epilogue start */
  50:lib/io_fct.c  **** 			break;
  51:lib/io_fct.c  **** 		case ('f'):
  52:lib/io_fct.c  **** 			PORTF &= ~(0x01 << pin);
 478               	FBB2
 479               	.LM17:
 480 02a6 A2E6      		pop __tmp_reg__
 481 02a8 B0E0      		pop __tmp_reg__
 482 02aa E2E6      		pop __tmp_reg__
 483 02ac F0E0      		pop __tmp_reg__
 484 02ae 8081      		pop r28
 485 02b0 482F      		pop r29
 486 02b2 8A81      		ret
 488 02b6 30E0      	.Lscope2:
 492 02be 00C0      	.global	toggle_pin
 494 02c2 991F      	toggle_pin:
 496 02c6 02F4      	.LM18:
 497 02c8 8095      	.LFBB3:
 498 02ca 8423      		push r29
 499 02cc 8C93      		push r28
 500               		rcall .
 501               		rcall .
  53:lib/io_fct.c  **** 			break;
  54:lib/io_fct.c  **** 		default:
  55:lib/io_fct.c  **** 			break;
  56:lib/io_fct.c  **** 	}
  57:lib/io_fct.c  **** }
 502               	,__SP_H__
 503               	/* prologue: function */
 504 02ce 0F90      	/* frame size = 4 */
 505 02d0 0F90      		std Y+1,r24
 506 02d2 0F90      		std Y+2,r22
 508 02d6 CF91      	.LM19:
 509 02d8 DF91      		ldd r24,Y+1
 510 02da 0895      		mov r18,r24
 511               		ldi r19,lo8(0)
 512               		std Y+4,r19
 513               		std Y+3,r18
 514               		ldd r24,Y+3
 515               		ldd r25,Y+4
 516               		cpi r24,99
 517               		cpc r25,__zero_reg__
 518               		brne .+2
  58:lib/io_fct.c  **** 
  59:lib/io_fct.c  **** void toggle_pin(char port, char pin)
  60:lib/io_fct.c  **** {
 519               	18,Y+3
 520               		ldd r19,Y+4
 521               		cpi r18,100
 522 02dc DF93      		cpc r19,__zero_reg__
 523 02de CF93      		brge .L29
 524 02e0 00D0      		ldd r24,Y+3
 525 02e2 00D0      		ldd r25,Y+4
 526 02e4 CDB7      		cpi r24,97
 527 02e6 DEB7      		cpc r25,__zero_reg__
 528               		breq .L23
 529               		ldd r18,Y+3
 530 02e8 8983      		ldd r19,Y+4
 531 02ea 6A83      		cpi r18,98
  61:lib/io_fct.c  **** 	switch(port)
 532               	ro_reg__
 533               		breq .L24
 534 02ec 8981      		rjmp .L30
 535 02ee 282F      	.L29:
 536 02f0 30E0      		ldd r24,Y+3
 537 02f2 3C83      		ldd r25,Y+4
 538 02f4 2B83      		cpi r24,101
 539 02f6 8B81      		cpc r25,__zero_reg__
 540 02f8 9C81      		brne .+2
 541 02fa 8336      		rjmp .L27
 542 02fc 9105      		ldd r18,Y+3
 543 02fe 01F4      		ldd r19,Y+4
 544 0300 00C0      		cpi r18,101
 545 0302 2B81      		cpc r19,__zero_reg__
 546 0304 3C81      		brge .+2
 547 0306 2436      		rjmp .L26
 548 0308 3105      		ldd r24,Y+3
 549 030a 04F4      		ldd r25,Y+4
 550 030c 8B81      		cpi r24,102
 551 030e 9C81      		cpc r25,__zero_reg__
 552 0310 8136      		brne .+2
 553 0312 9105      		rjmp .L28
 554 0314 01F0      		rjmp .L30
 555 0316 2B81      	.L23:
 557 031a 2236      	.LM20:
 558 031c 3105      		ldi r26,lo8(59)
 559 031e 01F0      		ldi r27,hi8(59)
 560 0320 00C0      		ldi r30,lo8(59)
 561               		ldi r31,hi8(59)
 562 0322 8B81      		ld r24,Z
 563 0324 9C81      		mov r20,r24
 564 0326 8536      		ldd r24,Y+2
 565 0328 9105      		mov r18,r24
 566 032a 01F4      		ldi r19,lo8(0)
 567 032c 00C0      		ldi r24,lo8(1)
 568 032e 2B81      		ldi r25,hi8(1)
 569 0330 3C81      		mov r0,r18
 570 0332 2536      		rjmp 2f
 571 0334 3105      	1:	lsl r24
 572 0336 04F4      		rol r25
 573 0338 00C0      	2:	dec r0
 574 033a 8B81      		brpl 1b
 575 033c 9C81      		eor r24,r20
 576 033e 8636      		st X,r24
 577 0340 9105      		rjmp .L30
 578 0342 01F4      	.L24:
 580 0346 00C0      	.LM21:
 581               		ldi r26,lo8(56)
  62:lib/io_fct.c  **** 	{
  63:lib/io_fct.c  **** 		case ('a'):
  64:lib/io_fct.c  **** 			PORTA ^= (0x01 << pin);
 582               	
 583               		ld r24,Z
 584 0348 ABE3      		mov r20,r24
 585 034a B0E0      		ldd r24,Y+2
 586 034c EBE3      		mov r18,r24
 587 034e F0E0      		ldi r19,lo8(0)
 588 0350 8081      		ldi r24,lo8(1)
 589 0352 482F      		ldi r25,hi8(1)
 590 0354 8A81      		mov r0,r18
 591 0356 282F      		rjmp 2f
 592 0358 30E0      	1:	lsl r24
 593 035a 81E0      		rol r25
 594 035c 90E0      	2:	dec r0
 595 035e 022E      		brpl 1b
 596 0360 00C0      		eor r24,r20
 597 0362 880F      		st X,r24
 598 0364 991F      		rjmp .L30
 599 0366 0A94      	.L25:
 601 036a 8427      	.LM22:
 602 036c 8C93      		ldi r26,lo8(53)
 603 036e 00C0      		ldi r27,hi8(53)
 604               		ldi r30,lo8(53)
  65:lib/io_fct.c  **** 			break;
  66:lib/io_fct.c  **** 		case ('b'):
  67:lib/io_fct.c  **** 			PORTB ^= (0x01 << pin);
 605               	24,Z
 606               		mov r20,r24
 607 0370 A8E3      		ldd r24,Y+2
 608 0372 B0E0      		mov r18,r24
 609 0374 E8E3      		ldi r19,lo8(0)
 610 0376 F0E0      		ldi r24,lo8(1)
 611 0378 8081      		ldi r25,hi8(1)
 612 037a 482F      		mov r0,r18
 613 037c 8A81      		rjmp 2f
 614 037e 282F      	1:	lsl r24
 615 0380 30E0      		rol r25
 616 0382 81E0      	2:	dec r0
 617 0384 90E0      		brpl 1b
 618 0386 022E      		eor r24,r20
 619 0388 00C0      		st X,r24
 620 038a 880F      		rjmp .L30
 621 038c 991F      	.L26:
 623 0390 02F4      	.LM23:
 624 0392 8427      		ldi r26,lo8(50)
 625 0394 8C93      		ldi r27,hi8(50)
 626 0396 00C0      		ldi r30,lo8(50)
 627               		ldi r31,hi8(50)
  68:lib/io_fct.c  **** 			break;
  69:lib/io_fct.c  **** 		case ('c'):
  70:lib/io_fct.c  **** 			PORTC ^= (0x01 << pin);
 628               		ldd r24,Y+2
 629               		mov r18,r24
 630 0398 A5E3      		ldi r19,lo8(0)
 631 039a B0E0      		ldi r24,lo8(1)
 632 039c E5E3      		ldi r25,hi8(1)
 633 039e F0E0      		mov r0,r18
 634 03a0 8081      		rjmp 2f
 635 03a2 482F      	1:	lsl r24
 636 03a4 8A81      		rol r25
 637 03a6 282F      	2:	dec r0
 638 03a8 30E0      		brpl 1b
 639 03aa 81E0      		eor r24,r20
 640 03ac 90E0      		st X,r24
 641 03ae 022E      		rjmp .L30
 642 03b0 00C0      	.L27:
 644 03b4 991F      	.LM24:
 645 03b6 0A94      		ldi r26,lo8(35)
 646 03b8 02F4      		ldi r27,hi8(35)
 647 03ba 8427      		ldi r30,lo8(35)
 648 03bc 8C93      		ldi r31,hi8(35)
 649 03be 00C0      		ld r24,Z
 650               		mov r20,r24
  71:lib/io_fct.c  **** 			break;
  72:lib/io_fct.c  **** 		case ('d'):
  73:lib/io_fct.c  **** 			PORTD ^= (0x01 << pin);
 651               	24
 652               		ldi r19,lo8(0)
 653 03c0 A2E3      		ldi r24,lo8(1)
 654 03c2 B0E0      		ldi r25,hi8(1)
 655 03c4 E2E3      		mov r0,r18
 656 03c6 F0E0      		rjmp 2f
 657 03c8 8081      	1:	lsl r24
 658 03ca 482F      		rol r25
 659 03cc 8A81      	2:	dec r0
 660 03ce 282F      		brpl 1b
 661 03d0 30E0      		eor r24,r20
 662 03d2 81E0      		st X,r24
 663 03d4 90E0      		rjmp .L30
 664 03d6 022E      	.L28:
 666 03da 880F      	.LM25:
 667 03dc 991F      		ldi r26,lo8(98)
 668 03de 0A94      		ldi r27,hi8(98)
 669 03e0 02F4      		ldi r30,lo8(98)
 670 03e2 8427      		ldi r31,hi8(98)
 671 03e4 8C93      		ld r24,Z
 672 03e6 00C0      		mov r20,r24
 673               		ldd r24,Y+2
  74:lib/io_fct.c  **** 			break;
  75:lib/io_fct.c  **** 		case ('e'):
  76:lib/io_fct.c  **** 			PORTE ^= (0x01 << pin);
 674               	o8(0)
 675               		ldi r24,lo8(1)
 676 03e8 A3E2      		ldi r25,hi8(1)
 677 03ea B0E0      		mov r0,r18
 678 03ec E3E2      		rjmp 2f
 679 03ee F0E0      	1:	lsl r24
 680 03f0 8081      		rol r25
 681 03f2 482F      	2:	dec r0
 682 03f4 8A81      		brpl 1b
 683 03f6 282F      		eor r24,r20
 684 03f8 30E0      		st X,r24
 685 03fa 81E0      	.L30:
 686 03fc 90E0      	/* epilogue start */
 688 0400 00C0      	.LM26:
 689 0402 880F      		pop __tmp_reg__
 690 0404 991F      		pop __tmp_reg__
 691 0406 0A94      		pop __tmp_reg__
 692 0408 02F4      		pop __tmp_reg__
 693 040a 8427      		pop r28
 694 040c 8C93      		pop r29
 695 040e 00C0      		ret
  77:lib/io_fct.c  **** 			break;
  78:lib/io_fct.c  **** 		case ('f'):
  79:lib/io_fct.c  **** 			PORTF ^= (0x01 << pin);
 697               	_out_pin:F(0,15)",36,0,0,init_out_pin
 700 0412 B0E0      	.global	init_out_pin
 702 0416 F0E0      	init_out_pin:
 704 041a 482F      	.LM27:
 705 041c 8A81      	.LFBB4:
 706 041e 282F      		push r29
 707 0420 30E0      		push r28
 708 0422 81E0      		rcall .
 709 0424 90E0      		rcall .
 710 0426 022E      		in r28,__SP_L__
 711 0428 00C0      		in r29,__SP_H__
 712 042a 880F      	/* prologue: function */
 713 042c 991F      	/* frame size = 4 */
 714 042e 0A94      		std Y+1,r24
 715 0430 02F4      		std Y+2,r22
 717 0434 8C93      	.LM28:
 718               		ldd r24,Y+1
 719               		mov r18,r24
  80:lib/io_fct.c  **** 			break;
  81:lib/io_fct.c  **** 		default:
  82:lib/io_fct.c  **** 			break;
  83:lib/io_fct.c  **** 	}
  84:lib/io_fct.c  **** }
 720               	4,r19
 721               		std Y+3,r18
 722 0436 0F90      		ldd r24,Y+3
 723 0438 0F90      		ldd r25,Y+4
 724 043a 0F90      		cpi r24,99
 725 043c 0F90      		cpc r25,__zero_reg__
 726 043e CF91      		brne .+2
 727 0440 DF91      		rjmp .L35
 728 0442 0895      		ldd r18,Y+3
 729               		ldd r19,Y+4
 730               		cpi r18,100
 731               		cpc r19,__zero_reg__
 732               		brge .L39
 733               		ldd r24,Y+3
 734               		ldd r25,Y+4
 735               		cpi r24,97
 736               		cpc r25,__zero_reg__
  85:lib/io_fct.c  **** 
  86:lib/io_fct.c  **** void init_out_pin(char port, char pin)
  87:lib/io_fct.c  **** {
 737               	18,Y+3
 738               		ldd r19,Y+4
 739               		cpi r18,98
 740 0444 DF93      		cpc r19,__zero_reg__
 741 0446 CF93      		breq .L34
 742 0448 00D0      		rjmp .L40
 743 044a 00D0      	.L39:
 744 044c CDB7      		ldd r24,Y+3
 745 044e DEB7      		ldd r25,Y+4
 746               		cpi r24,101
 747               		cpc r25,__zero_reg__
 748 0450 8983      		brne .+2
 749 0452 6A83      		rjmp .L37
  88:lib/io_fct.c  **** 	switch(port)
 750               		ldd r19,Y+4
 751               		cpi r18,101
 752 0454 8981      		cpc r19,__zero_reg__
 753 0456 282F      		brge .+2
 754 0458 30E0      		rjmp .L36
 755 045a 3C83      		ldd r24,Y+3
 756 045c 2B83      		ldd r25,Y+4
 757 045e 8B81      		cpi r24,102
 758 0460 9C81      		cpc r25,__zero_reg__
 759 0462 8336      		brne .+2
 760 0464 9105      		rjmp .L38
 761 0466 01F4      		rjmp .L40
 762 0468 00C0      	.L33:
 764 046c 3C81      	.LM29:
 765 046e 2436      		ldi r26,lo8(58)
 766 0470 3105      		ldi r27,hi8(58)
 767 0472 04F4      		ldi r30,lo8(58)
 768 0474 8B81      		ldi r31,hi8(58)
 769 0476 9C81      		ld r24,Z
 770 0478 8136      		mov r20,r24
 771 047a 9105      		ldd r24,Y+2
 772 047c 01F0      		mov r18,r24
 773 047e 2B81      		ldi r19,lo8(0)
 774 0480 3C81      		ldi r24,lo8(1)
 775 0482 2236      		ldi r25,hi8(1)
 776 0484 3105      		mov r0,r18
 777 0486 01F0      		rjmp 2f
 778 0488 00C0      	1:	lsl r24
 779               		rol r25
 780 048a 8B81      	2:	dec r0
 781 048c 9C81      		brpl 1b
 782 048e 8536      		or r24,r20
 783 0490 9105      		st X,r24
 784 0492 01F4      		rjmp .L40
 785 0494 00C0      	.L34:
 787 0498 3C81      	.LM30:
 788 049a 2536      		ldi r26,lo8(55)
 789 049c 3105      		ldi r27,hi8(55)
 790 049e 04F4      		ldi r30,lo8(55)
 791 04a0 00C0      		ldi r31,hi8(55)
 792 04a2 8B81      		ld r24,Z
 793 04a4 9C81      		mov r20,r24
 794 04a6 8636      		ldd r24,Y+2
 795 04a8 9105      		mov r18,r24
 796 04aa 01F4      		ldi r19,lo8(0)
 797 04ac 00C0      		ldi r24,lo8(1)
 798 04ae 00C0      		ldi r25,hi8(1)
 799               		mov r0,r18
  89:lib/io_fct.c  **** 	{
  90:lib/io_fct.c  **** 		case ('a'):
  91:lib/io_fct.c  **** 			DDRA |= (0x01 << pin);
 800               	r r24,r20
 801               		st X,r24
 802 04b0 AAE3      		rjmp .L40
 803 04b2 B0E0      	.L35:
 805 04b6 F0E0      	.LM31:
 806 04b8 8081      		ldi r26,lo8(52)
 807 04ba 482F      		ldi r27,hi8(52)
 808 04bc 8A81      		ldi r30,lo8(52)
 809 04be 282F      		ldi r31,hi8(52)
 810 04c0 30E0      		ld r24,Z
 811 04c2 81E0      		mov r20,r24
 812 04c4 90E0      		ldd r24,Y+2
 813 04c6 022E      		mov r18,r24
 814 04c8 00C0      		ldi r19,lo8(0)
 815 04ca 880F      		ldi r24,lo8(1)
 816 04cc 991F      		ldi r25,hi8(1)
 817 04ce 0A94      		mov r0,r18
 818 04d0 02F4      		rjmp 2f
 819 04d2 842B      	1:	lsl r24
 820 04d4 8C93      		rol r25
 821 04d6 00C0      	2:	dec r0
 822               		brpl 1b
  92:lib/io_fct.c  **** 			break;
  93:lib/io_fct.c  **** 		case ('b'):
  94:lib/io_fct.c  **** 			DDRB |= (0x01 << pin);
 823               	rjmp .L40
 824               	.L36:
 826 04da B0E0      	.LM32:
 827 04dc E7E3      		ldi r26,lo8(49)
 828 04de F0E0      		ldi r27,hi8(49)
 829 04e0 8081      		ldi r30,lo8(49)
 830 04e2 482F      		ldi r31,hi8(49)
 831 04e4 8A81      		ld r24,Z
 832 04e6 282F      		mov r20,r24
 833 04e8 30E0      		ldd r24,Y+2
 834 04ea 81E0      		mov r18,r24
 835 04ec 90E0      		ldi r19,lo8(0)
 836 04ee 022E      		ldi r24,lo8(1)
 837 04f0 00C0      		ldi r25,hi8(1)
 838 04f2 880F      		mov r0,r18
 839 04f4 991F      		rjmp 2f
 840 04f6 0A94      	1:	lsl r24
 841 04f8 02F4      		rol r25
 842 04fa 842B      	2:	dec r0
 843 04fc 8C93      		brpl 1b
 844 04fe 00C0      		or r24,r20
 845               		st X,r24
  95:lib/io_fct.c  **** 			break;
  96:lib/io_fct.c  **** 		case ('c'):
  97:lib/io_fct.c  **** 			DDRC |= (0x01 << pin);
 846               	n	68,0,103,.LM33-.LFBB4
 847               	.LM33:
 848 0500 A4E3      		ldi r26,lo8(34)
 849 0502 B0E0      		ldi r27,hi8(34)
 850 0504 E4E3      		ldi r30,lo8(34)
 851 0506 F0E0      		ldi r31,hi8(34)
 852 0508 8081      		ld r24,Z
 853 050a 482F      		mov r20,r24
 854 050c 8A81      		ldd r24,Y+2
 855 050e 282F      		mov r18,r24
 856 0510 30E0      		ldi r19,lo8(0)
 857 0512 81E0      		ldi r24,lo8(1)
 858 0514 90E0      		ldi r25,hi8(1)
 859 0516 022E      		mov r0,r18
 860 0518 00C0      		rjmp 2f
 861 051a 880F      	1:	lsl r24
 862 051c 991F      		rol r25
 863 051e 0A94      	2:	dec r0
 864 0520 02F4      		brpl 1b
 865 0522 842B      		or r24,r20
 866 0524 8C93      		st X,r24
 867 0526 00C0      		rjmp .L40
 868               	.L38:
  98:lib/io_fct.c  **** 			break;
  99:lib/io_fct.c  **** 		case ('d'):
 100:lib/io_fct.c  **** 			DDRD |= (0x01 << pin);
 869               	.LFBB4
 870               	.LM34:
 871 0528 A1E3      		ldi r26,lo8(97)
 872 052a B0E0      		ldi r27,hi8(97)
 873 052c E1E3      		ldi r30,lo8(97)
 874 052e F0E0      		ldi r31,hi8(97)
 875 0530 8081      		ld r24,Z
 876 0532 482F      		mov r20,r24
 877 0534 8A81      		ldd r24,Y+2
 878 0536 282F      		mov r18,r24
 879 0538 30E0      		ldi r19,lo8(0)
 880 053a 81E0      		ldi r24,lo8(1)
 881 053c 90E0      		ldi r25,hi8(1)
 882 053e 022E      		mov r0,r18
 883 0540 00C0      		rjmp 2f
 884 0542 880F      	1:	lsl r24
 885 0544 991F      		rol r25
 886 0546 0A94      	2:	dec r0
 887 0548 02F4      		brpl 1b
 888 054a 842B      		or r24,r20
 889 054c 8C93      		st X,r24
 890 054e 00C0      	.L40:
 891               	/* epilogue start */
 101:lib/io_fct.c  **** 			break;
 102:lib/io_fct.c  **** 		case ('e'):
 103:lib/io_fct.c  **** 			DDRE |= (0x01 << pin);
 892               	.LFBB4
 893               	.LM35:
 894 0550 A2E2      		pop __tmp_reg__
 895 0552 B0E0      		pop __tmp_reg__
 896 0554 E2E2      		pop __tmp_reg__
 897 0556 F0E0      		pop __tmp_reg__
 898 0558 8081      		pop r28
 899 055a 482F      		pop r29
 900 055c 8A81      		ret
 902 0560 30E0      	.Lscope4:
 906 0568 00C0      	.global	init_in_pin
 908 056c 991F      	init_in_pin:
 910 0570 02F4      	.LM36:
 911 0572 842B      	.LFBB5:
 912 0574 8C93      		push r29
 913 0576 00C0      		push r28
 914               		rcall .
 104:lib/io_fct.c  **** 			break;
 105:lib/io_fct.c  **** 		case ('f'):
 106:lib/io_fct.c  **** 			DDRF |= (0x01 << pin);
 915               	__
 916               		in r29,__SP_H__
 917 0578 A1E6      	/* prologue: function */
 918 057a B0E0      	/* frame size = 4 */
 919 057c E1E6      		std Y+1,r24
 920 057e F0E0      		std Y+2,r22
 922 0582 482F      	.LM37:
 923 0584 8A81      		ldd r24,Y+1
 924 0586 282F      		mov r18,r24
 925 0588 30E0      		ldi r19,lo8(0)
 926 058a 81E0      		std Y+4,r19
 927 058c 90E0      		std Y+3,r18
 928 058e 022E      		ldd r24,Y+3
 929 0590 00C0      		ldd r25,Y+4
 930 0592 880F      		cpi r24,99
 931 0594 991F      		cpc r25,__zero_reg__
 932 0596 0A94      		brne .+2
 933 0598 02F4      		rjmp .L45
 934 059a 842B      		ldd r18,Y+3
 935 059c 8C93      		ldd r19,Y+4
 936               		cpi r18,100
 937               		cpc r19,__zero_reg__
 107:lib/io_fct.c  **** 			break;
 108:lib/io_fct.c  **** 		default:
 109:lib/io_fct.c  **** 			break;
 110:lib/io_fct.c  **** 	}
 111:lib/io_fct.c  **** }
 938               	
 939               		ldd r25,Y+4
 940 059e 0F90      		cpi r24,97
 941 05a0 0F90      		cpc r25,__zero_reg__
 942 05a2 0F90      		breq .L43
 943 05a4 0F90      		ldd r18,Y+3
 944 05a6 CF91      		ldd r19,Y+4
 945 05a8 DF91      		cpi r18,98
 946 05aa 0895      		cpc r19,__zero_reg__
 947               		breq .L44
 948               		rjmp .L50
 949               	.L49:
 950               		ldd r24,Y+3
 951               		ldd r25,Y+4
 952               		cpi r24,101
 953               		cpc r25,__zero_reg__
 954               		brne .+2
 112:lib/io_fct.c  **** 
 113:lib/io_fct.c  **** void init_in_pin(char port, char pin)
 114:lib/io_fct.c  **** {
 955               	r18,Y+3
 956               		ldd r19,Y+4
 957               		cpi r18,101
 958 05ac DF93      		cpc r19,__zero_reg__
 959 05ae CF93      		brge .+2
 960 05b0 00D0      		rjmp .L46
 961 05b2 00D0      		ldd r24,Y+3
 962 05b4 CDB7      		ldd r25,Y+4
 963 05b6 DEB7      		cpi r24,102
 964               		cpc r25,__zero_reg__
 965               		brne .+2
 966 05b8 8983      		rjmp .L48
 967 05ba 6A83      		rjmp .L50
 115:lib/io_fct.c  **** 	switch(port)
 968               		68,0,118,.LM38-.LFBB5
 969               	.LM38:
 970 05bc 8981      		ldi r26,lo8(58)
 971 05be 282F      		ldi r27,hi8(58)
 972 05c0 30E0      		ldi r30,lo8(58)
 973 05c2 3C83      		ldi r31,hi8(58)
 974 05c4 2B83      		ld r24,Z
 975 05c6 8B81      		mov r20,r24
 976 05c8 9C81      		ldd r24,Y+2
 977 05ca 8336      		mov r18,r24
 978 05cc 9105      		ldi r19,lo8(0)
 979 05ce 01F4      		ldi r24,lo8(1)
 980 05d0 00C0      		ldi r25,hi8(1)
 981 05d2 2B81      		mov r0,r18
 982 05d4 3C81      		rjmp 2f
 983 05d6 2436      	1:	lsl r24
 984 05d8 3105      		rol r25
 985 05da 04F4      	2:	dec r0
 986 05dc 8B81      		brpl 1b
 987 05de 9C81      		com r24
 988 05e0 8136      		and r24,r20
 989 05e2 9105      		st X,r24
 990 05e4 01F0      		rjmp .L50
 991 05e6 2B81      	.L44:
 993 05ea 2236      	.LM39:
 994 05ec 3105      		ldi r26,lo8(55)
 995 05ee 01F0      		ldi r27,hi8(55)
 996 05f0 00C0      		ldi r30,lo8(55)
 997               		ldi r31,hi8(55)
 998 05f2 8B81      		ld r24,Z
 999 05f4 9C81      		mov r20,r24
 1000 05f6 8536      		ldd r24,Y+2
 1001 05f8 9105      		mov r18,r24
 1002 05fa 01F4      		ldi r19,lo8(0)
 1003 05fc 00C0      		ldi r24,lo8(1)
 1004 05fe 2B81      		ldi r25,hi8(1)
 1005 0600 3C81      		mov r0,r18
 1006 0602 2536      		rjmp 2f
 1007 0604 3105      	1:	lsl r24
 1008 0606 04F4      		rol r25
 1009 0608 00C0      	2:	dec r0
 1010 060a 8B81      		brpl 1b
 1011 060c 9C81      		com r24
 1012 060e 8636      		and r24,r20
 1013 0610 9105      		st X,r24
 1014 0612 01F4      		rjmp .L50
 1015 0614 00C0      	.L45:
 1017               	.LM40:
 116:lib/io_fct.c  **** 	{
 117:lib/io_fct.c  **** 		case ('a'):
 118:lib/io_fct.c  **** 			DDRA &= ~(0x01 << pin);
 1018               	
 1019               		ldi r31,hi8(52)
 1020 0618 AAE3      		ld r24,Z
 1021 061a B0E0      		mov r20,r24
 1022 061c EAE3      		ldd r24,Y+2
 1023 061e F0E0      		mov r18,r24
 1024 0620 8081      		ldi r19,lo8(0)
 1025 0622 482F      		ldi r24,lo8(1)
 1026 0624 8A81      		ldi r25,hi8(1)
 1027 0626 282F      		mov r0,r18
 1028 0628 30E0      		rjmp 2f
 1029 062a 81E0      	1:	lsl r24
 1030 062c 90E0      		rol r25
 1031 062e 022E      	2:	dec r0
 1032 0630 00C0      		brpl 1b
 1033 0632 880F      		com r24
 1034 0634 991F      		and r24,r20
 1035 0636 0A94      		st X,r24
 1036 0638 02F4      		rjmp .L50
 1037 063a 8095      	.L46:
 1039 063e 8C93      	.LM41:
 1040 0640 00C0      		ldi r26,lo8(49)
 1041               		ldi r27,hi8(49)
 119:lib/io_fct.c  **** 			break;
 120:lib/io_fct.c  **** 		case ('b'):
 121:lib/io_fct.c  **** 			DDRB &= ~(0x01 << pin);
 1042               	31,hi8(49)
 1043               		ld r24,Z
 1044 0642 A7E3      		mov r20,r24
 1045 0644 B0E0      		ldd r24,Y+2
 1046 0646 E7E3      		mov r18,r24
 1047 0648 F0E0      		ldi r19,lo8(0)
 1048 064a 8081      		ldi r24,lo8(1)
 1049 064c 482F      		ldi r25,hi8(1)
 1050 064e 8A81      		mov r0,r18
 1051 0650 282F      		rjmp 2f
 1052 0652 30E0      	1:	lsl r24
 1053 0654 81E0      		rol r25
 1054 0656 90E0      	2:	dec r0
 1055 0658 022E      		brpl 1b
 1056 065a 00C0      		com r24
 1057 065c 880F      		and r24,r20
 1058 065e 991F      		st X,r24
 1059 0660 0A94      		rjmp .L50
 1060 0662 02F4      	.L47:
 1062 0666 8423      	.LM42:
 1063 0668 8C93      		ldi r26,lo8(34)
 1064 066a 00C0      		ldi r27,hi8(34)
 1065               		ldi r30,lo8(34)
 122:lib/io_fct.c  **** 			break;
 123:lib/io_fct.c  **** 		case ('c'):
 124:lib/io_fct.c  **** 			DDRC &= ~(0x01 << pin);
 1066               	,Z
 1067               		mov r20,r24
 1068 066c A4E3      		ldd r24,Y+2
 1069 066e B0E0      		mov r18,r24
 1070 0670 E4E3      		ldi r19,lo8(0)
 1071 0672 F0E0      		ldi r24,lo8(1)
 1072 0674 8081      		ldi r25,hi8(1)
 1073 0676 482F      		mov r0,r18
 1074 0678 8A81      		rjmp 2f
 1075 067a 282F      	1:	lsl r24
 1076 067c 30E0      		rol r25
 1077 067e 81E0      	2:	dec r0
 1078 0680 90E0      		brpl 1b
 1079 0682 022E      		com r24
 1080 0684 00C0      		and r24,r20
 1081 0686 880F      		st X,r24
 1082 0688 991F      		rjmp .L50
 1083 068a 0A94      	.L48:
 1085 068e 8095      	.LM43:
 1086 0690 8423      		ldi r26,lo8(97)
 1087 0692 8C93      		ldi r27,hi8(97)
 1088 0694 00C0      		ldi r30,lo8(97)
 1089               		ldi r31,hi8(97)
 125:lib/io_fct.c  **** 			break;
 126:lib/io_fct.c  **** 		case ('d'):
 127:lib/io_fct.c  **** 			DDRD &= ~(0x01 << pin);
 1090               	ldd r24,Y+2
 1091               		mov r18,r24
 1092 0696 A1E3      		ldi r19,lo8(0)
 1093 0698 B0E0      		ldi r24,lo8(1)
 1094 069a E1E3      		ldi r25,hi8(1)
 1095 069c F0E0      		mov r0,r18
 1096 069e 8081      		rjmp 2f
 1097 06a0 482F      	1:	lsl r24
 1098 06a2 8A81      		rol r25
 1099 06a4 282F      	2:	dec r0
 1100 06a6 30E0      		brpl 1b
 1101 06a8 81E0      		com r24
 1102 06aa 90E0      		and r24,r20
 1103 06ac 022E      		st X,r24
 1104 06ae 00C0      	.L50:
 1105 06b0 880F      	/* epilogue start */
 1107 06b4 0A94      	.LM44:
 1108 06b6 02F4      		pop __tmp_reg__
 1109 06b8 8095      		pop __tmp_reg__
 1110 06ba 8423      		pop __tmp_reg__
 1111 06bc 8C93      		pop __tmp_reg__
 1112 06be 00C0      		pop r28
 1113               		pop r29
 128:lib/io_fct.c  **** 			break;
 129:lib/io_fct.c  **** 		case ('e'):
 130:lib/io_fct.c  **** 			DDRE &= ~(0x01 << pin);
 1114               	 .-init_in_pin
 1115               	.Lscope5:
 1118 06c4 E2E2      	.global	init_out_port
 1120 06c8 8081      	init_out_port:
 1122 06cc 8A81      	.LM45:
 1123 06ce 282F      	.LFBB6:
 1124 06d0 30E0      		push r29
 1125 06d2 81E0      		push r28
 1126 06d4 90E0      		in r28,__SP_L__
 1127 06d6 022E      		in r29,__SP_H__
 1128 06d8 00C0      		sbiw r28,9
 1129 06da 880F      		in __tmp_reg__,__SREG__
 1130 06dc 991F      		cli
 1131 06de 0A94      		out __SP_H__,r29
 1132 06e0 02F4      		out __SREG__,__tmp_reg__
 1133 06e2 8095      		out __SP_L__,r28
 1134 06e4 8423      	/* prologue: function */
 1135 06e6 8C93      	/* frame size = 9 */
 1136 06e8 00C0      		std Y+1,r24
 131:lib/io_fct.c  **** 			break;
 132:lib/io_fct.c  **** 		case ('f'):
 133:lib/io_fct.c  **** 			DDRF &= ~(0x01 << pin);
 1138               	 r18,r24
 1139               		ldi r19,lo8(0)
 1140 06ea A1E6      		std Y+9,r19
 1141 06ec B0E0      		std Y+8,r18
 1142 06ee E1E6      		ldd r24,Y+8
 1143 06f0 F0E0      		ldd r25,Y+9
 1144 06f2 8081      		cpi r24,99
 1145 06f4 482F      		cpc r25,__zero_reg__
 1146 06f6 8A81      		breq .L55
 1147 06f8 282F      		ldd r18,Y+8
 1148 06fa 30E0      		ldd r19,Y+9
 1149 06fc 81E0      		cpi r18,100
 1150 06fe 90E0      		cpc r19,__zero_reg__
 1151 0700 022E      		brge .L59
 1152 0702 00C0      		ldd r24,Y+8
 1153 0704 880F      		ldd r25,Y+9
 1154 0706 991F      		cpi r24,97
 1155 0708 0A94      		cpc r25,__zero_reg__
 1156 070a 02F4      		breq .L53
 1157 070c 8095      		ldd r18,Y+8
 1158 070e 8423      		ldd r19,Y+9
 1159 0710 8C93      		cpi r18,98
 1160               		cpc r19,__zero_reg__
 1161               		breq .L54
 134:lib/io_fct.c  **** 			break;
 135:lib/io_fct.c  **** 		default:
 136:lib/io_fct.c  **** 			break;
 137:lib/io_fct.c  **** 	}
 138:lib/io_fct.c  **** }
 1162               	4,Y+8
 1163               		ldd r25,Y+9
 1164 0712 0F90      		cpi r24,101
 1165 0714 0F90      		cpc r25,__zero_reg__
 1166 0716 0F90      		breq .L57
 1167 0718 0F90      		ldd r18,Y+8
 1168 071a CF91      		ldd r19,Y+9
 1169 071c DF91      		cpi r18,101
 1170 071e 0895      		cpc r19,__zero_reg__
 1171               		brlt .L56
 1172               		ldd r24,Y+8
 1173               		ldd r25,Y+9
 1174               		cpi r24,102
 1175               		cpc r25,__zero_reg__
 1176               		breq .L58
 1177               		rjmp .L60
 139:lib/io_fct.c  **** 
 140:lib/io_fct.c  **** void init_out_port(char port)
 141:lib/io_fct.c  **** {
 1178               	,0,145,.LM47-.LFBB6
 1179               	.LM47:
 1180               		ldi r30,lo8(58)
 1181 0720 DF93      		ldi r31,hi8(58)
 1182 0722 CF93      		ld r25,Z
 1183 0724 CDB7      		ldi r30,lo8(58)
 1184 0726 DEB7      		ldi r31,hi8(58)
 1185 0728 2997      		ldi r24,lo8(-1)
 1186 072a 0FB6      		st Z,r24
 1187 072c F894      		rjmp .L60
 1188 072e DEBF      	.L54:
 1190 0732 CDBF      	.LM48:
 1191               		ldi r30,lo8(55)
 1192               		ldi r31,hi8(55)
 1193 0734 8983      		ld r18,Z
 142:lib/io_fct.c  **** 	switch(port)
 1194               	
 1195               		ldi r31,hi8(55)
 1196 0736 8981      		ldi r24,lo8(-1)
 1197 0738 282F      		st Z,r24
 1198 073a 30E0      		rjmp .L60
 1199 073c 3987      	.L55:
 1201 0740 8885      	.LM49:
 1202 0742 9985      		ldi r30,lo8(52)
 1203 0744 8336      		ldi r31,hi8(52)
 1204 0746 9105      		ld r19,Z
 1205 0748 01F0      		ldi r30,lo8(52)
 1206 074a 2885      		ldi r31,hi8(52)
 1207 074c 3985      		ldi r24,lo8(-1)
 1208 074e 2436      		st Z,r24
 1209 0750 3105      		rjmp .L60
 1210 0752 04F4      	.L56:
 1212 0756 9985      	.LM50:
 1213 0758 8136      		ldi r30,lo8(49)
 1214 075a 9105      		ldi r31,hi8(49)
 1215 075c 01F0      		ld r24,Z
 1216 075e 2885      		ldi r30,lo8(49)
 1217 0760 3985      		ldi r31,hi8(49)
 1218 0762 2236      		ldi r24,lo8(-1)
 1219 0764 3105      		st Z,r24
 1220 0766 01F0      		rjmp .L60
 1221 0768 00C0      	.L57:
 1223 076a 8885      	.LM51:
 1224 076c 9985      		ldi r30,lo8(34)
 1225 076e 8536      		ldi r31,hi8(34)
 1226 0770 9105      		ld r25,Z
 1227 0772 01F0      		ldi r30,lo8(34)
 1228 0774 2885      		ldi r31,hi8(34)
 1229 0776 3985      		ldi r24,lo8(-1)
 1230 0778 2536      		st Z,r24
 1231 077a 3105      		rjmp .L60
 1232 077c 04F0      	.L58:
 1234 0780 9985      	.LM52:
 1235 0782 8636      		ldi r30,lo8(97)
 1236 0784 9105      		ldi r31,hi8(97)
 1237 0786 01F0      		ld r18,Z
 1238 0788 00C0      		ldi r30,lo8(97)
 1239               		ldi r31,hi8(97)
 143:lib/io_fct.c  **** 	{
 144:lib/io_fct.c  **** 		case ('a'):
 145:lib/io_fct.c  **** 			DDRA |= 0xff;
 1240               	start */
 1242 078a EAE3      	.LM53:
 1243 078c F0E0      		adiw r28,9
 1244 078e 9081      		in __tmp_reg__,__SREG__
 1245 0790 EAE3      		cli
 1246 0792 F0E0      		out __SP_H__,r29
 1247 0794 8FEF      		out __SREG__,__tmp_reg__
 1248 0796 8083      		out __SP_L__,r28
 1249 0798 00C0      		pop r28
 1250               		pop r29
 146:lib/io_fct.c  **** 			break;
 147:lib/io_fct.c  **** 		case ('b'):
 148:lib/io_fct.c  **** 			DDRB |= 0xff;
 1251               		init_out_port, .-init_out_port
 1252               	.Lscope6:
 1255 079e 2081      	.global	init_in_port
 1257 07a2 F0E0      	init_in_port:
 1259 07a6 8083      	.LM54:
 1260 07a8 00C0      	.LFBB7:
 1261               		push r29
 149:lib/io_fct.c  **** 			break;
 150:lib/io_fct.c  **** 		case ('c'):
 151:lib/io_fct.c  **** 			DDRC |= 0xff;
 1262               	in r28,__SP_L__
 1263               		in r29,__SP_H__
 1264 07aa E4E3      		sbiw r28,9
 1265 07ac F0E0      		in __tmp_reg__,__SREG__
 1266 07ae 3081      		cli
 1267 07b0 E4E3      		out __SP_H__,r29
 1268 07b2 F0E0      		out __SREG__,__tmp_reg__
 1269 07b4 8FEF      		out __SP_L__,r28
 1270 07b6 8083      	/* prologue: function */
 1271 07b8 00C0      	/* frame size = 9 */
 1272               		std Y+1,r24
 152:lib/io_fct.c  **** 			break;
 153:lib/io_fct.c  **** 		case ('d'):
 154:lib/io_fct.c  **** 			DDRD |= 0xff;
 1273               	0,169,.LM55-.LFBB7
 1274               	.LM55:
 1275 07ba E1E3      		ldd r24,Y+1
 1276 07bc F0E0      		mov r18,r24
 1277 07be 8081      		ldi r19,lo8(0)
 1278 07c0 E1E3      		std Y+9,r19
 1279 07c2 F0E0      		std Y+8,r18
 1280 07c4 8FEF      		ldd r24,Y+8
 1281 07c6 8083      		ldd r25,Y+9
 1282 07c8 00C0      		cpi r24,99
 1283               		cpc r25,__zero_reg__
 155:lib/io_fct.c  **** 			break;
 156:lib/io_fct.c  **** 		case ('e'):
 157:lib/io_fct.c  **** 			DDRE |= 0xff;
 1284               		ldd r18,Y+8
 1285               		ldd r19,Y+9
 1286 07ca E2E2      		cpi r18,100
 1287 07cc F0E0      		cpc r19,__zero_reg__
 1288 07ce 9081      		brge .L69
 1289 07d0 E2E2      		ldd r24,Y+8
 1290 07d2 F0E0      		ldd r25,Y+9
 1291 07d4 8FEF      		cpi r24,97
 1292 07d6 8083      		cpc r25,__zero_reg__
 1293 07d8 00C0      		breq .L63
 1294               		ldd r18,Y+8
 158:lib/io_fct.c  **** 			break;
 159:lib/io_fct.c  **** 		case ('f'):
 160:lib/io_fct.c  **** 			DDRF |= 0xff;
 1295               	9
 1296               		cpi r18,98
 1297 07da E1E6      		cpc r19,__zero_reg__
 1298 07dc F0E0      		breq .L64
 1299 07de 2081      		rjmp .L70
 1300 07e0 E1E6      	.L69:
 1301 07e2 F0E0      		ldd r24,Y+8
 1302 07e4 8FEF      		ldd r25,Y+9
 1303 07e6 8083      		cpi r24,101
 1304               		cpc r25,__zero_reg__
 1305               		breq .L67
 161:lib/io_fct.c  **** 			break;
 162:lib/io_fct.c  **** 		default:
 163:lib/io_fct.c  **** 			break;
 164:lib/io_fct.c  **** 	}
 165:lib/io_fct.c  **** }
 1306               	8
 1307               		ldd r19,Y+9
 1308 07e8 2996      		cpi r18,101
 1309 07ea 0FB6      		cpc r19,__zero_reg__
 1310 07ec F894      		brlt .L66
 1311 07ee DEBF      		ldd r24,Y+8
 1312 07f0 0FBE      		ldd r25,Y+9
 1313 07f2 CDBF      		cpi r24,102
 1314 07f4 CF91      		cpc r25,__zero_reg__
 1315 07f6 DF91      		breq .L68
 1316 07f8 0895      		rjmp .L70
 1317               	.L63:
 1319               	.LM56:
 1320               		ldi r30,lo8(58)
 1321               		ldi r31,hi8(58)
 1322               		ld r25,Z
 1323               		ldi r30,lo8(58)
 166:lib/io_fct.c  **** 
 167:lib/io_fct.c  **** void init_in_port(char port)
 168:lib/io_fct.c  **** {
 1324               	st Z,__zero_reg__
 1325               		rjmp .L70
 1326               	.L64:
 1328 07fc CF93      	.LM57:
 1329 07fe CDB7      		ldi r30,lo8(55)
 1330 0800 DEB7      		ldi r31,hi8(55)
 1331 0802 2997      		ld r18,Z
 1332 0804 0FB6      		ldi r30,lo8(55)
 1333 0806 F894      		ldi r31,hi8(55)
 1334 0808 DEBF      		st Z,__zero_reg__
 1335 080a 0FBE      		rjmp .L70
 1336 080c CDBF      	.L65:
 1338               	.LM58:
 1339 080e 8983      		ldi r30,lo8(52)
 169:lib/io_fct.c  **** 	switch(port)
 1340               	
 1341               		ld r19,Z
 1342 0810 8981      		ldi r30,lo8(52)
 1343 0812 282F      		ldi r31,hi8(52)
 1344 0814 30E0      		st Z,__zero_reg__
 1345 0816 3987      		rjmp .L70
 1346 0818 2887      	.L66:
 1348 081c 9985      	.LM59:
 1349 081e 8336      		ldi r30,lo8(49)
 1350 0820 9105      		ldi r31,hi8(49)
 1351 0822 01F0      		ld r24,Z
 1352 0824 2885      		ldi r30,lo8(49)
 1353 0826 3985      		ldi r31,hi8(49)
 1354 0828 2436      		st Z,__zero_reg__
 1355 082a 3105      		rjmp .L70
 1356 082c 04F4      	.L67:
 1358 0830 9985      	.LM60:
 1359 0832 8136      		ldi r30,lo8(34)
 1360 0834 9105      		ldi r31,hi8(34)
 1361 0836 01F0      		ld r25,Z
 1362 0838 2885      		ldi r30,lo8(34)
 1363 083a 3985      		ldi r31,hi8(34)
 1364 083c 2236      		st Z,__zero_reg__
 1365 083e 3105      		rjmp .L70
 1366 0840 01F0      	.L68:
 1368               	.LM61:
 1369 0844 8885      		ldi r30,lo8(97)
 1370 0846 9985      		ldi r31,hi8(97)
 1371 0848 8536      		ld r18,Z
 1372 084a 9105      		ldi r30,lo8(97)
 1373 084c 01F0      		ldi r31,hi8(97)
 1374 084e 2885      		st Z,__zero_reg__
 1375 0850 3985      	.L70:
 1376 0852 2536      	/* epilogue start */
 1378 0856 04F0      	.LM62:
 1379 0858 8885      		adiw r28,9
 1380 085a 9985      		in __tmp_reg__,__SREG__
 1381 085c 8636      		cli
 1382 085e 9105      		out __SP_H__,r29
 1383 0860 01F0      		out __SREG__,__tmp_reg__
 1384 0862 00C0      		out __SP_L__,r28
 1385               		pop r28
 170:lib/io_fct.c  **** 	{
 171:lib/io_fct.c  **** 		case ('a'):
 172:lib/io_fct.c  **** 			DDRA &= 0x00;
 1386               	port
 1387               	.Lscope7:
 1390 0868 9081      	.global	USART_Init
 1392 086c F0E0      	USART_Init:
 1394 0870 00C0      	.LM63:
 1395               	.LFBB8:
 173:lib/io_fct.c  **** 			break;
 174:lib/io_fct.c  **** 		case ('b'):
 175:lib/io_fct.c  **** 			DDRB &= 0x00;
 1396               		push r28
 1397               		rcall .
 1398 0872 E7E3      		in r28,__SP_L__
 1399 0874 F0E0      		in r29,__SP_H__
 1400 0876 2081      	/* prologue: function */
 1401 0878 E7E3      	/* frame size = 2 */
 1402 087a F0E0      		std Y+2,r25
 1403 087c 1082      		std Y+1,r24
 1405               	.LM64:
 176:lib/io_fct.c  **** 			break;
 177:lib/io_fct.c  **** 		case ('c'):
 178:lib/io_fct.c  **** 			DDRC &= 0x00;
 1406               	o8(144)
 1407               		ldi r31,hi8(144)
 1408 0880 E4E3      		ldd r24,Y+1
 1409 0882 F0E0      		ldd r25,Y+2
 1410 0884 3081      		mov r24,r25
 1411 0886 E4E3      		clr r25
 1412 0888 F0E0      		st Z,r24
 1414 088c 00C0      	.LM65:
 1415               		ldi r30,lo8(41)
 179:lib/io_fct.c  **** 			break;
 180:lib/io_fct.c  **** 		case ('d'):
 181:lib/io_fct.c  **** 			DDRD &= 0x00;
 1416               	i8(41)
 1417               		ldd r24,Y+1
 1418 088e E1E3      		st Z,r24
 1420 0892 8081      	.LM66:
 1421 0894 E1E3      		ldi r30,lo8(42)
 1422 0896 F0E0      		ldi r31,hi8(42)
 1423 0898 1082      		ldi r24,lo8(24)
 1424 089a 00C0      		st Z,r24
 182:lib/io_fct.c  **** 			break;
 183:lib/io_fct.c  **** 		case ('e'):
 184:lib/io_fct.c  **** 			DDRE &= 0x00;
 1426               	i r30,lo8(149)
 1427               		ldi r31,hi8(149)
 1428 089c E2E2      		ldi r24,lo8(14)
 1429 089e F0E0      		st Z,r24
 1430 08a0 9081      	/* epilogue start */
 1432 08a4 F0E0      	.LM68:
 1433 08a6 1082      		pop __tmp_reg__
 1434 08a8 00C0      		pop __tmp_reg__
 1435               		pop r28
 185:lib/io_fct.c  **** 			break;
 186:lib/io_fct.c  **** 		case ('f'):
 187:lib/io_fct.c  **** 			DDRF &= 0x00;
 1436               	ret
 1438 08aa E1E6      	.Lscope8:
 1440 08ae 2081      	.global	init_serial
 1442 08b2 F0E0      	init_serial:
 1444               	.LM69:
 1445               	.LFBB9:
 188:lib/io_fct.c  **** 			break;
 189:lib/io_fct.c  **** 		default:
 190:lib/io_fct.c  **** 			break;
 191:lib/io_fct.c  **** 	}
 192:lib/io_fct.c  **** }
 1446               		push r28
 1447               		in r28,__SP_L__
 1448 08b6 2996      		in r29,__SP_H__
 1449 08b8 0FB6      	/* prologue: function */
 1450 08ba F894      	/* frame size = 0 */
 1452 08be 0FBE      	.LM70:
 1453 08c0 CDBF      		ldi r30,lo8(43)
 1454 08c2 CF91      		ldi r31,hi8(43)
 1455 08c4 DF91      		st Z,__zero_reg__
 1457               	.LM71:
 1458               		ldi r30,lo8(42)
 1459               		ldi r31,hi8(42)
 1460               		ldi r24,lo8(24)
 1461               		st Z,r24
 1463               	.LM72:
 193:lib/io_fct.c  **** 
 194:lib/io_fct.c  **** void USART_Init( unsigned int baud )
 195:lib/io_fct.c  **** {
 1464               		ldi r31,hi8(149)
 1465               		ldi r24,lo8(-122)
 1466               		st Z,r24
 1468 08ca CF93      	.LM73:
 1469 08cc 00D0      		ldi r30,lo8(144)
 1470 08ce CDB7      		ldi r31,hi8(144)
 1471 08d0 DEB7      		st Z,__zero_reg__
 1473               	.LM74:
 1474 08d2 9A83      		ldi r30,lo8(41)
 1475 08d4 8983      		ldi r31,hi8(41)
 196:lib/io_fct.c  **** 	/* Set baud rate */
 197:lib/io_fct.c  **** 	UBRR0H = (unsigned char)(baud>>8);
 1476               	(8)
 1477               		st Z,r24
 1478 08d6 E0E9      	/* epilogue start */
 1480 08da 8981      	.LM75:
 1481 08dc 9A81      		pop r28
 1482 08de 892F      		pop r29
 1483 08e0 9927      		ret
 198:lib/io_fct.c  **** 	UBRR0L = (unsigned char)baud;
 1485               	
 1487 08e4 E9E2      	.global	init_in_ana
 1489 08e8 8981      	init_in_ana:
 199:lib/io_fct.c  **** 	/* Enable receiver and transmitter */
 200:lib/io_fct.c  **** 	UCSR0B = (1<<RXEN)|(1<<TXEN);
 1491               	:
 1492               	.LFBB10:
 1493 08ec EAE2      		push r29
 1494 08ee F0E0      		push r28
 1495 08f0 88E1      		in r28,__SP_L__
 1496 08f2 8083      		in r29,__SP_H__
 201:lib/io_fct.c  **** 	/* Set frame format: 8data, 2stop bit */
 202:lib/io_fct.c  **** 	UCSR0C = (1<<USBS)|(3<<UCSZ0);
 1497               	logue: function */
 1498               	/* frame size = 0 */
 1500 08f6 F0E0      	.LM77:
 1501 08f8 8EE0      		ldi r30,lo8(39)
 1502 08fa 8083      		ldi r31,hi8(39)
 1503               		ldi r24,lo8(64)
 203:lib/io_fct.c  **** }
 1504               	24
 1506 08fc 0F90      	.LM78:
 1507 08fe 0F90      		ldi r30,lo8(38)
 1508 0900 CF91      		ldi r31,hi8(38)
 1509 0902 DF91      		ldi r24,lo8(-98)
 1510 0904 0895      		st Z,r24
 1512               	.LM79:
 1513               		ldi r26,lo8(38)
 1514               		ldi r27,hi8(38)
 1515               		ldi r30,lo8(38)
 1516               		ldi r31,hi8(38)
 204:lib/io_fct.c  **** 
 205:lib/io_fct.c  **** void init_serial(void)
 206:lib/io_fct.c  **** {
 1517               	i r24,lo8(96)
 1518               		st X,r24
 1519               	/* epilogue start */
 1521 0908 CF93      	.LM80:
 1522 090a CDB7      		pop r28
 1523 090c DEB7      		pop r29
 1524               		ret
 207:lib/io_fct.c  **** //	UBRR0H = 0;		//UBRR to 15 for 115200bps with 20Mhz
 208:lib/io_fct.c  **** //	UBRR0L = 21;
 209:lib/io_fct.c  **** 
 210:lib/io_fct.c  **** 	UCSR0A=0x00;
 1526               	:
 1530 0912 1082      	.global	get_in_pin
 211:lib/io_fct.c  **** 	UCSR0B=0x18;
 1531               	e	get_in_pin, @function
 1532               	get_in_pin:
 1534 0916 F0E0      	.LM81:
 1535 0918 88E1      	.LFBB11:
 1536 091a 8083      		push r29
 212:lib/io_fct.c  **** 	UCSR0C=0x86;
 1537               	r28
 1538               		rcall .
 1539 091c E5E9      		rcall .
 1540 091e F0E0      		push __tmp_reg__
 1541 0920 86E8      		in r28,__SP_L__
 1542 0922 8083      		in r29,__SP_H__
 213:lib/io_fct.c  **** 	UBRR0H=0x00;
 1543               	logue: function */
 1544               	/* frame size = 5 */
 1545 0924 E0E9      		std Y+2,r24
 1546 0926 F0E0      		std Y+3,r22
 214:lib/io_fct.c  **** 	UBRR0L=0x08;
 1548               	:
 1549               		std Y+1,__zero_reg__
 1551 092c F0E0      	.LM83:
 1552 092e 88E0      		ldd r24,Y+2
 1553 0930 8083      		mov r18,r24
 1554               		ldi r19,lo8(0)
 215:lib/io_fct.c  **** 
 216:lib/io_fct.c  **** /*	UCSR0A=0x00;
 217:lib/io_fct.c  **** 	UCSR0B=0x18;
 218:lib/io_fct.c  **** 	UCSR0C=0x06;
 219:lib/io_fct.c  **** 	UBRR0H=0x00;
 220:lib/io_fct.c  **** 	UBRR0L=0x08;
 221:lib/io_fct.c  **** //	UBRR0L=0x08;
 222:lib/io_fct.c  **** 	
 223:lib/io_fct.c  **** /*	UCSR0A = 0x62;	// 
 224:lib/io_fct.c  **** 	UCSR0B = 0x18;	// interrupts disabled, transmitter and reciever enabled, 8bit, no 9th bit
 225:lib/io_fct.c  **** 	UCSR0C = 0x86; 	// no parity, asynchronous, 1 stopbit, 8bit number*/
 226:lib/io_fct.c  **** }
 1555               	5,r19
 1556               		std Y+4,r18
 1557 0932 CF91      		ldd r24,Y+4
 1558 0934 DF91      		ldd r25,Y+5
 1559 0936 0895      		cpi r24,99
 1560               		cpc r25,__zero_reg__
 1561               		breq .L81
 1562               		ldd r18,Y+4
 1563               		ldd r19,Y+5
 1564               		cpi r18,100
 1565               		cpc r19,__zero_reg__
 227:lib/io_fct.c  **** 
 228:lib/io_fct.c  **** void init_in_ana(void)
 229:lib/io_fct.c  **** {
 1566               		ldd r24,Y+4
 1567               		ldd r25,Y+5
 1568               		cpi r24,97
 1569 0938 DF93      		cpc r25,__zero_reg__
 1570 093a CF93      		breq .L79
 1571 093c CDB7      		ldd r18,Y+4
 1572 093e DEB7      		ldd r19,Y+5
 1573               		cpi r18,98
 1574               		cpc r19,__zero_reg__
 230:lib/io_fct.c  **** 	ADMUX = 0x40;	//connect to pin 0
 1575               	0
 1576               		rjmp .L78
 1577 0940 E7E2      	.L85:
 1578 0942 F0E0      		ldd r24,Y+4
 1579 0944 80E4      		ldd r25,Y+5
 1580 0946 8083      		cpi r24,101
 231:lib/io_fct.c  **** 	ADCSRA = 0x9e;	//enable ad converter
 1581               	25,__zero_reg__
 1582               		breq .L83
 1583 0948 E6E2      		ldd r18,Y+4
 1584 094a F0E0      		ldd r19,Y+5
 1585 094c 8EE9      		cpi r18,101
 1586 094e 8083      		cpc r19,__zero_reg__
 232:lib/io_fct.c  **** 	ADCSRA |= 0x60;	//start converter
 1587               	.L82
 1588               		ldd r24,Y+4
 1589 0950 A6E2      		ldd r25,Y+5
 1590 0952 B0E0      		cpi r24,102
 1591 0954 E6E2      		cpc r25,__zero_reg__
 1592 0956 F0E0      		breq .L84
 1593 0958 8081      		rjmp .L78
 1594 095a 8066      	.L79:
 1596               	.LM84:
 233:lib/io_fct.c  **** }
 1597               	o8(57)
 1598               		ldi r31,hi8(57)
 1599 095e CF91      		ld r24,Z
 1600 0960 DF91      		std Y+1,r24
 1601 0962 0895      		rjmp .L78
 1602               	.L80:
 1604               	.LM85:
 1605               		ldi r30,lo8(54)
 1606               		ldi r31,hi8(54)
 1607               		ld r24,Z
 1608               		std Y+1,r24
 1609               		rjmp .L78
 234:lib/io_fct.c  **** 
 235:lib/io_fct.c  **** unsigned char get_in_pin(unsigned char port, unsigned char pin)
 236:lib/io_fct.c  **** {
 1610               		68,0,248,.LM86-.LFBB11
 1611               	.LM86:
 1612               		ldi r30,lo8(51)
 1613 0964 DF93      		ldi r31,hi8(51)
 1614 0966 CF93      		ld r24,Z
 1615 0968 00D0      		std Y+1,r24
 1616 096a 00D0      		rjmp .L78
 1617 096c 0F92      	.L82:
 1619 0970 DEB7      	.LM87:
 1620               		ldi r30,lo8(48)
 1621               		ldi r31,hi8(48)
 1622 0972 8A83      		ld r24,Z
 1623 0974 6B83      		std Y+1,r24
 237:lib/io_fct.c  **** 	unsigned char c = 0;
 1624               	3:
 1626 0976 1982      	.LM88:
 238:lib/io_fct.c  **** 
 239:lib/io_fct.c  **** 	switch(port)
 1627               	i r30,lo8(33)
 1628               		ldi r31,hi8(33)
 1629 0978 8A81      		ld r24,Z
 1630 097a 282F      		std Y+1,r24
 1631 097c 30E0      		rjmp .L78
 1632 097e 3D83      	.L84:
 1634 0982 8C81      	.LM89:
 1635 0984 9D81      		ldi r30,lo8(32)
 1636 0986 8336      		ldi r31,hi8(32)
 1637 0988 9105      		ld r24,Z
 1638 098a 01F0      		std Y+1,r24
 1639 098c 2C81      	.L78:
 1641 0990 2436      	.LM90:
 1642 0992 3105      		ldd r24,Y+3
 1643 0994 04F4      		mov r18,r24
 1644 0996 8C81      		ldi r19,lo8(0)
 1645 0998 9D81      		ldi r24,lo8(1)
 1646 099a 8136      		ldi r25,hi8(1)
 1647 099c 9105      		mov r0,r18
 1648 099e 01F0      		rjmp 2f
 1649 09a0 2C81      	1:	lsl r24
 1650 09a2 3D81      		rol r25
 1651 09a4 2236      	2:	dec r0
 1652 09a6 3105      		brpl 1b
 1653 09a8 01F0      		mov r25,r24
 1654 09aa 00C0      		ldd r24,Y+1
 1655               		and r24,r25
 1656 09ac 8C81      		std Y+1,r24
 1658 09b0 8536      	.LM91:
 1659 09b2 9105      		ldd r24,Y+1
 1660 09b4 01F0      	/* epilogue start */
 1662 09b8 3D81      	.LM92:
 1663 09ba 2536      		pop __tmp_reg__
 1664 09bc 3105      		pop __tmp_reg__
 1665 09be 04F0      		pop __tmp_reg__
 1666 09c0 8C81      		pop __tmp_reg__
 1667 09c2 9D81      		pop __tmp_reg__
 1668 09c4 8636      		pop r28
 1669 09c6 9105      		pop r29
 1670 09c8 01F0      		ret
 240:lib/io_fct.c  **** 	{
 241:lib/io_fct.c  **** 		case ('a'):
 242:lib/io_fct.c  **** 			c = PINA;
 1673               	0,.Lscope11-.LFBB11
 1674               	.Lscope11:
 1677 09d0 8081      	.global	read_adc
 1679 09d4 00C0      	read_adc:
 243:lib/io_fct.c  **** 			break;
 244:lib/io_fct.c  **** 		case ('b'):
 245:lib/io_fct.c  **** 			c = PINB;
 1681               	LFBB12:
 1682               		push r29
 1683 09d6 E6E3      		push r28
 1684 09d8 F0E0      		push __tmp_reg__
 1685 09da 8081      		in r28,__SP_L__
 1686 09dc 8983      		in r29,__SP_H__
 1687 09de 00C0      	/* prologue: function */
 1688               	/* frame size = 1 */
 246:lib/io_fct.c  **** 			break;
 247:lib/io_fct.c  **** 		case ('c'):
 248:lib/io_fct.c  **** 			c = PINC;
 1689               	,r24
 1691 09e0 E3E3      	.LM94:
 1692 09e2 F0E0      		ldi r30,lo8(39)
 1693 09e4 8081      		ldi r31,hi8(39)
 1694 09e6 8983      		ldd r24,Y+1
 1695 09e8 00C0      		ori r24,lo8(-64)
 1696               		st Z,r24
 249:lib/io_fct.c  **** 			break;
 250:lib/io_fct.c  **** 		case ('d'):
 251:lib/io_fct.c  **** 			c = PIND;
 1697               	68,0,271,.LM95-.LFBB12
 1698               	.LM95:
 1699 09ea E0E3      		ldi r26,lo8(38)
 1700 09ec F0E0      		ldi r27,hi8(38)
 1701 09ee 8081      		ldi r30,lo8(38)
 1702 09f0 8983      		ldi r31,hi8(38)
 1703 09f2 00C0      		ld r24,Z
 1704               		ori r24,lo8(64)
 252:lib/io_fct.c  **** 			break;
 253:lib/io_fct.c  **** 		case ('e'):
 254:lib/io_fct.c  **** 			c = PINE;
 1705               	4
 1706               	.L88:
 1708 09f6 F0E0      	.LM96:
 1709 09f8 8081      		ldi r30,lo8(38)
 1710 09fa 8983      		ldi r31,hi8(38)
 1711 09fc 00C0      		ld r24,Z
 1712               		mov r24,r24
 255:lib/io_fct.c  **** 			break;
 256:lib/io_fct.c  **** 		case ('f'):
 257:lib/io_fct.c  **** 			c = PINF;
 1713               	,lo8(0)
 1714               		andi r24,lo8(16)
 1715 09fe E0E2      		andi r25,hi8(16)
 1716 0a00 F0E0      		sbiw r24,0
 1717 0a02 8081      		breq .L88
 1719               	.LM97:
 258:lib/io_fct.c  **** 			break;
 259:lib/io_fct.c  **** 		default:
 260:lib/io_fct.c  **** 			break;
 261:lib/io_fct.c  **** 	}	
 262:lib/io_fct.c  **** 	c &= (0x01 << pin);
 1720               	6,lo8(38)
 1721               		ldi r27,hi8(38)
 1722 0a06 8B81      		ldi r30,lo8(38)
 1723 0a08 282F      		ldi r31,hi8(38)
 1724 0a0a 30E0      		ld r24,Z
 1725 0a0c 81E0      		ori r24,lo8(16)
 1726 0a0e 90E0      		st X,r24
 1728 0a12 00C0      	.LM98:
 1729 0a14 880F      		ldi r30,lo8(36)
 1730 0a16 991F      		ldi r31,hi8(36)
 1731 0a18 0A94      		ld r24,Z
 1732 0a1a 02F4      		ldd r25,Z+1
 1733 0a1c 982F      	/* epilogue start */
 1735 0a20 8923      	.LM99:
 1736 0a22 8983      		pop __tmp_reg__
 263:lib/io_fct.c  **** 	
 264:lib/io_fct.c  **** 	return c;
 1737               	
 1738               		ret
 1740               	.Lscope12:
 265:lib/io_fct.c  **** }
 1741               	tabn	162,0,0,0
 1742               		.data
 1745 0a2a 0F90      	Font5x7:
 1746 0a2c 0F90      		.byte	0
 1747 0a2e 0F90      		.byte	0
 1748 0a30 CF91      		.byte	0
 1749 0a32 DF91      		.byte	0
 1750 0a34 0895      		.byte	0
 1751               		.byte	0
 1752               		.byte	0
 1753               		.byte	95
 1754               		.byte	0
 1755               		.byte	0
 1756               		.byte	0
 1757               		.byte	7
 1758               		.byte	0
 1759               		.byte	7
 1760               		.byte	0
 266:lib/io_fct.c  **** 
 267:lib/io_fct.c  **** unsigned int read_adc(unsigned char adc_input)                  // Read Result ADC
 268:lib/io_fct.c  **** {
 1761               	
 1762               		.byte	20
 1763               		.byte	127
 1764 0a36 DF93      		.byte	20
 1765 0a38 CF93      		.byte	36
 1766 0a3a 0F92      		.byte	42
 1767 0a3c CDB7      		.byte	127
 1768 0a3e DEB7      		.byte	42
 1769               		.byte	18
 1770               		.byte	35
 1771 0a40 8983      		.byte	19
 269:lib/io_fct.c  **** 	ADMUX=adc_input|ADC_VREF_TYPE;
 1772               	.byte	100
 1773               		.byte	98
 1774 0a42 E7E2      		.byte	54
 1775 0a44 F0E0      		.byte	73
 1776 0a46 8981      		.byte	85
 1777 0a48 806C      		.byte	34
 1778 0a4a 8083      		.byte	80
 270:lib/io_fct.c  **** 	
 271:lib/io_fct.c  **** 	ADCSRA|=0x40;                                                 // Start the AD conversion
 1779               	0
 1780               		.byte	5
 1781 0a4c A6E2      		.byte	3
 1782 0a4e B0E0      		.byte	0
 1783 0a50 E6E2      		.byte	0
 1784 0a52 F0E0      		.byte	0
 1785 0a54 8081      		.byte	28
 1786 0a56 8064      		.byte	34
 1787 0a58 8C93      		.byte	65
 1788               		.byte	0
 272:lib/io_fct.c  **** 	
 273:lib/io_fct.c  **** 	while ((ADCSRA & 0x10)==0);                                   // Wait for the AD conversion to com
 1789               	.byte	65
 1790               		.byte	34
 1791 0a5a E6E2      		.byte	28
 1792 0a5c F0E0      		.byte	0
 1793 0a5e 8081      		.byte	8
 1794 0a60 882F      		.byte	42
 1795 0a62 90E0      		.byte	28
 1796 0a64 8071      		.byte	42
 1797 0a66 9070      		.byte	8
 1798 0a68 0097      		.byte	8
 1799 0a6a 01F0      		.byte	8
 274:lib/io_fct.c  **** 	ADCSRA|=0x10;
 1800               	.byte	8
 1801               		.byte	8
 1802 0a6c A6E2      		.byte	0
 1803 0a6e B0E0      		.byte	80
 1804 0a70 E6E2      		.byte	48
 1805 0a72 F0E0      		.byte	0
 1806 0a74 8081      		.byte	0
 1807 0a76 8061      		.byte	8
 1808 0a78 8C93      		.byte	8
 275:lib/io_fct.c  **** 	
 276:lib/io_fct.c  **** 	return ADCW;
 1809               		.byte	8
 1810               		.byte	8
 1811 0a7a E4E2      		.byte	0
 1812 0a7c F0E0      		.byte	96
 1813 0a7e 8081      		.byte	96
 1814 0a80 9181      		.byte	0
 1815               		.byte	0
 277:lib/io_fct.c  **** }
 1816               	32
 1817               		.byte	16
 1818 0a82 0F90      		.byte	8
 1819 0a84 CF91      		.byte	4
 1820 0a86 DF91      		.byte	2
 1821 0a88 0895      		.byte	62
 1822               		.byte	81
 1823               		.byte	73
 1824               		.byte	69
 1825               		.byte	62
 1826               		.byte	0
 1827               		.byte	66
 1828               		.byte	127
 1829 0000 00        		.byte	64
 1830 0001 00        		.byte	0
 1831 0002 00        		.byte	66
 1832 0003 00        		.byte	97
 1833 0004 00        		.byte	81
 1834 0005 00        		.byte	73
 1835 0006 00        		.byte	70
 1836 0007 5F        		.byte	33
 1837 0008 00        		.byte	65
 1838 0009 00        		.byte	69
 1839 000a 00        		.byte	75
 1840 000b 07        		.byte	49
 1841 000c 00        		.byte	24
 1842 000d 07        		.byte	20
 1843 000e 00        		.byte	18
 1844 000f 14        		.byte	127
 1845 0010 7F        		.byte	16
 1846 0011 14        		.byte	39
 1847 0012 7F        		.byte	69
 1848 0013 14        		.byte	69
 1849 0014 24        		.byte	69
 1850 0015 2A        		.byte	57
 1851 0016 7F        		.byte	60
 1852 0017 2A        		.byte	74
 1853 0018 12        		.byte	73
 1854 0019 23        		.byte	73
 1855 001a 13        		.byte	48
 1856 001b 08        		.byte	1
 1857 001c 64        		.byte	113
 1858 001d 62        		.byte	9
 1859 001e 36        		.byte	5
 1860 001f 49        		.byte	3
 1861 0020 55        		.byte	54
 1862 0021 22        		.byte	73
 1863 0022 50        		.byte	73
 1864 0023 00        		.byte	73
 1865 0024 05        		.byte	54
 1866 0025 03        		.byte	6
 1867 0026 00        		.byte	73
 1868 0027 00        		.byte	73
 1869 0028 00        		.byte	41
 1870 0029 1C        		.byte	30
 1871 002a 22        		.byte	0
 1872 002b 41        		.byte	54
 1873 002c 00        		.byte	54
 1874 002d 00        		.byte	0
 1875 002e 41        		.byte	0
 1876 002f 22        		.byte	0
 1877 0030 1C        		.byte	86
 1878 0031 00        		.byte	54
 1879 0032 08        		.byte	0
 1880 0033 2A        		.byte	0
 1881 0034 1C        		.byte	0
 1882 0035 2A        		.byte	8
 1883 0036 08        		.byte	20
 1884 0037 08        		.byte	34
 1885 0038 08        		.byte	65
 1886 0039 3E        		.byte	20
 1887 003a 08        		.byte	20
 1888 003b 08        		.byte	20
 1889 003c 00        		.byte	20
 1890 003d 50        		.byte	20
 1891 003e 30        		.byte	65
 1892 003f 00        		.byte	34
 1893 0040 00        		.byte	20
 1894 0041 08        		.byte	8
 1895 0042 08        		.byte	0
 1896 0043 08        		.byte	2
 1897 0044 08        		.byte	1
 1898 0045 08        		.byte	81
 1899 0046 00        		.byte	9
 1900 0047 60        		.byte	6
 1901 0048 60        		.byte	50
 1902 0049 00        		.byte	73
 1903 004a 00        		.byte	121
 1904 004b 20        		.byte	65
 1905 004c 10        		.byte	62
 1906 004d 08        		.byte	126
 1907 004e 04        		.byte	17
 1908 004f 02        		.byte	17
 1909 0050 3E        		.byte	17
 1910 0051 51        		.byte	126
 1911 0052 49        		.byte	127
 1912 0053 45        		.byte	73
 1913 0054 3E        		.byte	73
 1914 0055 00        		.byte	73
 1915 0056 42        		.byte	54
 1916 0057 7F        		.byte	62
 1917 0058 40        		.byte	65
 1918 0059 00        		.byte	65
 1919 005a 42        		.byte	65
 1920 005b 61        		.byte	34
 1921 005c 51        		.byte	127
 1922 005d 49        		.byte	65
 1923 005e 46        		.byte	65
 1924 005f 21        		.byte	34
 1925 0060 41        		.byte	28
 1926 0061 45        		.byte	127
 1927 0062 4B        		.byte	73
 1928 0063 31        		.byte	73
 1929 0064 18        		.byte	73
 1930 0065 14        		.byte	65
 1931 0066 12        		.byte	127
 1932 0067 7F        		.byte	9
 1933 0068 10        		.byte	9
 1934 0069 27        		.byte	1
 1935 006a 45        		.byte	1
 1936 006b 45        		.byte	62
 1937 006c 45        		.byte	65
 1938 006d 39        		.byte	65
 1939 006e 3C        		.byte	81
 1940 006f 4A        		.byte	50
 1941 0070 49        		.byte	127
 1942 0071 49        		.byte	8
 1943 0072 30        		.byte	8
 1944 0073 01        		.byte	8
 1945 0074 71        		.byte	127
 1946 0075 09        		.byte	0
 1947 0076 05        		.byte	65
 1948 0077 03        		.byte	127
 1949 0078 36        		.byte	65
 1950 0079 49        		.byte	0
 1951 007a 49        		.byte	32
 1952 007b 49        		.byte	64
 1953 007c 36        		.byte	65
 1954 007d 06        		.byte	63
 1955 007e 49        		.byte	1
 1956 007f 49        		.byte	127
 1957 0080 29        		.byte	8
 1958 0081 1E        		.byte	20
 1959 0082 00        		.byte	34
 1960 0083 36        		.byte	65
 1961 0084 36        		.byte	127
 1962 0085 00        		.byte	64
 1963 0086 00        		.byte	64
 1964 0087 00        		.byte	64
 1965 0088 56        		.byte	64
 1966 0089 36        		.byte	127
 1967 008a 00        		.byte	2
 1968 008b 00        		.byte	4
 1969 008c 00        		.byte	2
 1970 008d 08        		.byte	127
 1971 008e 14        		.byte	127
 1972 008f 22        		.byte	4
 1973 0090 41        		.byte	8
 1974 0091 14        		.byte	16
 1975 0092 14        		.byte	127
 1976 0093 14        		.byte	62
 1977 0094 14        		.byte	65
 1978 0095 14        		.byte	65
 1979 0096 41        		.byte	65
 1980 0097 22        		.byte	62
 1981 0098 14        		.byte	127
 1982 0099 08        		.byte	9
 1983 009a 00        		.byte	9
 1984 009b 02        		.byte	9
 1985 009c 01        		.byte	6
 1986 009d 51        		.byte	62
 1987 009e 09        		.byte	65
 1988 009f 06        		.byte	81
 1989 00a0 32        		.byte	33
 1990 00a1 49        		.byte	94
 1991 00a2 79        		.byte	127
 1992 00a3 41        		.byte	9
 1993 00a4 3E        		.byte	25
 1994 00a5 7E        		.byte	41
 1995 00a6 11        		.byte	70
 1996 00a7 11        		.byte	70
 1997 00a8 11        		.byte	73
 1998 00a9 7E        		.byte	73
 1999 00aa 7F        		.byte	73
 2000 00ab 49        		.byte	49
 2001 00ac 49        		.byte	1
 2002 00ad 49        		.byte	1
 2003 00ae 36        		.byte	127
 2004 00af 3E        		.byte	1
 2005 00b0 41        		.byte	1
 2006 00b1 41        		.byte	63
 2007 00b2 41        		.byte	64
 2008 00b3 22        		.byte	64
 2009 00b4 7F        		.byte	64
 2010 00b5 41        		.byte	63
 2011 00b6 41        		.byte	31
 2012 00b7 22        		.byte	32
 2013 00b8 1C        		.byte	64
 2014 00b9 7F        		.byte	32
 2015 00ba 49        		.byte	31
 2016 00bb 49        		.byte	127
 2017 00bc 49        		.byte	32
 2018 00bd 41        		.byte	24
 2019 00be 7F        		.byte	32
 2020 00bf 09        		.byte	127
 2021 00c0 09        		.byte	99
 2022 00c1 01        		.byte	20
 2023 00c2 01        		.byte	8
 2024 00c3 3E        		.byte	20
 2025 00c4 41        		.byte	99
 2026 00c5 41        		.byte	3
 2027 00c6 51        		.byte	4
 2028 00c7 32        		.byte	120
 2029 00c8 7F        		.byte	4
 2030 00c9 08        		.byte	3
 2031 00ca 08        		.byte	97
 2032 00cb 08        		.byte	81
 2033 00cc 7F        		.byte	73
 2034 00cd 00        		.byte	69
 2035 00ce 41        		.byte	67
 2036 00cf 7F        		.byte	0
 2037 00d0 41        		.byte	0
 2038 00d1 00        		.byte	127
 2039 00d2 20        		.byte	65
 2040 00d3 40        		.byte	65
 2041 00d4 41        		.byte	2
 2042 00d5 3F        		.byte	4
 2043 00d6 01        		.byte	8
 2044 00d7 7F        		.byte	16
 2045 00d8 08        		.byte	32
 2046 00d9 14        		.byte	65
 2047 00da 22        		.byte	65
 2048 00db 41        		.byte	127
 2049 00dc 7F        		.byte	0
 2050 00dd 40        		.byte	0
 2051 00de 40        		.byte	4
 2052 00df 40        		.byte	2
 2053 00e0 40        		.byte	1
 2054 00e1 7F        		.byte	2
 2055 00e2 02        		.byte	4
 2056 00e3 04        		.byte	64
 2057 00e4 02        		.byte	64
 2058 00e5 7F        		.byte	64
 2059 00e6 7F        		.byte	64
 2060 00e7 04        		.byte	64
 2061 00e8 08        		.byte	0
 2062 00e9 10        		.byte	1
 2063 00ea 7F        		.byte	2
 2064 00eb 3E        		.byte	4
 2065 00ec 41        		.byte	0
 2066 00ed 41        		.byte	32
 2067 00ee 41        		.byte	84
 2068 00ef 3E        		.byte	84
 2069 00f0 7F        		.byte	84
 2070 00f1 09        		.byte	120
 2071 00f2 09        		.byte	127
 2072 00f3 09        		.byte	72
 2073 00f4 06        		.byte	68
 2074 00f5 3E        		.byte	68
 2075 00f6 41        		.byte	56
 2076 00f7 51        		.byte	56
 2077 00f8 21        		.byte	68
 2078 00f9 5E        		.byte	68
 2079 00fa 7F        		.byte	68
 2080 00fb 09        		.byte	32
 2081 00fc 19        		.byte	56
 2082 00fd 29        		.byte	68
 2083 00fe 46        		.byte	68
 2084 00ff 46        		.byte	72
 2085 0100 49        		.byte	127
 2086 0101 49        		.byte	56
 2087 0102 49        		.byte	84
 2088 0103 31        		.byte	84
 2089 0104 01        		.byte	84
 2090 0105 01        		.byte	24
 2091 0106 7F        		.byte	8
 2092 0107 01        		.byte	126
 2093 0108 01        		.byte	9
 2094 0109 3F        		.byte	1
 2095 010a 40        		.byte	2
 2096 010b 40        		.byte	8
 2097 010c 40        		.byte	20
 2098 010d 3F        		.byte	84
 2099 010e 1F        		.byte	84
 2100 010f 20        		.byte	60
 2101 0110 40        		.byte	127
 2102 0111 20        		.byte	8
 2103 0112 1F        		.byte	4
 2104 0113 7F        		.byte	4
 2105 0114 20        		.byte	120
 2106 0115 18        		.byte	0
 2107 0116 20        		.byte	68
 2108 0117 7F        		.byte	125
 2109 0118 63        		.byte	64
 2110 0119 14        		.byte	0
 2111 011a 08        		.byte	32
 2112 011b 14        		.byte	64
 2113 011c 63        		.byte	68
 2114 011d 03        		.byte	61
 2115 011e 04        		.byte	0
 2116 011f 78        		.byte	0
 2117 0120 04        		.byte	127
 2118 0121 03        		.byte	16
 2119 0122 61        		.byte	40
 2120 0123 51        		.byte	68
 2121 0124 49        		.byte	0
 2122 0125 45        		.byte	65
 2123 0126 43        		.byte	127
 2124 0127 00        		.byte	64
 2125 0128 00        		.byte	0
 2126 0129 7F        		.byte	124
 2127 012a 41        		.byte	4
 2128 012b 41        		.byte	24
 2129 012c 02        		.byte	4
 2130 012d 04        		.byte	120
 2131 012e 08        		.byte	124
 2132 012f 10        		.byte	8
 2133 0130 20        		.byte	4
 2134 0131 41        		.byte	4
 2135 0132 41        		.byte	120
 2136 0133 7F        		.byte	56
 2137 0134 00        		.byte	68
 2138 0135 00        		.byte	68
 2139 0136 04        		.byte	68
 2140 0137 02        		.byte	56
 2141 0138 01        		.byte	124
 2142 0139 02        		.byte	20
 2143 013a 04        		.byte	20
 2144 013b 40        		.byte	20
 2145 013c 40        		.byte	8
 2146 013d 40        		.byte	8
 2147 013e 40        		.byte	20
 2148 013f 40        		.byte	20
 2149 0140 00        		.byte	24
 2150 0141 01        		.byte	124
 2151 0142 02        		.byte	124
 2152 0143 04        		.byte	8
 2153 0144 00        		.byte	4
 2154 0145 20        		.byte	4
 2155 0146 54        		.byte	8
 2156 0147 54        		.byte	72
 2157 0148 54        		.byte	84
 2158 0149 78        		.byte	84
 2159 014a 7F        		.byte	84
 2160 014b 48        		.byte	32
 2161 014c 44        		.byte	4
 2162 014d 44        		.byte	63
 2163 014e 38        		.byte	68
 2164 014f 38        		.byte	64
 2165 0150 44        		.byte	32
 2166 0151 44        		.byte	60
 2167 0152 44        		.byte	64
 2168 0153 20        		.byte	64
 2169 0154 38        		.byte	32
 2170 0155 44        		.byte	124
 2171 0156 44        		.byte	28
 2172 0157 48        		.byte	32
 2173 0158 7F        		.byte	64
 2174 0159 38        		.byte	32
 2175 015a 54        		.byte	28
 2176 015b 54        		.byte	60
 2177 015c 54        		.byte	64
 2178 015d 18        		.byte	48
 2179 015e 08        		.byte	64
 2180 015f 7E        		.byte	60
 2181 0160 09        		.byte	68
 2182 0161 01        		.byte	40
 2183 0162 02        		.byte	16
 2184 0163 08        		.byte	40
 2185 0164 14        		.byte	68
 2186 0165 54        		.byte	12
 2187 0166 54        		.byte	80
 2188 0167 3C        		.byte	80
 2189 0168 7F        		.byte	80
 2190 0169 08        		.byte	60
 2191 016a 04        		.byte	68
 2192 016b 04        		.byte	100
 2193 016c 78        		.byte	84
 2194 016d 00        		.byte	76
 2195 016e 44        		.byte	68
 2196 016f 7D        		.byte	0
 2197 0170 40        		.byte	8
 2198 0171 00        		.byte	54
 2199 0172 20        		.byte	65
 2200 0173 40        		.byte	0
 2201 0174 44        		.byte	0
 2202 0175 3D        		.byte	0
 2203 0176 00        		.byte	127
 2204 0177 00        		.byte	0
 2205 0178 7F        		.byte	0
 2206 0179 10        		.byte	0
 2207 017a 28        		.byte	65
 2208 017b 44        		.byte	54
 2209 017c 00        		.byte	8
 2210 017d 41        		.byte	0
 2211 017e 7F        		.byte	8
 2212 017f 40        		.byte	8
 2213 0180 00        		.byte	42
 2214 0181 7C        		.byte	28
 2215 0182 04        		.byte	8
 2216 0183 18        		.byte	8
 2217 0184 04        		.byte	28
 2218 0185 78        		.byte	42
 2219 0186 7C        		.byte	8
 2220 0187 08        		.byte	8
 2221 0188 04        		.text
 2228 018f 38        	.global	g_draw_horizontal_line
 2230 0191 14        	g_draw_horizontal_line:
 2232 0193 14        	.Ltext2:
 2234 0195 08        	.LM100:
 2235 0196 14        	.LFBB13:
 2236 0197 14        		push r29
 2237 0198 18        		push r28
 2238 0199 7C        		in r28,__SP_L__
 2239 019a 7C        		in r29,__SP_H__
 2240 019b 08        		sbiw r28,8
 2241 019c 04        		in __tmp_reg__,__SREG__
 2242 019d 04        		cli
 2243 019e 08        		out __SP_H__,r29
 2244 019f 48        		out __SREG__,__tmp_reg__
 2245 01a0 54        		out __SP_L__,r28
 2246 01a1 54        	/* prologue: function */
 2247 01a2 54        	/* frame size = 8 */
 2248 01a3 20        		std Y+4,r25
 2249 01a4 04        		std Y+3,r24
 2250 01a5 3F        		std Y+6,r23
 2251 01a6 44        		std Y+5,r22
 2252 01a7 40        		std Y+8,r21
 2253 01a8 20        		std Y+7,r20
 2255 01aa 40        	.LM101:
 2256 01ab 40        		ldd r24,Y+3
 2257 01ac 20        		ldd r25,Y+4
 2258 01ad 7C        		std Y+2,r25
 2259 01ae 1C        		std Y+1,r24
 2260 01af 20        		rjmp .L91
 2261 01b0 40        	.L92:
 2263 01b2 1C        	.LM102:
 2264 01b3 3C        		ldd r24,Y+1
 2265 01b4 40        		ldd r25,Y+2
 2266 01b5 30        		ldd r18,Y+5
 2267 01b6 40        		ldd r19,Y+6
 2268 01b7 3C        		movw r22,r18
 2269 01b8 44        		ldi r20,lo8(-1)
 2270 01b9 28        		call lcd_graphics_plot_pixel
 2272 01bb 28        	.LM103:
 2273 01bc 44        		ldd r24,Y+1
 2274 01bd 0C        		ldd r25,Y+2
 2275 01be 50        		adiw r24,1
 2276 01bf 50        		std Y+2,r25
 2277 01c0 50        		std Y+1,r24
 2278 01c1 3C        	.L91:
 2279 01c2 44        		ldd r18,Y+3
 2280 01c3 64        		ldd r19,Y+4
 2281 01c4 54        		ldd r24,Y+7
 2282 01c5 4C        		ldd r25,Y+8
 2283 01c6 44        		add r18,r24
 2284 01c7 00        		adc r19,r25
 2285 01c8 08        		ldd r24,Y+1
 2286 01c9 36        		ldd r25,Y+2
 2287 01ca 41        		cp r18,r24
 2288 01cb 00        		cpc r19,r25
 2289 01cc 00        		brsh .L92
 2290 01cd 00        	/* epilogue start */
 2292 01cf 00        	.LM104:
 2293 01d0 00        		adiw r28,8
 2294 01d1 00        		in __tmp_reg__,__SREG__
 2295 01d2 41        		cli
 2296 01d3 36        		out __SP_H__,r29
 2297 01d4 08        		out __SREG__,__tmp_reg__
 2298 01d5 00        		out __SP_L__,r28
 2299 01d6 08        		pop r28
 2300 01d7 08        		pop r29
 2301 01d8 2A        		ret
 2306 01dd 2A        	.Lscope13:
 2311               	.global	g_draw_vertical_line
 2313               	g_draw_vertical_line:
 2315               	.LM105:
 2316               	.LFBB14:
 2317               		push r29
 2318               		push r28
 2319               		in r28,__SP_L__
 2320               		in r29,__SP_H__
   1:./lib/graphics.c **** /* 
   2:./lib/graphics.c ****  * Basic Raster Graphics interface to the lcd_graphics_* LCD graphics driver 
   3:./lib/graphics.c ****  * functions.
   4:./lib/graphics.c ****  * Vanya A. Sergeev - <vsergeev@gmail.com>
   5:./lib/graphics.c ****  *
   6:./lib/graphics.c ****  * font5x7.h header file comes from Procyon AVRlib.
   7:./lib/graphics.c ****  *
   8:./lib/graphics.c ****  */
   9:./lib/graphics.c **** 
  10:./lib/graphics.c **** #include "lc7981.h"
  11:./lib/graphics.c **** #include "graphics.h"
  12:./lib/graphics.c **** 
  13:./lib/graphics.c **** /**
  14:./lib/graphics.c ****  * Draws a horizontal line, left to right, at the specified coordinates and of
  15:./lib/graphics.c ****  * the specified length.
  16:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
  17:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  18:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  19:./lib/graphics.c ****  */
  20:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
 2321               	__,r28
 2322               	/* prologue: function */
 2323               	/* frame size = 8 */
 2324 0a8a DF93      		std Y+4,r25
 2325 0a8c CF93      		std Y+3,r24
 2326 0a8e CDB7      		std Y+6,r23
 2327 0a90 DEB7      		std Y+5,r22
 2328 0a92 2897      		std Y+8,r21
 2329 0a94 0FB6      		std Y+7,r20
 2331 0a98 DEBF      	.LM106:
 2332 0a9a 0FBE      		ldd r24,Y+5
 2333 0a9c CDBF      		ldd r25,Y+6
 2334               		std Y+2,r25
 2335               		std Y+1,r24
 2336 0a9e 9C83      		rjmp .L95
 2337 0aa0 8B83      	.L96:
 2339 0aa4 6D83      	.LM107:
 2340 0aa6 5887      		ldd r24,Y+3
 2341 0aa8 4F83      		ldd r25,Y+4
  21:./lib/graphics.c **** for (i = x; i <= x+length; i++)
  22:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
 2342               	,Y+2
 2343               		movw r22,r18
 2344 0aaa 8B81      		ldi r20,lo8(-1)
 2345 0aac 9C81      		call lcd_graphics_plot_pixel
 2347 0ab0 8983      	.LM108:
 2348 0ab2 00C0      		ldd r24,Y+1
 2349               		ldd r25,Y+2
  23:./lib/graphics.c ****  short length) {
 2350               	4,1
 2351               		std Y+2,r25
 2352 0ab4 8981      		std Y+1,r24
 2353 0ab6 9A81      	.L95:
 2354 0ab8 2D81      		ldd r18,Y+5
 2355 0aba 3E81      		ldd r19,Y+6
 2356 0abc B901      		ldd r24,Y+7
 2357 0abe 4FEF      		ldd r25,Y+8
 2358 0ac0 0E94 0000 		add r18,r24
 2359               		adc r19,r25
 2360               		ldd r24,Y+1
 2361 0ac4 8981      		ldd r25,Y+2
 2362 0ac6 9A81      		cp r24,r18
 2363 0ac8 0196      		cpc r25,r19
 2364 0aca 9A83      		brlo .L96
 2365 0acc 8983      	/* epilogue start */
 2367 0ace 2B81      	.LM109:
 2368 0ad0 3C81      		adiw r28,8
 2369 0ad2 8F81      		in __tmp_reg__,__SREG__
 2370 0ad4 9885      		cli
 2371 0ad6 280F      		out __SP_H__,r29
 2372 0ad8 391F      		out __SREG__,__tmp_reg__
 2373 0ada 8981      		out __SP_L__,r28
 2374 0adc 9A81      		pop r28
 2375 0ade 2817      		pop r29
 2376 0ae0 3907      		ret
  24:./lib/graphics.c ****  the line, in pixels.
 2379               	14
 2381 0ae4 2896      	.Lscope14:
 2387 0af0 CF91      	.global	g_draw_rectangle
 2389 0af4 0895      	g_draw_rectangle:
 2391               	.LM110:
 2392               	.LFBB15:
 2393               		push r29
 2394               		push r28
 2395               		in r28,__SP_L__
 2396               		in r29,__SP_H__
 2397               		sbiw r28,8
 2398               		in __tmp_reg__,__SREG__
 2399               		cli
 2400               		out __SP_H__,r29
 2401               		out __SREG__,__tmp_reg__
  25:./lib/graphics.c **** ne's origin.
  26:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  27:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  28:./lib/graphics.c ****  */
  29:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  30:./lib/graphics.c **** 	unsigned short i;
  31:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  32:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  33:./lib/graphics.c **** }
 2402               	ologue: function */
 2403               	/* frame size = 8 */
 2404               		std Y+2,r25
 2405 0af6 DF93      		std Y+1,r24
 2406 0af8 CF93      		std Y+4,r23
 2407 0afa CDB7      		std Y+3,r22
 2408 0afc DEB7      		std Y+6,r21
 2409 0afe 2897      		std Y+5,r20
 2410 0b00 0FB6      		std Y+8,r19
 2411 0b02 F894      		std Y+7,r18
 2413 0b06 0FBE      	.LM111:
 2414 0b08 CDBF      		ldd r24,Y+5
 2415               		ldd r25,Y+6
 2416               		sbiw r24,1
 2417 0b0a 9C83      		std Y+6,r25
 2418 0b0c 8B83      		std Y+5,r24
 2420 0b10 6D83      	.LM112:
 2421 0b12 5887      		ldd r24,Y+7
 2422 0b14 4F83      		ldd r25,Y+8
  34:./lib/graphics.c **** ort length) {
  35:./lib/graphics.c **** 	unsigned short i;
 2423               	r25
 2424               		std Y+7,r24
 2426 0b18 9E81      	.LM113:
 2427 0b1a 9A83      		ldd r24,Y+1
 2428 0b1c 8983      		ldd r25,Y+2
 2429 0b1e 00C0      		ldd r18,Y+3
 2430               		ldd r19,Y+4
  36:./lib/graphics.c **** .
 2431               	,Y+5
 2432               		ldd r21,Y+6
 2433 0b20 8B81      		movw r22,r18
 2434 0b22 9C81      		call g_draw_horizontal_line
 2436 0b26 3A81      	.LM114:
 2437 0b28 B901      		ldd r24,Y+1
 2438 0b2a 4FEF      		ldd r25,Y+2
 2439 0b2c 0E94 0000 		ldd r18,Y+3
 2440               		ldd r19,Y+4
 2441               		ldd r20,Y+7
 2442 0b30 8981      		ldd r21,Y+8
 2443 0b32 9A81      		movw r22,r18
 2444 0b34 0196      		call g_draw_vertical_line
 2446 0b38 8983      	.LM115:
 2447               		ldd r18,Y+1
 2448 0b3a 2D81      		ldd r19,Y+2
 2449 0b3c 3E81      		ldd r24,Y+5
 2450 0b3e 8F81      		ldd r25,Y+6
 2451 0b40 9885      		add r24,r18
 2452 0b42 280F      		adc r25,r19
 2453 0b44 391F      		ldd r18,Y+3
 2454 0b46 8981      		ldd r19,Y+4
 2455 0b48 9A81      		ldd r20,Y+7
 2456 0b4a 8217      		ldd r21,Y+8
 2457 0b4c 9307      		movw r22,r18
 2458 0b4e 00F0      		call g_draw_vertical_line
  37:./lib/graphics.c **** ne's origin.
 2460               	,Y+4
 2461               		ldd r24,Y+7
 2462 0b50 2896      		ldd r25,Y+8
 2463 0b52 0FB6      		movw r20,r18
 2464 0b54 F894      		add r20,r24
 2465 0b56 DEBF      		adc r21,r25
 2466 0b58 0FBE      		ldd r24,Y+1
 2467 0b5a CDBF      		ldd r25,Y+2
 2468 0b5c CF91      		ldd r18,Y+5
 2469 0b5e DF91      		ldd r19,Y+6
 2470 0b60 0895      		movw r22,r20
 2471               		movw r20,r18
 2472               		call g_draw_horizontal_line
 2473               	/* epilogue start */
 2475               	.LM117:
 2476               		adiw r28,8
 2477               		in __tmp_reg__,__SREG__
 2478               		cli
 2479               		out __SP_H__,r29
 2480               		out __SREG__,__tmp_reg__
 2481               		out __SP_L__,r28
 2482               		pop r28
 2483               		pop r29
  38:./lib/graphics.c **** ight, at the specified coordinates and of
  39:./lib/graphics.c ****  * the specified length.
  40:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
  41:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  42:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  43:./lib/graphics.c ****  */
  44:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  45:./lib/graphics.c **** 	unsigned short i;
  46:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  47:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
 2484               	ngle, .-g_draw_rectangle
 2485               	.Lscope15:
 2490 0b68 DEB7      	.global	g_draw_char
 2492 0b6c 0FB6      	g_draw_char:
 2494 0b70 DEBF      	.LM118:
 2495 0b72 0FBE      	.LFBB16:
 2496 0b74 CDBF      		push r29
 2497               		push r28
 2498               		in r28,__SP_L__
 2499 0b76 9A83      		in r29,__SP_H__
 2500 0b78 8983      		sbiw r28,8
 2501 0b7a 7C83      		in __tmp_reg__,__SREG__
 2502 0b7c 6B83      		cli
 2503 0b7e 5E83      		out __SP_H__,r29
 2504 0b80 4D83      		out __SREG__,__tmp_reg__
 2505 0b82 3887      		out __SP_L__,r28
 2506 0b84 2F83      	/* prologue: function */
  48:./lib/graphics.c **** Draws a vertical line, top to bottom, at the specified coordinates and of 
  49:./lib/graphics.c ****  * the specified length.
 2507               	td Y+5,r25
 2508               		std Y+4,r24
 2509 0b86 8D81      		std Y+7,r23
 2510 0b88 9E81      		std Y+6,r22
 2511 0b8a 0197      		std Y+8,r20
 2513 0b8e 8D83      	.LM119:
  50:./lib/graphics.c **** /**
 2514               	4,Y+8
 2515               		subi r24,lo8(-(-32))
 2516 0b90 8F81      		std Y+3,r24
 2518 0b94 0197      	.LM120:
 2519 0b96 9887      		ldd r24,Y+3
 2520 0b98 8F83      		cpi r24,lo8(95)
  51:./lib/graphics.c **** gth) {
 2521               	+2
 2522               		rjmp .L108
 2524 0b9c 9A81      	.LM121:
 2525 0b9e 2B81      		std Y+2,__zero_reg__
 2526 0ba0 3C81      		rjmp .L102
 2527 0ba2 4D81      	.L107:
 2529 0ba6 B901      	.LM122:
 2530 0ba8 0E94 0000 		std Y+1,__zero_reg__
  52:./lib/graphics.c ****  the line, in pixels.
 2531               	3
 2532               	.L106:
 2534 0bae 9A81      	.LM123:
 2535 0bb0 2B81      		ldd r24,Y+3
 2536 0bb2 3C81      		mov r18,r24
 2537 0bb4 4F81      		ldi r19,lo8(0)
 2538 0bb6 5885      		movw r24,r18
 2539 0bb8 B901      		lsl r24
 2540 0bba 0E94 0000 		rol r25
  53:./lib/graphics.c **** ne's origin.
 2541               	rol r25
 2542               		add r18,r24
 2543 0bbe 2981      		adc r19,r25
 2544 0bc0 3A81      		ldd r24,Y+2
 2545 0bc2 8D81      		mov r24,r24
 2546 0bc4 9E81      		ldi r25,lo8(0)
 2547 0bc6 820F      		add r24,r18
 2548 0bc8 931F      		adc r25,r19
 2549 0bca 2B81      		movw r30,r24
 2550 0bcc 3C81      		subi r30,lo8(-(Font5x7))
 2551 0bce 4F81      		sbci r31,hi8(-(Font5x7))
 2552 0bd0 5885      		ld r24,Z
 2553 0bd2 B901      		mov r18,r24
 2554 0bd4 0E94 0000 		ldi r19,lo8(0)
  54:./lib/graphics.c **** ight, at the specified coordinates and of
 2555               	mov r24,r24
 2556               		ldi r25,lo8(0)
 2557 0bd8 2B81      		movw r20,r18
 2558 0bda 3C81      		rjmp 2f
 2559 0bdc 8F81      	1:	asr r21
 2560 0bde 9885      		ror r20
 2561 0be0 A901      	2:	dec r24
 2562 0be2 480F      		brpl 1b
 2563 0be4 591F      		movw r24,r20
 2564 0be6 8981      		andi r24,lo8(1)
 2565 0be8 9A81      		andi r25,hi8(1)
 2566 0bea 2D81      		tst r24
 2567 0bec 3E81      		breq .L104
 2569 0bf0 A901      	.LM124:
 2570 0bf2 0E94 0000 		ldd r24,Y+1
 2571               		mov r18,r24
  55:./lib/graphics.c **** * the specified length.
 2572               	ldd r24,Y+6
 2573               		ldd r25,Y+7
 2574 0bf6 2896      		add r18,r24
 2575 0bf8 0FB6      		adc r19,r25
 2576 0bfa F894      		ldd r24,Y+4
 2577 0bfc DEBF      		ldd r25,Y+5
 2578 0bfe 0FBE      		movw r22,r18
 2579 0c00 CDBF      		ldi r20,lo8(-1)
 2580 0c02 CF91      		call lcd_graphics_plot_pixel
 2581 0c04 DF91      		rjmp .L105
 2582 0c06 0895      	.L104:
 2584               	.LM125:
 2585               		ldd r24,Y+1
 2586               		mov r18,r24
 2587               		ldi r19,lo8(0)
 2588               		ldd r24,Y+6
 2589               		ldd r25,Y+7
 2590               		add r18,r24
 2591               		adc r19,r25
  56:./lib/graphics.c **** * @param x The x coordinante of the line's origin.
  57:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  58:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  59:./lib/graphics.c ****  */
  60:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  61:./lib/graphics.c **** 	unsigned short i;
  62:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  63:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  64:./lib/graphics.c **** }
  65:./lib/graphics.c **** 
  66:./lib/graphics.c **** /**
 2592               	5,Y+5
 2593               		movw r22,r18
 2594               		ldi r20,lo8(0)
 2595 0c08 DF93      		call lcd_graphics_plot_pixel
 2596 0c0a CF93      	.L105:
 2598 0c0e DEB7      	.LM126:
 2599 0c10 2897      		ldd r24,Y+1
 2600 0c12 0FB6      		subi r24,lo8(-(1))
 2601 0c14 F894      		std Y+1,r24
 2602 0c16 DEBF      	.L103:
 2603 0c18 0FBE      		ldd r24,Y+1
 2604 0c1a CDBF      		cpi r24,lo8(7)
 2605               		brsh .+2
 2606               		rjmp .L106
 2608 0c1e 8C83      	.LM127:
 2609 0c20 7F83      		ldd r24,Y+4
 2610 0c22 6E83      		ldd r25,Y+5
 2611 0c24 4887      		adiw r24,1
  67:./lib/graphics.c **** gth) {
  68:./lib/graphics.c **** 	unsigned short i;
  69:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  70:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  71:./lib/graphics.c **** }
  72:./lib/graphics.c **** 
 2612               	4,r24
 2614 0c26 8885      	.LM128:
 2615 0c28 8052      		ldd r24,Y+2
 2616 0c2a 8B83      		subi r24,lo8(-(1))
  73:./lib/graphics.c **** t length) {
  74:./lib/graphics.c **** 	unsigned short i;
 2617               	Y+2,r24
 2618               	.L102:
 2619 0c2c 8B81      		ldd r24,Y+2
 2620 0c2e 8F35      		cpi r24,lo8(5)
 2621 0c30 00F0      		brsh .+2
 2622 0c32 00C0      		rjmp .L107
  75:./lib/graphics.c **** .
  76:./lib/graphics.c ****  */
  77:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
 2623               	
 2624               	/* epilogue start */
 2626 0c36 00C0      	.LM129:
 2627               		adiw r28,8
  78:./lib/graphics.c ****  the line, in pixels.
 2628               	__tmp_reg__,__SREG__
 2629               		cli
 2630 0c38 1982      		out __SP_H__,r29
 2631 0c3a 00C0      		out __SREG__,__tmp_reg__
 2632               		out __SP_L__,r28
  79:./lib/graphics.c **** ne's origin.
  80:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  81:./lib/graphics.c ****  * @param length The length of the line, in pixels.
 2633               	r28
 2634               		pop r29
 2635 0c3c 8B81      		ret
 2642 0c4a 991F      	.Lscope16:
 2647 0c54 90E0      	.global	g_draw_string
 2649 0c58 931F      	g_draw_string:
 2651 0c5c E050      	.LM130:
 2652 0c5e F040      	.LFBB17:
 2653 0c60 8081      		push r29
 2654 0c62 282F      		push r28
 2655 0c64 30E0      		in r28,__SP_L__
 2656 0c66 8981      		in r29,__SP_H__
 2657 0c68 882F      		sbiw r28,8
 2658 0c6a 90E0      		in __tmp_reg__,__SREG__
 2659 0c6c A901      		cli
 2660 0c6e 00C0      		out __SP_H__,r29
 2661 0c70 5595      		out __SREG__,__tmp_reg__
 2662 0c72 4795      		out __SP_L__,r28
 2663 0c74 8A95      	/* prologue: function */
 2664 0c76 02F4      	/* frame size = 8 */
 2665 0c78 CA01      		std Y+4,r25
 2666 0c7a 8170      		std Y+3,r24
 2667 0c7c 9070      		std Y+6,r23
 2668 0c7e 8823      		std Y+5,r22
 2669 0c80 01F0      		std Y+8,r21
  82:./lib/graphics.c **** ne's origin.
 2670               	.LFBB17
 2671               	.LM131:
 2672 0c82 8981      		ldd r24,Y+3
 2673 0c84 282F      		ldd r25,Y+4
 2674 0c86 30E0      		std Y+2,r25
 2675 0c88 8E81      		std Y+1,r24
 2676 0c8a 9F81      		rjmp .L110
 2677 0c8c 280F      	.L112:
 2679 0c90 8C81      	.LM132:
 2680 0c92 9D81      		ldd r30,Y+7
 2681 0c94 B901      		ldd r31,Y+8
 2682 0c96 4FEF      		ld r24,Z
 2683 0c98 0E94 0000 		cpi r24,lo8(10)
 2684 0c9c 00C0      		brne .L111
  83:./lib/graphics.c **** ight, at the specified coordinates and of
  84:./lib/graphics.c ****  * the specified length.
 2686               	,Y+1
 2687               		ldd r25,Y+2
 2688 0c9e 8981      		std Y+4,r25
 2689 0ca0 282F      		std Y+3,r24
 2691 0ca4 8E81      	.LM134:
 2692 0ca6 9F81      		ldd r24,Y+5
 2693 0ca8 280F      		ldd r25,Y+6
 2694 0caa 391F      		adiw r24,8
 2695 0cac 8C81      		std Y+6,r25
 2696 0cae 9D81      		std Y+5,r24
 2698 0cb2 40E0      	.LM135:
 2699 0cb4 0E94 0000 		ldd r24,Y+7
 2700               		ldd r25,Y+8
 2701               		adiw r24,1
 2702               		std Y+8,r25
 2703 0cb8 8981      		std Y+7,r24
 2704 0cba 8F5F      		rjmp .L110
 2705 0cbc 8983      	.L111:
 2707 0cbe 8981      	.LM136:
 2708 0cc0 8730      		ldd r30,Y+7
 2709 0cc2 00F4      		ldd r31,Y+8
 2710 0cc4 00C0      		ld r20,Z
  85:./lib/graphics.c ****  @param x The x coordinante of the line's origin.
  86:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  87:./lib/graphics.c ****  * @param length The length of the line, in pixels.
 2711               	
 2712               		adiw r24,1
 2713 0cc6 8C81      		std Y+8,r25
 2714 0cc8 9D81      		std Y+7,r24
 2715 0cca 0196      		ldd r24,Y+3
 2716 0ccc 9D83      		ldd r25,Y+4
 2717 0cce 8C83      		ldd r18,Y+5
 2718               		ldd r19,Y+6
 2719               		movw r22,r18
 2720 0cd0 8A81      		call g_draw_char
 2722 0cd4 8A83      	.LM137:
 2723               		ldd r24,Y+3
 2724 0cd6 8A81      		ldd r25,Y+4
 2725 0cd8 8530      		adiw r24,6
 2726 0cda 00F4      		std Y+4,r25
 2727 0cdc 00C0      		std Y+3,r24
 2729               	.LM138:
  88:./lib/graphics.c **** ne's origin.
  89:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2730               	r25,Y+4
 2731               		adiw r24,5
 2732 0cde 2896      		cpi r24,161
 2733 0ce0 0FB6      		cpc r25,__zero_reg__
 2734 0ce2 F894      		brlo .L110
 2736 0ce6 0FBE      	.LM139:
 2737 0ce8 CDBF      		ldd r24,Y+1
 2738 0cea CF91      		ldd r25,Y+2
 2739 0cec DF91      		std Y+4,r25
 2740 0cee 0895      		std Y+3,r24
 2742               	.LM140:
 2743               		ldd r24,Y+5
 2744               		ldd r25,Y+6
 2745               		adiw r24,8
 2746               		std Y+6,r25
 2747               		std Y+5,r24
 2748               	.L110:
 2750               	.LM141:
 2751               		ldd r30,Y+7
 2752               		ldd r31,Y+8
 2753               		ld r24,Z
 2754               		tst r24
  90:./lib/graphics.c **** ified length.
  91:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
  92:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  93:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  94:./lib/graphics.c ****  */
  95:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  96:./lib/graphics.c **** 	unsigned short i;
  97:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  98:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  99:./lib/graphics.c **** }
 100:./lib/graphics.c **** 
 101:./lib/graphics.c **** /**
 102:./lib/graphics.c ****  * Draws a vertical line, top to bottom, at the specified coordinates and of 
 2755               	tart */
 2757               	.LM142:
 2758 0cf0 DF93      		adiw r28,8
 2759 0cf2 CF93      		in __tmp_reg__,__SREG__
 2760 0cf4 CDB7      		cli
 2761 0cf6 DEB7      		out __SP_H__,r29
 2762 0cf8 2897      		out __SREG__,__tmp_reg__
 2763 0cfa 0FB6      		out __SP_L__,r28
 2764 0cfc F894      		pop r28
 2765 0cfe DEBF      		pop r29
 2766 0d00 0FBE      		ret
 2771 0d06 8B83      	.Lscope17:
 2774 0d0c 5887      	.global	lcd_strobe_enable
 103:./lib/graphics.c **** pixel(i, y, PIXEL_ON);
 104:./lib/graphics.c **** }
 105:./lib/graphics.c **** 
 106:./lib/graphics.c **** /**
 2776               	stabs	"lib/LC7981.c",132,0,0,.Ltext3
 2777               	.Ltext3:
 2779 0d12 9C81      	.LM143:
 2780 0d14 9A83      	.LFBB18:
 2781 0d16 8983      		push r29
 2782 0d18 00C0      		push r28
 2783               		in r28,__SP_L__
 107:./lib/graphics.c **** gth) {
 108:./lib/graphics.c **** 	unsigned short i;
 109:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
 110:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
 111:./lib/graphics.c **** }
 112:./lib/graphics.c **** 
 2784               	__SP_H__
 2785               	/* prologue: function */
 2786 0d1a EF81      	/* frame size = 0 */
 2788 0d1e 8081      	.LM144:
 2789 0d20 8A30      		ldi r26,lo8(59)
 2790 0d22 01F4      		ldi r27,hi8(59)
 113:./lib/graphics.c **** t length) {
 114:./lib/graphics.c **** 	unsigned short i;
 2791               	0,lo8(59)
 2792               		ldi r31,hi8(59)
 2793 0d24 8981      		ld r24,Z
 2794 0d26 9A81      		ori r24,lo8(64)
 2795 0d28 9C83      		st X,r24
 115:./lib/graphics.c **** .
 116:./lib/graphics.c ****  */
 2797               	:
 2798               	/* #APP */
 2799 0d2c 8D81      	 ;  24 "lib/LC7981.c" 1
 2800 0d2e 9E81      		nop;
 2801 0d30 0896      	 ;  0 "" 2
 2802 0d32 9E83      	 ;  24 "lib/LC7981.c" 1
 2803 0d34 8D83      		nop;
 117:./lib/graphics.c **** origin.
 118:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2804               	" 2
 2805               	 ;  24 "lib/LC7981.c" 1
 2806 0d36 8F81      		nop;
 2807 0d38 9885      	 ;  0 "" 2
 2809 0d3c 9887      	.LM146:
 2810 0d3e 8F83      	/* #NOAPP */
 2811 0d40 00C0      		ldi r26,lo8(59)
 2812               		ldi r27,hi8(59)
 119:./lib/graphics.c **** ified length.
 120:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 121:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2813               	lo8(59)
 2814               		ldi r31,hi8(59)
 2815 0d42 EF81      		ld r24,Z
 2816 0d44 F885      		andi r24,lo8(-65)
 2817 0d46 4081      		st X,r24
 2819 0d4a 9885      	.LM147:
 2820 0d4c 0196      	/* #APP */
 2821 0d4e 9887      	 ;  26 "lib/LC7981.c" 1
 2822 0d50 8F83      		nop;
 2823 0d52 8B81      	 ;  0 "" 2
 2824 0d54 9C81      	 ;  26 "lib/LC7981.c" 1
 2825 0d56 2D81      		nop;
 2826 0d58 3E81      	 ;  0 "" 2
 2827 0d5a B901      	 ;  26 "lib/LC7981.c" 1
 2828 0d5c 0E94 0000 		nop;
 122:./lib/graphics.c **** ified length.
 123:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 124:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2829               	ilogue start */
 2831 0d60 8B81      	.LM148:
 2832 0d62 9C81      	/* #NOAPP */
 2833 0d64 0696      		pop r28
 2834 0d66 9C83      		pop r29
 2835 0d68 8B83      		ret
 125:./lib/graphics.c **** ified length.
 126:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 127:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 128:./lib/graphics.c ****  * @param length The length of the line, in pixels.
 2836               	lcd_strobe_enable, .-lcd_strobe_enable
 2837               	.Lscope18:
 2839 0d6c 9C81      	.global	lcd_wait_busy
 2841 0d70 813A      	lcd_wait_busy:
 2843 0d74 00F0      	.LM149:
 129:./lib/graphics.c **** ne's origin.
 130:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2844               	
 2845               		push r29
 2846 0d76 8981      		push r28
 2847 0d78 9A81      		in r28,__SP_L__
 2848 0d7a 9C83      		in r29,__SP_H__
 2849 0d7c 8B83      		sbiw r28,24
 131:./lib/graphics.c **** ified length.
 132:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 2850               	_tmp_reg__,__SREG__
 2851               		cli
 2852 0d7e 8D81      		out __SP_H__,r29
 2853 0d80 9E81      		out __SREG__,__tmp_reg__
 2854 0d82 0896      		out __SP_L__,r28
 2855 0d84 9E83      	/* prologue: function */
 2856 0d86 8D83      	/* frame size = 24 */
 2858               	.LM150:
 2859               		ldi r24,lo8(0x40400000)
 2860 0d88 EF81      		ldi r25,hi8(0x40400000)
 2861 0d8a F885      		ldi r26,hlo8(0x40400000)
 2862 0d8c 8081      		ldi r27,hhi8(0x40400000)
 2863 0d8e 8823      		std Y+21,r24
 2864 0d90 01F4      		std Y+22,r25
 2865               		std Y+23,r26
 133:./lib/graphics.c **** ight, at the specified coordinates and of
 134:./lib/graphics.c ****  * the specified length.
 135:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 2866               	BB12:
 2867               	.LBB13:
 2869 0d94 0FB6      	.Ltext4:
 2871 0d98 DEBF      	.LM151:
 2872 0d9a 0FBE      		ldd r22,Y+21
 2873 0d9c CDBF      		ldd r23,Y+22
 2874 0d9e CF91      		ldd r24,Y+23
 2875 0da0 DF91      		ldd r25,Y+24
 2876 0da2 0895      		ldi r18,lo8(0x40d55555)
 2877               		ldi r19,hi8(0x40d55555)
 2878               		ldi r20,hlo8(0x40d55555)
 2879               		ldi r21,hhi8(0x40d55555)
 2880               		call __mulsf3
 2881               		movw r26,r24
 2882               		movw r24,r22
 2883               		std Y+17,r24
 2884               		std Y+18,r25
 2885               		std Y+19,r26
 2886               		std Y+20,r27
 2888               	.LM152:
   1:lib/LC7981.c  **** /******************************************************************************
   2:lib/LC7981.c  ****  * LC7981/HD61830 Graphics LCD Driver
   3:lib/LC7981.c  ****  *
   4:lib/LC7981.c  ****  * Configured for the Samsung LJ41-00192B 160x80 monochrome graphics lcd.
   5:lib/LC7981.c  ****  *
   6:lib/LC7981.c  ****  * Written by Vanya A. Sergeev - <vsergeev@gmail.com>                         
   7:lib/LC7981.c  ****  *
   8:lib/LC7981.c  ****  * February 16, 2007                                                       
   9:lib/LC7981.c  ****  *
  10:lib/LC7981.c  **** ***************************************************************************/
  11:lib/LC7981.c  **** 
  12:lib/LC7981.c  **** /* lc7981.c: Source code for the LC7981/HD61830 graphics lcd driver.
  13:lib/LC7981.c  ****  * The hardware port defines can be found in lc7981.h. */
  14:lib/LC7981.c  **** 
  15:lib/LC7981.c  **** #include "lib/lc7981.h"
  16:lib/LC7981.c  **** #include "lib/graphics.c"
  17:lib/LC7981.c  **** 
  18:lib/LC7981.c  **** /** 
  19:lib/LC7981.c  ****  * Strobes the Enable control line to trigger the lcd to process the
  20:lib/LC7981.c  ****  * transmitted instruction.
  21:lib/LC7981.c  ****  */
  22:lib/LC7981.c  **** void lcd_strobe_enable(void) {
 2889               	Y+18
 2890               		ldd r24,Y+19
 2891               		ldd r25,Y+20
 2892 0da4 DF93      		ldi r18,lo8(0x3f800000)
 2893 0da6 CF93      		ldi r19,hi8(0x3f800000)
 2894 0da8 CDB7      		ldi r20,hlo8(0x3f800000)
 2895 0daa DEB7      		ldi r21,hhi8(0x3f800000)
 2896               		call __ltsf2
 2897               		tst r24
  23:lib/LC7981.c  **** _asm("nop;"); __asm("nop;"); __asm("nop;");
 2898               	36
 2899               	.L132:
 2901 0dae B0E0      	.LM153:
 2902 0db0 EBE3      		ldi r24,lo8(1)
 2903 0db2 F0E0      		std Y+16,r24
 2904 0db4 8081      		rjmp .L119
 2905 0db6 8064      	.L136:
  24:lib/LC7981.c  **** lcd_enable_low();
 2907               	ldd r22,Y+17
 2908               		ldd r23,Y+18
 2909               		ldd r24,Y+19
 2910               		ldd r25,Y+20
 2911 0dba 0000      		ldi r18,lo8(0x437f0000)
 2912               		ldi r19,hi8(0x437f0000)
 2913               		ldi r20,hlo8(0x437f0000)
 2914 0dbc 0000      		ldi r21,hhi8(0x437f0000)
 2915               		call __gtsf2
 2916               		cp __zero_reg__,r24
 2917 0dbe 0000      		brlt .+2
 2918               		rjmp .L137
  25:lib/LC7981.c  **** __asm("nop;"); __asm("nop;"); __asm("nop;");
 2919               	bn	68,0,156,.LM155-.LFBB19
 2920               	.LM155:
 2921               		ldd r22,Y+21
 2922 0dc0 ABE3      		ldd r23,Y+22
 2923 0dc2 B0E0      		ldd r24,Y+23
 2924 0dc4 EBE3      		ldd r25,Y+24
 2925 0dc6 F0E0      		ldi r18,lo8(0x447a0000)
 2926 0dc8 8081      		ldi r19,hi8(0x447a0000)
 2927 0dca 8F7B      		ldi r20,hlo8(0x447a0000)
 2928 0dcc 8C93      		ldi r21,hhi8(0x447a0000)
  26:lib/LC7981.c  **** 
 2929               	vsf3
 2930               		movw r26,r24
 2931               		movw r24,r22
 2932               		std Y+12,r24
 2933 0dce 0000      		std Y+13,r25
 2934               		std Y+14,r26
 2935               		std Y+15,r27
 2936 0dd0 0000      	.LBB14:
 2937               	.LBB15:
 2939 0dd2 0000      	.LM156:
 2940               		ldd r22,Y+12
 2941               		ldd r23,Y+13
  27:lib/LC7981.c  **** 
 2942               	
 2943               		ldd r25,Y+15
 2944               		ldi r18,lo8(0x459c4000)
 2945 0dd4 CF91      		ldi r19,hi8(0x459c4000)
 2946 0dd6 DF91      		ldi r20,hlo8(0x459c4000)
 2947 0dd8 0895      		ldi r21,hhi8(0x459c4000)
 2948               		call __mulsf3
 2949               		movw r26,r24
 2950               		movw r24,r22
 2951               		std Y+8,r24
 2952               		std Y+9,r25
 2953               		std Y+10,r26
  28:lib/LC7981.c  **** /**
  29:lib/LC7981.c  ****  * Waits for the busy flag to clear, which should take
  30:lib/LC7981.c  ****  * around the maximum time for an instruction to complete.
  31:lib/LC7981.c  ****  * Note, LCD operation is kind of sensitive to this configuration. If the delay
  32:lib/LC7981.c  ****  * is too fast, the LCD will miss some pixels when it is really put through
  33:lib/LC7981.c  ****  * a stress test. This dela time seems to work great.
  34:lib/LC7981.c  ****  */
  35:lib/LC7981.c  **** void lcd_wait_busy(void) {
  36:lib/LC7981.c  **** 	_delay_us(3);
 2954               	27
 2956               	.LM157:
 2957 0dda DF93      		ldd r22,Y+8
 2958 0ddc CF93      		ldd r23,Y+9
 2959 0dde CDB7      		ldd r24,Y+10
 2960 0de0 DEB7      		ldd r25,Y+11
 2961 0de2 6897      		ldi r18,lo8(0x3f800000)
 2962 0de4 0FB6      		ldi r19,hi8(0x3f800000)
 2963 0de6 F894      		ldi r20,hlo8(0x3f800000)
 2964 0de8 DEBF      		ldi r21,hhi8(0x3f800000)
 2965 0dea 0FBE      		call __ltsf2
 2966 0dec CDBF      		tst r24
 2967               		brge .L138
 2968               	.L134:
 2970               	.LM158:
 2971 0dee 80E0      		ldi r24,lo8(1)
 2972 0df0 90E0      		ldi r25,hi8(1)
 2973 0df2 A0E4      		std Y+7,r25
 2974 0df4 B0E4      		std Y+6,r24
 2975 0df6 8D8B      		rjmp .L124
 2976 0df8 9E8B      	.L138:
 2978 0dfc B88F      	.LM159:
 2979               		ldd r22,Y+8
 2980               		ldd r23,Y+9
 2981               		ldd r24,Y+10
 2982               		ldd r25,Y+11
   1:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    All rights reserved.
   5:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
   6:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
   9:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  12:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      distribution.
  16:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  17:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  21:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  33:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5.2.1 2009/02/25 10:14:03 joerg_wunsch Exp $ */
  34:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  35:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  38:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #include <inttypes.h>
  39:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  41:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /** \file */
  42:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \code
  44:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \endcode
  48:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  49:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     used.
  53:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  54:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  63:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     routines linked into the application.
  71:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  72:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  76:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** */
  77:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  78:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  82:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  83:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef F_CPU
  84:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  88:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  89:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  92:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  93:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /**
  94:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
  95:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  96:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
  97:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  98:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 101:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 102:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 103:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 104:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 105:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 106:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 107:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 108:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****  */
 109:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** void
 110:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** _delay_ms(double __ms)
 111:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** {
 112:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	uint16_t __ticks;
 113:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 114:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 115:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 116:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 117:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	{
 118:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 119:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 120:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		while(__ticks)
 121:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		{
 122:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 			// wait 1/10 ms
 123:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 124:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 			__ticks --;
 125:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		}
 126:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		return;
 127:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	}
 128:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else
 129:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 130:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 131:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** }
 132:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 133:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /**
 134:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
 135:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 136:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 137:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 138:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 139:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 140:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 141:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 142:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 143:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 144:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 145:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    will not be informed about this case.
 146:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****  */
 147:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** void
 148:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** _delay_us(double __us)
 149:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** {
 150:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	uint8_t __ticks;
 151:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 2983               	 r19,hi8(0x477fff00)
 2984               		ldi r20,hlo8(0x477fff00)
 2985 0dfe 6D89      		ldi r21,hhi8(0x477fff00)
 2986 0e00 7E89      		call __gtsf2
 2987 0e02 8F89      		cp __zero_reg__,r24
 2988 0e04 988D      		brge .L139
 2989 0e06 25E5      	.L135:
 2991 0e0a 45ED      	.LM160:
 2992 0e0c 50E4      		ldd r22,Y+12
 2993 0e0e 0E94 0000 		ldd r23,Y+13
 2994 0e12 DC01      		ldd r24,Y+14
 2995 0e14 CB01      		ldd r25,Y+15
 2996 0e16 898B      		ldi r18,lo8(0x41200000)
 2997 0e18 9A8B      		ldi r19,hi8(0x41200000)
 2998 0e1a AB8B      		ldi r20,hlo8(0x41200000)
 2999 0e1c BC8B      		ldi r21,hhi8(0x41200000)
 152:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 3000               	ovw r26,r24
 3001               		movw r24,r22
 3002 0e1e 6989      		movw r22,r24
 3003 0e20 7A89      		movw r24,r26
 3004 0e22 8B89      		call __fixunssfsi
 3005 0e24 9C89      		movw r26,r24
 3006 0e26 20E0      		movw r24,r22
 3007 0e28 30E0      		std Y+7,r25
 3008 0e2a 40E8      		std Y+6,r24
 3009 0e2c 5FE3      		rjmp .L127
 3010 0e2e 0E94 0000 	.L128:
 3011 0e32 8823      		ldi r24,lo8(500)
 3012 0e34 04F4      		ldi r25,hi8(500)
 3013               		std Y+5,r25
 153:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 3014               	LBB16:
 3015               	.LBB17:
 3017 0e38 888B      	.Ltext5:
 3019               	.LM161:
 154:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 255)
 3020               	24,Y+4
 3021               		ldd r25,Y+5
 3022 0e3c 6989      	/* #APP */
 3023 0e3e 7A89      	 ;  105 "c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3024 0e40 8B89      		1: sbiw r24,1
 3025 0e42 9C89      		brne 1b
 3026 0e44 20E0      	 ;  0 "" 2
 3027 0e46 30E0      	/* #NOAPP */
 3028 0e48 4FE7      		std Y+5,r25
 3029 0e4a 53E4      		std Y+4,r24
 3030 0e4c 0E94 0000 	.LBE17:
 3031 0e50 1816      	.LBE16:
 3033 0e54 00C0      	.Ltext6:
 155:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	{
 156:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		_delay_ms(__us / 1000.0);
 3035               	4,Y+6
 3036               		ldd r25,Y+7
 3037 0e56 6D89      		sbiw r24,1
 3038 0e58 7E89      		std Y+7,r25
 3039 0e5a 8F89      		std Y+6,r24
 3040 0e5c 988D      	.L127:
 3042 0e60 30E0      	.LM163:
 3043 0e62 4AE7      		ldd r24,Y+6
 3044 0e64 54E4      		ldd r25,Y+7
 3045 0e66 0E94 0000 		sbiw r24,0
 3046 0e6a DC01      		brne .L128
 3047 0e6c CB01      		rjmp .L131
 3048 0e6e 8C87      	.L139:
 3050 0e72 AE87      	.LM164:
 3051 0e74 BF87      		ldd r22,Y+8
 3052               		ldd r23,Y+9
 3053               		ldd r24,Y+10
 3054               		ldd r25,Y+11
 3055               		call __fixunssfsi
 3056 0e76 6C85      		movw r26,r24
 3057 0e78 7D85      		movw r24,r22
 3058 0e7a 8E85      		std Y+7,r25
 3059 0e7c 9F85      		std Y+6,r24
 3060 0e7e 20E0      	.L124:
 3061 0e80 30E4      		ldd r24,Y+6
 3062 0e82 4CE9      		ldd r25,Y+7
 3063 0e84 55E4      		std Y+3,r25
 3064 0e86 0E94 0000 		std Y+2,r24
 3065 0e8a DC01      	.LBB18:
 3066 0e8c CB01      	.LBB19:
 3068 0e90 9987      	.Ltext7:
 3070 0e94 BB87      	.LM165:
 3071               		ldd r24,Y+2
 3072               		ldd r25,Y+3
 3073 0e96 6885      	/* #APP */
 3074 0e98 7985      	 ;  105 "c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3075 0e9a 8A85      		1: sbiw r24,1
 3076 0e9c 9B85      		brne 1b
 3077 0e9e 20E0      	 ;  0 "" 2
 3078 0ea0 30E0      	/* #NOAPP */
 3079 0ea2 40E8      		std Y+3,r25
 3080 0ea4 5FE3      		std Y+2,r24
 3081 0ea6 0E94 0000 		rjmp .L131
 3082 0eaa 8823      	.L137:
 3083 0eac 04F4      	.LBE19:
 3084               	.LBE18:
 3085               	.LBE15:
 3086               	.LBE14:
 3088 0eb0 90E0      	.Ltext8:
 3090 0eb4 8E83      	.LM166:
 3091 0eb6 00C0      		ldd r22,Y+17
 3092               		ldd r23,Y+18
 3093               		ldd r24,Y+19
 3094               		ldd r25,Y+20
 3095 0eb8 6885      		call __fixunssfsi
 3096 0eba 7985      		movw r26,r24
 3097 0ebc 8A85      		movw r24,r22
 3098 0ebe 9B85      		std Y+16,r24
 3099 0ec0 20E0      	.L119:
 3100 0ec2 3FEF      		ldd r24,Y+16
 3101 0ec4 4FE7      		std Y+1,r24
 3102 0ec6 57E4      	.LBB20:
 3103 0ec8 0E94 0000 	.LBB21:
 3105 0ece 04F4      	.Ltext9:
 3107               	.LM167:
 3108               		ldd r24,Y+1
 3109 0ed0 6C85      	/* #APP */
 3110 0ed2 7D85      	 ;  83 "c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3111 0ed4 8E85      		1: dec r24
 3112 0ed6 9F85      		brne 1b
 3113 0ed8 20E0      	 ;  0 "" 2
 3114 0eda 30E0      	/* #NOAPP */
 3115 0edc 40E2      		std Y+1,r24
 3116 0ede 51E4      	.L131:
 3117 0ee0 0E94 0000 	/* epilogue start */
 3118 0ee4 DC01      	.LBE21:
 3119 0ee6 CB01      	.LBE20:
 3120 0ee8 BC01      	.LBE13:
 3121 0eea CD01      	.LBE12:
 3123 0ef0 DC01      	.Ltext10:
 3125 0ef4 9F83      	.LM168:
 3126 0ef6 8E83      		adiw r28,24
 3127 0ef8 00C0      		in __tmp_reg__,__SREG__
 3128               		cli
 3129 0efa 84EF      		out __SP_H__,r29
 3130 0efc 91E0      		out __SREG__,__tmp_reg__
 3131 0efe 9D83      		out __SP_L__,r28
 3132 0f00 8C83      		pop r28
 3133               		pop r29
 3134               		ret
 3136               	.Lscope19:
   1:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 3137               	bs	"data:p(0,11)",160,0,0,2
 3138               	.global	lcd_write_command
 3140 0f04 9D81      	lcd_write_command:
 3142               	.LM169:
 3143 0f06 0197      	.LFBB20:
 3144 0f08 01F4      		push r29
 3145               		push r28
 3146               		rcall .
 3147 0f0a 9D83      		in r28,__SP_L__
 3148 0f0c 8C83      		in r29,__SP_H__
 3149               	/* prologue: function */
 3150               	/* frame size = 2 */
 3151               		std Y+1,r24
 3152               		std Y+2,r22
 3154               	.LM170:
 3155 0f0e 8E81      		call lcd_wait_busy
 3157 0f12 0197      	.LM171:
 3158 0f14 9F83      		ldi r26,lo8(59)
 3159 0f16 8E83      		ldi r27,hi8(59)
 3160               		ldi r30,lo8(59)
 3161               		ldi r31,hi8(59)
 3162               		ld r24,Z
 3163 0f18 8E81      		andi r24,lo8(-33)
 3164 0f1a 9F81      		st X,r24
 3166 0f1e 01F4      	.LM172:
 3167 0f20 00C0      		ldi r26,lo8(59)
 3168               		ldi r27,hi8(59)
 3169               		ldi r30,lo8(59)
 3170               		ldi r31,hi8(59)
 3171 0f22 6885      		ld r24,Z
 3172 0f24 7985      		ori r24,lo8(-128)
 3173 0f26 8A85      		st X,r24
 3175 0f2a 0E94 0000 	.LM173:
 3176 0f2e DC01      		ldi r30,lo8(53)
 3177 0f30 CB01      		ldi r31,hi8(53)
 3178 0f32 9F83      		ldd r24,Y+1
 3179 0f34 8E83      		andi r24,lo8(15)
 3180               		st Z,r24
 3182 0f38 9F81      	.LM174:
 3183 0f3a 9B83      	/* #APP */
 3184 0f3c 8A83      	 ;  78 "lib/LC7981.c" 1
 3185               		nop;
 3186               	 ;  0 "" 2
 3187               	 ;  78 "lib/LC7981.c" 1
 3188               		nop;
 3189               	 ;  0 "" 2
 3190               	 ;  78 "lib/LC7981.c" 1
 3191 0f3e 8A81      		nop;
 3192 0f40 9B81      	 ;  0 "" 2
 3194               	.LM175:
 3195 0f42 0197      	 ;  79 "lib/LC7981.c" 1
 3196 0f44 01F4      		nop;
 3197               	 ;  0 "" 2
 3198               	 ;  79 "lib/LC7981.c" 1
 3199 0f46 9B83      		nop;
 3200 0f48 8A83      	 ;  0 "" 2
 3201 0f4a 00C0      	 ;  79 "lib/LC7981.c" 1
 3202               		nop;
 3203               	 ;  0 "" 2
 3205               	.LM176:
 3206               	/* #NOAPP */
 3207               		call lcd_strobe_enable
 157:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		return;
 158:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	}
 159:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else
 160:c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 3209               	LC7981.c" 1
 3210               		nop;
 3211 0f4c 6989      	 ;  0 "" 2
 3212 0f4e 7A89      	 ;  81 "lib/LC7981.c" 1
 3213 0f50 8B89      		nop;
 3214 0f52 9C89      	 ;  0 "" 2
 3216 0f58 DC01      	.LM178:
 3217 0f5a CB01      	 ;  82 "lib/LC7981.c" 1
 3218 0f5c 888B      		nop;
 3219               	 ;  0 "" 2
 3220 0f5e 8889      	 ;  82 "lib/LC7981.c" 1
 3221 0f60 8983      		nop;
 3222               	 ;  0 "" 2
 3223               	 ;  82 "lib/LC7981.c" 1
 3224               		nop;
 3225               	 ;  0 "" 2
 3227               	.LM179:
 3228 0f62 8981      	/* #NOAPP */
 3229               		ldi r26,lo8(59)
 3230               		ldi r27,hi8(59)
 3231 0f64 8A95      		ldi r30,lo8(59)
 3232 0f66 01F4      		ldi r31,hi8(59)
 3233               		ld r24,Z
 3234               		andi r24,lo8(-33)
 3235 0f68 8983      		st X,r24
 3237               	.LM180:
 3238               		ldi r26,lo8(59)
 3239               		ldi r27,hi8(59)
 3240               		ldi r30,lo8(59)
 3241               		ldi r31,hi8(59)
 3242               		ld r24,Z
 3243               		andi r24,lo8(127)
  37:lib/LC7981.c  ****  Older implementation of lcd_wait_busy() that checked the busy flag in 
  38:lib/LC7981.c  ****  * hardware. I found that it always hanged after plotting a byte to the screen,
 3244               	FBB20
 3245               	.LM181:
 3246 0f6a 6896      		ldi r30,lo8(53)
 3247 0f6c 0FB6      		ldi r31,hi8(53)
 3248 0f6e F894      		ldd r24,Y+2
 3249 0f70 DEBF      		st Z,r24
 3251 0f74 CDBF      	.LM182:
 3252 0f76 CF91      	/* #APP */
 3253 0f78 DF91      	 ;  88 "lib/LC7981.c" 1
 3254 0f7a 0895      		nop;
 3255               	 ;  0 "" 2
 3256               	 ;  88 "lib/LC7981.c" 1
 3257               		nop;
 3258               	 ;  0 "" 2
 3259               	 ;  88 "lib/LC7981.c" 1
 3260               		nop;
 3261               	 ;  0 "" 2
  39:lib/LC7981.c  ****  so I took up the delay version above.
  40:lib/LC7981.c  ****  *
  41:lib/LC7981.c  **** void lcd_wait_busy(void) {
  42:lib/LC7981.c  **** 	unsigned char counter = 1;
  43:lib/LC7981.c  **** 	unsigned char data;
  44:lib/LC7981.c  **** 	* Set RW and RS high *
  45:lib/LC7981.c  **** 	lcd_rw_high();
  46:lib/LC7981.c  **** 	lcd_rs_high();
  47:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  48:lib/LC7981.c  **** 	* Wait until busy flag on last bit of the data port clears. *
  49:lib/LC7981.c  **** 	do {
  50:lib/LC7981.c  **** 		lcd_enable_high();
  51:lib/LC7981.c  **** 		__asm("nop;"); __asm("nop;"); __asm("nop;");
  52:lib/LC7981.c  **** 		data = LCD_DATA_PORT;
  53:lib/LC7981.c  **** 		__asm("nop;"); __asm("nop;"); __asm("nop;");
  54:lib/LC7981.c  **** 		lcd_enable_low();
  55:lib/LC7981.c  **** 		__asm("nop;"); __asm("nop;"); __asm("nop;");
  56:lib/LC7981.c  **** 	} while (data & 0x80);
  57:lib/LC7981.c  **** }*/
  58:lib/LC7981.c  **** 
  59:lib/LC7981.c  **** /**
  60:lib/LC7981.c  ****  * Writes a raw instruction to the LCD. 
  61:lib/LC7981.c  ****  * @param command The 4-bit instruction code.
  62:lib/LC7981.c  ****  * @param data The 8-bit paramater/data to the specified instruction.
  63:lib/LC7981.c  ****  */
  64:lib/LC7981.c  **** void lcd_write_command(unsigned char command, unsigned char data) {
  65:lib/LC7981.c  **** 	/* Wait for the busy flag to clear */
  66:lib/LC7981.c  **** 	lcd_wait_busy();
  67:lib/LC7981.c  **** 	
  68:lib/LC7981.c  **** 	/* Set RW low, RS high to write the instruction command */
 3263               	/LC7981.c" 1
 3264               		nop;
 3265               	 ;  0 "" 2
 3266 0f7c DF93      	 ;  89 "lib/LC7981.c" 1
 3267 0f7e CF93      		nop;
 3268 0f80 00D0      	 ;  0 "" 2
 3269 0f82 CDB7      	 ;  89 "lib/LC7981.c" 1
 3270 0f84 DEB7      		nop;
 3271               	 ;  0 "" 2
 3273 0f86 8983      	.LM184:
 3274 0f88 6A83      	/* #NOAPP */
  69:lib/LC7981.c  **** 
  70:lib/LC7981.c  **** 	/* Instruction commands are a maximum of 4 bits long, so 
 3275               	robe_enable
 3277 0f8a 0E94 0000 	.LM185:
  71:lib/LC7981.c  ****  * just mask off the rest. */
  72:lib/LC7981.c  **** 	LCD_DATA_PORT = (command&0x0F);
  73:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3278               	#APP */
 3279               	 ;  91 "lib/LC7981.c" 1
 3280 0f8e ABE3      		nop;
 3281 0f90 B0E0      	 ;  0 "" 2
 3282 0f92 EBE3      	 ;  91 "lib/LC7981.c" 1
 3283 0f94 F0E0      		nop;
 3284 0f96 8081      	 ;  0 "" 2
 3285 0f98 8F7D      	 ;  91 "lib/LC7981.c" 1
 3286 0f9a 8C93      		nop;
  74:lib/LC7981.c  **** asm("nop;"); __asm("nop;"); __asm("nop;");
 3287               	2
 3289 0f9c ABE3      	.LM186:
 3290 0f9e B0E0      	 ;  92 "lib/LC7981.c" 1
 3291 0fa0 EBE3      		nop;
 3292 0fa2 F0E0      	 ;  0 "" 2
 3293 0fa4 8081      	 ;  92 "lib/LC7981.c" 1
 3294 0fa6 8068      		nop;
 3295 0fa8 8C93      	 ;  0 "" 2
  75:lib/LC7981.c  **** lcd_strobe_enable();
  76:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  77:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3296               	ib/LC7981.c" 1
 3297               		nop;
 3298 0faa E5E3      	 ;  0 "" 2
 3299 0fac F0E0      	/* epilogue start */
 3301 0fb0 8F70      	.LM187:
 3302 0fb2 8083      	/* #NOAPP */
  78:lib/LC7981.c  **** * Set RW low, RW low to write the instruction data */
 3303               	tmp_reg__
 3304               		pop __tmp_reg__
 3305               		pop r28
 3306               		pop r29
 3307 0fb4 0000      		ret
 3309               	.Lscope20:
 3311               	.global	lcd_graphics_init
 3313 0fb8 0000      	lcd_graphics_init:
  79:lib/LC7981.c  **** lcd_rw_low();
 3315               	B21:
 3316               		push r29
 3317               		push r28
 3318 0fba 0000      		push __tmp_reg__
 3319               		in r28,__SP_L__
 3320               		in r29,__SP_H__
 3321 0fbc 0000      	/* prologue: function */
 3322               	/* frame size = 1 */
 3324 0fbe 0000      	.LM189:
 3325               		ldi r30,lo8(52)
  80:lib/LC7981.c  **** lcd_rs_low();
 3326               	8(52)
 3327               		ldi r24,lo8(-1)
 3328               		st Z,r24
  81:lib/LC7981.c  **** 
 3330               	90:
 3331               		ldi r26,lo8(58)
 3332               		ldi r27,hi8(58)
 3333               		ldi r30,lo8(58)
 3334 0fc4 0000      		ldi r31,hi8(58)
 3335               		ld r24,Z
 3336               		ori r24,lo8(-32)
 3337 0fc6 0000      		st X,r24
 3339               	.LM191:
 3340 0fc8 0000      		ldi r26,lo8(59)
 3341               		ldi r27,hi8(59)
  82:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3342               	(59)
 3343               		ldi r31,hi8(59)
 3344               		ld r24,Z
 3345 0fca 0000      		andi r24,lo8(-33)
 3346               		st X,r24
 3348 0fcc 0000      	.LM192:
 3349               		ldi r26,lo8(59)
 3350               		ldi r27,hi8(59)
 3351 0fce 0000      		ldi r30,lo8(59)
 3352               		ldi r31,hi8(59)
  83:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
  84:lib/LC7981.c  **** 	lcd_rw_low();
  85:lib/LC7981.c  **** 	lcd_rs_low();
 3353               	andi r24,lo8(127)
 3354               		st X,r24
 3356 0fd0 ABE3      	.LM193:
 3357 0fd2 B0E0      		ldi r26,lo8(59)
 3358 0fd4 EBE3      		ldi r27,hi8(59)
 3359 0fd6 F0E0      		ldi r30,lo8(59)
 3360 0fd8 8081      		ldi r31,hi8(59)
 3361 0fda 8F7D      		ld r24,Z
 3362 0fdc 8C93      		andi r24,lo8(-65)
  86:lib/LC7981.c  **** D_DATA_PORT = data;
 3364               	.LM194:
 3365 0fde ABE3      		ldi r24,lo8(50)
 3366 0fe0 B0E0      		std Y+1,r24
 3368 0fe4 F0E0      	.LM195:
 3369 0fe6 8081      		ldi r24,lo8(0)
 3370 0fe8 8F77      		ldd r22,Y+1
 3371 0fea 8C93      		call lcd_write_command
  87:lib/LC7981.c  **** nop;"); __asm("nop;");
 3372               	8,0,118,.LM196-.LFBB21
 3373               	.LM196:
 3374 0fec E5E3      		ldi r24,lo8(7)
 3375 0fee F0E0      		std Y+1,r24
 3377 0ff2 8083      	.LM197:
  88:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 3378               	24,lo8(1)
 3379               		ldd r22,Y+1
 3380               		call lcd_write_command
 3382 0ff4 0000      	.LM198:
 3383               		ldi r24,lo8(19)
 3384               		std Y+1,r24
 3386               	.LM199:
 3387               		ldi r24,lo8(2)
 3388 0ff8 0000      		ldd r22,Y+1
 3389               		call lcd_write_command
  89:lib/LC7981.c  **** lcd_rw_low();
 3390               	,128,.LM200-.LFBB21
 3391               	.LM200:
 3392               		ldi r24,lo8(127)
 3393 0ffa 0000      		std Y+1,r24
 3395               	.LM201:
 3396 0ffc 0000      		ldi r24,lo8(3)
 3397               		ldd r22,Y+1
 3398               		call lcd_write_command
 3400               	.LM202:
  90:lib/LC7981.c  **** lcd_rs_low();
 3401               	zero_reg__
 3403               	.LM203:
 3404 1000 0E94 0000 		ldi r24,lo8(8)
  91:lib/LC7981.c  **** 
 3405               	 r22,Y+1
 3406               		call lcd_write_command
 3408               	.LM204:
 3409 1004 0000      		ldi r24,lo8(9)
 3410               		ldd r22,Y+1
 3411               		call lcd_write_command
 3413               	.LM205:
 3414               		std Y+1,__zero_reg__
 3416               	.LM206:
  92:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3417               	(10)
 3418               		ldd r22,Y+1
 3419               		call lcd_write_command
 3421               	.LM207:
 3422               		ldi r24,lo8(11)
 3423 100c 0000      		ldd r22,Y+1
 3424               		call lcd_write_command
 3425               	/* epilogue start */
 3427               	.LM208:
 3428               		pop __tmp_reg__
  93:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 3429               	p r29
 3430               		ret
 3435 1016 DF91      	.Lscope21:
 3439               	.global	lcd_graphics_move
 3441               	lcd_graphics_move:
  94:lib/LC7981.c  **** lcd_rw_low();
  95:lib/LC7981.c  **** 	lcd_rs_low();
  96:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
  97:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  98:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  99:lib/LC7981.c  **** 	lcd_strobe_enable();
 3443               	2:
 3444               		push r29
 3445               		push r28
 3446 101a DF93      		rcall .
 3447 101c CF93      		rcall .
 3448 101e 0F92      		rcall .
 3449 1020 CDB7      		in r28,__SP_L__
 3450 1022 DEB7      		in r29,__SP_H__
 3451               	/* prologue: function */
 3452               	/* frame size = 6 */
 100:lib/LC7981.c  **** ("nop;"); __asm("nop;"); __asm("nop;");
 101:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 102:lib/LC7981.c  **** }
 103:lib/LC7981.c  **** 
 3453               	25
 3454               		std Y+3,r24
 3455 1024 E4E3      		std Y+6,r23
 3456 1026 F0E0      		std Y+5,r22
 3458 102a 8083      	.LM210:
 104:lib/LC7981.c  **** "nop;");
 3459               	18,Y+5
 3460               		ldd r19,Y+6
 3461 102c AAE3      		ldi r24,lo8(160)
 3462 102e B0E0      		ldi r25,hi8(160)
 3463 1030 EAE3      		movw r20,r18
 3464 1032 F0E0      		mul r20,r24
 3465 1034 8081      		movw r18,r0
 3466 1036 806E      		mul r20,r25
 3467 1038 8C93      		add r19,r0
 105:lib/LC7981.c  **** 
 106:lib/LC7981.c  **** 	lcd_rs_low();
 107:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 3468               	r24
 3469               		add r19,r0
 3470 103a ABE3      		clr r1
 3471 103c B0E0      		ldd r24,Y+3
 3472 103e EBE3      		ldd r25,Y+4
 3473 1040 F0E0      		add r24,r18
 3474 1042 8081      		adc r25,r19
 3475 1044 8F7D      		lsr r25
 3476 1046 8C93      		ror r24
 108:lib/LC7981.c  **** nop;"); __asm("nop;");
 3477               		ror r24
 3478               		lsr r25
 3479 1048 ABE3      		ror r24
 3480 104a B0E0      		std Y+2,r25
 3481 104c EBE3      		std Y+1,r24
 3483 1050 8081      	.LM211:
 3484 1052 8F77      		ldd r25,Y+1
 3485 1054 8C93      		ldi r24,lo8(10)
 109:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 3486               	r25
 3487               		call lcd_write_command
 3489 1058 B0E0      	.LM212:
 3490 105a EBE3      		ldd r24,Y+1
 3491 105c F0E0      		ldd r25,Y+2
 3492 105e 8081      		mov r24,r25
 3493 1060 8F7B      		clr r25
 3494 1062 8C93      		mov r25,r24
 110:lib/LC7981.c  **** lcd_rw_low();
 111:lib/LC7981.c  **** 	lcd_rs_low();
 112:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 113:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3495               	lo8(11)
 3496               		mov r22,r25
 3497 1064 82E3      		call lcd_write_command
 3498 1066 8983      	/* epilogue start */
 114:lib/LC7981.c  **** sm("nop;"); __asm("nop;"); __asm("nop;");
 3499               	abn	68,0,156,.LM213-.LFBB22
 3500               	.LM213:
 3501 1068 80E0      		adiw r28,6
 3502 106a 6981      		in __tmp_reg__,__SREG__
 3503 106c 0E94 0000 		cli
 115:lib/LC7981.c  **** 
 116:lib/LC7981.c  **** 	lcd_rs_low();
 117:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 118:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3504               	__SP_H__,r29
 3505               		out __SREG__,__tmp_reg__
 3506 1070 87E0      		out __SP_L__,r28
 3507 1072 8983      		pop r28
 119:lib/LC7981.c  **** to write the instruction data */
 3508               	 r29
 3509               		ret
 120:lib/LC7981.c  **** lcd_rw_low();
 121:lib/LC7981.c  **** 	lcd_rs_low();
 122:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 123:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 124:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3513               	bn	224,0,0,.Lscope22-.LFBB22
 3514               	.Lscope22:
 125:lib/LC7981.c  **** strobe_enable();
 3517               	bal	lcd_graphics_draw_byte
 3519 1080 82E0      	lcd_graphics_draw_byte:
 3521 1084 0E94 0000 	.LM214:
 126:lib/LC7981.c  **** TA_PORT = data;
 127:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 128:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3522               	23:
 3523               		push r29
 3524 1088 8FE7      		push r28
 3525 108a 8983      		push __tmp_reg__
 129:lib/LC7981.c  **** 
 3526               	r28,__SP_L__
 3527               		in r29,__SP_H__
 3528 108c 83E0      	/* prologue: function */
 3529 108e 6981      	/* frame size = 1 */
 3530 1090 0E94 0000 		std Y+1,r24
 130:lib/LC7981.c  **** ; __asm("nop;");
 131:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 132:lib/LC7981.c  **** 
 3531               	bn	68,0,163,.LM215-.LFBB23
 3532               	.LM215:
 3533 1094 1982      		ldi r24,lo8(12)
 133:lib/LC7981.c  ****  Set RW low, RW low to write the instruction data */
 3534               	d r22,Y+1
 3535               		call lcd_write_command
 3536 1096 88E0      	/* epilogue start */
 3538 109a 0E94 0000 	.LM216:
 134:lib/LC7981.c  **** lcd_rw_low();
 3539               	__tmp_reg__
 3540               		pop r28
 3541 109e 89E0      		pop r29
 3542 10a0 6981      		ret
 135:lib/LC7981.c  **** lcd_rs_low();
 136:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 137:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3544               	pe23:
 138:lib/LC7981.c  **** to write the instruction data */
 3547               	tabs	"y:p(0,9)",160,0,0,3
 3549 10a8 8AE0      	.global	lcd_graphics_plot_byte
 3551 10ac 0E94 0000 	lcd_graphics_plot_byte:
 139:lib/LC7981.c  **** lcd_rw_low();
 3552               	bn	68,0,172,.LM217-.LFBB24
 3553               	.LM217:
 3554 10b0 8BE0      	.LFBB24:
 3555 10b2 6981      		push r29
 3556 10b4 0E94 0000 		push r28
 3557               		rcall .
 140:lib/LC7981.c  **** lcd_rs_low();
 3558               	 .
 3559               		push __tmp_reg__
 3560 10b8 0F90      		in r28,__SP_L__
 3561 10ba CF91      		in r29,__SP_H__
 3562 10bc DF91      	/* prologue: function */
 3563 10be 0895      	/* frame size = 5 */
 3564               		std Y+2,r25
 3565               		std Y+1,r24
 3566               		std Y+4,r23
 3567               		std Y+3,r22
 3568               		std Y+5,r20
 3570               	.LM218:
 3571               		ldd r24,Y+1
 3572               		ldd r25,Y+2
 3573               		ldd r18,Y+3
 3574               		ldd r19,Y+4
 141:lib/LC7981.c  **** 
 142:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 143:lib/LC7981.c  **** 
 144:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 145:lib/LC7981.c  **** 	lcd_rw_low();
 146:lib/LC7981.c  **** 	lcd_rs_low();
 147:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 3575               	ll lcd_graphics_move
 3577               	.LM219:
 3578 10c0 DF93      		ldd r24,Y+5
 3579 10c2 CF93      		call lcd_graphics_draw_byte
 3580 10c4 00D0      	/* epilogue start */
 3582 10c8 00D0      	.LM220:
 3583 10ca CDB7      		pop __tmp_reg__
 3584 10cc DEB7      		pop __tmp_reg__
 3585               		pop __tmp_reg__
 3586               		pop __tmp_reg__
 3587 10ce 9C83      		pop __tmp_reg__
 3588 10d0 8B83      		pop r28
 3589 10d2 7E83      		pop r29
 3590 10d4 6D83      		ret
 148:lib/LC7981.c  **** ("nop;"); __asm("nop;"); __asm("nop;");
 149:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 150:lib/LC7981.c  **** 	lcd_strobe_enable();
 151:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3591               	ics_plot_byte, .-lcd_graphics_plot_byte
 3592               	.Lscope24:
 3597 10de A901      	.global	lcd_graphics_plot_pixel
 3599 10e2 9001      	lcd_graphics_plot_pixel:
 3601 10e6 300D      	.LM221:
 3602 10e8 589F      	.LFBB25:
 3603 10ea 300D      		push r29
 3604 10ec 1124      		push r28
 3605 10ee 8B81      		rcall .
 3606 10f0 9C81      		rcall .
 3607 10f2 820F      		rcall .
 3608 10f4 931F      		in r28,__SP_L__
 3609 10f6 9695      		in r29,__SP_H__
 3610 10f8 8795      	/* prologue: function */
 3611 10fa 9695      	/* frame size = 6 */
 3612 10fc 8795      		std Y+3,r25
 3613 10fe 9695      		std Y+2,r24
 3614 1100 8795      		std Y+5,r23
 3615 1102 9A83      		std Y+4,r22
 3616 1104 8983      		std Y+6,r20
 152:lib/LC7981.c  **** __asm("nop;");
 153:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 154:lib/LC7981.c  **** 	lcd_strobe_enable();
 3617               	FBB25
 3618               	.LM222:
 3619 1106 9981      		ldd r24,Y+2
 3620 1108 8AE0      		ldd r25,Y+3
 3621 110a 692F      		ldd r18,Y+4
 3622 110c 0E94 0000 		ldd r19,Y+5
 155:lib/LC7981.c  **** TA_PORT = data;
 3623               	r22,r18
 3624               		call lcd_graphics_move
 3626 1112 9A81      	.LM223:
 3627 1114 892F      		ldd r24,Y+2
 3628 1116 9927      		andi r24,lo8(7)
 3629 1118 982F      		std Y+1,r24
 3631 111c 692F      	.LM224:
 3632 111e 0E94 0000 		ldd r24,Y+6
 3633               		cpi r24,lo8(-1)
 156:lib/LC7981.c  **** nop;"); __asm("nop;");
 3634               	
 3636 1122 2696      	.LM225:
 3637 1124 0FB6      		ldi r24,lo8(15)
 3638 1126 F894      		ldd r22,Y+1
 3639 1128 DEBF      		call lcd_write_command
 3640 112a 0FBE      		rjmp .L153
 3641 112c CDBF      	.L151:
 3643 1130 DF91      	.LM226:
 3644 1132 0895      		ldi r24,lo8(14)
 3645               		ldd r22,Y+1
 3646               		call lcd_write_command
 3647               	.L153:
 3648               	/* epilogue start */
 3650               	.LM227:
 3651               		adiw r28,6
 3652               		in __tmp_reg__,__SREG__
 3653               		cli
 3654               		out __SP_H__,r29
 157:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 158:lib/LC7981.c  **** 	lcd_rw_low();
 159:lib/LC7981.c  **** 	lcd_rs_low();
 160:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 161:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 162:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3655               	reg__
 3656               		out __SP_L__,r28
 3657               		pop r28
 3658 1134 DF93      		pop r29
 3659 1136 CF93      		ret
 3664               	.Lscope25:
 163:lib/LC7981.c  **** trobe_enable();
 3666               	_graphics_clear
 3668 1140 8CE0      	lcd_graphics_clear:
 3670 1144 0E94 0000 	.LM228:
 3671               	.LFBB26:
 164:lib/LC7981.c  **** TA_PORT = data;
 3672               	r29
 3673               		push r28
 3674 1148 0F90      		rcall .
 3675 114a CF91      		in r28,__SP_L__
 3676 114c DF91      		in r29,__SP_H__
 3677 114e 0895      	/* prologue: function */
 3678               	/* frame size = 2 */
 3680               	.LM229:
 3681               		ldi r24,lo8(0)
 3682               		ldi r25,hi8(0)
 3683               		ldi r22,lo8(0)
 3684               		ldi r23,hi8(0)
 3685               		call lcd_graphics_move
 165:lib/LC7981.c  **** nop;"); __asm("nop;");
 166:lib/LC7981.c  **** 
 167:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 168:lib/LC7981.c  **** 	lcd_rw_low();
 169:lib/LC7981.c  **** 	lcd_rs_low();
 170:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 171:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 172:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3687               	2,__zero_reg__
 3688               		std Y+1,__zero_reg__
 3689               		rjmp .L155
 3690 1150 DF93      	.L156:
 3692 1154 00D0      	.LM231:
 3693 1156 00D0      		ldi r24,lo8(0)
 3694 1158 0F92      		call lcd_graphics_draw_byte
 3696 115c DEB7      	.LM232:
 3697               		ldd r24,Y+1
 3698               		ldd r25,Y+2
 3699 115e 9A83      		adiw r24,1
 3700 1160 8983      		std Y+2,r25
 3701 1162 7C83      		std Y+1,r24
 3702 1164 6B83      	.L155:
 3703 1166 4D83      		ldd r24,Y+1
 173:lib/LC7981.c  **** obe_enable();
 3704               	 r18,hi8(1600)
 3705               		cpi r24,lo8(1600)
 3706 1168 8981      		cpc r25,r18
 3707 116a 9A81      		brlo .L156
 3708 116c 2B81      	/* epilogue start */
 3710 1170 B901      	.LM233:
 3711 1172 0E94 0000 		pop __tmp_reg__
 174:lib/LC7981.c  **** TA_PORT = data;
 3712               	mp_reg__
 3713               		pop r28
 3714 1176 8D81      		pop r29
 3715 1178 0E94 0000 		ret
 175:lib/LC7981.c  **** nop;"); __asm("nop;");
 3717               	bs	"i:(0,9)",128,0,0,1
 3720 117e 0F90      	.Lscope26:
 3723 1184 0F90      	.global	delay_ms_long
 3725 1188 DF91      	delay_ms_long:
 3727               	.LM234:
 3728               	.LFBB27:
 3729               		push r29
 3730               		push r28
 3731               		in r28,__SP_L__
 3732               		in r29,__SP_H__
 3733               		sbiw r28,16
 3734               		in __tmp_reg__,__SREG__
 3735               		cli
 176:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 177:lib/LC7981.c  **** 	lcd_rw_low();
 178:lib/LC7981.c  **** 	lcd_rs_low();
 179:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 180:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 181:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 182:lib/LC7981.c  **** 	lcd_strobe_enable();
 183:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3736               	out __SREG__,__tmp_reg__
 3737               		out __SP_L__,r28
 3738               	/* prologue: function */
 3739 118c DF93      	/* frame size = 16 */
 3740 118e CF93      		std Y+16,r25
 3741 1190 00D0      		std Y+15,r24
 3742 1192 00D0      		rjmp .L159
 3743 1194 00D0      	.L168:
 3745 1198 DEB7      	.LM235:
 3746               		ldi r24,lo8(0x3f800000)
 3747               		ldi r25,hi8(0x3f800000)
 3748 119a 9B83      		ldi r26,hlo8(0x3f800000)
 3749 119c 8A83      		ldi r27,hhi8(0x3f800000)
 3750 119e 7D83      		std Y+11,r24
 3751 11a0 6C83      		std Y+12,r25
 3752 11a2 4E83      		std Y+13,r26
 184:lib/LC7981.c  **** nop;"); __asm("nop;"); __asm("nop;");
 185:lib/LC7981.c  **** }
 186:lib/LC7981.c  **** 
 3753               	B28:
 3754               	.LBB29:
 3756 11a6 9B81      	.Ltext11:
 3758 11aa 3D81      	.LM236:
 3759 11ac B901      		ldd r22,Y+11
 3760 11ae 0E94 0000 		ldd r23,Y+12
 187:lib/LC7981.c  **** "nop;");
 188:lib/LC7981.c  **** 	lcd_strobe_enable();
 189:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 190:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3761               	,Y+13
 3762               		ldd r25,Y+14
 3763 11b2 8A81      		ldi r18,lo8(0x459c4000)
 3764 11b4 8770      		ldi r19,hi8(0x459c4000)
 3765 11b6 8983      		ldi r20,hlo8(0x459c4000)
 191:lib/LC7981.c  **** _asm("nop;");
 192:lib/LC7981.c  **** 	lcd_strobe_enable();
 3766               	r21,hhi8(0x459c4000)
 3767               		call __mulsf3
 3768 11b8 8E81      		movw r26,r24
 3769 11ba 8F3F      		movw r24,r22
 3770 11bc 01F4      		std Y+7,r24
 193:lib/LC7981.c  **** TA_PORT = data;
 3771               	Y+8,r25
 3772               		std Y+9,r26
 3773 11be 8FE0      		std Y+10,r27
 3775 11c2 0E94 0000 	.LM237:
 3776 11c6 00C0      		ldd r22,Y+7
 3777               		ldd r23,Y+8
 194:lib/LC7981.c  **** nop;"); __asm("nop;");
 195:lib/LC7981.c  **** 
 3778               	4,Y+9
 3779               		ldd r25,Y+10
 3780 11c8 8EE0      		ldi r18,lo8(0x3f800000)
 3781 11ca 6981      		ldi r19,hi8(0x3f800000)
 3782 11cc 0E94 0000 		ldi r20,hlo8(0x3f800000)
 3783               		ldi r21,hhi8(0x3f800000)
 3784               		call __ltsf2
 196:lib/LC7981.c  **** * Set RW low, RW low to write the instruction data */
 3785               	4
 3786               		brge .L172
 3787 11d0 2696      	.L170:
 3789 11d4 F894      	.LM238:
 3790 11d6 DEBF      		ldi r24,lo8(1)
 3791 11d8 0FBE      		ldi r25,hi8(1)
 3792 11da CDBF      		std Y+6,r25
 3793 11dc CF91      		std Y+5,r24
 3794 11de DF91      		rjmp .L162
 3795 11e0 0895      	.L172:
 3797               	.LM239:
 3798               		ldd r22,Y+7
 3799               		ldd r23,Y+8
 3800               		ldd r24,Y+9
 3801               		ldd r25,Y+10
 3802               		ldi r18,lo8(0x477fff00)
 3803               		ldi r19,hi8(0x477fff00)
 3804               		ldi r20,hlo8(0x477fff00)
 197:lib/LC7981.c  **** lcd_rw_low();
 198:lib/LC7981.c  **** 	lcd_rs_low();
 199:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 200:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 201:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3805               	ff00)
 3806               		call __gtsf2
 3807               		cp __zero_reg__,r24
 3808 11e2 DF93      		brge .L173
 3809 11e4 CF93      	.L171:
 3811 11e8 CDB7      	.LM240:
 3812 11ea DEB7      		ldd r22,Y+11
 3813               		ldd r23,Y+12
 3814               		ldd r24,Y+13
 202:lib/LC7981.c  **** strobe_enable();
 203:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 204:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3815               	+14
 3816               		ldi r18,lo8(0x41200000)
 3817 11ec 80E0      		ldi r19,hi8(0x41200000)
 3818 11ee 90E0      		ldi r20,hlo8(0x41200000)
 3819 11f0 60E0      		ldi r21,hhi8(0x41200000)
 3820 11f2 70E0      		call __mulsf3
 3821 11f4 0E94 0000 		movw r26,r24
 205:lib/LC7981.c  **** _asm("nop;");
 206:lib/LC7981.c  **** 	lcd_strobe_enable();
 3822               	24,r22
 3823               		movw r22,r24
 3824 11f8 1A82      		movw r24,r26
 3825 11fa 1982      		call __fixunssfsi
 3826 11fc 00C0      		movw r26,r24
 3827               		movw r24,r22
 207:lib/LC7981.c  **** TA_PORT = data;
 3828               	+6,r25
 3829               		std Y+5,r24
 3830 11fe 80E0      		rjmp .L165
 3831 1200 0E94 0000 	.L166:
 3832               		ldi r24,lo8(500)
 3833               		ldi r25,hi8(500)
 3834 1204 8981      		std Y+4,r25
 3835 1206 9A81      		std Y+3,r24
 3836 1208 0196      	.LBB30:
 3837 120a 9A83      	.LBB31:
 3839               	.Ltext12:
 3841 1210 9A81      	.LM241:
 3842 1212 26E0      		ldd r24,Y+3
 3843 1214 8034      		ldd r25,Y+4
 3844 1216 9207      	/* #APP */
 3845 1218 00F0      	 ;  105 "c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3846               		1: sbiw r24,1
 208:lib/LC7981.c  **** nop;"); __asm("nop;");
 3847               	
 3848               	/* #NOAPP */
 3849 121a 0F90      		std Y+4,r25
 3850 121c 0F90      		std Y+3,r24
 3851 121e CF91      	.LBE31:
 3852 1220 DF91      	.LBE30:
 3854               	.Ltext13:
 3856               	.LM242:
 3857               		ldd r24,Y+5
 3858               		ldd r25,Y+6
 3859               		sbiw r24,1
 3860               		std Y+6,r25
 3861               		std Y+5,r24
 3862               	.L165:
 209:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 210:lib/LC7981.c  **** 	lcd_rw_low();
 211:lib/LC7981.c  **** 	lcd_rs_low();
 212:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 213:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 214:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 215:lib/LC7981.c  **** 	lcd_strobe_enable();
 3864               	,Y+5
 3865               		ldd r25,Y+6
 3866               		sbiw r24,0
 3867 1224 DF93      		brne .L166
 3868 1226 CF93      		rjmp .L167
 3869 1228 CDB7      	.L173:
 3871 122c 6097      	.LM244:
 3872 122e 0FB6      		ldd r22,Y+7
 3873 1230 F894      		ldd r23,Y+8
 3874 1232 DEBF      		ldd r24,Y+9
 3875 1234 0FBE      		ldd r25,Y+10
 3876 1236 CDBF      		call __fixunssfsi
 3877               		movw r26,r24
 3878               		movw r24,r22
 3879 1238 988B      		std Y+6,r25
 3880 123a 8F87      		std Y+5,r24
 3881 123c 00C0      	.L162:
 3882               		ldd r24,Y+5
 216:lib/LC7981.c  **** "nop;"); __asm("nop;"); __asm("nop;");
 3883               	+2,r25
 3884               		std Y+1,r24
 3885 123e 80E0      	.LBB32:
 3886 1240 90E0      	.LBB33:
 3888 1244 BFE3      	.Ltext14:
 3890 1248 9C87      	.LM245:
 3891 124a AD87      		ldd r24,Y+1
 3892 124c BE87      		ldd r25,Y+2
 3893               	/* #APP */
 3894               	 ;  105 "c:/work/uc/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3895               		1: sbiw r24,1
 3896               		brne 1b
 3897               	 ;  0 "" 2
 3898               	/* #NOAPP */
 3899 124e 6B85      		std Y+2,r25
 3900 1250 7C85      		std Y+1,r24
 3901 1252 8D85      	.L167:
 3902 1254 9E85      	.LBE33:
 3903 1256 20E0      	.LBE32:
 3904 1258 30E4      	.LBE29:
 3905 125a 4CE9      	.LBE28:
 3907 125e 0E94 0000 	.Ltext15:
 3909 1264 CB01      	.LM246:
 3910 1266 8F83      		ldd r24,Y+15
 3911 1268 9887      		ldd r25,Y+16
 3912 126a A987      		sbiw r24,1
 3913 126c BA87      		std Y+16,r25
 3914               		std Y+15,r24
 3915               	.L159:
 3916 126e 6F81      		ldd r24,Y+15
 3917 1270 7885      		ldd r25,Y+16
 3918 1272 8985      		sbiw r24,0
 3919 1274 9A85      		breq .+2
 3920 1276 20E0      		rjmp .L168
 3921 1278 30E0      	/* epilogue start */
 3923 127c 5FE3      	.LM247:
 3924 127e 0E94 0000 		adiw r28,16
 3925 1282 8823      		in __tmp_reg__,__SREG__
 3926 1284 04F4      		cli
 3927               		out __SP_H__,r29
 3928               		out __SREG__,__tmp_reg__
 3929               		out __SP_L__,r28
 3930 1286 81E0      		pop r28
 3931 1288 90E0      		pop r29
 3932 128a 9E83      		ret
 3934 128e 00C0      	.Lscope27:
 3936               	.global	getting_artist
 3937               	.global	getting_artist
 3938 1290 6F81      		.section .bss
 3941 1296 9A85      	getting_artist:
 3942 1298 20E0      		.skip 1,0
 3943 129a 3FEF      	.global	artist_pos
 3944 129c 4FE7      	.global	artist_pos
 3947 12a4 1816      	artist_pos:
 3948 12a6 04F4      		.skip 1,0
 3949               	.global	getting_title
 3950               	.global	getting_title
 3953 12aa 7C85      	getting_title:
 3954 12ac 8D85      		.skip 1,0
 3955 12ae 9E85      	.global	title_pos
 3956 12b0 20E0      	.global	title_pos
 3959 12b6 51E4      	title_pos:
 3960 12b8 0E94 0000 		.skip 1,0
 3961 12bc DC01      	.global	getting_tit_length
 3962 12be CB01      	.global	getting_tit_length
 3965 12c4 0E94 0000 	getting_tit_length:
 3966 12c8 DC01      		.skip 1,0
 3967 12ca CB01      	.global	tit_length_pos
 3968 12cc 9E83      	.global	tit_length_pos
 3971               	tit_length_pos:
 3972 12d2 84EF      		.skip 1,0
 3973 12d4 91E0      	.global	getting_tit_time_ratio
 3974 12d6 9C83      	.global	getting_tit_time_ratio
 3977               	getting_tit_time_ratio:
 3978               		.skip 1,0
 3979               	.global	artist
 3980               		.data
 3983 12dc 9C81      	artist:
 3984               		.string	"Artist"
 3985               		.skip 19,0
 3986 12de 0197      	.global	title
 3989               	title:
 3990 12e2 9C83      		.string	"Title"
 3991 12e4 8B83      		.skip 20,0
 3992               	.global	tit_length
 3995               	tit_length:
 3996               		.string	"Title Length"
 3997               		.skip 13,0
 3998 12e6 8D81      	.global	tit_time_ratio
 3999 12e8 9E81      	.global	tit_time_ratio
 4000 12ea 0197      		.section .bss
 4003               	tit_time_ratio:
 4004               		.skip 1,0
 4005               	.global	button
 4006 12f0 8D81      	.global	button
 4009 12f6 01F4      	button:
 4010 12f8 00C0      		.skip 1,0
 4011               		.text
 4013               	.global	__vector_18
 4015 12fc 7885      	__vector_18:
 4017 1300 9A85      	.Ltext16:
 4019 1306 DC01      	.LM248:
 4020 1308 CB01      	.LFBB28:
 4021 130a 9E83      		push __zero_reg__
 4022 130c 8D83      		push r0
 4023               		in r0,__SREG__
 4024 130e 8D81      		push r0
 4025 1310 9E81      		lds r0,91
 4026 1312 9A83      		push r0
 4027 1314 8983      		clr __zero_reg__
 4028               		push r24
 4029               		push r25
 4030               		push r30
 4031               		push r31
 4032               		push r29
 4033               		push r28
 4034 1316 8981      		rcall .
 4035 1318 9A81      		in r28,__SP_L__
 4036               		in r29,__SP_H__
 4037               	/* prologue: Signal */
 4038 131a 0197      	/* frame size = 2 */
 4040               	.LM249:
 4041               		std Y+1,__zero_reg__
 4043 1320 8983      	.LM250:
 4044               		ldi r30,lo8(44)
 4045               		ldi r31,hi8(44)
 4046               		ld r24,Z
 4047               		std Y+2,r24
 4049               	.LM251:
 4050               		ldd r24,Y+2
 4051               		cpi r24,lo8(-1)
 4052               		breq .L175
 4053 1322 8F85      		lds r24,artist_pos
 4054 1324 9889      		cpi r24,lo8(25)
 4055 1326 0197      		brne .L176
 4056 1328 988B      	.L175:
 4058               	.LM252:
 4059 132c 8F85      		sts getting_artist,__zero_reg__
 4060 132e 9889      		rjmp .L177
 4061 1330 0097      	.L178:
 4063 1334 00C0      	.LM253:
 4064               		lds r24,artist_pos
 217:lib/LC7981.c  **** __asm("nop;");
 218:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 4065               	bi r24,lo8(-(1))
 4066               		sts artist_pos,r24
 4067 1336 6096      	.L177:
 4068 1338 0FB6      		lds r24,artist_pos
 4069 133a F894      		cpi r24,lo8(26)
 4070 133c DEBF      		brlo .L178
 4072 1340 CDBF      	.LM255:
 4073 1342 CF91      		sts artist+25,__zero_reg__
 4074 1344 DF91      	.L176:
 4076               	.LM256:
 4077               		lds r24,getting_artist
 4078               		tst r24
 4079               		breq .L179
 4081               	.LM257:
 4082               		lds r24,artist_pos
 4083               		mov r24,r24
 4084               		ldi r25,lo8(0)
 4085 0000 00        		movw r30,r24
 4086               		subi r30,lo8(-(artist))
 4087               		sbci r31,hi8(-(artist))
 4088               		ldd r24,Y+2
 4089               		st Z,r24
 4091 0001 00        	.LM258:
 4092               		lds r24,artist_pos
 4093               		subi r24,lo8(-(1))
 4094               		sts artist_pos,r24
 4095               	.L179:
 4097 0002 00        	.LM259:
 4098               		ldd r24,Y+2
 4099               		cpi r24,lo8(2)
 4100               		brne .L180
 4102               	.LM260:
 4103 0003 00        		ldi r24,lo8(1)
 4104               		sts getting_artist,r24
 4106               	.LM261:
 4107               		sts artist_pos,__zero_reg__
 4108               	.L180:
 4110               	.LM262:
 4111               		ldd r24,Y+2
 4112               		cpi r24,lo8(-2)
 4113               		breq .L181
 4114               		lds r24,title_pos
 4115 0005 00        		cpi r24,lo8(25)
 4116               		brne .L182
 4117               	.L181:
 4119               	.LM263:
 4120               		sts getting_title,__zero_reg__
 4121 0006 00        		rjmp .L183
 4122               	.L184:
 4124               	.LM264:
 4125               		lds r24,title_pos
 4126               		mov r24,r24
 4127 01e0 4172 7469 		ldi r25,lo8(0)
 4127      7374 00
 4128 01e7 0000 0000 		movw r30,r24
 4128      0000 0000 
 4128      0000 0000 
 4128      0000 0000 
 4128      0000 00
 4129               		subi r30,lo8(-(title))
 4130               		sbci r31,hi8(-(title))
 4131               		ldi r24,lo8(32)
 4132               		st Z,r24
 4134 0200 0000 0000 	.LM265:
 4134      0000 0000 
 4134      0000 0000 
 4134      0000 0000 
 4134      0000 0000 
 4135               		lds r24,title_pos
 4136               		subi r24,lo8(-(1))
 4137               		sts title_pos,r24
 4138               	.L183:
 4139 0214 5469 746C 		lds r24,title_pos
 4139      6520 4C65 
 4139      6E67 7468 
 4139      00
 4140 0221 0000 0000 		cpi r24,lo8(26)
 4140      0000 0000 
 4140      0000 0000 
 4140      00
 4141               		brlo .L184
 4143               	.LM266:
 4144               		sts title+25,__zero_reg__
 4145               	.L182:
 4147 0007 00        	.LM267:
 4148               		lds r24,getting_title
 4149               		tst r24
 4150               		breq .L185
 4152               	.LM268:
 4153 0008 00        		lds r24,title_pos
 4154               		mov r24,r24
 4155               		ldi r25,lo8(0)
 4156               		movw r30,r24
 4157               		subi r30,lo8(-(title))
 4158               		sbci r31,hi8(-(title))
 4159               		ldd r24,Y+2
 4160               		st Z,r24
   1:main.c        **** #define STR_LEN 26
   2:main.c        **** 
   3:main.c        **** #include "lib/io_fct.c"                                // ATmega128 MCU
   4:main.c        **** #include "lib/LC7981.c"
   5:main.c        **** #include <avr/signal.h>
   6:main.c        **** #include <avr/interrupt.h>
   7:main.c        **** //#include "lib/insel.c"
   8:main.c        **** //#include "lib/draw_penguin.c"
   9:main.c        **** //#include "lib/layout.c"
  10:main.c        **** //#include <delay.h>                                  // Delay functions
  11:main.c        **** 
  12:main.c        **** void g_draw_prog(unsigned char x, unsigned char y, unsigned char perc);
  13:main.c        **** void g_draw_layout(void);
  14:main.c        **** void g_draw_triangel_right(unsigned char x, unsigned char y);
  15:main.c        **** 
  16:main.c        **** unsigned char getting_artist = 0;
  17:main.c        **** unsigned char artist_pos = 0;
  18:main.c        **** 
  19:main.c        **** unsigned char getting_title = 0;
  20:main.c        **** unsigned char title_pos = 0;
  21:main.c        **** 
  22:main.c        **** unsigned char getting_tit_length = 0;
  23:main.c        **** unsigned char tit_length_pos = 0;
  24:main.c        **** 
  25:main.c        **** unsigned char getting_tit_time_ratio = 0;
  26:main.c        **** 
  27:main.c        **** unsigned char artist[STR_LEN] = "Artist";
  28:main.c        **** unsigned char title[STR_LEN] = "Title";
  29:main.c        **** unsigned char tit_length[STR_LEN] = "Title Length";
  30:main.c        **** unsigned char tit_time_ratio = 0;
  31:main.c        **** 
  32:main.c        **** unsigned char button = 0;
  33:main.c        **** 
  34:main.c        **** ISR(USART0_RX_vect)
  35:main.c        **** {
 4161               	
 4162               	.L185:
 4164 1348 1F92      	.LM270:
 4165 134a 0F92      		ldd r24,Y+2
 4166 134c 0FB6      		cpi r24,lo8(3)
 4167 134e 0F92      		brne .L186
 4169 1354 0F92      	.LM271:
 4170 1356 1124      		ldi r24,lo8(1)
 4171 1358 8F93      		sts getting_title,r24
 4173 135c EF93      	.LM272:
 4174 135e FF93      		sts title_pos,__zero_reg__
 4175 1360 DF93      	.L186:
 4177 1364 00D0      	.LM273:
 4178 1366 CDB7      		ldd r24,Y+2
 4179 1368 DEB7      		cpi r24,lo8(-3)
 4180               		breq .L187
 4181               		lds r24,tit_length_pos
  36:main.c        **** 	unsigned char udr_buffer;
  37:main.c        **** 	unsigned char i = 0;
 4182               	ne .L188
 4183               	.L187:
  38:main.c        **** 	udr_buffer = UDR0;
 4185               	274:
 4186               		sts getting_tit_length,__zero_reg__
 4187 136c ECE2      		rjmp .L189
 4188 136e F0E0      	.L190:
 4190 1372 8A83      	.LM275:
  39:main.c        **** //============================================
  40:main.c        **** //==		 	Getting Artist 				==
  41:main.c        **** //============================================
  42:main.c        **** 	if ((udr_buffer == 255) || (artist_pos == (STR_LEN-1)))
 4191               	24,tit_length_pos
 4192               		mov r24,r24
 4193 1374 8A81      		ldi r25,lo8(0)
 4194 1376 8F3F      		movw r30,r24
 4195 1378 01F0      		subi r30,lo8(-(tit_length))
 4196 137a 8091 0000 		sbci r31,hi8(-(tit_length))
 4197 137e 8931      		ldi r24,lo8(32)
 4198 1380 01F4      		st Z,r24
  43:main.c        **** 	{
  44:main.c        **** 		getting_artist = 0;
 4200               	lds r24,tit_length_pos
 4201               		subi r24,lo8(-(1))
 4202 1382 1092 0000 		sts tit_length_pos,r24
 4203 1386 00C0      	.L189:
 4204               		lds r24,tit_length_pos
  45:main.c        **** 		for (artist_pos; artist_pos <= (STR_LEN-1); artist_pos++)
  46:main.c        **** 		{
  47:main.c        **** 			artist[artist_pos] = ' ';
 4205               	r24,lo8(26)
 4206               		brlo .L190
 4208 138c 882F      	.LM277:
 4209 138e 90E0      		sts tit_length+25,__zero_reg__
 4210 1390 FC01      	.L188:
 4212 1394 F040      	.LM278:
 4213 1396 80E2      		lds r24,getting_tit_length
 4214 1398 8083      		tst r24
 4215               		breq .L191
 4217 139a 8091 0000 	.LM279:
 4218 139e 8F5F      		lds r24,tit_length_pos
 4219 13a0 8093 0000 		mov r24,r24
 4220               		ldi r25,lo8(0)
 4221 13a4 8091 0000 		movw r30,r24
 4222 13a8 8A31      		subi r30,lo8(-(tit_length))
 4223 13aa 00F0      		sbci r31,hi8(-(tit_length))
  48:main.c        **** 		}
  49:main.c        **** 		artist[STR_LEN-1] = '\0';
 4224               	r24
 4226 13ac 1092 0000 	.LM280:
 4227               		lds r24,tit_length_pos
  50:main.c        **** 	}
  51:main.c        **** 	if (getting_artist)
 4228               	i r24,lo8(-(1))
 4229               		sts tit_length_pos,r24
 4230 13b0 8091 0000 	.L191:
 4232 13b6 01F0      	.LM281:
  52:main.c        **** 	{
  53:main.c        **** 		artist[artist_pos] = udr_buffer;
 4233               	r24,Y+2
 4234               		cpi r24,lo8(4)
 4235 13b8 8091 0000 		brne .L192
 4237 13be 90E0      	.LM282:
 4238 13c0 FC01      		ldi r24,lo8(1)
 4239 13c2 E050      		sts getting_tit_length,r24
 4241 13c6 8A81      	.LM283:
 4242 13c8 8083      		sts tit_length_pos,__zero_reg__
  54:main.c        **** 		artist_pos++;
 4243               	tabn	68,0,108,.LM284-.LFBB28
 4244               	.LM284:
 4245 13ca 8091 0000 		ldd r24,Y+2
 4246 13ce 8F5F      		cpi r24,lo8(-5)
 4247 13d0 8093 0000 		brne .L193
  55:main.c        **** 	}
  56:main.c        **** 	if (udr_buffer == 2)
 4249               	:
 4250               		sts getting_tit_time_ratio,__zero_reg__
 4251 13d4 8A81      	.L193:
 4253 13d8 01F4      	.LM286:
  57:main.c        **** 	{
  58:main.c        **** 		getting_artist = 1;
 4254               	r24,getting_tit_time_ratio
 4255               		tst r24
 4256 13da 81E0      		breq .L194
  59:main.c        **** 		artist_pos = 0;
 4258               	87:
 4259               		ldd r24,Y+2
 4260 13e0 1092 0000 		subi r24,lo8(-(-10))
 4261               		sts tit_time_ratio,r24
  60:main.c        **** 	}
  61:main.c        **** //============================================
  62:main.c        **** //==		 	Getting Title 				==
  63:main.c        **** //============================================	
  64:main.c        **** 	if ((udr_buffer == 254) || (title_pos == (STR_LEN-1)))
 4262               	4:
 4264 13e4 8A81      	.LM288:
 4265 13e6 8E3F      		ldd r24,Y+2
 4266 13e8 01F0      		cpi r24,lo8(6)
 4267 13ea 8091 0000 		brne .L195
 4269 13f0 01F4      	.LM289:
 4270               		ldi r24,lo8(1)
  65:main.c        **** 	{
  66:main.c        **** 		getting_title = 0;
 4271               	ing_tit_time_ratio,r24
 4272               	.L195:
 4274 13f6 00C0      	.LM290:
 4275               		lds r24,getting_artist
  67:main.c        **** 		for (title_pos; title_pos <= (STR_LEN-1); title_pos++)
  68:main.c        **** 		{
  69:main.c        **** 			title[title_pos] = ' ';
 4276               	r24
 4277               		brne .L197
 4278 13f8 8091 0000 		lds r24,getting_title
 4279 13fc 882F      		tst r24
 4280 13fe 90E0      		brne .L197
 4282 1402 E050      	.LM291:
 4283 1404 F040      		ldi r30,lo8(44)
 4284 1406 80E2      		ldi r31,hi8(44)
 4285 1408 8083      		lds r24,button
 4286               		st Z,r24
 4287               	.L197:
 4288 140a 8091 0000 	/* epilogue start */
 4290 1410 8093 0000 	.LM292:
 4291               		pop __tmp_reg__
 4292 1414 8091 0000 		pop __tmp_reg__
 4293 1418 8A31      		pop r28
 4294 141a 00F0      		pop r29
  70:main.c        **** 		}
  71:main.c        **** 		title[STR_LEN-1] = '\0';
 4295               	pop r25
 4296               		pop r24
 4297 141c 1092 0000 		pop r0
 4298               		sts 91,r0
  72:main.c        **** 	}	
  73:main.c        **** 	if (getting_title)
 4299               	 r0
 4300               		out __SREG__,r0
 4301 1420 8091 0000 		pop r0
 4302 1424 8823      		pop __zero_reg__
 4303 1426 01F0      		reti
  74:main.c        **** 	{
  75:main.c        **** 		title[title_pos] = udr_buffer;
 4304               	e	__vector_18, .-__vector_18
 4309 1430 FC01      	.Lscope28:
 4311 1434 F040      	.global	main
 4313 1438 8083      	main:
  76:main.c        **** 		title_pos++;
 4314               	,0,130,.LM293-.LFBB29
 4315               	.LM293:
 4316 143a 8091 0000 	.LFBB29:
 4317 143e 8F5F      		push r29
 4318 1440 8093 0000 		push r28
 4319               		in r28,__SP_L__
  77:main.c        **** 	}
  78:main.c        **** 	if (udr_buffer == 3)
 4320               	9,__SP_H__
 4321               	/* prologue: function */
 4322 1444 8A81      	/* frame size = 0 */
 4324 1448 01F4      	.LM294:
  79:main.c        **** 	{
  80:main.c        **** 		getting_title = 1;
 4325               	r24,lo8(98)
 4326               		ldi r22,lo8(0)
 4327 144a 81E0      		call init_in_pin
  81:main.c        **** 		title_pos = 0;
 4329               	95:
 4330               		call init_serial
 4332               	.LM296:
  82:main.c        **** 	}
  83:main.c        **** //============================================
  84:main.c        **** //==		 	Getting Tit_length 			==
  85:main.c        **** //============================================	
  86:main.c        **** 	if ((udr_buffer == 253) || (tit_length_pos == (STR_LEN-1)))
 4333               	 r26,lo8(42)
 4334               		ldi r27,hi8(42)
 4335 1454 8A81      		ldi r30,lo8(42)
 4336 1456 8D3F      		ldi r31,hi8(42)
 4337 1458 01F0      		ld r24,Z
 4338 145a 8091 0000 		ori r24,lo8(-128)
 4339 145e 8931      		st X,r24
 4341               	.LM297:
  87:main.c        **** 	{
  88:main.c        **** 		getting_tit_length = 0;
 4342               	/
 4343               	 ;  135 "main.c" 1
 4344 1462 1092 0000 		sei
 4345 1466 00C0      	 ;  0 "" 2
  89:main.c        **** 		for (tit_length_pos; tit_length_pos <= (STR_LEN-1); tit_length_pos++)
  90:main.c        **** 		{
  91:main.c        **** 			tit_length[tit_length_pos] = ' ';
 4347               	8:
 4348               	/* #NOAPP */
 4349 1468 8091 0000 		ldi r24,lo8(97)
 4350 146c 882F      		ldi r22,lo8(1)
 4351 146e 90E0      		call reset_pin
 4353 1472 E050      	.LM299:
 4354 1474 F040      		ldi r24,lo8(97)
 4355 1476 80E2      		ldi r22,lo8(2)
 4356 1478 8083      		call set_pin
 4358               	.LM300:
 4359 147a 8091 0000 		call lcd_graphics_init
 4361 1480 8093 0000 	.LM301:
 4362               		call lcd_graphics_clear
 4364 1488 8A31      	.LM302:
 4365 148a 00F0      		call g_draw_layout
  92:main.c        **** 		}
  93:main.c        **** 		tit_length[STR_LEN-1] = '\0';
 4366               	,147,.LM303-.LFBB29
 4367               	.LM303:
 4368 148c 1092 0000 		lds r24,getting_artist
 4369               		tst r24
  94:main.c        **** 	}	
  95:main.c        **** 	if (getting_tit_length)
 4370               	e .L199
 4371               		lds r24,getting_title
 4372 1490 8091 0000 		tst r24
 4373 1494 8823      		brne .L199
 4374 1496 01F0      		lds r24,getting_tit_time_ratio
  96:main.c        **** 	{
  97:main.c        **** 		tit_length[tit_length_pos] = udr_buffer;
 4375               	r24
 4376               		brne .L199
 4377 1498 8091 0000 		lds r24,getting_tit_length
 4378 149c 882F      		tst r24
 4379 149e 90E0      		brne .L199
 4381 14a2 E050      	.LM304:
 4382 14a4 F040      		ldi r18,lo8(artist)
 4383 14a6 8A81      		ldi r19,hi8(artist)
 4384 14a8 8083      		ldi r24,lo8(3)
  98:main.c        **** 		tit_length_pos++;
 4385               	i8(3)
 4386               		ldi r22,lo8(3)
 4387 14aa 8091 0000 		ldi r23,hi8(3)
 4388 14ae 8F5F      		movw r20,r18
 4389 14b0 8093 0000 		call g_draw_string
  99:main.c        **** 	}
 100:main.c        **** 	if (udr_buffer == 4)
 4391               	:
 4392               		ldi r18,lo8(title)
 4393 14b4 8A81      		ldi r19,hi8(title)
 4394 14b6 8430      		ldi r24,lo8(3)
 4395 14b8 01F4      		ldi r25,hi8(3)
 101:main.c        **** 	{
 102:main.c        **** 		getting_tit_length = 1;
 4396               	r22,lo8(13)
 4397               		ldi r23,hi8(13)
 4398 14ba 81E0      		movw r20,r18
 4399 14bc 8093 0000 		call g_draw_string
 103:main.c        **** 		tit_length_pos = 0;
 4400               	abn	68,0,151,.LM306-.LFBB29
 4401               	.LM306:
 4402 14c0 1092 0000 		ldi r18,lo8(tit_length)
 4403               		ldi r19,hi8(tit_length)
 104:main.c        **** 	}
 105:main.c        **** //============================================
 106:main.c        **** //==		 	Getting Tit_time_ratio		==
 107:main.c        **** //============================================	
 108:main.c        **** 	if (udr_buffer == 251)
 4404               	 r24,lo8(3)
 4405               		ldi r25,hi8(3)
 4406 14c4 8A81      		ldi r22,lo8(23)
 4407 14c6 8B3F      		ldi r23,hi8(23)
 4408 14c8 01F4      		movw r20,r18
 109:main.c        **** 	{
 110:main.c        **** 		getting_tit_time_ratio = 0;
 4409               	 g_draw_string
 4411 14ca 1092 0000 	.LM307:
 4412               		lds r25,tit_time_ratio
 111:main.c        **** 	}	
 112:main.c        **** 	if (getting_tit_time_ratio)
 4413               	 r24,lo8(4)
 4414               		ldi r22,lo8(54)
 4415 14ce 8091 0000 		mov r20,r25
 4416 14d2 8823      		call g_draw_prog
 4417 14d4 01F0      	.L199:
 113:main.c        **** 	{
 114:main.c        **** 		tit_time_ratio = udr_buffer-10;
 4418               	bn	68,0,154,.LM308-.LFBB29
 4419               	.LM308:
 4420 14d6 8A81      		ldi r24,lo8(98)
 4421 14d8 8A50      		ldi r22,lo8(0)
 4422 14da 8093 0000 		call get_in_pin
 4423               		sts button,r24
 115:main.c        **** 	}
 116:main.c        **** 	if (udr_buffer == 6)
 4424               	.L200
 4426 14de 8A81      	.Lscope29:
 117:main.c        **** 	{
 118:main.c        **** 		getting_tit_time_ratio = 1;
 4429               	bs	"y:p(0,11)",160,0,0,3
 4431 14e4 81E0      	.global	g_draw_prog
 4433               	g_draw_prog:
 119:main.c        **** 	}
 120:main.c        **** //============================================
 121:main.c        **** //==		 	Sending Commands			==
 122:main.c        **** //============================================	
 123:main.c        **** 	if (!(getting_artist) && !(getting_title))
 4434               	bn	68,0,159,.LM309-.LFBB30
 4435               	.LM309:
 4436 14ea 8091 0000 	.LFBB30:
 4437 14ee 8823      		push r14
 4438 14f0 01F4      		push r15
 4439 14f2 8091 0000 		push r16
 4440 14f6 8823      		push r17
 4441 14f8 01F4      		push r29
 124:main.c        **** 	{	
 125:main.c        **** 		UDR0 = button;
 4442               	8
 4443               		rcall .
 4444 14fa ECE2      		rcall .
 4445 14fc F0E0      		in r28,__SP_L__
 4446 14fe 8091 0000 		in r29,__SP_H__
 4447 1502 8083      	/* prologue: function */
 4448               	/* frame size = 4 */
 4449               		std Y+2,r24
 126:main.c        **** 	}
 127:main.c        **** }
 4450               	,r22
 4451               		std Y+4,r20
 4453 1506 0F90      	.LM310:
 4454 1508 CF91      		std Y+1,__zero_reg__
 4456 150c FF91      	.LM311:
 4457 150e EF91      		ldi r24,lo8(1)
 4458 1510 9F91      		std Y+1,r24
 4459 1512 8F91      		rjmp .L203
 4460 1514 0F90      	.L204:
 4462 151a 0F90      	.LM312:
 4463 151c 0FBE      		ldd r24,Y+2
 4464 151e 0F90      		mov r18,r24
 4465 1520 1F90      		ldi r19,lo8(0)
 4466 1522 1895      		ldd r24,Y+1
 4467               		mov r24,r24
 4468               		ldi r25,lo8(0)
 4469               		add r24,r18
 4470               		adc r25,r19
 4471               		movw r20,r24
 4472               		ldd r24,Y+3
 4473               		mov r18,r24
 4474               		ldi r19,lo8(0)
 4475               		movw r24,r20
 4476               		movw r22,r18
 128:main.c        **** 
 129:main.c        **** int main(void)
 130:main.c        **** {
 4477               	graphics_plot_pixel
 4479               	.LM313:
 4480 1524 DF93      		ldd r24,Y+2
 4481 1526 CF93      		mov r18,r24
 4482 1528 CDB7      		ldi r19,lo8(0)
 4483 152a DEB7      		ldd r24,Y+1
 4484               		mov r24,r24
 4485               		ldi r25,lo8(0)
 131:main.c        **** 	init_in_pin('b', 0);
 4486               	r18
 4487               		adc r25,r19
 4488 152c 82E6      		movw r20,r24
 4489 152e 60E0      		ldd r24,Y+3
 4490 1530 0E94 0000 		mov r24,r24
 132:main.c        **** 	init_serial();
 4491               	r25,lo8(0)
 4492               		adiw r24,1
 4493 1534 0E94 0000 		movw r18,r24
 133:main.c        **** 
 134:main.c        **** 	UCSR0B |= (1 << RXCIE);	//enable interrupt
 4494               	vw r24,r20
 4495               		movw r22,r18
 4496 1538 AAE2      		ldi r20,lo8(-1)
 4497 153a B0E0      		call lcd_graphics_plot_pixel
 4499 153e F0E0      	.LM314:
 4500 1540 8081      		ldd r24,Y+1
 4501 1542 8068      		subi r24,lo8(-(1))
 4502 1544 8C93      		std Y+1,r24
 135:main.c        **** 	sei();
 4503               	dd r24,Y+1
 4504               		mov r24,r24
 4505               		ldi r25,lo8(0)
 4506               		clr r26
 4507 1546 7894      		sbrc r25,7
 4508               		com r26
 136:main.c        **** 	
 137:main.c        **** 	reset_pin('a', 1);
 4509               	27,r26
 4510               		movw r22,r24
 4511               		movw r24,r26
 4512 1548 81E6      		call __floatsisf
 4513 154a 61E0      		movw r14,r22
 4514 154c 0E94 0000 		movw r16,r24
 138:main.c        **** 	set_pin('a', 2);
 4515               	24,Y+4
 4516               		mov r24,r24
 4517 1550 81E6      		ldi r25,lo8(0)
 4518 1552 62E0      		clr r26
 4519 1554 0E94 0000 		sbrc r25,7
 139:main.c        **** 	
 140:main.c        **** 	lcd_graphics_init();
 4520               	r26
 4521               		mov r27,r26
 4522 1558 0E94 0000 		movw r22,r24
 141:main.c        **** 	lcd_graphics_clear();
 4523               	vw r24,r26
 4524               		call __floatsisf
 4525 155c 0E94 0000 		movw r26,r24
 142:main.c        **** 
 143:main.c        **** 	g_draw_layout();
 4526               	vw r24,r22
 4527               		movw r22,r24
 4528 1560 0E94 0000 		movw r24,r26
 4529               		ldi r18,lo8(0x3fc00000)
 144:main.c        **** 	
 145:main.c        **** 	while(1)													// Loop Continue
 146:main.c        **** 	{
 147:main.c        **** 		if (!(getting_artist) && !(getting_title) && !(getting_tit_time_ratio) && !(getting_tit_length))
 4530               	 r19,hi8(0x3fc00000)
 4531               		ldi r20,hlo8(0x3fc00000)
 4532 1564 8091 0000 		ldi r21,hhi8(0x3fc00000)
 4533 1568 8823      		call __mulsf3
 4534 156a 01F4      		movw r26,r24
 4535 156c 8091 0000 		movw r24,r22
 4536 1570 8823      		movw r18,r24
 4537 1572 01F4      		movw r20,r26
 4538 1574 8091 0000 		movw r24,r16
 4539 1578 8823      		movw r22,r14
 4540 157a 01F4      		call __lesf2
 4541 157c 8091 0000 		cp __zero_reg__,r24
 4542 1580 8823      		brlt .+2
 4543 1582 01F4      		rjmp .L204
 148:main.c        **** 		{
 149:main.c        **** 			g_draw_string(3, 3, artist);
 4544               	67,.LM315-.LFBB30
 4545               	.LM315:
 4546 1584 20E0      		ldd r24,Y+4
 4547 1586 30E0      		mov r24,r24
 4548 1588 83E0      		ldi r25,lo8(0)
 4549 158a 90E0      		clr r26
 4550 158c 63E0      		sbrc r25,7
 4551 158e 70E0      		com r26
 4552 1590 A901      		mov r27,r26
 4553 1592 0E94 0000 		movw r22,r24
 150:main.c        **** 			g_draw_string(3, 13, title);	
 4554               	r26
 4555               		call __floatsisf
 4556 1596 20E0      		movw r26,r24
 4557 1598 30E0      		movw r24,r22
 4558 159a 83E0      		movw r22,r24
 4559 159c 90E0      		movw r24,r26
 4560 159e 6DE0      		ldi r18,lo8(0x3fc00000)
 4561 15a0 70E0      		ldi r19,hi8(0x3fc00000)
 4562 15a2 A901      		ldi r20,hlo8(0x3fc00000)
 4563 15a4 0E94 0000 		ldi r21,hhi8(0x3fc00000)
 151:main.c        **** 			g_draw_string(3, 23, tit_length);
 4564               	lsf3
 4565               		movw r26,r24
 4566 15a8 20E0      		movw r24,r22
 4567 15aa 30E0      		movw r22,r24
 4568 15ac 83E0      		movw r24,r26
 4569 15ae 90E0      		ldi r18,lo8(0x3f800000)
 4570 15b0 67E1      		ldi r19,hi8(0x3f800000)
 4571 15b2 70E0      		ldi r20,hlo8(0x3f800000)
 4572 15b4 A901      		ldi r21,hhi8(0x3f800000)
 4573 15b6 0E94 0000 		call __addsf3
 152:main.c        **** 			g_draw_prog(4, 54, tit_time_ratio);
 4574               	r24
 4575               		movw r24,r22
 4576 15ba 9091 0000 		movw r22,r24
 4577 15be 84E0      		movw r24,r26
 4578 15c0 66E3      		call __fixunssfsi
 4579 15c2 492F      		movw r26,r24
 4580 15c4 0E94 0000 		movw r24,r22
 4581               		std Y+1,r24
 153:main.c        **** 		}
 154:main.c        **** 		button = get_in_pin('b', 0);
 4582               	205
 4583               	.L206:
 4585 15ca 60E0      	.LM316:
 4586 15cc 0E94 0000 		ldd r24,Y+2
 4587 15d0 8093 0000 		mov r18,r24
 4588 15d4 00C0      		ldi r19,lo8(0)
 4589               		ldd r24,Y+1
 4590               		mov r24,r24
 4591               		ldi r25,lo8(0)
 4592               		add r24,r18
 4593               		adc r25,r19
 4594               		movw r20,r24
 4595               		ldd r24,Y+3
 4596               		mov r18,r24
 4597               		ldi r19,lo8(0)
 155:main.c        **** 	} 
 156:main.c        **** }	
 157:main.c        **** 
 158:main.c        **** void g_draw_prog(unsigned char x, unsigned char y, unsigned char perc)
 159:main.c        **** {
 4598               	ovw r22,r18
 4599               		ldi r20,lo8(0)
 4600               		call lcd_graphics_plot_pixel
 4602 15d8 FF92      	.LM317:
 4603 15da 0F93      		ldd r24,Y+2
 4604 15dc 1F93      		mov r18,r24
 4605 15de DF93      		ldi r19,lo8(0)
 4606 15e0 CF93      		ldd r24,Y+1
 4607 15e2 00D0      		mov r24,r24
 4608 15e4 00D0      		ldi r25,lo8(0)
 4609 15e6 CDB7      		add r24,r18
 4610 15e8 DEB7      		adc r25,r19
 4611               		movw r20,r24
 4612               		ldd r24,Y+3
 4613 15ea 8A83      		mov r24,r24
 4614 15ec 6B83      		ldi r25,lo8(0)
 4615 15ee 4C83      		adiw r24,1
 160:main.c        **** 	unsigned char i = 0;
 4616               	w r24,r20
 4617               		movw r22,r18
 4618 15f0 1982      		ldi r20,lo8(0)
 161:main.c        **** 	
 162:main.c        **** 	for (i = 1; i <= (perc*1.5); i++)
 4619               	ll lcd_graphics_plot_pixel
 4621 15f2 81E0      	.LM318:
 4622 15f4 8983      		ldd r24,Y+1
 4623 15f6 00C0      		subi r24,lo8(-(1))
 4624               		std Y+1,r24
 163:main.c        **** 	{
 164:main.c        **** 		lcd_graphics_plot_pixel(x+i, y, PIXEL_ON);
 4625               	
 4626               		ldd r24,Y+1
 4627 15f8 8A81      		cpi r24,lo8(-105)
 4628 15fa 282F      		brlo .L206
 4629 15fc 30E0      	/* epilogue start */
 4631 1600 882F      	.LM319:
 4632 1602 90E0      		pop __tmp_reg__
 4633 1604 820F      		pop __tmp_reg__
 4634 1606 931F      		pop __tmp_reg__
 4635 1608 AC01      		pop __tmp_reg__
 4636 160a 8B81      		pop r28
 4637 160c 282F      		pop r29
 4638 160e 30E0      		pop r17
 4639 1610 CA01      		pop r16
 4640 1612 B901      		pop r15
 4641 1614 4FEF      		pop r14
 4642 1616 0E94 0000 		ret
 165:main.c        **** 		lcd_graphics_plot_pixel(x+i, y+1, PIXEL_ON);
 4643               	g, .-g_draw_prog
 4647 161e 30E0      	.Lscope30:
 4649 1622 882F      	.global	g_draw_layout
 4651 1626 820F      	g_draw_layout:
 4653 162a AC01      	.LM320:
 4654 162c 8B81      	.LFBB31:
 4655 162e 882F      		push r29
 4656 1630 90E0      		push r28
 4657 1632 0196      		in r28,__SP_L__
 4658 1634 9C01      		in r29,__SP_H__
 4659 1636 CA01      	/* prologue: function */
 4660 1638 B901      	/* frame size = 0 */
 4662 163c 0E94 0000 	.LM321:
 4663               		ldi r24,lo8(0)
 4664               		ldi r25,hi8(0)
 4665 1640 8981      		ldi r22,lo8(0)
 4666 1642 8F5F      		ldi r23,hi8(0)
 4667 1644 8983      		ldi r20,lo8(160)
 4668               		ldi r21,hi8(160)
 4669 1646 8981      		ldi r18,lo8(80)
 4670 1648 882F      		ldi r19,hi8(80)
 4671 164a 90E0      		call g_draw_rectangle
 4673 164e 97FD      	.LM322:
 4674 1650 A095      		ldi r24,lo8(0)
 4675 1652 BA2F      		ldi r25,hi8(0)
 4676 1654 BC01      		ldi r22,lo8(59)
 4677 1656 CD01      		ldi r23,hi8(59)
 4678 1658 0E94 0000 		ldi r20,lo8(28)
 4679 165c 7B01      		ldi r21,hi8(28)
 4680 165e 8C01      		ldi r18,lo8(21)
 4681 1660 8C81      		ldi r19,hi8(21)
 4682 1662 882F      		call g_draw_rectangle
 4684 1666 AA27      	.LM323:
 4685 1668 97FD      		ldi r24,lo8(27)
 4686 166a A095      		ldi r25,hi8(27)
 4687 166c BA2F      		ldi r22,lo8(59)
 4688 166e BC01      		ldi r23,hi8(59)
 4689 1670 CD01      		ldi r20,lo8(28)
 4690 1672 0E94 0000 		ldi r21,hi8(28)
 4691 1676 DC01      		ldi r18,lo8(21)
 4692 1678 CB01      		ldi r19,hi8(21)
 4693 167a BC01      		call g_draw_rectangle
 4695 167e 20E0      	.LM324:
 4696 1680 30E0      		ldi r24,lo8(35)
 4697 1682 40EC      		ldi r22,lo8(63)
 4698 1684 5FE3      		call g_draw_triangel_right
 4700 168a DC01      	.LM325:
 4701 168c CB01      		ldi r24,lo8(54)
 4702 168e 9C01      		ldi r25,hi8(54)
 4703 1690 AD01      		ldi r22,lo8(59)
 4704 1692 C801      		ldi r23,hi8(59)
 4705 1694 B701      		ldi r20,lo8(28)
 4706 1696 0E94 0000 		ldi r21,hi8(28)
 4707 169a 1816      		ldi r18,lo8(21)
 4708 169c 04F0      		ldi r19,hi8(21)
 4709 169e 00C0      		call g_draw_rectangle
 166:main.c        **** 	}
 167:main.c        **** 	for (i = (perc*1.5)+1; i <= 150; i++)
 4710               	i8(81)
 4711               		ldi r22,lo8(59)
 4712 16a0 8C81      		ldi r23,hi8(59)
 4713 16a2 882F      		ldi r20,lo8(27)
 4714 16a4 90E0      		ldi r21,hi8(27)
 4715 16a6 AA27      		ldi r18,lo8(21)
 4716 16a8 97FD      		ldi r19,hi8(21)
 4717 16aa A095      		call g_draw_rectangle
 4719 16ae BC01      	.LM327:
 4720 16b0 CD01      		ldi r24,lo8(107)
 4721 16b2 0E94 0000 		ldi r25,hi8(107)
 4722 16b6 DC01      		ldi r22,lo8(59)
 4723 16b8 CB01      		ldi r23,hi8(59)
 4724 16ba BC01      		ldi r20,lo8(27)
 4725 16bc CD01      		ldi r21,hi8(27)
 4726 16be 20E0      		ldi r18,lo8(21)
 4727 16c0 30E0      		ldi r19,hi8(21)
 4728 16c2 40EC      		call g_draw_rectangle
 4730 16c6 0E94 0000 	.LM328:
 4731 16ca DC01      		ldi r24,lo8(133)
 4732 16cc CB01      		ldi r25,hi8(133)
 4733 16ce BC01      		ldi r22,lo8(59)
 4734 16d0 CD01      		ldi r23,hi8(59)
 4735 16d2 20E0      		ldi r20,lo8(27)
 4736 16d4 30E0      		ldi r21,hi8(27)
 4737 16d6 40E8      		ldi r18,lo8(21)
 4738 16d8 5FE3      		ldi r19,hi8(21)
 4739 16da 0E94 0000 		call g_draw_rectangle
 4741 16e0 CB01      	.LM329:
 4742 16e2 BC01      		ldi r24,lo8(0)
 4743 16e4 CD01      		ldi r25,hi8(0)
 4744 16e6 0E94 0000 		ldi r22,lo8(50)
 4745 16ea DC01      		ldi r23,hi8(50)
 4746 16ec CB01      		ldi r20,lo8(160)
 4747 16ee 8983      		ldi r21,hi8(160)
 4748 16f0 00C0      		call g_draw_horizontal_line
 168:main.c        **** 	{
 169:main.c        **** 		lcd_graphics_plot_pixel(x+i, y, PIXEL_OFF);
 4750               		ldi r22,lo8(52)
 4751               		ldi r23,hi8(52)
 4752 16f2 8A81      		ldi r20,lo8(154)
 4753 16f4 282F      		ldi r21,hi8(154)
 4754 16f6 30E0      		ldi r18,lo8(6)
 4755 16f8 8981      		ldi r19,hi8(6)
 4756 16fa 882F      		call g_draw_rectangle
 4757 16fc 90E0      	/* epilogue start */
 4759 1700 931F      	.LM331:
 4760 1702 AC01      		pop r28
 4761 1704 8B81      		pop r29
 4762 1706 282F      		ret
 4764 170a CA01      	.Lscope31:
 170:main.c        **** 		lcd_graphics_plot_pixel(x+i, y+1, PIXEL_OFF);
 4768               	angel_right
 4770 1714 8A81      	g_draw_triangel_right:
 4772 1718 30E0      	.LM332:
 4773 171a 8981      	.LFBB32:
 4774 171c 882F      		push r29
 4775 171e 90E0      		push r28
 4776 1720 820F      		rcall .
 4777 1722 931F      		in r28,__SP_L__
 4778 1724 AC01      		in r29,__SP_H__
 4779 1726 8B81      	/* prologue: function */
 4780 1728 882F      	/* frame size = 2 */
 4781 172a 90E0      		std Y+1,r24
 4782 172c 0196      		std Y+2,r22
 4784 1730 CA01      	.LM333:
 4785 1732 B901      		ldd r24,Y+1
 4786 1734 40E0      		mov r20,r24
 4787 1736 0E94 0000 		ldi r21,lo8(0)
 4788               		ldd r24,Y+2
 4789               		mov r18,r24
 4790 173a 8981      		ldi r19,lo8(0)
 4791 173c 8F5F      		movw r24,r20
 4792 173e 8983      		movw r22,r18
 4793               		ldi r20,lo8(13)
 4794 1740 8981      		ldi r21,hi8(13)
 4795 1742 8739      		call g_draw_vertical_line
 4797               	.LM334:
 171:main.c        **** 	}
 172:main.c        **** }
 4798               	 r25,lo8(0)
 4799               		adiw r24,1
 4800 1746 0F90      		movw r20,r24
 4801 1748 0F90      		ldd r24,Y+2
 4802 174a 0F90      		mov r24,r24
 4803 174c 0F90      		ldi r25,lo8(0)
 4804 174e CF91      		adiw r24,1
 4805 1750 DF91      		movw r18,r24
 4806 1752 1F91      		movw r24,r20
 4807 1754 0F91      		movw r22,r18
 4808 1756 FF90      		ldi r20,lo8(-1)
 4809 1758 EF90      		call lcd_graphics_plot_pixel
 4811               	.LM335:
 4812               		ldd r24,Y+1
 4813               		mov r24,r24
 4814               		ldi r25,lo8(0)
 4815               		adiw r24,2
 4816               		movw r20,r24
 4817               		ldd r24,Y+2
 4818               		mov r24,r24
 4819               		ldi r25,lo8(0)
 173:main.c        **** 
 174:main.c        **** void g_draw_layout(void)
 175:main.c        **** {
 4820               	r24
 4821               		movw r24,r20
 4822               		movw r22,r18
 4823 175c DF93      		ldi r20,lo8(-1)
 4824 175e CF93      		call lcd_graphics_plot_pixel
 4826 1762 DEB7      	.LM336:
 4827               		ldd r24,Y+1
 4828               		mov r24,r24
 176:main.c        **** 	g_draw_rectangle(0, 0, 160, 80);		//Frame
 4829               	lo8(0)
 4830               		adiw r24,3
 4831 1764 80E0      		movw r20,r24
 4832 1766 90E0      		ldd r24,Y+2
 4833 1768 60E0      		mov r24,r24
 4834 176a 70E0      		ldi r25,lo8(0)
 4835 176c 40EA      		adiw r24,2
 4836 176e 50E0      		movw r18,r24
 4837 1770 20E5      		movw r24,r20
 4838 1772 30E0      		movw r22,r18
 4839 1774 0E94 0000 		ldi r20,lo8(-1)
 177:main.c        **** //========== Button1 ==========================================	
 178:main.c        **** 	g_draw_rectangle(0, 59, 28, 21);		//Button1
 4840               	raphics_plot_pixel
 4842 1778 80E0      	.LM337:
 4843 177a 90E0      		ldd r24,Y+1
 4844 177c 6BE3      		mov r24,r24
 4845 177e 70E0      		ldi r25,lo8(0)
 4846 1780 4CE1      		adiw r24,4
 4847 1782 50E0      		movw r20,r24
 4848 1784 25E1      		ldd r24,Y+2
 4849 1786 30E0      		mov r24,r24
 4850 1788 0E94 0000 		ldi r25,lo8(0)
 179:main.c        **** //========== Button2 ==========================================
 180:main.c        **** 	g_draw_rectangle(27, 59, 28, 21);		//Button2
 4851               	
 4852               		movw r18,r24
 4853 178c 8BE1      		movw r24,r20
 4854 178e 90E0      		movw r22,r18
 4855 1790 6BE3      		ldi r20,lo8(-1)
 4856 1792 70E0      		call lcd_graphics_plot_pixel
 4858 1796 50E0      	.LM338:
 4859 1798 25E1      		ldd r24,Y+1
 4860 179a 30E0      		mov r24,r24
 4861 179c 0E94 0000 		ldi r25,lo8(0)
 181:main.c        **** 	g_draw_triangel_right(35, 63);
 4862               	5
 4863               		movw r20,r24
 4864 17a0 83E2      		ldd r24,Y+2
 4865 17a2 6FE3      		mov r24,r24
 4866 17a4 0E94 0000 		ldi r25,lo8(0)
 182:main.c        **** //========== Button3 ==========================================
 183:main.c        **** 	g_draw_rectangle(54, 59, 28, 21);		//Button3
 4867               	 r24,3
 4868               		movw r18,r24
 4869 17a8 86E3      		movw r24,r20
 4870 17aa 90E0      		movw r22,r18
 4871 17ac 6BE3      		ldi r20,lo8(-1)
 4872 17ae 70E0      		call lcd_graphics_plot_pixel
 4874 17b2 50E0      	.LM339:
 4875 17b4 25E1      		ldd r24,Y+1
 4876 17b6 30E0      		mov r24,r24
 4877 17b8 0E94 0000 		ldi r25,lo8(0)
 184:main.c        **** //========== Button4 ==========================================
 185:main.c        **** 	g_draw_rectangle(81, 59, 27, 21);		//Button4
 4878               	
 4879               		movw r20,r24
 4880 17bc 81E5      		ldd r24,Y+2
 4881 17be 90E0      		mov r24,r24
 4882 17c0 6BE3      		ldi r25,lo8(0)
 4883 17c2 70E0      		adiw r24,3
 4884 17c4 4BE1      		movw r18,r24
 4885 17c6 50E0      		movw r24,r20
 4886 17c8 25E1      		movw r22,r18
 4887 17ca 30E0      		ldi r20,lo8(-1)
 4888 17cc 0E94 0000 		call lcd_graphics_plot_pixel
 186:main.c        **** //========== Button5 ==========================================
 187:main.c        **** 	g_draw_rectangle(107, 59, 27, 21);		//Button5
 4889               	,0,204,.LM340-.LFBB32
 4890               	.LM340:
 4891 17d0 8BE6      		ldd r24,Y+1
 4892 17d2 90E0      		mov r24,r24
 4893 17d4 6BE3      		ldi r25,lo8(0)
 4894 17d6 70E0      		adiw r24,7
 4895 17d8 4BE1      		movw r20,r24
 4896 17da 50E0      		ldd r24,Y+2
 4897 17dc 25E1      		mov r24,r24
 4898 17de 30E0      		ldi r25,lo8(0)
 4899 17e0 0E94 0000 		adiw r24,4
 188:main.c        **** //========== Button6 ==========================================
 189:main.c        **** 	g_draw_rectangle(133, 59, 27, 21);		//Button6
 4900               	24
 4901               		movw r24,r20
 4902 17e4 85E8      		movw r22,r18
 4903 17e6 90E0      		ldi r20,lo8(-1)
 4904 17e8 6BE3      		call lcd_graphics_plot_pixel
 4906 17ec 4BE1      	.LM341:
 4907 17ee 50E0      		ldd r24,Y+1
 4908 17f0 25E1      		mov r24,r24
 4909 17f2 30E0      		ldi r25,lo8(0)
 4910 17f4 0E94 0000 		adiw r24,8
 190:main.c        **** //========== ProgBar ==========================================
 191:main.c        **** 	g_draw_horizontal_line(0, 50, 160);		//Seperater ProgBar
 4911               	24
 4912               		ldd r24,Y+2
 4913 17f8 80E0      		mov r24,r24
 4914 17fa 90E0      		ldi r25,lo8(0)
 4915 17fc 62E3      		adiw r24,4
 4916 17fe 70E0      		movw r18,r24
 4917 1800 40EA      		movw r24,r20
 4918 1802 50E0      		movw r22,r18
 4919 1804 0E94 0000 		ldi r20,lo8(-1)
 192:main.c        **** 	g_draw_rectangle(3, 52, 154, 6);		//frame ProgBar
 4920               	_graphics_plot_pixel
 4922 1808 83E0      	.LM342:
 4923 180a 90E0      		ldd r24,Y+1
 4924 180c 64E3      		mov r24,r24
 4925 180e 70E0      		ldi r25,lo8(0)
 4926 1810 4AE9      		adiw r24,9
 4927 1812 50E0      		movw r20,r24
 4928 1814 26E0      		ldd r24,Y+2
 4929 1816 30E0      		mov r24,r24
 4930 1818 0E94 0000 		ldi r25,lo8(0)
 4931               		adiw r24,5
 193:main.c        **** }
 4932               	4
 4933               		movw r24,r20
 4934 181c CF91      		movw r22,r18
 4935 181e DF91      		ldi r20,lo8(-1)
 4936 1820 0895      		call lcd_graphics_plot_pixel
 4938               	.LM343:
 4939               		ldd r24,Y+1
 4940               		mov r24,r24
 4941               		ldi r25,lo8(0)
 4942               		adiw r24,10
 4943               		movw r20,r24
 4944               		ldd r24,Y+2
 194:main.c        **** 
 195:main.c        **** void g_draw_triangel_right(unsigned char x, unsigned char y)
 196:main.c        **** {
 4945               		ldi r25,lo8(0)
 4946               		adiw r24,5
 4947               		movw r18,r24
 4948 1822 DF93      		movw r24,r20
 4949 1824 CF93      		movw r22,r18
 4950 1826 00D0      		ldi r20,lo8(-1)
 4951 1828 CDB7      		call lcd_graphics_plot_pixel
 4953               	.LM344:
 4954               		ldd r24,Y+1
 4955 182c 8983      		mov r24,r24
 4956 182e 6A83      		ldi r25,lo8(0)
 197:main.c        **** 	g_draw_vertical_line(x, y, 13);
 4957               	2
 4958               		mov r24,r24
 4959 1830 8981      		ldi r25,lo8(0)
 4960 1832 482F      		adiw r24,5
 4961 1834 50E0      		movw r18,r24
 4962 1836 8A81      		movw r24,r20
 4963 1838 282F      		movw r22,r18
 4964 183a 30E0      		ldi r20,lo8(-1)
 4965 183c CA01      		call lcd_graphics_plot_pixel
 4967 1840 4DE0      	.LM344:
 4968 1842 50E0      		ldd r24,Y+1
 4969 1844 0E94 0000 		mov r24,r24
 198:main.c        **** 	lcd_graphics_plot_pixel(x+1, y+1, PIXEL_ON);
 4970               	0,r24
 4971               		ldd r24,Y+2
 4972 1848 8981      		mov r24,r24
 4973 184a 882F      		ldi r25,lo8(0)
 4974 184c 90E0      		adiw r24,5
 4975 184e 0196      		movw r18,r24
 4976 1850 AC01      		movw r24,r20
 4977 1852 8A81      		movw r22,r18
 4978 1854 882F      		ldi r20,lo8(-1)
 4979 1856 90E0      		call lcd_graphics_plot_pixel
 4981 185a 9C01      	.LM344:
 4982 185c CA01      		ldd r24,Y+1
 4983 185e B901      		mov r24,r24
 4984 1860 4FEF      		ldi r25,lo8(0)
 4985 1862 0E94 0000 		adiw r24,11
 199:main.c        **** 	lcd_graphics_plot_pixel(x+2, y+1, PIXEL_ON);
 4986               	
 4987               		ldi r25,lo8(0)
 4988 1866 8981      		adiw r24,5
 4989 1868 882F      		movw r18,r24
 4990 186a 90E0      		movw r24,r20
 4991 186c 0296      		movw r22,r18
 4992 186e AC01      		ldi r20,lo8(-1)
 4993 1870 8A81      		call lcd_graphics_plot_pixel
 4995 1874 90E0      	.LM344:
 4996 1876 0196      		ldd r24,Y+1
 4997 1878 9C01      		mov r24,r24
 4998 187a CA01      		ldi r25,lo8(0)
 4999 187c B901      		adiw r24,11
 5000 187e 4FEF      		movw r20,r24
 5001 1880 0E94 0000 		ldd r24,Y+2
 200:main.c        **** 	lcd_graphics_plot_pixel(x+3, y+2, PIXEL_ON);
 5002               		movw r18,r24
 5003               		movw r24,r20
 5004 1884 8981      		movw r22,r18
 5005 1886 882F      		ldi r20,lo8(-1)
 5006 1888 90E0      		call lcd_graphics_plot_pixel
 5008 188c AC01      	.LM344:
 5009 188e 8A81      		ldd r24,Y+1
 5010 1890 882F      		mov r24,r24
 5011 1892 90E0      		ldi r25,lo8(0)
 5012 1894 0296      		adiw r24,11
 5013 1896 9C01      		movw r20,r24
 5014 1898 CA01      		ldd r24,Y+2
 5015 189a B901      		mov r24,r24
 5016 189c 4FEF      		ldi r25,lo8(0)
 5017 189e 0E94 0000 		adiw r24,6
 201:main.c        **** 	lcd_graphics_plot_pixel(x+4, y+2, PIXEL_ON);
 5018               	di r20,lo8(-1)
 5019               		call lcd_graphics_plot_pixel
 5021 18a4 882F      	.LM344:
 5022 18a6 90E0      		ldd r24,Y+1
 5023 18a8 0496      		mov r24,r24
 5024 18aa AC01      		ldi r25,lo8(0)
 5025 18ac 8A81      		adiw r24,11
 5026 18ae 882F      		movw r20,r24
 5027 18b0 90E0      		ldd r24,Y+2
 5028 18b2 0296      		mov r24,r24
 5029 18b4 9C01      		ldi r25,lo8(0)
 5030 18b6 CA01      		adiw r24,6
 5031 18b8 B901      		movw r18,r24
 5032 18ba 4FEF      		movw r24,r20
 5033 18bc 0E94 0000 		movw r22,r18
 202:main.c        **** 	lcd_graphics_plot_pixel(x+5, y+3, PIXEL_ON);
 5035               	.LM344:
 5036 18c0 8981      		ldd r24,Y+1
 5037 18c2 882F      		mov r24,r24
 5038 18c4 90E0      		ldi r25,lo8(0)
 5039 18c6 0596      		adiw r24,11
 5040 18c8 AC01      		movw r20,r24
 5041 18ca 8A81      		ldd r24,Y+2
 5042 18cc 882F      		mov r24,r24
 5043 18ce 90E0      		ldi r25,lo8(0)
 5044 18d0 0396      		adiw r24,6
 5045 18d2 9C01      		movw r18,r24
 5046 18d4 CA01      		movw r24,r20
 5047 18d6 B901      		movw r22,r18
 5048 18d8 4FEF      		ldi r20,lo8(-1)
 5049 18da 0E94 0000 		call lcd_graphics_plot_pixel
 203:main.c        **** 	lcd_graphics_plot_pixel(x+6, y+3, PIXEL_ON);
 5050               	Y+1
 5051               		mov r24,r24
 5052 18de 8981      		ldi r25,lo8(0)
 5053 18e0 882F      		adiw r24,11
 5054 18e2 90E0      		movw r20,r24
 5055 18e4 0696      		ldd r24,Y+2
 5056 18e6 AC01      		mov r24,r24
 5057 18e8 8A81      		ldi r25,lo8(0)
 5058 18ea 882F      		adiw r24,6
 5059 18ec 90E0      		movw r18,r24
 5060 18ee 0396      		movw r24,r20
 5061 18f0 9C01      		movw r22,r18
 5062 18f2 CA01      		ldi r20,lo8(-1)
 5063 18f4 B901      		call lcd_graphics_plot_pixel
 5065 18f8 0E94 0000 	.LM345:
 204:main.c        **** 	lcd_graphics_plot_pixel(x+7, y+4, PIXEL_ON);
 5066               	,11
 5067               		movw r20,r24
 5068 18fc 8981      		ldd r24,Y+2
 5069 18fe 882F      		mov r24,r24
 5070 1900 90E0      		ldi r25,lo8(0)
 5071 1902 0796      		adiw r24,6
 5072 1904 AC01      		movw r18,r24
 5073 1906 8A81      		movw r24,r20
 5074 1908 882F      		movw r22,r18
 5075 190a 90E0      		ldi r20,lo8(-1)
 5076 190c 0496      		call lcd_graphics_plot_pixel
 5078 1910 CA01      	.LM345:
 5079 1912 B901      		ldd r24,Y+1
 5080 1914 4FEF      		mov r24,r24
 5081 1916 0E94 0000 		ldi r25,lo8(0)
 205:main.c        **** 	lcd_graphics_plot_pixel(x+8, y+4, PIXEL_ON);
 5082               	ldi r25,lo8(0)
 5083               		adiw r24,6
 5084 191a 8981      		movw r18,r24
 5085 191c 882F      		movw r24,r20
 5086 191e 90E0      		movw r22,r18
 5087 1920 0896      		ldi r20,lo8(-1)
 5088 1922 AC01      		call lcd_graphics_plot_pixel
 5090 1926 882F      	.LM345:
 5091 1928 90E0      		ldd r24,Y+1
 5092 192a 0496      		mov r24,r24
 5093 192c 9C01      		ldi r25,lo8(0)
 5094 192e CA01      		adiw r24,12
 5095 1930 B901      		movw r20,r24
 5096 1932 4FEF      		ldd r24,Y+2
 5097 1934 0E94 0000 		mov r24,r24
 206:main.c        **** 	lcd_graphics_plot_pixel(x+9, y+5, PIXEL_ON);
 5098               	ovw r22,r18
 5099               		ldi r20,lo8(-1)
 5100 1938 8981      		call lcd_graphics_plot_pixel
 5102 193c 90E0      	.LM345:
 5103 193e 0996      		ldd r24,Y+1
 5104 1940 AC01      		mov r24,r24
 5105 1942 8A81      		ldi r25,lo8(0)
 5106 1944 882F      		adiw r24,12
 5107 1946 90E0      		movw r20,r24
 5108 1948 0596      		ldd r24,Y+2
 5109 194a 9C01      		mov r24,r24
 5110 194c CA01      		ldi r25,lo8(0)
 5111 194e B901      		adiw r24,6
 5112 1950 4FEF      		movw r18,r24
 5113 1952 0E94 0000 		movw r24,r20
 207:main.c        **** 	lcd_graphics_plot_pixel(x+10, y+5, PIXEL_ON);
 5115               	.LM345:
 5116 1956 8981      		ldd r24,Y+1
 5117 1958 882F      		mov r24,r24
 5118 195a 90E0      		ldi r25,lo8(0)
 5119 195c 0A96      		adiw r24,12
 5120 195e AC01      		movw r20,r24
 5121 1960 8A81      		ldd r24,Y+2
 5122 1962 882F      		mov r24,r24
 5123 1964 90E0      		ldi r25,lo8(0)
 5124 1966 0596      		adiw r24,6
 5125 1968 9C01      		movw r18,r24
 5126 196a CA01      		movw r24,r20
 5127 196c B901      		movw r22,r18
 5128 196e 4FEF      		ldi r20,lo8(-1)
 5129 1970 0E94 0000 		call lcd_graphics_plot_pixel
 208:main.c        **** 	lcd_graphics_plot_pixel(x+11, y+6, PIXEL_ON);
 5130               	
 5131               		ldi r25,lo8(0)
 5132 1974 8981      		adiw r24,12
 5133 1976 882F      		movw r20,r24
 5134 1978 90E0      		ldd r24,Y+2
 5135 197a 0B96      		mov r24,r24
 5136 197c AC01      		ldi r25,lo8(0)
 5137 197e 8A81      		adiw r24,6
 5138 1980 882F      		movw r18,r24
 5139 1982 90E0      		movw r24,r20
 5140 1984 0696      		movw r22,r18
 5141 1986 9C01      		ldi r20,lo8(-1)
 5142 1988 CA01      		call lcd_graphics_plot_pixel
 5144 198c 4FEF      	.LM346:
 5145 198e 0E94 0000 		ldd r24,Y+1
 209:main.c        **** 	lcd_graphics_plot_pixel(x+12, y+6, PIXEL_ON);
 5146               	
 5147               		mov r24,r24
 5148 1992 8981      		ldi r25,lo8(0)
 5149 1994 882F      		adiw r24,6
 5150 1996 90E0      		movw r18,r24
 5151 1998 0C96      		movw r24,r20
 5152 199a AC01      		movw r22,r18
 5153 199c 8A81      		ldi r20,lo8(-1)
 5154 199e 882F      		call lcd_graphics_plot_pixel
 5156 19a2 0696      	.LM346:
 5157 19a4 9C01      		ldd r24,Y+1
 5158 19a6 CA01      		mov r24,r24
 5159 19a8 B901      		ldi r25,lo8(0)
 5160 19aa 4FEF      		adiw r24,10
 5161 19ac 0E94 0000 		movw r20,r24
 210:main.c        **** 	lcd_graphics_plot_pixel(x+10, y+7, PIXEL_ON);
 5162               	w r24,r20
 5163               		movw r22,r18
 5164 19b0 8981      		ldi r20,lo8(-1)
 5165 19b2 882F      		call lcd_graphics_plot_pixel
 5167 19b6 0A96      	.LM346:
 5168 19b8 AC01      		ldd r24,Y+1
 5169 19ba 8A81      		mov r24,r24
 5170 19bc 882F      		ldi r25,lo8(0)
 5171 19be 90E0      		adiw r24,10
 5172 19c0 0796      		movw r20,r24
 5173 19c2 9C01      		ldd r24,Y+2
 5174 19c4 CA01      		mov r24,r24
 5175 19c6 B901      		ldi r25,lo8(0)
 5176 19c8 4FEF      		adiw r24,7
 5177 19ca 0E94 0000 		movw r18,r24
 211:main.c        **** 	lcd_graphics_plot_pixel(x+9, y+7, PIXEL_ON);
 5178               	stabn	68,0,210,.LM346-.LFBB32
 5179               	.LM346:
 5180 19ce 8981      		ldd r24,Y+1
 5181 19d0 882F      		mov r24,r24
 5182 19d2 90E0      		ldi r25,lo8(0)
 5183 19d4 0996      		adiw r24,10
 5184 19d6 AC01      		movw r20,r24
 5185 19d8 8A81      		ldd r24,Y+2
 5186 19da 882F      		mov r24,r24
 5187 19dc 90E0      		ldi r25,lo8(0)
 5188 19de 0796      		adiw r24,7
 5189 19e0 9C01      		movw r18,r24
 5190 19e2 CA01      		movw r24,r20
 5191 19e4 B901      		movw r22,r18
 5192 19e6 4FEF      		ldi r20,lo8(-1)
 5193 19e8 0E94 0000 		call lcd_graphics_plot_pixel
 212:main.c        **** 	lcd_graphics_plot_pixel(x+8, y+8, PIXEL_ON);
 5194               	
 5195               		adiw r24,10
 5196 19ec 8981      		movw r20,r24
 5197 19ee 882F      		ldd r24,Y+2
 5198 19f0 90E0      		mov r24,r24
 5199 19f2 0896      		ldi r25,lo8(0)
 5200 19f4 AC01      		adiw r24,7
 5201 19f6 8A81      		movw r18,r24
 5202 19f8 882F      		movw r24,r20
 5203 19fa 90E0      		movw r22,r18
 5204 19fc 0896      		ldi r20,lo8(-1)
 5205 19fe 9C01      		call lcd_graphics_plot_pixel
 5207 1a02 B901      	.LM347:
 5208 1a04 4FEF      		ldd r24,Y+1
 5209 1a06 0E94 0000 		mov r24,r24
 213:main.c        **** 	lcd_graphics_plot_pixel(x+7, y+8, PIXEL_ON);
 5210               		adiw r24,7
 5211               		movw r18,r24
 5212 1a0a 8981      		movw r24,r20
 5213 1a0c 882F      		movw r22,r18
 5214 1a0e 90E0      		ldi r20,lo8(-1)
 5215 1a10 0796      		call lcd_graphics_plot_pixel
 5217 1a14 8A81      	.LM347:
 5218 1a16 882F      		ldd r24,Y+1
 5219 1a18 90E0      		mov r24,r24
 5220 1a1a 0896      		ldi r25,lo8(0)
 5221 1a1c 9C01      		adiw r24,9
 5222 1a1e CA01      		movw r20,r24
 5223 1a20 B901      		ldd r24,Y+2
 5224 1a22 4FEF      		mov r24,r24
 5225 1a24 0E94 0000 		ldi r25,lo8(0)
 214:main.c        **** 	lcd_graphics_plot_pixel(x+6, y+9, PIXEL_ON);
 5226               	plot_pixel
 5228 1a28 8981      	.LM347:
 5229 1a2a 882F      		ldd r24,Y+1
 5230 1a2c 90E0      		mov r24,r24
 5231 1a2e 0696      		ldi r25,lo8(0)
 5232 1a30 AC01      		adiw r24,9
 5233 1a32 8A81      		movw r20,r24
 5234 1a34 882F      		ldd r24,Y+2
 5235 1a36 90E0      		mov r24,r24
 5236 1a38 0996      		ldi r25,lo8(0)
 5237 1a3a 9C01      		adiw r24,7
 5238 1a3c CA01      		movw r18,r24
 5239 1a3e B901      		movw r24,r20
 5240 1a40 4FEF      		movw r22,r18
 5241 1a42 0E94 0000 		ldi r20,lo8(-1)
 215:main.c        **** 	lcd_graphics_plot_pixel(x+5, y+9, PIXEL_ON);
 5242               	
 5243               		ldi r25,lo8(0)
 5244 1a46 8981      		adiw r24,9
 5245 1a48 882F      		movw r20,r24
 5246 1a4a 90E0      		ldd r24,Y+2
 5247 1a4c 0596      		mov r24,r24
 5248 1a4e AC01      		ldi r25,lo8(0)
 5249 1a50 8A81      		adiw r24,7
 5250 1a52 882F      		movw r18,r24
 5251 1a54 90E0      		movw r24,r20
 5252 1a56 0996      		movw r22,r18
 5253 1a58 9C01      		ldi r20,lo8(-1)
 5254 1a5a CA01      		call lcd_graphics_plot_pixel
 5256 1a5e 4FEF      	.LM348:
 5257 1a60 0E94 0000 		ldd r24,Y+1
 216:main.c        **** 	lcd_graphics_plot_pixel(x+4, y+10, PIXEL_ON);
 5258               	diw r24,7
 5259               		movw r18,r24
 5260 1a64 8981      		movw r24,r20
 5261 1a66 882F      		movw r22,r18
 5262 1a68 90E0      		ldi r20,lo8(-1)
 5263 1a6a 0496      		call lcd_graphics_plot_pixel
 5265 1a6e 8A81      	.LM348:
 5266 1a70 882F      		ldd r24,Y+1
 5267 1a72 90E0      		mov r24,r24
 5268 1a74 0A96      		ldi r25,lo8(0)
 5269 1a76 9C01      		adiw r24,8
 5270 1a78 CA01      		movw r20,r24
 5271 1a7a B901      		ldd r24,Y+2
 5272 1a7c 4FEF      		mov r24,r24
 5273 1a7e 0E94 0000 		ldi r25,lo8(0)
 217:main.c        **** 	lcd_graphics_plot_pixel(x+3, y+10, PIXEL_ON);
 5274               	bn	68,0,212,.LM348-.LFBB32
 5275               	.LM348:
 5276 1a82 8981      		ldd r24,Y+1
 5277 1a84 882F      		mov r24,r24
 5278 1a86 90E0      		ldi r25,lo8(0)
 5279 1a88 0396      		adiw r24,8
 5280 1a8a AC01      		movw r20,r24
 5281 1a8c 8A81      		ldd r24,Y+2
 5282 1a8e 882F      		mov r24,r24
 5283 1a90 90E0      		ldi r25,lo8(0)
 5284 1a92 0A96      		adiw r24,8
 5285 1a94 9C01      		movw r18,r24
 5286 1a96 CA01      		movw r24,r20
 5287 1a98 B901      		movw r22,r18
 5288 1a9a 4FEF      		ldi r20,lo8(-1)
 5289 1a9c 0E94 0000 		call lcd_graphics_plot_pixel
 218:main.c        **** 	lcd_graphics_plot_pixel(x+2, y+11, PIXEL_ON);
 5290               	 r24,Y+2
 5291               		mov r24,r24
 5292 1aa0 8981      		ldi r25,lo8(0)
 5293 1aa2 882F      		adiw r24,8
 5294 1aa4 90E0      		movw r18,r24
 5295 1aa6 0296      		movw r24,r20
 5296 1aa8 AC01      		movw r22,r18
 5297 1aaa 8A81      		ldi r20,lo8(-1)
 5298 1aac 882F      		call lcd_graphics_plot_pixel
 5300 1ab0 0B96      	.LM349:
 5301 1ab2 9C01      		ldd r24,Y+1
 5302 1ab4 CA01      		mov r24,r24
 5303 1ab6 B901      		ldi r25,lo8(0)
 5304 1ab8 4FEF      		adiw r24,7
 5305 1aba 0E94 0000 		movw r20,r24
 219:main.c        **** 	lcd_graphics_plot_pixel(x+1, y+11, PIXEL_ON);
 5306               	lcd_graphics_plot_pixel
 5308 1abe 8981      	.LM349:
 5309 1ac0 882F      		ldd r24,Y+1
 5310 1ac2 90E0      		mov r24,r24
 5311 1ac4 0196      		ldi r25,lo8(0)
 5312 1ac6 AC01      		adiw r24,7
 5313 1ac8 8A81      		movw r20,r24
 5314 1aca 882F      		ldd r24,Y+2
 5315 1acc 90E0      		mov r24,r24
 5316 1ace 0B96      		ldi r25,lo8(0)
 5317 1ad0 9C01      		adiw r24,8
 5318 1ad2 CA01      		movw r18,r24
 5319 1ad4 B901      		movw r24,r20
 5320 1ad6 4FEF      		movw r22,r18
 5321 1ad8 0E94 0000 		ldi r20,lo8(-1)
 5322               		call lcd_graphics_plot_pixel
 220:main.c        **** }...
 5323               	4,r24
 5324               		ldi r25,lo8(0)
 5325 1adc 0F90      		adiw r24,8
 5326 1ade 0F90      		movw r18,r24
 5327 1ae0 CF91      		movw r24,r20
 5328 1ae2 DF91      		movw r22,r18
 5329 1ae4 0895      		ldi r20,lo8(-1)
 5330               		call lcd_graphics_plot_pixel
 5332               	.LM350:
 5333               		ldd r24,Y+1
 5334               		mov r24,r24
 5335               		ldi r25,lo8(0)
 5336               		adiw r24,6
 5337               		movw r20,r24
 5338               		ldd r24,Y+2
 5339               		mov r24,r24
 5340               		ldi r25,lo8(0)
 5341               		adiw r24,9
 5342               		movw r18,r24
 5343               		movw r24,r20
 5344               		movw r22,r18
 5345               		ldi r20,lo8(-1)
 5346               		call lcd_graphics_plot_pixel
 5348               	.LM351:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2      *ABS*:0000003f __SREG__
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3      *ABS*:0000003e __SP_H__
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4      *ABS*:0000003d __SP_L__
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:5      *ABS*:00000034 __CCP__
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:6      *ABS*:00000000 __tmp_reg__
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:7      *ABS*:00000001 __zero_reg__
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:74     .text:00000000 set_pin
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:294    .text:00000168 reset_pin
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:518    .text:000002dc toggle_pin
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:736    .text:00000444 init_out_pin
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:954    .text:000005ac init_in_pin
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1177   .text:00000720 init_out_port
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1323   .text:000007fa init_in_port
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1463   .text:000008c8 USART_Init
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1516   .text:00000906 init_serial
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1565   .text:00000938 init_in_ana
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1609   .text:00000964 get_in_pin
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1760   .text:00000a36 read_adc
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:1828   .data:00000000 Font5x7
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2318   .text:00000a8a g_draw_horizontal_line
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3735   .text:0000118c lcd_graphics_plot_pixel
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2401   .text:00000af6 g_draw_vertical_line
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2483   .text:00000b62 g_draw_rectangle
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2591   .text:00000c08 g_draw_char
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2754   .text:00000cf0 g_draw_string
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2886   .text:00000da4 lcd_strobe_enable
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:2953   .text:00000dda lcd_wait_busy
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3262   .text:00000f7c lcd_write_command
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3442   .text:0000101a lcd_graphics_init
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3574   .text:000010c0 lcd_graphics_move
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3654   .text:00001134 lcd_graphics_draw_byte
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3686   .text:00001150 lcd_graphics_plot_byte
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3804   .text:000011e2 lcd_graphics_clear
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:3863   .text:00001224 delay_ms_long
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4084   .bss:00000000 getting_artist
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4090   .bss:00000001 artist_pos
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4096   .bss:00000002 getting_title
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4102   .bss:00000003 title_pos
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4108   .bss:00000004 getting_tit_length
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4114   .bss:00000005 tit_length_pos
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4120   .bss:00000006 getting_tit_time_ratio
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4126   .data:000001e0 artist
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4132   .data:000001fa title
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4138   .data:00000214 tit_length
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4146   .bss:00000007 tit_time_ratio
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4152   .bss:00000008 button
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4158   .text:00001348 __vector_18
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4476   .text:00001524 main
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4819   .text:0000175c g_draw_layout
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4597   .text:000015d6 g_draw_prog
C:\DOKUME~1\ALEXMI~1\LOKALE~1\Temp/ccnARk4B.s:4944   .text:00001822 g_draw_triangel_right

UNDEFINED SYMBOLS
__mulsf3
__ltsf2
__gtsf2
__divsf3
__fixunssfsi
__floatsisf
__lesf2
__addsf3
__do_copy_data
__do_clear_bss


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000320  00800100  000048d0  00004964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027b  00800420  00800420  00004c84  2**0
                  ALLOC
  3 .stab         00003948  00000000  00000000  00004c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010df  00000000  00000000  000085cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ed       	ldi	r30, 0xD0	; 208
      a0:	f8 e4       	ldi	r31, 0x48	; 72
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	16 e0       	ldi	r17, 0x06	; 6
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 39       	cpi	r26, 0x9B	; 155
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 2d 11 	call	0x225a	; 0x225a <main>
      c6:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_pin>:
#define ADC_VREF_TYPE 0xC0				// ADC Used Internal Reference

#include <avr/io.h>

void set_pin(char port, char pin)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <set_pin+0x6>
      d4:	00 d0       	rcall	.+0      	; 0xd6 <set_pin+0x8>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	89 83       	std	Y+1, r24	; 0x01
      dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	28 2f       	mov	r18, r24
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	3c 83       	std	Y+4, r19	; 0x04
      e6:	2b 83       	std	Y+3, r18	; 0x03
      e8:	8b 81       	ldd	r24, Y+3	; 0x03
      ea:	9c 81       	ldd	r25, Y+4	; 0x04
      ec:	83 36       	cpi	r24, 0x63	; 99
      ee:	91 05       	cpc	r25, r1
      f0:	09 f4       	brne	.+2      	; 0xf4 <set_pin+0x26>
      f2:	4b c0       	rjmp	.+150    	; 0x18a <set_pin+0xbc>
      f4:	2b 81       	ldd	r18, Y+3	; 0x03
      f6:	3c 81       	ldd	r19, Y+4	; 0x04
      f8:	24 36       	cpi	r18, 0x64	; 100
      fa:	31 05       	cpc	r19, r1
      fc:	5c f4       	brge	.+22     	; 0x114 <set_pin+0x46>
      fe:	8b 81       	ldd	r24, Y+3	; 0x03
     100:	9c 81       	ldd	r25, Y+4	; 0x04
     102:	81 36       	cpi	r24, 0x61	; 97
     104:	91 05       	cpc	r25, r1
     106:	c9 f0       	breq	.+50     	; 0x13a <set_pin+0x6c>
     108:	2b 81       	ldd	r18, Y+3	; 0x03
     10a:	3c 81       	ldd	r19, Y+4	; 0x04
     10c:	22 36       	cpi	r18, 0x62	; 98
     10e:	31 05       	cpc	r19, r1
     110:	41 f1       	breq	.+80     	; 0x162 <set_pin+0x94>
     112:	8a c0       	rjmp	.+276    	; 0x228 <set_pin+0x15a>
     114:	8b 81       	ldd	r24, Y+3	; 0x03
     116:	9c 81       	ldd	r25, Y+4	; 0x04
     118:	85 36       	cpi	r24, 0x65	; 101
     11a:	91 05       	cpc	r25, r1
     11c:	09 f4       	brne	.+2      	; 0x120 <set_pin+0x52>
     11e:	5d c0       	rjmp	.+186    	; 0x1da <set_pin+0x10c>
     120:	2b 81       	ldd	r18, Y+3	; 0x03
     122:	3c 81       	ldd	r19, Y+4	; 0x04
     124:	25 36       	cpi	r18, 0x65	; 101
     126:	31 05       	cpc	r19, r1
     128:	0c f4       	brge	.+2      	; 0x12c <set_pin+0x5e>
     12a:	43 c0       	rjmp	.+134    	; 0x1b2 <set_pin+0xe4>
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	9c 81       	ldd	r25, Y+4	; 0x04
     130:	86 36       	cpi	r24, 0x66	; 102
     132:	91 05       	cpc	r25, r1
     134:	09 f4       	brne	.+2      	; 0x138 <set_pin+0x6a>
     136:	65 c0       	rjmp	.+202    	; 0x202 <set_pin+0x134>
     138:	77 c0       	rjmp	.+238    	; 0x228 <set_pin+0x15a>
	{
		case ('a'):
			PORTA |= (0x01 << pin);
     13a:	ab e3       	ldi	r26, 0x3B	; 59
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	eb e3       	ldi	r30, 0x3B	; 59
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	48 2f       	mov	r20, r24
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	28 2f       	mov	r18, r24
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	02 2e       	mov	r0, r18
     152:	02 c0       	rjmp	.+4      	; 0x158 <set_pin+0x8a>
     154:	88 0f       	add	r24, r24
     156:	99 1f       	adc	r25, r25
     158:	0a 94       	dec	r0
     15a:	e2 f7       	brpl	.-8      	; 0x154 <set_pin+0x86>
     15c:	84 2b       	or	r24, r20
     15e:	8c 93       	st	X, r24
     160:	63 c0       	rjmp	.+198    	; 0x228 <set_pin+0x15a>
			break;
		case ('b'):
			PORTB |= (0x01 << pin);
     162:	a8 e3       	ldi	r26, 0x38	; 56
     164:	b0 e0       	ldi	r27, 0x00	; 0
     166:	e8 e3       	ldi	r30, 0x38	; 56
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	48 2f       	mov	r20, r24
     16e:	8a 81       	ldd	r24, Y+2	; 0x02
     170:	28 2f       	mov	r18, r24
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 2e       	mov	r0, r18
     17a:	02 c0       	rjmp	.+4      	; 0x180 <set_pin+0xb2>
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	0a 94       	dec	r0
     182:	e2 f7       	brpl	.-8      	; 0x17c <set_pin+0xae>
     184:	84 2b       	or	r24, r20
     186:	8c 93       	st	X, r24
     188:	4f c0       	rjmp	.+158    	; 0x228 <set_pin+0x15a>
			break;
		case ('c'):
			PORTC |= (0x01 << pin);
     18a:	a5 e3       	ldi	r26, 0x35	; 53
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	e5 e3       	ldi	r30, 0x35	; 53
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	48 2f       	mov	r20, r24
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 2e       	mov	r0, r18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <set_pin+0xda>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	0a 94       	dec	r0
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <set_pin+0xd6>
     1ac:	84 2b       	or	r24, r20
     1ae:	8c 93       	st	X, r24
     1b0:	3b c0       	rjmp	.+118    	; 0x228 <set_pin+0x15a>
			break;
		case ('d'):
			PORTD |= (0x01 << pin);
     1b2:	a2 e3       	ldi	r26, 0x32	; 50
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e2 e3       	ldi	r30, 0x32	; 50
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	48 2f       	mov	r20, r24
     1be:	8a 81       	ldd	r24, Y+2	; 0x02
     1c0:	28 2f       	mov	r18, r24
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	02 2e       	mov	r0, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <set_pin+0x102>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	0a 94       	dec	r0
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <set_pin+0xfe>
     1d4:	84 2b       	or	r24, r20
     1d6:	8c 93       	st	X, r24
     1d8:	27 c0       	rjmp	.+78     	; 0x228 <set_pin+0x15a>
			break;
		case ('e'):
			PORTE |= (0x01 << pin);
     1da:	a3 e2       	ldi	r26, 0x23	; 35
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e3 e2       	ldi	r30, 0x23	; 35
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	48 2f       	mov	r20, r24
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	02 2e       	mov	r0, r18
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <set_pin+0x12a>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <set_pin+0x126>
     1fc:	84 2b       	or	r24, r20
     1fe:	8c 93       	st	X, r24
     200:	13 c0       	rjmp	.+38     	; 0x228 <set_pin+0x15a>
			break;
		case ('f'):
			PORTF |= (0x01 << pin);
     202:	a2 e6       	ldi	r26, 0x62	; 98
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	e2 e6       	ldi	r30, 0x62	; 98
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	48 2f       	mov	r20, r24
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	28 2f       	mov	r18, r24
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	02 2e       	mov	r0, r18
     21a:	02 c0       	rjmp	.+4      	; 0x220 <set_pin+0x152>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	0a 94       	dec	r0
     222:	e2 f7       	brpl	.-8      	; 0x21c <set_pin+0x14e>
     224:	84 2b       	or	r24, r20
     226:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	cf 91       	pop	r28
     232:	df 91       	pop	r29
     234:	08 95       	ret

00000236 <reset_pin>:

void reset_pin(char port, char pin)
{
     236:	df 93       	push	r29
     238:	cf 93       	push	r28
     23a:	00 d0       	rcall	.+0      	; 0x23c <reset_pin+0x6>
     23c:	00 d0       	rcall	.+0      	; 0x23e <reset_pin+0x8>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	89 83       	std	Y+1, r24	; 0x01
     244:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	3c 83       	std	Y+4, r19	; 0x04
     24e:	2b 83       	std	Y+3, r18	; 0x03
     250:	8b 81       	ldd	r24, Y+3	; 0x03
     252:	9c 81       	ldd	r25, Y+4	; 0x04
     254:	83 36       	cpi	r24, 0x63	; 99
     256:	91 05       	cpc	r25, r1
     258:	09 f4       	brne	.+2      	; 0x25c <reset_pin+0x26>
     25a:	4d c0       	rjmp	.+154    	; 0x2f6 <reset_pin+0xc0>
     25c:	2b 81       	ldd	r18, Y+3	; 0x03
     25e:	3c 81       	ldd	r19, Y+4	; 0x04
     260:	24 36       	cpi	r18, 0x64	; 100
     262:	31 05       	cpc	r19, r1
     264:	5c f4       	brge	.+22     	; 0x27c <reset_pin+0x46>
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	9c 81       	ldd	r25, Y+4	; 0x04
     26a:	81 36       	cpi	r24, 0x61	; 97
     26c:	91 05       	cpc	r25, r1
     26e:	c9 f0       	breq	.+50     	; 0x2a2 <reset_pin+0x6c>
     270:	2b 81       	ldd	r18, Y+3	; 0x03
     272:	3c 81       	ldd	r19, Y+4	; 0x04
     274:	22 36       	cpi	r18, 0x62	; 98
     276:	31 05       	cpc	r19, r1
     278:	49 f1       	breq	.+82     	; 0x2cc <reset_pin+0x96>
     27a:	90 c0       	rjmp	.+288    	; 0x39c <reset_pin+0x166>
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	9c 81       	ldd	r25, Y+4	; 0x04
     280:	85 36       	cpi	r24, 0x65	; 101
     282:	91 05       	cpc	r25, r1
     284:	09 f4       	brne	.+2      	; 0x288 <reset_pin+0x52>
     286:	61 c0       	rjmp	.+194    	; 0x34a <reset_pin+0x114>
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	25 36       	cpi	r18, 0x65	; 101
     28e:	31 05       	cpc	r19, r1
     290:	0c f4       	brge	.+2      	; 0x294 <reset_pin+0x5e>
     292:	46 c0       	rjmp	.+140    	; 0x320 <reset_pin+0xea>
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	86 36       	cpi	r24, 0x66	; 102
     29a:	91 05       	cpc	r25, r1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <reset_pin+0x6a>
     29e:	6a c0       	rjmp	.+212    	; 0x374 <reset_pin+0x13e>
     2a0:	7d c0       	rjmp	.+250    	; 0x39c <reset_pin+0x166>
	{
		case ('a'):
			PORTA &= ~(0x01 << pin);
     2a2:	ab e3       	ldi	r26, 0x3B	; 59
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	eb e3       	ldi	r30, 0x3B	; 59
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	48 2f       	mov	r20, r24
     2ae:	8a 81       	ldd	r24, Y+2	; 0x02
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 2e       	mov	r0, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <reset_pin+0x8a>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <reset_pin+0x86>
     2c4:	80 95       	com	r24
     2c6:	84 23       	and	r24, r20
     2c8:	8c 93       	st	X, r24
     2ca:	68 c0       	rjmp	.+208    	; 0x39c <reset_pin+0x166>
			break;
		case ('b'):
			PORTB &= ~(0x01 << pin);
     2cc:	a8 e3       	ldi	r26, 0x38	; 56
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	e8 e3       	ldi	r30, 0x38	; 56
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	48 2f       	mov	r20, r24
     2d8:	8a 81       	ldd	r24, Y+2	; 0x02
     2da:	28 2f       	mov	r18, r24
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	02 2e       	mov	r0, r18
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <reset_pin+0xb4>
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	0a 94       	dec	r0
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <reset_pin+0xb0>
     2ee:	80 95       	com	r24
     2f0:	84 23       	and	r24, r20
     2f2:	8c 93       	st	X, r24
     2f4:	53 c0       	rjmp	.+166    	; 0x39c <reset_pin+0x166>
			break;
		case ('c'):
			PORTC &= ~(0x01 << pin);
     2f6:	a5 e3       	ldi	r26, 0x35	; 53
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	e5 e3       	ldi	r30, 0x35	; 53
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	48 2f       	mov	r20, r24
     302:	8a 81       	ldd	r24, Y+2	; 0x02
     304:	28 2f       	mov	r18, r24
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 2e       	mov	r0, r18
     30e:	02 c0       	rjmp	.+4      	; 0x314 <reset_pin+0xde>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <reset_pin+0xda>
     318:	80 95       	com	r24
     31a:	84 23       	and	r24, r20
     31c:	8c 93       	st	X, r24
     31e:	3e c0       	rjmp	.+124    	; 0x39c <reset_pin+0x166>
			break;
		case ('d'):
			PORTD &= ~(0x01 << pin);
     320:	a2 e3       	ldi	r26, 0x32	; 50
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e2 e3       	ldi	r30, 0x32	; 50
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	48 2f       	mov	r20, r24
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	28 2f       	mov	r18, r24
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	02 2e       	mov	r0, r18
     338:	02 c0       	rjmp	.+4      	; 0x33e <reset_pin+0x108>
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	0a 94       	dec	r0
     340:	e2 f7       	brpl	.-8      	; 0x33a <reset_pin+0x104>
     342:	80 95       	com	r24
     344:	84 23       	and	r24, r20
     346:	8c 93       	st	X, r24
     348:	29 c0       	rjmp	.+82     	; 0x39c <reset_pin+0x166>
			break;
		case ('e'):
			PORTE &= ~(0x01 << pin);
     34a:	a3 e2       	ldi	r26, 0x23	; 35
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	e3 e2       	ldi	r30, 0x23	; 35
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	48 2f       	mov	r20, r24
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	28 2f       	mov	r18, r24
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	02 2e       	mov	r0, r18
     362:	02 c0       	rjmp	.+4      	; 0x368 <reset_pin+0x132>
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	0a 94       	dec	r0
     36a:	e2 f7       	brpl	.-8      	; 0x364 <reset_pin+0x12e>
     36c:	80 95       	com	r24
     36e:	84 23       	and	r24, r20
     370:	8c 93       	st	X, r24
     372:	14 c0       	rjmp	.+40     	; 0x39c <reset_pin+0x166>
			break;
		case ('f'):
			PORTF &= ~(0x01 << pin);
     374:	a2 e6       	ldi	r26, 0x62	; 98
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	e2 e6       	ldi	r30, 0x62	; 98
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	48 2f       	mov	r20, r24
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	28 2f       	mov	r18, r24
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	02 2e       	mov	r0, r18
     38c:	02 c0       	rjmp	.+4      	; 0x392 <reset_pin+0x15c>
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	0a 94       	dec	r0
     394:	e2 f7       	brpl	.-8      	; 0x38e <reset_pin+0x158>
     396:	80 95       	com	r24
     398:	84 23       	and	r24, r20
     39a:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	cf 91       	pop	r28
     3a6:	df 91       	pop	r29
     3a8:	08 95       	ret

000003aa <toggle_pin>:

void toggle_pin(char port, char pin)
{
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <toggle_pin+0x6>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <toggle_pin+0x8>
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	28 2f       	mov	r18, r24
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	3c 83       	std	Y+4, r19	; 0x04
     3c2:	2b 83       	std	Y+3, r18	; 0x03
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	83 36       	cpi	r24, 0x63	; 99
     3ca:	91 05       	cpc	r25, r1
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <toggle_pin+0x26>
     3ce:	4b c0       	rjmp	.+150    	; 0x466 <toggle_pin+0xbc>
     3d0:	2b 81       	ldd	r18, Y+3	; 0x03
     3d2:	3c 81       	ldd	r19, Y+4	; 0x04
     3d4:	24 36       	cpi	r18, 0x64	; 100
     3d6:	31 05       	cpc	r19, r1
     3d8:	5c f4       	brge	.+22     	; 0x3f0 <toggle_pin+0x46>
     3da:	8b 81       	ldd	r24, Y+3	; 0x03
     3dc:	9c 81       	ldd	r25, Y+4	; 0x04
     3de:	81 36       	cpi	r24, 0x61	; 97
     3e0:	91 05       	cpc	r25, r1
     3e2:	c9 f0       	breq	.+50     	; 0x416 <toggle_pin+0x6c>
     3e4:	2b 81       	ldd	r18, Y+3	; 0x03
     3e6:	3c 81       	ldd	r19, Y+4	; 0x04
     3e8:	22 36       	cpi	r18, 0x62	; 98
     3ea:	31 05       	cpc	r19, r1
     3ec:	41 f1       	breq	.+80     	; 0x43e <toggle_pin+0x94>
     3ee:	8a c0       	rjmp	.+276    	; 0x504 <toggle_pin+0x15a>
     3f0:	8b 81       	ldd	r24, Y+3	; 0x03
     3f2:	9c 81       	ldd	r25, Y+4	; 0x04
     3f4:	85 36       	cpi	r24, 0x65	; 101
     3f6:	91 05       	cpc	r25, r1
     3f8:	09 f4       	brne	.+2      	; 0x3fc <toggle_pin+0x52>
     3fa:	5d c0       	rjmp	.+186    	; 0x4b6 <toggle_pin+0x10c>
     3fc:	2b 81       	ldd	r18, Y+3	; 0x03
     3fe:	3c 81       	ldd	r19, Y+4	; 0x04
     400:	25 36       	cpi	r18, 0x65	; 101
     402:	31 05       	cpc	r19, r1
     404:	0c f4       	brge	.+2      	; 0x408 <toggle_pin+0x5e>
     406:	43 c0       	rjmp	.+134    	; 0x48e <toggle_pin+0xe4>
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	86 36       	cpi	r24, 0x66	; 102
     40e:	91 05       	cpc	r25, r1
     410:	09 f4       	brne	.+2      	; 0x414 <toggle_pin+0x6a>
     412:	65 c0       	rjmp	.+202    	; 0x4de <toggle_pin+0x134>
     414:	77 c0       	rjmp	.+238    	; 0x504 <toggle_pin+0x15a>
	{
		case ('a'):
			PORTA ^= (0x01 << pin);
     416:	ab e3       	ldi	r26, 0x3B	; 59
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	eb e3       	ldi	r30, 0x3B	; 59
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	48 2f       	mov	r20, r24
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	28 2f       	mov	r18, r24
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	02 2e       	mov	r0, r18
     42e:	02 c0       	rjmp	.+4      	; 0x434 <toggle_pin+0x8a>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	0a 94       	dec	r0
     436:	e2 f7       	brpl	.-8      	; 0x430 <toggle_pin+0x86>
     438:	84 27       	eor	r24, r20
     43a:	8c 93       	st	X, r24
     43c:	63 c0       	rjmp	.+198    	; 0x504 <toggle_pin+0x15a>
			break;
		case ('b'):
			PORTB ^= (0x01 << pin);
     43e:	a8 e3       	ldi	r26, 0x38	; 56
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e8 e3       	ldi	r30, 0x38	; 56
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	48 2f       	mov	r20, r24
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 2e       	mov	r0, r18
     456:	02 c0       	rjmp	.+4      	; 0x45c <toggle_pin+0xb2>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	0a 94       	dec	r0
     45e:	e2 f7       	brpl	.-8      	; 0x458 <toggle_pin+0xae>
     460:	84 27       	eor	r24, r20
     462:	8c 93       	st	X, r24
     464:	4f c0       	rjmp	.+158    	; 0x504 <toggle_pin+0x15a>
			break;
		case ('c'):
			PORTC ^= (0x01 << pin);
     466:	a5 e3       	ldi	r26, 0x35	; 53
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	e5 e3       	ldi	r30, 0x35	; 53
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	48 2f       	mov	r20, r24
     472:	8a 81       	ldd	r24, Y+2	; 0x02
     474:	28 2f       	mov	r18, r24
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	02 2e       	mov	r0, r18
     47e:	02 c0       	rjmp	.+4      	; 0x484 <toggle_pin+0xda>
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	0a 94       	dec	r0
     486:	e2 f7       	brpl	.-8      	; 0x480 <toggle_pin+0xd6>
     488:	84 27       	eor	r24, r20
     48a:	8c 93       	st	X, r24
     48c:	3b c0       	rjmp	.+118    	; 0x504 <toggle_pin+0x15a>
			break;
		case ('d'):
			PORTD ^= (0x01 << pin);
     48e:	a2 e3       	ldi	r26, 0x32	; 50
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	e2 e3       	ldi	r30, 0x32	; 50
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	48 2f       	mov	r20, r24
     49a:	8a 81       	ldd	r24, Y+2	; 0x02
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	02 2e       	mov	r0, r18
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <toggle_pin+0x102>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <toggle_pin+0xfe>
     4b0:	84 27       	eor	r24, r20
     4b2:	8c 93       	st	X, r24
     4b4:	27 c0       	rjmp	.+78     	; 0x504 <toggle_pin+0x15a>
			break;
		case ('e'):
			PORTE ^= (0x01 << pin);
     4b6:	a3 e2       	ldi	r26, 0x23	; 35
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e3 e2       	ldi	r30, 0x23	; 35
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	48 2f       	mov	r20, r24
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	28 2f       	mov	r18, r24
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	02 2e       	mov	r0, r18
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <toggle_pin+0x12a>
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	0a 94       	dec	r0
     4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <toggle_pin+0x126>
     4d8:	84 27       	eor	r24, r20
     4da:	8c 93       	st	X, r24
     4dc:	13 c0       	rjmp	.+38     	; 0x504 <toggle_pin+0x15a>
			break;
		case ('f'):
			PORTF ^= (0x01 << pin);
     4de:	a2 e6       	ldi	r26, 0x62	; 98
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e2 e6       	ldi	r30, 0x62	; 98
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	48 2f       	mov	r20, r24
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 2e       	mov	r0, r18
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <toggle_pin+0x152>
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	0a 94       	dec	r0
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <toggle_pin+0x14e>
     500:	84 27       	eor	r24, r20
     502:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	cf 91       	pop	r28
     50e:	df 91       	pop	r29
     510:	08 95       	ret

00000512 <init_out_pin>:

void init_out_pin(char port, char pin)
{
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	00 d0       	rcall	.+0      	; 0x518 <init_out_pin+0x6>
     518:	00 d0       	rcall	.+0      	; 0x51a <init_out_pin+0x8>
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	89 83       	std	Y+1, r24	; 0x01
     520:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	28 2f       	mov	r18, r24
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	3c 83       	std	Y+4, r19	; 0x04
     52a:	2b 83       	std	Y+3, r18	; 0x03
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	83 36       	cpi	r24, 0x63	; 99
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <init_out_pin+0x26>
     536:	4b c0       	rjmp	.+150    	; 0x5ce <init_out_pin+0xbc>
     538:	2b 81       	ldd	r18, Y+3	; 0x03
     53a:	3c 81       	ldd	r19, Y+4	; 0x04
     53c:	24 36       	cpi	r18, 0x64	; 100
     53e:	31 05       	cpc	r19, r1
     540:	5c f4       	brge	.+22     	; 0x558 <init_out_pin+0x46>
     542:	8b 81       	ldd	r24, Y+3	; 0x03
     544:	9c 81       	ldd	r25, Y+4	; 0x04
     546:	81 36       	cpi	r24, 0x61	; 97
     548:	91 05       	cpc	r25, r1
     54a:	c9 f0       	breq	.+50     	; 0x57e <init_out_pin+0x6c>
     54c:	2b 81       	ldd	r18, Y+3	; 0x03
     54e:	3c 81       	ldd	r19, Y+4	; 0x04
     550:	22 36       	cpi	r18, 0x62	; 98
     552:	31 05       	cpc	r19, r1
     554:	41 f1       	breq	.+80     	; 0x5a6 <init_out_pin+0x94>
     556:	8a c0       	rjmp	.+276    	; 0x66c <init_out_pin+0x15a>
     558:	8b 81       	ldd	r24, Y+3	; 0x03
     55a:	9c 81       	ldd	r25, Y+4	; 0x04
     55c:	85 36       	cpi	r24, 0x65	; 101
     55e:	91 05       	cpc	r25, r1
     560:	09 f4       	brne	.+2      	; 0x564 <init_out_pin+0x52>
     562:	5d c0       	rjmp	.+186    	; 0x61e <init_out_pin+0x10c>
     564:	2b 81       	ldd	r18, Y+3	; 0x03
     566:	3c 81       	ldd	r19, Y+4	; 0x04
     568:	25 36       	cpi	r18, 0x65	; 101
     56a:	31 05       	cpc	r19, r1
     56c:	0c f4       	brge	.+2      	; 0x570 <init_out_pin+0x5e>
     56e:	43 c0       	rjmp	.+134    	; 0x5f6 <init_out_pin+0xe4>
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	9c 81       	ldd	r25, Y+4	; 0x04
     574:	86 36       	cpi	r24, 0x66	; 102
     576:	91 05       	cpc	r25, r1
     578:	09 f4       	brne	.+2      	; 0x57c <init_out_pin+0x6a>
     57a:	65 c0       	rjmp	.+202    	; 0x646 <init_out_pin+0x134>
     57c:	77 c0       	rjmp	.+238    	; 0x66c <init_out_pin+0x15a>
	{
		case ('a'):
			DDRA |= (0x01 << pin);
     57e:	aa e3       	ldi	r26, 0x3A	; 58
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	ea e3       	ldi	r30, 0x3A	; 58
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	48 2f       	mov	r20, r24
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	02 2e       	mov	r0, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <init_out_pin+0x8a>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <init_out_pin+0x86>
     5a0:	84 2b       	or	r24, r20
     5a2:	8c 93       	st	X, r24
     5a4:	63 c0       	rjmp	.+198    	; 0x66c <init_out_pin+0x15a>
			break;
		case ('b'):
			DDRB |= (0x01 << pin);
     5a6:	a7 e3       	ldi	r26, 0x37	; 55
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e7 e3       	ldi	r30, 0x37	; 55
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	48 2f       	mov	r20, r24
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 2e       	mov	r0, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <init_out_pin+0xb2>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <init_out_pin+0xae>
     5c8:	84 2b       	or	r24, r20
     5ca:	8c 93       	st	X, r24
     5cc:	4f c0       	rjmp	.+158    	; 0x66c <init_out_pin+0x15a>
			break;
		case ('c'):
			DDRC |= (0x01 << pin);
     5ce:	a4 e3       	ldi	r26, 0x34	; 52
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	e4 e3       	ldi	r30, 0x34	; 52
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	48 2f       	mov	r20, r24
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	28 2f       	mov	r18, r24
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	02 2e       	mov	r0, r18
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <init_out_pin+0xda>
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	0a 94       	dec	r0
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <init_out_pin+0xd6>
     5f0:	84 2b       	or	r24, r20
     5f2:	8c 93       	st	X, r24
     5f4:	3b c0       	rjmp	.+118    	; 0x66c <init_out_pin+0x15a>
			break;
		case ('d'):
			DDRD |= (0x01 << pin);
     5f6:	a1 e3       	ldi	r26, 0x31	; 49
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e3       	ldi	r30, 0x31	; 49
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	48 2f       	mov	r20, r24
     602:	8a 81       	ldd	r24, Y+2	; 0x02
     604:	28 2f       	mov	r18, r24
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 2e       	mov	r0, r18
     60e:	02 c0       	rjmp	.+4      	; 0x614 <init_out_pin+0x102>
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	0a 94       	dec	r0
     616:	e2 f7       	brpl	.-8      	; 0x610 <init_out_pin+0xfe>
     618:	84 2b       	or	r24, r20
     61a:	8c 93       	st	X, r24
     61c:	27 c0       	rjmp	.+78     	; 0x66c <init_out_pin+0x15a>
			break;
		case ('e'):
			DDRE |= (0x01 << pin);
     61e:	a2 e2       	ldi	r26, 0x22	; 34
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e2 e2       	ldi	r30, 0x22	; 34
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	48 2f       	mov	r20, r24
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	02 2e       	mov	r0, r18
     636:	02 c0       	rjmp	.+4      	; 0x63c <init_out_pin+0x12a>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	0a 94       	dec	r0
     63e:	e2 f7       	brpl	.-8      	; 0x638 <init_out_pin+0x126>
     640:	84 2b       	or	r24, r20
     642:	8c 93       	st	X, r24
     644:	13 c0       	rjmp	.+38     	; 0x66c <init_out_pin+0x15a>
			break;
		case ('f'):
			DDRF |= (0x01 << pin);
     646:	a1 e6       	ldi	r26, 0x61	; 97
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e1 e6       	ldi	r30, 0x61	; 97
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	48 2f       	mov	r20, r24
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 2e       	mov	r0, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <init_out_pin+0x152>
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <init_out_pin+0x14e>
     668:	84 2b       	or	r24, r20
     66a:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <init_in_pin>:

void init_in_pin(char port, char pin)
{
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <init_in_pin+0x6>
     680:	00 d0       	rcall	.+0      	; 0x682 <init_in_pin+0x8>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	28 2f       	mov	r18, r24
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	3c 83       	std	Y+4, r19	; 0x04
     692:	2b 83       	std	Y+3, r18	; 0x03
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	83 36       	cpi	r24, 0x63	; 99
     69a:	91 05       	cpc	r25, r1
     69c:	09 f4       	brne	.+2      	; 0x6a0 <init_in_pin+0x26>
     69e:	4d c0       	rjmp	.+154    	; 0x73a <init_in_pin+0xc0>
     6a0:	2b 81       	ldd	r18, Y+3	; 0x03
     6a2:	3c 81       	ldd	r19, Y+4	; 0x04
     6a4:	24 36       	cpi	r18, 0x64	; 100
     6a6:	31 05       	cpc	r19, r1
     6a8:	5c f4       	brge	.+22     	; 0x6c0 <init_in_pin+0x46>
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	81 36       	cpi	r24, 0x61	; 97
     6b0:	91 05       	cpc	r25, r1
     6b2:	c9 f0       	breq	.+50     	; 0x6e6 <init_in_pin+0x6c>
     6b4:	2b 81       	ldd	r18, Y+3	; 0x03
     6b6:	3c 81       	ldd	r19, Y+4	; 0x04
     6b8:	22 36       	cpi	r18, 0x62	; 98
     6ba:	31 05       	cpc	r19, r1
     6bc:	49 f1       	breq	.+82     	; 0x710 <init_in_pin+0x96>
     6be:	90 c0       	rjmp	.+288    	; 0x7e0 <init_in_pin+0x166>
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	9c 81       	ldd	r25, Y+4	; 0x04
     6c4:	85 36       	cpi	r24, 0x65	; 101
     6c6:	91 05       	cpc	r25, r1
     6c8:	09 f4       	brne	.+2      	; 0x6cc <init_in_pin+0x52>
     6ca:	61 c0       	rjmp	.+194    	; 0x78e <init_in_pin+0x114>
     6cc:	2b 81       	ldd	r18, Y+3	; 0x03
     6ce:	3c 81       	ldd	r19, Y+4	; 0x04
     6d0:	25 36       	cpi	r18, 0x65	; 101
     6d2:	31 05       	cpc	r19, r1
     6d4:	0c f4       	brge	.+2      	; 0x6d8 <init_in_pin+0x5e>
     6d6:	46 c0       	rjmp	.+140    	; 0x764 <init_in_pin+0xea>
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	86 36       	cpi	r24, 0x66	; 102
     6de:	91 05       	cpc	r25, r1
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <init_in_pin+0x6a>
     6e2:	6a c0       	rjmp	.+212    	; 0x7b8 <init_in_pin+0x13e>
     6e4:	7d c0       	rjmp	.+250    	; 0x7e0 <init_in_pin+0x166>
	{
		case ('a'):
			DDRA &= ~(0x01 << pin);
     6e6:	aa e3       	ldi	r26, 0x3A	; 58
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	ea e3       	ldi	r30, 0x3A	; 58
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	48 2f       	mov	r20, r24
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	28 2f       	mov	r18, r24
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 2e       	mov	r0, r18
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <init_in_pin+0x8a>
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	0a 94       	dec	r0
     706:	e2 f7       	brpl	.-8      	; 0x700 <init_in_pin+0x86>
     708:	80 95       	com	r24
     70a:	84 23       	and	r24, r20
     70c:	8c 93       	st	X, r24
     70e:	68 c0       	rjmp	.+208    	; 0x7e0 <init_in_pin+0x166>
			break;
		case ('b'):
			DDRB &= ~(0x01 << pin);
     710:	a7 e3       	ldi	r26, 0x37	; 55
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	e7 e3       	ldi	r30, 0x37	; 55
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	48 2f       	mov	r20, r24
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	02 2e       	mov	r0, r18
     728:	02 c0       	rjmp	.+4      	; 0x72e <init_in_pin+0xb4>
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	0a 94       	dec	r0
     730:	e2 f7       	brpl	.-8      	; 0x72a <init_in_pin+0xb0>
     732:	80 95       	com	r24
     734:	84 23       	and	r24, r20
     736:	8c 93       	st	X, r24
     738:	53 c0       	rjmp	.+166    	; 0x7e0 <init_in_pin+0x166>
			break;
		case ('c'):
			DDRC &= ~(0x01 << pin);
     73a:	a4 e3       	ldi	r26, 0x34	; 52
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e4 e3       	ldi	r30, 0x34	; 52
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	48 2f       	mov	r20, r24
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	28 2f       	mov	r18, r24
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	02 2e       	mov	r0, r18
     752:	02 c0       	rjmp	.+4      	; 0x758 <init_in_pin+0xde>
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	0a 94       	dec	r0
     75a:	e2 f7       	brpl	.-8      	; 0x754 <init_in_pin+0xda>
     75c:	80 95       	com	r24
     75e:	84 23       	and	r24, r20
     760:	8c 93       	st	X, r24
     762:	3e c0       	rjmp	.+124    	; 0x7e0 <init_in_pin+0x166>
			break;
		case ('d'):
			DDRD &= ~(0x01 << pin);
     764:	a1 e3       	ldi	r26, 0x31	; 49
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e1 e3       	ldi	r30, 0x31	; 49
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	48 2f       	mov	r20, r24
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	28 2f       	mov	r18, r24
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	02 2e       	mov	r0, r18
     77c:	02 c0       	rjmp	.+4      	; 0x782 <init_in_pin+0x108>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <init_in_pin+0x104>
     786:	80 95       	com	r24
     788:	84 23       	and	r24, r20
     78a:	8c 93       	st	X, r24
     78c:	29 c0       	rjmp	.+82     	; 0x7e0 <init_in_pin+0x166>
			break;
		case ('e'):
			DDRE &= ~(0x01 << pin);
     78e:	a2 e2       	ldi	r26, 0x22	; 34
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e2 e2       	ldi	r30, 0x22	; 34
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	48 2f       	mov	r20, r24
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	28 2f       	mov	r18, r24
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 2e       	mov	r0, r18
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <init_in_pin+0x132>
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	0a 94       	dec	r0
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <init_in_pin+0x12e>
     7b0:	80 95       	com	r24
     7b2:	84 23       	and	r24, r20
     7b4:	8c 93       	st	X, r24
     7b6:	14 c0       	rjmp	.+40     	; 0x7e0 <init_in_pin+0x166>
			break;
		case ('f'):
			DDRF &= ~(0x01 << pin);
     7b8:	a1 e6       	ldi	r26, 0x61	; 97
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	e1 e6       	ldi	r30, 0x61	; 97
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	48 2f       	mov	r20, r24
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	28 2f       	mov	r18, r24
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	02 2e       	mov	r0, r18
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <init_in_pin+0x15c>
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	0a 94       	dec	r0
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <init_in_pin+0x158>
     7da:	80 95       	com	r24
     7dc:	84 23       	and	r24, r20
     7de:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <init_out_port>:

void init_out_port(char port)
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	29 97       	sbiw	r28, 0x09	; 9
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	39 87       	std	Y+9, r19	; 0x09
     80c:	28 87       	std	Y+8, r18	; 0x08
     80e:	88 85       	ldd	r24, Y+8	; 0x08
     810:	99 85       	ldd	r25, Y+9	; 0x09
     812:	83 36       	cpi	r24, 0x63	; 99
     814:	91 05       	cpc	r25, r1
     816:	81 f1       	breq	.+96     	; 0x878 <init_out_port+0x8a>
     818:	28 85       	ldd	r18, Y+8	; 0x08
     81a:	39 85       	ldd	r19, Y+9	; 0x09
     81c:	24 36       	cpi	r18, 0x64	; 100
     81e:	31 05       	cpc	r19, r1
     820:	5c f4       	brge	.+22     	; 0x838 <init_out_port+0x4a>
     822:	88 85       	ldd	r24, Y+8	; 0x08
     824:	99 85       	ldd	r25, Y+9	; 0x09
     826:	81 36       	cpi	r24, 0x61	; 97
     828:	91 05       	cpc	r25, r1
     82a:	b1 f0       	breq	.+44     	; 0x858 <init_out_port+0x6a>
     82c:	28 85       	ldd	r18, Y+8	; 0x08
     82e:	39 85       	ldd	r19, Y+9	; 0x09
     830:	22 36       	cpi	r18, 0x62	; 98
     832:	31 05       	cpc	r19, r1
     834:	c9 f0       	breq	.+50     	; 0x868 <init_out_port+0x7a>
     836:	3f c0       	rjmp	.+126    	; 0x8b6 <init_out_port+0xc8>
     838:	88 85       	ldd	r24, Y+8	; 0x08
     83a:	99 85       	ldd	r25, Y+9	; 0x09
     83c:	85 36       	cpi	r24, 0x65	; 101
     83e:	91 05       	cpc	r25, r1
     840:	59 f1       	breq	.+86     	; 0x898 <init_out_port+0xaa>
     842:	28 85       	ldd	r18, Y+8	; 0x08
     844:	39 85       	ldd	r19, Y+9	; 0x09
     846:	25 36       	cpi	r18, 0x65	; 101
     848:	31 05       	cpc	r19, r1
     84a:	f4 f0       	brlt	.+60     	; 0x888 <init_out_port+0x9a>
     84c:	88 85       	ldd	r24, Y+8	; 0x08
     84e:	99 85       	ldd	r25, Y+9	; 0x09
     850:	86 36       	cpi	r24, 0x66	; 102
     852:	91 05       	cpc	r25, r1
     854:	49 f1       	breq	.+82     	; 0x8a8 <init_out_port+0xba>
     856:	2f c0       	rjmp	.+94     	; 0x8b6 <init_out_port+0xc8>
	{
		case ('a'):
			DDRA |= 0xff;
     858:	ea e3       	ldi	r30, 0x3A	; 58
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	90 81       	ld	r25, Z
     85e:	ea e3       	ldi	r30, 0x3A	; 58
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	80 83       	st	Z, r24
     866:	27 c0       	rjmp	.+78     	; 0x8b6 <init_out_port+0xc8>
			break;
		case ('b'):
			DDRB |= 0xff;
     868:	e7 e3       	ldi	r30, 0x37	; 55
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	20 81       	ld	r18, Z
     86e:	e7 e3       	ldi	r30, 0x37	; 55
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	80 83       	st	Z, r24
     876:	1f c0       	rjmp	.+62     	; 0x8b6 <init_out_port+0xc8>
			break;
		case ('c'):
			DDRC |= 0xff;
     878:	e4 e3       	ldi	r30, 0x34	; 52
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	30 81       	ld	r19, Z
     87e:	e4 e3       	ldi	r30, 0x34	; 52
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	80 83       	st	Z, r24
     886:	17 c0       	rjmp	.+46     	; 0x8b6 <init_out_port+0xc8>
			break;
		case ('d'):
			DDRD |= 0xff;
     888:	e1 e3       	ldi	r30, 0x31	; 49
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	e1 e3       	ldi	r30, 0x31	; 49
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	80 83       	st	Z, r24
     896:	0f c0       	rjmp	.+30     	; 0x8b6 <init_out_port+0xc8>
			break;
		case ('e'):
			DDRE |= 0xff;
     898:	e2 e2       	ldi	r30, 0x22	; 34
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	90 81       	ld	r25, Z
     89e:	e2 e2       	ldi	r30, 0x22	; 34
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	80 83       	st	Z, r24
     8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <init_out_port+0xc8>
			break;
		case ('f'):
			DDRF |= 0xff;
     8a8:	e1 e6       	ldi	r30, 0x61	; 97
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	20 81       	ld	r18, Z
     8ae:	e1 e6       	ldi	r30, 0x61	; 97
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     8b6:	29 96       	adiw	r28, 0x09	; 9
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	cf 91       	pop	r28
     8c4:	df 91       	pop	r29
     8c6:	08 95       	ret

000008c8 <init_in_port>:

void init_in_port(char port)
{
     8c8:	df 93       	push	r29
     8ca:	cf 93       	push	r28
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	29 97       	sbiw	r28, 0x09	; 9
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	28 2f       	mov	r18, r24
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	39 87       	std	Y+9, r19	; 0x09
     8e6:	28 87       	std	Y+8, r18	; 0x08
     8e8:	88 85       	ldd	r24, Y+8	; 0x08
     8ea:	99 85       	ldd	r25, Y+9	; 0x09
     8ec:	83 36       	cpi	r24, 0x63	; 99
     8ee:	91 05       	cpc	r25, r1
     8f0:	71 f1       	breq	.+92     	; 0x94e <init_in_port+0x86>
     8f2:	28 85       	ldd	r18, Y+8	; 0x08
     8f4:	39 85       	ldd	r19, Y+9	; 0x09
     8f6:	24 36       	cpi	r18, 0x64	; 100
     8f8:	31 05       	cpc	r19, r1
     8fa:	5c f4       	brge	.+22     	; 0x912 <init_in_port+0x4a>
     8fc:	88 85       	ldd	r24, Y+8	; 0x08
     8fe:	99 85       	ldd	r25, Y+9	; 0x09
     900:	81 36       	cpi	r24, 0x61	; 97
     902:	91 05       	cpc	r25, r1
     904:	b1 f0       	breq	.+44     	; 0x932 <init_in_port+0x6a>
     906:	28 85       	ldd	r18, Y+8	; 0x08
     908:	39 85       	ldd	r19, Y+9	; 0x09
     90a:	22 36       	cpi	r18, 0x62	; 98
     90c:	31 05       	cpc	r19, r1
     90e:	c1 f0       	breq	.+48     	; 0x940 <init_in_port+0x78>
     910:	39 c0       	rjmp	.+114    	; 0x984 <init_in_port+0xbc>
     912:	88 85       	ldd	r24, Y+8	; 0x08
     914:	99 85       	ldd	r25, Y+9	; 0x09
     916:	85 36       	cpi	r24, 0x65	; 101
     918:	91 05       	cpc	r25, r1
     91a:	39 f1       	breq	.+78     	; 0x96a <init_in_port+0xa2>
     91c:	28 85       	ldd	r18, Y+8	; 0x08
     91e:	39 85       	ldd	r19, Y+9	; 0x09
     920:	25 36       	cpi	r18, 0x65	; 101
     922:	31 05       	cpc	r19, r1
     924:	dc f0       	brlt	.+54     	; 0x95c <init_in_port+0x94>
     926:	88 85       	ldd	r24, Y+8	; 0x08
     928:	99 85       	ldd	r25, Y+9	; 0x09
     92a:	86 36       	cpi	r24, 0x66	; 102
     92c:	91 05       	cpc	r25, r1
     92e:	21 f1       	breq	.+72     	; 0x978 <init_in_port+0xb0>
     930:	29 c0       	rjmp	.+82     	; 0x984 <init_in_port+0xbc>
	{
		case ('a'):
			DDRA &= 0x00;
     932:	ea e3       	ldi	r30, 0x3A	; 58
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	90 81       	ld	r25, Z
     938:	ea e3       	ldi	r30, 0x3A	; 58
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	10 82       	st	Z, r1
     93e:	22 c0       	rjmp	.+68     	; 0x984 <init_in_port+0xbc>
			break;
		case ('b'):
			DDRB &= 0x00;
     940:	e7 e3       	ldi	r30, 0x37	; 55
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	20 81       	ld	r18, Z
     946:	e7 e3       	ldi	r30, 0x37	; 55
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	10 82       	st	Z, r1
     94c:	1b c0       	rjmp	.+54     	; 0x984 <init_in_port+0xbc>
			break;
		case ('c'):
			DDRC &= 0x00;
     94e:	e4 e3       	ldi	r30, 0x34	; 52
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	30 81       	ld	r19, Z
     954:	e4 e3       	ldi	r30, 0x34	; 52
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	10 82       	st	Z, r1
     95a:	14 c0       	rjmp	.+40     	; 0x984 <init_in_port+0xbc>
			break;
		case ('d'):
			DDRD &= 0x00;
     95c:	e1 e3       	ldi	r30, 0x31	; 49
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	e1 e3       	ldi	r30, 0x31	; 49
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	10 82       	st	Z, r1
     968:	0d c0       	rjmp	.+26     	; 0x984 <init_in_port+0xbc>
			break;
		case ('e'):
			DDRE &= 0x00;
     96a:	e2 e2       	ldi	r30, 0x22	; 34
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	90 81       	ld	r25, Z
     970:	e2 e2       	ldi	r30, 0x22	; 34
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	10 82       	st	Z, r1
     976:	06 c0       	rjmp	.+12     	; 0x984 <init_in_port+0xbc>
			break;
		case ('f'):
			DDRF &= 0x00;
     978:	e1 e6       	ldi	r30, 0x61	; 97
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	20 81       	ld	r18, Z
     97e:	e1 e6       	ldi	r30, 0x61	; 97
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	10 82       	st	Z, r1
			break;
		default:
			break;
	}
}
     984:	29 96       	adiw	r28, 0x09	; 9
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	08 95       	ret

00000996 <USART_Init>:

void USART_Init( unsigned int baud )
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	00 d0       	rcall	.+0      	; 0x99c <USART_Init+0x6>
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	9a 83       	std	Y+2, r25	; 0x02
     9a2:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR0H = (unsigned char)(baud>>8);
     9a4:	e0 e9       	ldi	r30, 0x90	; 144
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	89 2f       	mov	r24, r25
     9ae:	99 27       	eor	r25, r25
     9b0:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)baud;
     9b2:	e9 e2       	ldi	r30, 0x29	; 41
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
     9ba:	ea e2       	ldi	r30, 0x2A	; 42
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	88 e1       	ldi	r24, 0x18	; 24
     9c0:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
     9c2:	e5 e9       	ldi	r30, 0x95	; 149
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	8e e0       	ldi	r24, 0x0E	; 14
     9c8:	80 83       	st	Z, r24
}
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <init_serial>:

void init_serial(void)
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
//	UBRR0H = 0;		//UBRR to 15 for 115200bps with 20Mhz
//	UBRR0L = 21;

	UCSR0A=0x00;
     9dc:	eb e2       	ldi	r30, 0x2B	; 43
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	10 82       	st	Z, r1
	UCSR0B=0x18;
     9e2:	ea e2       	ldi	r30, 0x2A	; 42
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	88 e1       	ldi	r24, 0x18	; 24
     9e8:	80 83       	st	Z, r24
	UCSR0C=0x86;
     9ea:	e5 e9       	ldi	r30, 0x95	; 149
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	86 e8       	ldi	r24, 0x86	; 134
     9f0:	80 83       	st	Z, r24
	UBRR0H=0x00;
     9f2:	e0 e9       	ldi	r30, 0x90	; 144
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	10 82       	st	Z, r1
	UBRR0L=0x08;
     9f8:	e9 e2       	ldi	r30, 0x29	; 41
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	80 83       	st	Z, r24
//	UBRR0L=0x08;
	
/*	UCSR0A = 0x62;	// 
	UCSR0B = 0x18;	// interrupts disabled, transmitter and reciever enabled, 8bit, no 9th bit
	UCSR0C = 0x86; 	// no parity, asynchronous, 1 stopbit, 8bit number*/
}
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	08 95       	ret

00000a06 <init_in_ana>:

void init_in_ana(void)
{
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x40;	//connect to pin 0
     a0e:	e7 e2       	ldi	r30, 0x27	; 39
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 e4       	ldi	r24, 0x40	; 64
     a14:	80 83       	st	Z, r24
	ADCSRA = 0x9e;	//enable ad converter
     a16:	e6 e2       	ldi	r30, 0x26	; 38
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	8e e9       	ldi	r24, 0x9E	; 158
     a1c:	80 83       	st	Z, r24
	ADCSRA |= 0x60;	//start converter
     a1e:	a6 e2       	ldi	r26, 0x26	; 38
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e6 e2       	ldi	r30, 0x26	; 38
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	80 66       	ori	r24, 0x60	; 96
     a2a:	8c 93       	st	X, r24
}
     a2c:	cf 91       	pop	r28
     a2e:	df 91       	pop	r29
     a30:	08 95       	ret

00000a32 <get_in_pin>:

unsigned char get_in_pin(unsigned char port, unsigned char pin)
{
     a32:	df 93       	push	r29
     a34:	cf 93       	push	r28
     a36:	00 d0       	rcall	.+0      	; 0xa38 <get_in_pin+0x6>
     a38:	00 d0       	rcall	.+0      	; 0xa3a <get_in_pin+0x8>
     a3a:	0f 92       	push	r0
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	8a 83       	std	Y+2, r24	; 0x02
     a42:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char c = 0;
     a44:	19 82       	std	Y+1, r1	; 0x01

	switch(port)
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	3d 83       	std	Y+5, r19	; 0x05
     a4e:	2c 83       	std	Y+4, r18	; 0x04
     a50:	8c 81       	ldd	r24, Y+4	; 0x04
     a52:	9d 81       	ldd	r25, Y+5	; 0x05
     a54:	83 36       	cpi	r24, 0x63	; 99
     a56:	91 05       	cpc	r25, r1
     a58:	51 f1       	breq	.+84     	; 0xaae <get_in_pin+0x7c>
     a5a:	2c 81       	ldd	r18, Y+4	; 0x04
     a5c:	3d 81       	ldd	r19, Y+5	; 0x05
     a5e:	24 36       	cpi	r18, 0x64	; 100
     a60:	31 05       	cpc	r19, r1
     a62:	5c f4       	brge	.+22     	; 0xa7a <get_in_pin+0x48>
     a64:	8c 81       	ldd	r24, Y+4	; 0x04
     a66:	9d 81       	ldd	r25, Y+5	; 0x05
     a68:	81 36       	cpi	r24, 0x61	; 97
     a6a:	91 05       	cpc	r25, r1
     a6c:	b1 f0       	breq	.+44     	; 0xa9a <get_in_pin+0x68>
     a6e:	2c 81       	ldd	r18, Y+4	; 0x04
     a70:	3d 81       	ldd	r19, Y+5	; 0x05
     a72:	22 36       	cpi	r18, 0x62	; 98
     a74:	31 05       	cpc	r19, r1
     a76:	b1 f0       	breq	.+44     	; 0xaa4 <get_in_pin+0x72>
     a78:	2d c0       	rjmp	.+90     	; 0xad4 <get_in_pin+0xa2>
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	9d 81       	ldd	r25, Y+5	; 0x05
     a7e:	85 36       	cpi	r24, 0x65	; 101
     a80:	91 05       	cpc	r25, r1
     a82:	f9 f0       	breq	.+62     	; 0xac2 <get_in_pin+0x90>
     a84:	2c 81       	ldd	r18, Y+4	; 0x04
     a86:	3d 81       	ldd	r19, Y+5	; 0x05
     a88:	25 36       	cpi	r18, 0x65	; 101
     a8a:	31 05       	cpc	r19, r1
     a8c:	ac f0       	brlt	.+42     	; 0xab8 <get_in_pin+0x86>
     a8e:	8c 81       	ldd	r24, Y+4	; 0x04
     a90:	9d 81       	ldd	r25, Y+5	; 0x05
     a92:	86 36       	cpi	r24, 0x66	; 102
     a94:	91 05       	cpc	r25, r1
     a96:	d1 f0       	breq	.+52     	; 0xacc <get_in_pin+0x9a>
     a98:	1d c0       	rjmp	.+58     	; 0xad4 <get_in_pin+0xa2>
	{
		case ('a'):
			c = PINA;
     a9a:	e9 e3       	ldi	r30, 0x39	; 57
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	89 83       	std	Y+1, r24	; 0x01
     aa2:	18 c0       	rjmp	.+48     	; 0xad4 <get_in_pin+0xa2>
			break;
		case ('b'):
			c = PINB;
     aa4:	e6 e3       	ldi	r30, 0x36	; 54
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	13 c0       	rjmp	.+38     	; 0xad4 <get_in_pin+0xa2>
			break;
		case ('c'):
			c = PINC;
     aae:	e3 e3       	ldi	r30, 0x33	; 51
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	0e c0       	rjmp	.+28     	; 0xad4 <get_in_pin+0xa2>
			break;
		case ('d'):
			c = PIND;
     ab8:	e0 e3       	ldi	r30, 0x30	; 48
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	09 c0       	rjmp	.+18     	; 0xad4 <get_in_pin+0xa2>
			break;
		case ('e'):
			c = PINE;
     ac2:	e1 e2       	ldi	r30, 0x21	; 33
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	04 c0       	rjmp	.+8      	; 0xad4 <get_in_pin+0xa2>
			break;
		case ('f'):
			c = PINF;
     acc:	e0 e2       	ldi	r30, 0x20	; 32
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}	
	c &= (0x01 << pin);
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 2e       	mov	r0, r18
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <get_in_pin+0xb4>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <get_in_pin+0xb0>
     aea:	98 2f       	mov	r25, r24
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	89 23       	and	r24, r25
     af0:	89 83       	std	Y+1, r24	; 0x01
	
	return c;
     af2:	89 81       	ldd	r24, Y+1	; 0x01
}
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	08 95       	ret

00000b04 <read_adc>:

unsigned int read_adc(unsigned char adc_input)                  // Read Result ADC
{
     b04:	df 93       	push	r29
     b06:	cf 93       	push	r28
     b08:	0f 92       	push	r0
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=adc_input|ADC_VREF_TYPE;
     b10:	e7 e2       	ldi	r30, 0x27	; 39
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	80 6c       	ori	r24, 0xC0	; 192
     b18:	80 83       	st	Z, r24
	
	ADCSRA|=0x40;                                                 // Start the AD conversion
     b1a:	a6 e2       	ldi	r26, 0x26	; 38
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e6 e2       	ldi	r30, 0x26	; 38
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	80 64       	ori	r24, 0x40	; 64
     b26:	8c 93       	st	X, r24
	
	while ((ADCSRA & 0x10)==0);                                   // Wait for the AD conversion to complete
     b28:	e6 e2       	ldi	r30, 0x26	; 38
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	80 71       	andi	r24, 0x10	; 16
     b34:	90 70       	andi	r25, 0x00	; 0
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	b9 f3       	breq	.-18     	; 0xb28 <read_adc+0x24>
	ADCSRA|=0x10;
     b3a:	a6 e2       	ldi	r26, 0x26	; 38
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e6 e2       	ldi	r30, 0x26	; 38
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	80 61       	ori	r24, 0x10	; 16
     b46:	8c 93       	st	X, r24
	
	return ADCW;
     b48:	e4 e2       	ldi	r30, 0x24	; 36
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	91 81       	ldd	r25, Z+1	; 0x01
}
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <g_draw_horizontal_line>:
 * the specified length.
 * @param x The x coordinante of the line's origin.
 * @param y The y coordinante of the line's origin.
 * @param length The length of the line, in pixels.
 */
void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	28 97       	sbiw	r28, 0x08	; 8
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	9c 83       	std	Y+4, r25	; 0x04
     b6e:	8b 83       	std	Y+3, r24	; 0x03
     b70:	7e 83       	std	Y+6, r23	; 0x06
     b72:	6d 83       	std	Y+5, r22	; 0x05
     b74:	58 87       	std	Y+8, r21	; 0x08
     b76:	4f 83       	std	Y+7, r20	; 0x07
	unsigned short i;
	for (i = x; i <= x+length; i++)
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	0d c0       	rjmp	.+26     	; 0xb9c <g_draw_horizontal_line+0x44>
		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	2d 81       	ldd	r18, Y+5	; 0x05
     b88:	3e 81       	ldd	r19, Y+6	; 0x06
     b8a:	b9 01       	movw	r22, r18
     b8c:	4f ef       	ldi	r20, 0xFF	; 255
     b8e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
 * @param y The y coordinante of the line's origin.
 * @param length The length of the line, in pixels.
 */
void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
	unsigned short i;
	for (i = x; i <= x+length; i++)
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9a 83       	std	Y+2, r25	; 0x02
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	2b 81       	ldd	r18, Y+3	; 0x03
     b9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ba0:	8f 81       	ldd	r24, Y+7	; 0x07
     ba2:	98 85       	ldd	r25, Y+8	; 0x08
     ba4:	28 0f       	add	r18, r24
     ba6:	39 1f       	adc	r19, r25
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	40 f7       	brcc	.-48     	; 0xb82 <g_draw_horizontal_line+0x2a>
		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
}
     bb2:	28 96       	adiw	r28, 0x08	; 8
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <g_draw_vertical_line>:
 * the specified length.
 * @param x The x coordinante of the line's origin.
 * @param y The y coordinante of the line's origin.
 * @param length The length of the line, in pixels.
 */
void g_draw_vertical_line(unsigned short x, unsigned short y, unsigned short length) {
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	9c 83       	std	Y+4, r25	; 0x04
     bda:	8b 83       	std	Y+3, r24	; 0x03
     bdc:	7e 83       	std	Y+6, r23	; 0x06
     bde:	6d 83       	std	Y+5, r22	; 0x05
     be0:	58 87       	std	Y+8, r21	; 0x08
     be2:	4f 83       	std	Y+7, r20	; 0x07
	unsigned short i;
	for (i = y; i < y+length; i++)
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	0d c0       	rjmp	.+26     	; 0xc08 <g_draw_vertical_line+0x44>
		lcd_graphics_plot_pixel(x, i, PIXEL_ON);
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	29 81       	ldd	r18, Y+1	; 0x01
     bf4:	3a 81       	ldd	r19, Y+2	; 0x02
     bf6:	b9 01       	movw	r22, r18
     bf8:	4f ef       	ldi	r20, 0xFF	; 255
     bfa:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
 * @param y The y coordinante of the line's origin.
 * @param length The length of the line, in pixels.
 */
void g_draw_vertical_line(unsigned short x, unsigned short y, unsigned short length) {
	unsigned short i;
	for (i = y; i < y+length; i++)
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	2d 81       	ldd	r18, Y+5	; 0x05
     c0a:	3e 81       	ldd	r19, Y+6	; 0x06
     c0c:	8f 81       	ldd	r24, Y+7	; 0x07
     c0e:	98 85       	ldd	r25, Y+8	; 0x08
     c10:	28 0f       	add	r18, r24
     c12:	39 1f       	adc	r19, r25
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	82 17       	cp	r24, r18
     c1a:	93 07       	cpc	r25, r19
     c1c:	40 f3       	brcs	.-48     	; 0xbee <g_draw_vertical_line+0x2a>
		lcd_graphics_plot_pixel(x, i, PIXEL_ON);
}
     c1e:	28 96       	adiw	r28, 0x08	; 8
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <g_draw_rectangle>:
 * @param x The x coordinante of the rectangle's origin.
 * @param y The y coordinante of the rectangle's origin.
 * @param width The width of the rectangle, in pixels.
 * @param height The height of the rectangle, in pixels.
 */ 
void g_draw_rectangle(unsigned short x, unsigned short y, unsigned short width, unsigned short height) {
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	28 97       	sbiw	r28, 0x08	; 8
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	7c 83       	std	Y+4, r23	; 0x04
     c4a:	6b 83       	std	Y+3, r22	; 0x03
     c4c:	5e 83       	std	Y+6, r21	; 0x06
     c4e:	4d 83       	std	Y+5, r20	; 0x05
     c50:	38 87       	std	Y+8, r19	; 0x08
     c52:	2f 83       	std	Y+7, r18	; 0x07
	/* Adjust width and height because x and y coordinates start on 0,0 */
	width--;
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9e 83       	std	Y+6, r25	; 0x06
     c5c:	8d 83       	std	Y+5, r24	; 0x05
	height--;
     c5e:	8f 81       	ldd	r24, Y+7	; 0x07
     c60:	98 85       	ldd	r25, Y+8	; 0x08
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	98 87       	std	Y+8, r25	; 0x08
     c66:	8f 83       	std	Y+7, r24	; 0x07
	g_draw_horizontal_line(x, y, width);
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	2b 81       	ldd	r18, Y+3	; 0x03
     c6e:	3c 81       	ldd	r19, Y+4	; 0x04
     c70:	4d 81       	ldd	r20, Y+5	; 0x05
     c72:	5e 81       	ldd	r21, Y+6	; 0x06
     c74:	b9 01       	movw	r22, r18
     c76:	0e 94 ac 05 	call	0xb58	; 0xb58 <g_draw_horizontal_line>
	g_draw_vertical_line(x, y, height);
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	2b 81       	ldd	r18, Y+3	; 0x03
     c80:	3c 81       	ldd	r19, Y+4	; 0x04
     c82:	4f 81       	ldd	r20, Y+7	; 0x07
     c84:	58 85       	ldd	r21, Y+8	; 0x08
     c86:	b9 01       	movw	r22, r18
     c88:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <g_draw_vertical_line>
	g_draw_vertical_line(x+width, y, height);
     c8c:	29 81       	ldd	r18, Y+1	; 0x01
     c8e:	3a 81       	ldd	r19, Y+2	; 0x02
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	82 0f       	add	r24, r18
     c96:	93 1f       	adc	r25, r19
     c98:	2b 81       	ldd	r18, Y+3	; 0x03
     c9a:	3c 81       	ldd	r19, Y+4	; 0x04
     c9c:	4f 81       	ldd	r20, Y+7	; 0x07
     c9e:	58 85       	ldd	r21, Y+8	; 0x08
     ca0:	b9 01       	movw	r22, r18
     ca2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <g_draw_vertical_line>
	g_draw_horizontal_line(x, y+height, width);
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	8f 81       	ldd	r24, Y+7	; 0x07
     cac:	98 85       	ldd	r25, Y+8	; 0x08
     cae:	a9 01       	movw	r20, r18
     cb0:	48 0f       	add	r20, r24
     cb2:	59 1f       	adc	r21, r25
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	2d 81       	ldd	r18, Y+5	; 0x05
     cba:	3e 81       	ldd	r19, Y+6	; 0x06
     cbc:	ba 01       	movw	r22, r20
     cbe:	a9 01       	movw	r20, r18
     cc0:	0e 94 ac 05 	call	0xb58	; 0xb58 <g_draw_horizontal_line>
}
     cc4:	28 96       	adiw	r28, 0x08	; 8
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <g_draw_char>:
 * immediately).
 * @param x The x coordinate of the character's origin.
 * @param y The y coordinate of the character's origin.
 * @param character The ASCII character to draw.
 */
void g_draw_char(unsigned short x, unsigned short y, char character) {
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	28 97       	sbiw	r28, 0x08	; 8
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	9d 83       	std	Y+5, r25	; 0x05
     cec:	8c 83       	std	Y+4, r24	; 0x04
     cee:	7f 83       	std	Y+7, r23	; 0x07
     cf0:	6e 83       	std	Y+6, r22	; 0x06
     cf2:	48 87       	std	Y+8, r20	; 0x08
	unsigned char fontIndex, i, j;

	/* The 5x7 character set starts at the '!' character (ASCII index 
 	 * number 33) so we subtract 32 from the ASCII character to find the 
 	 * index in the 5x7 font table. */	
	fontIndex = character-32;
     cf4:	88 85       	ldd	r24, Y+8	; 0x08
     cf6:	80 52       	subi	r24, 0x20	; 32
     cf8:	8b 83       	std	Y+3, r24	; 0x03
	/* If the index is out of bounds, bail out */
	if (fontIndex > 94)
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	8f 35       	cpi	r24, 0x5F	; 95
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <g_draw_char+0x2c>
     d00:	55 c0       	rjmp	.+170    	; 0xdac <g_draw_char+0xd6>
		return;
	
	for (i = 0; i < FONT_WIDTH; i++) {
     d02:	1a 82       	std	Y+2, r1	; 0x02
     d04:	4f c0       	rjmp	.+158    	; 0xda4 <g_draw_char+0xce>
		for (j = 0; j < FONT_HEIGHT; j++) {
     d06:	19 82       	std	Y+1, r1	; 0x01
     d08:	41 c0       	rjmp	.+130    	; 0xd8c <g_draw_char+0xb6>
			/* Check if the bit/pixel is set, paint accoringly to 
 			 * the screen */
			if (Font5x7[FONT_WIDTH*fontIndex+i] & (1<<j))
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	c9 01       	movw	r24, r18
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	28 0f       	add	r18, r24
     d1c:	39 1f       	adc	r19, r25
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	82 0f       	add	r24, r18
     d26:	93 1f       	adc	r25, r19
     d28:	fc 01       	movw	r30, r24
     d2a:	e0 50       	subi	r30, 0x00	; 0
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	80 81       	ld	r24, Z
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a9 01       	movw	r20, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <g_draw_char+0x6c>
     d3e:	55 95       	asr	r21
     d40:	47 95       	ror	r20
     d42:	8a 95       	dec	r24
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <g_draw_char+0x68>
     d46:	ca 01       	movw	r24, r20
     d48:	81 70       	andi	r24, 0x01	; 1
     d4a:	90 70       	andi	r25, 0x00	; 0
     d4c:	88 23       	and	r24, r24
     d4e:	71 f0       	breq	.+28     	; 0xd6c <g_draw_char+0x96>
				lcd_graphics_plot_pixel(x, y+j, PIXEL_ON);
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	8e 81       	ldd	r24, Y+6	; 0x06
     d58:	9f 81       	ldd	r25, Y+7	; 0x07
     d5a:	28 0f       	add	r18, r24
     d5c:	39 1f       	adc	r19, r25
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	b9 01       	movw	r22, r18
     d64:	4f ef       	ldi	r20, 0xFF	; 255
     d66:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
     d6a:	0d c0       	rjmp	.+26     	; 0xd86 <g_draw_char+0xb0>
			else	
				lcd_graphics_plot_pixel(x, y+j, PIXEL_OFF);
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	28 0f       	add	r18, r24
     d78:	39 1f       	adc	r19, r25
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	b9 01       	movw	r22, r18
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
	/* If the index is out of bounds, bail out */
	if (fontIndex > 94)
		return;
	
	for (i = 0; i < FONT_WIDTH; i++) {
		for (j = 0; j < FONT_HEIGHT; j++) {
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	87 30       	cpi	r24, 0x07	; 7
     d90:	08 f4       	brcc	.+2      	; 0xd94 <g_draw_char+0xbe>
     d92:	bb cf       	rjmp	.-138    	; 0xd0a <g_draw_char+0x34>
				lcd_graphics_plot_pixel(x, y+j, PIXEL_ON);
			else	
				lcd_graphics_plot_pixel(x, y+j, PIXEL_OFF);
		}
		/* Move the LCD cursor through the font width as well */
		x++;
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	9d 83       	std	Y+5, r25	; 0x05
     d9c:	8c 83       	std	Y+4, r24	; 0x04
	fontIndex = character-32;
	/* If the index is out of bounds, bail out */
	if (fontIndex > 94)
		return;
	
	for (i = 0; i < FONT_WIDTH; i++) {
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	8a 83       	std	Y+2, r24	; 0x02
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	85 30       	cpi	r24, 0x05	; 5
     da8:	08 f4       	brcc	.+2      	; 0xdac <g_draw_char+0xd6>
     daa:	ad cf       	rjmp	.-166    	; 0xd06 <g_draw_char+0x30>
				lcd_graphics_plot_pixel(x, y+j, PIXEL_OFF);
		}
		/* Move the LCD cursor through the font width as well */
		x++;
	}
}
     dac:	28 96       	adiw	r28, 0x08	; 8
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <g_draw_string>:
 * Characters outside the 5x7 character set will not be drawn.
 * @param x The x coordinate of the string's first character's origin.
 * @param y The y coordinate of the string's first character's origin.
 * @param str The null-terminated ASCII string of characters.
 */
void g_draw_string(unsigned short x, unsigned short y, const char *str) {
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	28 97       	sbiw	r28, 0x08	; 8
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	9c 83       	std	Y+4, r25	; 0x04
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	7e 83       	std	Y+6, r23	; 0x06
     dd8:	6d 83       	std	Y+5, r22	; 0x05
     dda:	58 87       	std	Y+8, r21	; 0x08
     ddc:	4f 83       	std	Y+7, r20	; 0x07
	unsigned short origin_X;

	/* Preserve the origin X, in case of a new line */
	origin_X = x;
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	9a 83       	std	Y+2, r25	; 0x02
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	37 c0       	rjmp	.+110    	; 0xe56 <g_draw_string+0x98>

	/* Continue through the string until we encounter a null character */
	while (*str != '\0') {
		/* If the character is a newline, then prepare our x and y
		 * coordinates for the next character on the new line. */
		if (*str == '\n') {
     de8:	ef 81       	ldd	r30, Y+7	; 0x07
     dea:	f8 85       	ldd	r31, Y+8	; 0x08
     dec:	80 81       	ld	r24, Z
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	79 f4       	brne	.+30     	; 0xe10 <g_draw_string+0x52>
			/* Reset x to its origin */
			x = origin_X;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	9c 83       	std	Y+4, r25	; 0x04
     df8:	8b 83       	std	Y+3, r24	; 0x03
			/* Move y one character down */
			y += FONT_HEIGHT+1;
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	08 96       	adiw	r24, 0x08	; 8
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
		
			str++;
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	98 87       	std	Y+8, r25	; 0x08
     e0c:	8f 83       	std	Y+7, r24	; 0x07
     e0e:	23 c0       	rjmp	.+70     	; 0xe56 <g_draw_string+0x98>
			continue;
		}
		g_draw_char(x, y, *str++);
     e10:	ef 81       	ldd	r30, Y+7	; 0x07
     e12:	f8 85       	ldd	r31, Y+8	; 0x08
     e14:	40 81       	ld	r20, Z
     e16:	8f 81       	ldd	r24, Y+7	; 0x07
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	98 87       	std	Y+8, r25	; 0x08
     e1e:	8f 83       	std	Y+7, r24	; 0x07
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	2d 81       	ldd	r18, Y+5	; 0x05
     e26:	3e 81       	ldd	r19, Y+6	; 0x06
     e28:	b9 01       	movw	r22, r18
     e2a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <g_draw_char>
		
		/* Add a 1-pixel spacing between the characters */
		x += FONT_WIDTH+1;
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	06 96       	adiw	r24, 0x06	; 6
     e34:	9c 83       	std	Y+4, r25	; 0x04
     e36:	8b 83       	std	Y+3, r24	; 0x03

		/* In case we are putting this character out of bounds,
		 * move the character to the next line on the display */
		if ((x+FONT_WIDTH) > LCD_WIDTH) {
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	05 96       	adiw	r24, 0x05	; 5
     e3e:	81 3a       	cpi	r24, 0xA1	; 161
     e40:	91 05       	cpc	r25, r1
     e42:	48 f0       	brcs	.+18     	; 0xe56 <g_draw_string+0x98>
			/* Reset x to its origin */
			x = origin_X;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	9c 83       	std	Y+4, r25	; 0x04
     e4a:	8b 83       	std	Y+3, r24	; 0x03
			/* Move y one character down */
			y += FONT_HEIGHT+1;
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	9e 81       	ldd	r25, Y+6	; 0x06
     e50:	08 96       	adiw	r24, 0x08	; 8
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	8d 83       	std	Y+5, r24	; 0x05

	/* Preserve the origin X, in case of a new line */
	origin_X = x;

	/* Continue through the string until we encounter a null character */
	while (*str != '\0') {
     e56:	ef 81       	ldd	r30, Y+7	; 0x07
     e58:	f8 85       	ldd	r31, Y+8	; 0x08
     e5a:	80 81       	ld	r24, Z
     e5c:	88 23       	and	r24, r24
     e5e:	21 f6       	brne	.-120    	; 0xde8 <g_draw_string+0x2a>
			x = origin_X;
			/* Move y one character down */
			y += FONT_HEIGHT+1;
		}
	}
}
     e60:	28 96       	adiw	r28, 0x08	; 8
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <lcd_strobe_enable>:

/** 
 * Strobes the Enable control line to trigger the lcd to process the
 * transmitted instruction.
 */
void lcd_strobe_enable(void) {
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	lcd_enable_high();
     e7a:	ab e3       	ldi	r26, 0x3B	; 59
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	eb e3       	ldi	r30, 0x3B	; 59
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	8c 93       	st	X, r24
	__asm("nop;"); __asm("nop;"); __asm("nop;");
     e88:	00 00       	nop
     e8a:	00 00       	nop
     e8c:	00 00       	nop
	lcd_enable_low();
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 7b       	andi	r24, 0xBF	; 191
     e9a:	8c 93       	st	X, r24
	__asm("nop;"); __asm("nop;"); __asm("nop;");
     e9c:	00 00       	nop
     e9e:	00 00       	nop
     ea0:	00 00       	nop
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <lcd_wait_busy>:
 * around the maximum time for an instruction to complete.
 * Note, LCD operation is kind of sensitive to this configuration. If the delay
 * is too fast, the LCD will miss some pixels when it is really put through
 * a stress test. This dela time seems to work great.
 */
void lcd_wait_busy(void) {
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	68 97       	sbiw	r28, 0x18	; 24
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e4       	ldi	r27, 0x40	; 64
     ec4:	8d 8b       	std	Y+21, r24	; 0x15
     ec6:	9e 8b       	std	Y+22, r25	; 0x16
     ec8:	af 8b       	std	Y+23, r26	; 0x17
     eca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ecc:	6d 89       	ldd	r22, Y+21	; 0x15
     ece:	7e 89       	ldd	r23, Y+22	; 0x16
     ed0:	8f 89       	ldd	r24, Y+23	; 0x17
     ed2:	98 8d       	ldd	r25, Y+24	; 0x18
     ed4:	25 e5       	ldi	r18, 0x55	; 85
     ed6:	35 e5       	ldi	r19, 0x55	; 85
     ed8:	45 ed       	ldi	r20, 0xD5	; 213
     eda:	50 e4       	ldi	r21, 0x40	; 64
     edc:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	89 8b       	std	Y+17, r24	; 0x11
     ee6:	9a 8b       	std	Y+18, r25	; 0x12
     ee8:	ab 8b       	std	Y+19, r26	; 0x13
     eea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     eec:	69 89       	ldd	r22, Y+17	; 0x11
     eee:	7a 89       	ldd	r23, Y+18	; 0x12
     ef0:	8b 89       	ldd	r24, Y+19	; 0x13
     ef2:	9c 89       	ldd	r25, Y+20	; 0x14
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <__cmpsf2>
     f00:	88 23       	and	r24, r24
     f02:	1c f4       	brge	.+6      	; 0xf0a <lcd_wait_busy+0x62>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	88 8b       	std	Y+16, r24	; 0x10
     f08:	91 c0       	rjmp	.+290    	; 0x102c <lcd_wait_busy+0x184>
	else if (__tmp > 255)
     f0a:	69 89       	ldd	r22, Y+17	; 0x11
     f0c:	7a 89       	ldd	r23, Y+18	; 0x12
     f0e:	8b 89       	ldd	r24, Y+19	; 0x13
     f10:	9c 89       	ldd	r25, Y+20	; 0x14
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	53 e4       	ldi	r21, 0x43	; 67
     f1a:	0e 94 27 23 	call	0x464e	; 0x464e <__gesf2>
     f1e:	18 16       	cp	r1, r24
     f20:	0c f0       	brlt	.+2      	; 0xf24 <lcd_wait_busy+0x7c>
     f22:	7b c0       	rjmp	.+246    	; 0x101a <lcd_wait_busy+0x172>
	{
		_delay_ms(__us / 1000.0);
     f24:	6d 89       	ldd	r22, Y+21	; 0x15
     f26:	7e 89       	ldd	r23, Y+22	; 0x16
     f28:	8f 89       	ldd	r24, Y+23	; 0x17
     f2a:	98 8d       	ldd	r25, Y+24	; 0x18
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4a e7       	ldi	r20, 0x7A	; 122
     f32:	54 e4       	ldi	r21, 0x44	; 68
     f34:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	8c 87       	std	Y+12, r24	; 0x0c
     f3e:	9d 87       	std	Y+13, r25	; 0x0d
     f40:	ae 87       	std	Y+14, r26	; 0x0e
     f42:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f44:	6c 85       	ldd	r22, Y+12	; 0x0c
     f46:	7d 85       	ldd	r23, Y+13	; 0x0d
     f48:	8e 85       	ldd	r24, Y+14	; 0x0e
     f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e4       	ldi	r19, 0x40	; 64
     f50:	4c e9       	ldi	r20, 0x9C	; 156
     f52:	55 e4       	ldi	r21, 0x45	; 69
     f54:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	88 87       	std	Y+8, r24	; 0x08
     f5e:	99 87       	std	Y+9, r25	; 0x09
     f60:	aa 87       	std	Y+10, r26	; 0x0a
     f62:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f64:	68 85       	ldd	r22, Y+8	; 0x08
     f66:	79 85       	ldd	r23, Y+9	; 0x09
     f68:	8a 85       	ldd	r24, Y+10	; 0x0a
     f6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e8       	ldi	r20, 0x80	; 128
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <__cmpsf2>
     f78:	88 23       	and	r24, r24
     f7a:	2c f4       	brge	.+10     	; 0xf86 <lcd_wait_busy+0xde>
		__ticks = 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9f 83       	std	Y+7, r25	; 0x07
     f82:	8e 83       	std	Y+6, r24	; 0x06
     f84:	3f c0       	rjmp	.+126    	; 0x1004 <lcd_wait_busy+0x15c>
	else if (__tmp > 65535)
     f86:	68 85       	ldd	r22, Y+8	; 0x08
     f88:	79 85       	ldd	r23, Y+9	; 0x09
     f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f8c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	3f ef       	ldi	r19, 0xFF	; 255
     f92:	4f e7       	ldi	r20, 0x7F	; 127
     f94:	57 e4       	ldi	r21, 0x47	; 71
     f96:	0e 94 27 23 	call	0x464e	; 0x464e <__gesf2>
     f9a:	18 16       	cp	r1, r24
     f9c:	4c f5       	brge	.+82     	; 0xff0 <lcd_wait_busy+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9e:	6c 85       	ldd	r22, Y+12	; 0x0c
     fa0:	7d 85       	ldd	r23, Y+13	; 0x0d
     fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e2       	ldi	r20, 0x20	; 32
     fac:	51 e4       	ldi	r21, 0x41	; 65
     fae:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9f 83       	std	Y+7, r25	; 0x07
     fc4:	8e 83       	std	Y+6, r24	; 0x06
     fc6:	0f c0       	rjmp	.+30     	; 0xfe6 <lcd_wait_busy+0x13e>
     fc8:	84 ef       	ldi	r24, 0xF4	; 244
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	9d 83       	std	Y+5, r25	; 0x05
     fce:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <lcd_wait_busy+0x12c>
     fd8:	9d 83       	std	Y+5, r25	; 0x05
     fda:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fdc:	8e 81       	ldd	r24, Y+6	; 0x06
     fde:	9f 81       	ldd	r25, Y+7	; 0x07
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	9f 83       	std	Y+7, r25	; 0x07
     fe4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	9f 81       	ldd	r25, Y+7	; 0x07
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	69 f7       	brne	.-38     	; 0xfc8 <lcd_wait_busy+0x120>
     fee:	24 c0       	rjmp	.+72     	; 0x1038 <lcd_wait_busy+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff0:	68 85       	ldd	r22, Y+8	; 0x08
     ff2:	79 85       	ldd	r23, Y+9	; 0x09
     ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff8:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	9f 83       	std	Y+7, r25	; 0x07
    1002:	8e 83       	std	Y+6, r24	; 0x06
    1004:	8e 81       	ldd	r24, Y+6	; 0x06
    1006:	9f 81       	ldd	r25, Y+7	; 0x07
    1008:	9b 83       	std	Y+3, r25	; 0x03
    100a:	8a 83       	std	Y+2, r24	; 0x02
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <lcd_wait_busy+0x168>
    1014:	9b 83       	std	Y+3, r25	; 0x03
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <lcd_wait_busy+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    101a:	69 89       	ldd	r22, Y+17	; 0x11
    101c:	7a 89       	ldd	r23, Y+18	; 0x12
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	88 8b       	std	Y+16, r24	; 0x10
    102c:	88 89       	ldd	r24, Y+16	; 0x10
    102e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	8a 95       	dec	r24
    1034:	f1 f7       	brne	.-4      	; 0x1032 <lcd_wait_busy+0x18a>
    1036:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(3);
}
    1038:	68 96       	adiw	r28, 0x18	; 24
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <lcd_write_command>:
/**
 * Writes a raw instruction to the LCD. 
 * @param command The 4-bit instruction code.
 * @param data The 8-bit paramater/data to the specified instruction.
 */
void lcd_write_command(unsigned char command, unsigned char data) {
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <lcd_write_command+0x6>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	6a 83       	std	Y+2, r22	; 0x02
	/* Wait for the busy flag to clear */
	lcd_wait_busy();
    1058:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_wait_busy>
	
	/* Set RW low, RS high to write the instruction command */
	lcd_rw_low();
    105c:	ab e3       	ldi	r26, 0x3B	; 59
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	eb e3       	ldi	r30, 0x3B	; 59
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7d       	andi	r24, 0xDF	; 223
    1068:	8c 93       	st	X, r24
	lcd_rs_high();
    106a:	ab e3       	ldi	r26, 0x3B	; 59
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	80 68       	ori	r24, 0x80	; 128
    1076:	8c 93       	st	X, r24
	/* Instruction commands are a maximum of 4 bits long, so 
	 * just mask off the rest. */
	LCD_DATA_PORT = (command&0x0F);
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	8f 70       	andi	r24, 0x0F	; 15
    1080:	80 83       	st	Z, r24
	...
	__asm("nop;"); __asm("nop;"); __asm("nop;");
	__asm("nop;"); __asm("nop;"); __asm("nop;");
	lcd_strobe_enable();
    108e:	0e 94 39 07 	call	0xe72	; 0xe72 <lcd_strobe_enable>
	...
	__asm("nop;"); __asm("nop;"); __asm("nop;");
	__asm("nop;"); __asm("nop;"); __asm("nop;");

	/* Set RW low, RW low to write the instruction data */
	lcd_rw_low();
    109e:	ab e3       	ldi	r26, 0x3B	; 59
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7d       	andi	r24, 0xDF	; 223
    10aa:	8c 93       	st	X, r24
	lcd_rs_low();
    10ac:	ab e3       	ldi	r26, 0x3B	; 59
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e3       	ldi	r30, 0x3B	; 59
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 77       	andi	r24, 0x7F	; 127
    10b8:	8c 93       	st	X, r24
	LCD_DATA_PORT = data;
    10ba:	e5 e3       	ldi	r30, 0x35	; 53
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
	...
	__asm("nop;"); __asm("nop;"); __asm("nop;");
	__asm("nop;"); __asm("nop;"); __asm("nop;");
	lcd_strobe_enable();
    10ce:	0e 94 39 07 	call	0xe72	; 0xe72 <lcd_strobe_enable>
	...
	__asm("nop;"); __asm("nop;"); __asm("nop;");
	__asm("nop;"); __asm("nop;"); __asm("nop;");
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <lcd_graphics_init>:

/**
 * Initializes the LCD in graphics mode.
 * Uses a character pitch of 8 (8 bits are plotted whenever a byte is drawn)
 */ 
void lcd_graphics_init(void) {
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	unsigned char commandData;

	/* Set the data direction registers apprioriately */
	LCD_DATA_DDR = 0xFF;
    10f2:	e4 e3       	ldi	r30, 0x34	; 52
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	80 83       	st	Z, r24
	LCD_CTRL_DDR |= (1<<LCD_CTRL_RS)|(1<<LCD_CTRL_RW)|(1<<LCD_CTRL_E);
    10fa:	aa e3       	ldi	r26, 0x3A	; 58
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ea e3       	ldi	r30, 0x3A	; 58
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 6e       	ori	r24, 0xE0	; 224
    1106:	8c 93       	st	X, r24

	/* Assert all control lines to low */
	lcd_rw_low();
    1108:	ab e3       	ldi	r26, 0x3B	; 59
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8f 7d       	andi	r24, 0xDF	; 223
    1114:	8c 93       	st	X, r24
	lcd_rs_low();
    1116:	ab e3       	ldi	r26, 0x3B	; 59
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	eb e3       	ldi	r30, 0x3B	; 59
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 77       	andi	r24, 0x7F	; 127
    1122:	8c 93       	st	X, r24
	lcd_enable_low();
    1124:	ab e3       	ldi	r26, 0x3B	; 59
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	eb e3       	ldi	r30, 0x3B	; 59
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7b       	andi	r24, 0xBF	; 191
    1130:	8c 93       	st	X, r24

	/* Send mode configuration command with
	 * Toggle Display On, Master, Mode Graphics bits set */
	commandData = LCD_MODE_ON_OFF | LCD_MODE_MASTER_SLAVE | LCD_MODE_MODE;
    1132:	82 e3       	ldi	r24, 0x32	; 50
    1134:	89 83       	std	Y+1, r24	; 0x01
	lcd_write_command(LCD_CMD_MODE, commandData);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	69 81       	ldd	r22, Y+1	; 0x01
    113a:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>

	/* Send the set character pitch command with horizontal
 	 * character pitch of 8 (so 8 pixels are painted when we draw) */	
	commandData = LCD_CHAR_PITCH_HP_8;
    113e:	87 e0       	ldi	r24, 0x07	; 7
    1140:	89 83       	std	Y+1, r24	; 0x01
	lcd_write_command(LCD_CMD_CHAR_PITCH, commandData);
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	69 81       	ldd	r22, Y+1	; 0x01
    1146:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
	
	/* Send the number of characters command with the total
	 * number of graphics bytes that can be painted horizontally 
	 * (width/8) */
	commandData = (LCD_WIDTH/8)-1;
    114a:	83 e1       	ldi	r24, 0x13	; 19
    114c:	89 83       	std	Y+1, r24	; 0x01
	lcd_write_command(LCD_CMD_NUM_CHARS, commandData);
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>

	/* Set the time division */
	commandData = 128-1;
    1156:	8f e7       	ldi	r24, 0x7F	; 127
    1158:	89 83       	std	Y+1, r24	; 0x01
	lcd_write_command(LCD_CMD_TIME_DIVISION, commandData);
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	69 81       	ldd	r22, Y+1	; 0x01
    115e:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
	
	/* Set the display low/high start address to 0x00 (left corner) */
	commandData = 0x00;
    1162:	19 82       	std	Y+1, r1	; 0x01
	lcd_write_command(LCD_CMD_DISPLAY_START_LA, commandData);
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	69 81       	ldd	r22, Y+1	; 0x01
    1168:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
	lcd_write_command(LCD_CMD_DISPLAY_START_HA, commandData);
    116c:	89 e0       	ldi	r24, 0x09	; 9
    116e:	69 81       	ldd	r22, Y+1	; 0x01
    1170:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>

	/* Reset the cursor to home 0x00 (left corner) */
	commandData = 0x00;
    1174:	19 82       	std	Y+1, r1	; 0x01
	lcd_write_command(LCD_CMD_CURSOR_LA, commandData);
    1176:	8a e0       	ldi	r24, 0x0A	; 10
    1178:	69 81       	ldd	r22, Y+1	; 0x01
    117a:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
	lcd_write_command(LCD_CMD_CURSOR_HA, commandData);
    117e:	8b e0       	ldi	r24, 0x0B	; 11
    1180:	69 81       	ldd	r22, Y+1	; 0x01
    1182:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
}
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <lcd_graphics_move>:
/**
 * Moves the LCD cursor to the specified coordinates. 
 * @param x The new x coordinante of the cursor.
 * @param y The new y coordinante of the cursor.
 */
void lcd_graphics_move(unsigned short x, unsigned short y) {
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <lcd_graphics_move+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <lcd_graphics_move+0x8>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <lcd_graphics_move+0xa>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	7e 83       	std	Y+6, r23	; 0x06
    11a2:	6d 83       	std	Y+5, r22	; 0x05
	unsigned short pos;

	/* Calculate the raw address in terms of bytes on the screen */
	pos = ((y*LCD_WIDTH)+x)/8;
    11a4:	2d 81       	ldd	r18, Y+5	; 0x05
    11a6:	3e 81       	ldd	r19, Y+6	; 0x06
    11a8:	80 ea       	ldi	r24, 0xA0	; 160
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a9 01       	movw	r20, r18
    11ae:	48 9f       	mul	r20, r24
    11b0:	90 01       	movw	r18, r0
    11b2:	49 9f       	mul	r20, r25
    11b4:	30 0d       	add	r19, r0
    11b6:	58 9f       	mul	r21, r24
    11b8:	30 0d       	add	r19, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	82 0f       	add	r24, r18
    11c2:	93 1f       	adc	r25, r19
    11c4:	96 95       	lsr	r25
    11c6:	87 95       	ror	r24
    11c8:	96 95       	lsr	r25
    11ca:	87 95       	ror	r24
    11cc:	96 95       	lsr	r25
    11ce:	87 95       	ror	r24
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01

	/* Move the cursor to the new address */
	lcd_write_command(LCD_CMD_CURSOR_LA, pos&0xFF);
    11d4:	99 81       	ldd	r25, Y+1	; 0x01
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	69 2f       	mov	r22, r25
    11da:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
	lcd_write_command(LCD_CMD_CURSOR_HA, pos>>8);
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	89 2f       	mov	r24, r25
    11e4:	99 27       	eor	r25, r25
    11e6:	98 2f       	mov	r25, r24
    11e8:	8b e0       	ldi	r24, 0x0B	; 11
    11ea:	69 2f       	mov	r22, r25
    11ec:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
}
    11f0:	26 96       	adiw	r28, 0x06	; 6
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <lcd_graphics_draw_byte>:

/**
 * Draws a byte to the LCD at the current LCD's cursor location.
 * @param data The byte to draw. The pixels are drawn MSB to LSB.
 */
void lcd_graphics_draw_byte(unsigned char data) {
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	89 83       	std	Y+1, r24	; 0x01
	lcd_write_command(LCD_CMD_WRITE_DATA, data);
    120e:	8c e0       	ldi	r24, 0x0C	; 12
    1210:	69 81       	ldd	r22, Y+1	; 0x01
    1212:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
}
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <lcd_graphics_plot_byte>:
 * Plots a byte at the specified coordinates. 
 * @param x The x coordinante of the byte to be drawn.
 * @param y The y coordinante of the byte to be drawn.
 * @param data The byte to draw. The pixels are drawn MSB to LSB.
 */
void lcd_graphics_plot_byte(unsigned short x, unsigned short y, unsigned char data) {
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <lcd_graphics_plot_byte+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <lcd_graphics_plot_byte+0x8>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	7c 83       	std	Y+4, r23	; 0x04
    1232:	6b 83       	std	Y+3, r22	; 0x03
    1234:	4d 83       	std	Y+5, r20	; 0x05
	lcd_graphics_move(x, y);
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	b9 01       	movw	r22, r18
    1240:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_graphics_move>
	lcd_graphics_draw_byte(data);
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	0e 94 01 09 	call	0x1202	; 0x1202 <lcd_graphics_draw_byte>
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <lcd_graphics_plot_pixel>:
 * Plots a pixel at the specified coordinates.
 * @param x The x coordinante of the pixel.
 * @param y The y coordinante of the pixel.
 * @param state PIXEL_ON to set the pixel, otherwise pixel will be cleared.
 */
void lcd_graphics_plot_pixel(unsigned short x, unsigned short y, unsigned char state) {
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <lcd_graphics_plot_pixel+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <lcd_graphics_plot_pixel+0x8>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <lcd_graphics_plot_pixel+0xa>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9b 83       	std	Y+3, r25	; 0x03
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	7d 83       	std	Y+5, r23	; 0x05
    126e:	6c 83       	std	Y+4, r22	; 0x04
    1270:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char pos;
	
	lcd_graphics_move(x, y);
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	9b 81       	ldd	r25, Y+3	; 0x03
    1276:	2c 81       	ldd	r18, Y+4	; 0x04
    1278:	3d 81       	ldd	r19, Y+5	; 0x05
    127a:	b9 01       	movw	r22, r18
    127c:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_graphics_move>
	/* Since lcd_graphics_move() moves the cursor to a particular
	 * byte, not bit, we need the relative distance to the specified 
	 * bit we are going to set/clear. */
	pos = x%8;
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	87 70       	andi	r24, 0x07	; 7
    1284:	89 83       	std	Y+1, r24	; 0x01

	if (state == PIXEL_ON) 
    1286:	8e 81       	ldd	r24, Y+6	; 0x06
    1288:	8f 3f       	cpi	r24, 0xFF	; 255
    128a:	29 f4       	brne	.+10     	; 0x1296 <lcd_graphics_plot_pixel+0x3c>
		lcd_write_command(LCD_CMD_SET_BIT, pos);
    128c:	8f e0       	ldi	r24, 0x0F	; 15
    128e:	69 81       	ldd	r22, Y+1	; 0x01
    1290:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
    1294:	04 c0       	rjmp	.+8      	; 0x129e <lcd_graphics_plot_pixel+0x44>
	else 
		lcd_write_command(LCD_CMD_CLEAR_BIT, pos);
    1296:	8e e0       	ldi	r24, 0x0E	; 14
    1298:	69 81       	ldd	r22, Y+1	; 0x01
    129a:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_write_command>
}
    129e:	26 96       	adiw	r28, 0x06	; 6
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <lcd_graphics_clear>:

/**
 * Clears the LCD screen 
 */
void lcd_graphics_clear(void) {
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <lcd_graphics_clear+0x6>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	unsigned short i;
	/* Move cursor to home (top left corner) */
	lcd_graphics_move(0, 0);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_graphics_move>
	/* Draw empty bytes to ocucpy the entire screen */
	for (i = 0; i < ((LCD_WIDTH*LCD_HEIGHT)/8); i++) 
    12c6:	1a 82       	std	Y+2, r1	; 0x02
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <lcd_graphics_clear+0x2c>
		lcd_graphics_draw_byte(0x00);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	0e 94 01 09 	call	0x1202	; 0x1202 <lcd_graphics_draw_byte>
void lcd_graphics_clear(void) {
	unsigned short i;
	/* Move cursor to home (top left corner) */
	lcd_graphics_move(0, 0);
	/* Draw empty bytes to ocucpy the entire screen */
	for (i = 0; i < ((LCD_WIDTH*LCD_HEIGHT)/8); i++) 
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	26 e0       	ldi	r18, 0x06	; 6
    12e2:	80 34       	cpi	r24, 0x40	; 64
    12e4:	92 07       	cpc	r25, r18
    12e6:	90 f3       	brcs	.-28     	; 0x12cc <lcd_graphics_clear+0x1c>
		lcd_graphics_draw_byte(0x00);
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <delay_ms_long>:
/**
 * Delay in milliseconds.
 * An extension of _delay_ms() so we can delay for longer periods of time.
 * @param ms Milliseconds to delay.
 */
void delay_ms_long(unsigned short ms) {
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	60 97       	sbiw	r28, 0x10	; 16
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	98 8b       	std	Y+16, r25	; 0x10
    1308:	8f 87       	std	Y+15, r24	; 0x0f
    130a:	77 c0       	rjmp	.+238    	; 0x13fa <delay_ms_long+0x108>
	for (; ms > 0; ms--)
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 e8       	ldi	r26, 0x80	; 128
    1312:	bf e3       	ldi	r27, 0x3F	; 63
    1314:	8b 87       	std	Y+11, r24	; 0x0b
    1316:	9c 87       	std	Y+12, r25	; 0x0c
    1318:	ad 87       	std	Y+13, r26	; 0x0d
    131a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e4       	ldi	r19, 0x40	; 64
    1328:	4c e9       	ldi	r20, 0x9C	; 156
    132a:	55 e4       	ldi	r21, 0x45	; 69
    132c:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	8f 83       	std	Y+7, r24	; 0x07
    1336:	98 87       	std	Y+8, r25	; 0x08
    1338:	a9 87       	std	Y+9, r26	; 0x09
    133a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <__cmpsf2>
    1350:	88 23       	and	r24, r24
    1352:	2c f4       	brge	.+10     	; 0x135e <delay_ms_long+0x6c>
		__ticks = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	3f c0       	rjmp	.+126    	; 0x13dc <delay_ms_long+0xea>
	else if (__tmp > 65535)
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	0e 94 27 23 	call	0x464e	; 0x464e <__gesf2>
    1372:	18 16       	cp	r1, r24
    1374:	4c f5       	brge	.+82     	; 0x13c8 <delay_ms_long+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	6b 85       	ldd	r22, Y+11	; 0x0b
    1378:	7c 85       	ldd	r23, Y+12	; 0x0c
    137a:	8d 85       	ldd	r24, Y+13	; 0x0d
    137c:	9e 85       	ldd	r25, Y+14	; 0x0e
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	51 e4       	ldi	r21, 0x41	; 65
    1386:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	0f c0       	rjmp	.+30     	; 0x13be <delay_ms_long+0xcc>
    13a0:	84 ef       	ldi	r24, 0xF4	; 244
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <delay_ms_long+0xba>
    13b0:	9c 83       	std	Y+4, r25	; 0x04
    13b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <delay_ms_long+0xae>
    13c6:	14 c0       	rjmp	.+40     	; 0x13f0 <delay_ms_long+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <delay_ms_long+0xf6>
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f2:	98 89       	ldd	r25, Y+16	; 0x10
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	98 8b       	std	Y+16, r25	; 0x10
    13f8:	8f 87       	std	Y+15, r24	; 0x0f
    13fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fc:	98 89       	ldd	r25, Y+16	; 0x10
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	09 f0       	breq	.+2      	; 0x1404 <delay_ms_long+0x112>
    1402:	84 cf       	rjmp	.-248    	; 0x130c <delay_ms_long+0x1a>
		_delay_ms(1);
}
    1404:	60 96       	adiw	r28, 0x10	; 16
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <delay_ms>:


/**********************end of header ************************************/


void delay_ms(unsigned int ms){
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <delay_ms+0xa>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	if((ms==0)||(ms>4500)) return;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	09 f4       	brne	.+2      	; 0x1432 <delay_ms+0x1c>
    1430:	56 c0       	rjmp	.+172    	; 0x14de <delay_ms+0xc8>
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	21 e1       	ldi	r18, 0x11	; 17
    1438:	85 39       	cpi	r24, 0x95	; 149
    143a:	92 07       	cpc	r25, r18
    143c:	08 f0       	brcs	.+2      	; 0x1440 <delay_ms+0x2a>
    143e:	4f c0       	rjmp	.+158    	; 0x14de <delay_ms+0xc8>
	TCCR1B=0; //stop a running timer
    1440:	ee e4       	ldi	r30, 0x4E	; 78
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	10 82       	st	Z, r1
	TIFR|=4;  //reset the overflow flag
    1446:	a6 e5       	ldi	r26, 0x56	; 86
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e6 e5       	ldi	r30, 0x56	; 86
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	84 60       	ori	r24, 0x04	; 4
    1452:	8c 93       	st	X, r24
	TIMSK&=~4;  //delete the interrupt enable for this timer
    1454:	a7 e5       	ldi	r26, 0x57	; 87
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e7 e5       	ldi	r30, 0x57	; 87
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8b 7f       	andi	r24, 0xFB	; 251
    1460:	8c 93       	st	X, r24
	TCCR1A=0;
    1462:	ef e4       	ldi	r30, 0x4F	; 79
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
	TCCR1C=0;
    1468:	ea e7       	ldi	r30, 0x7A	; 122
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	10 82       	st	Z, r1
	TCNT1=65536-(((long)ms*144)/10);
    146e:	0c e4       	ldi	r16, 0x4C	; 76
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	cc 01       	movw	r24, r24
    1478:	a0 e0       	ldi	r26, 0x00	; 0
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	20 e9       	ldi	r18, 0x90	; 144
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	0e 94 d7 23 	call	0x47ae	; 0x47ae <__mulsi3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	2a e0       	ldi	r18, 0x0A	; 10
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	0e 94 15 24 	call	0x482a	; 0x482a <__divmodsi4>
    14a0:	da 01       	movw	r26, r20
    14a2:	c9 01       	movw	r24, r18
    14a4:	90 95       	com	r25
    14a6:	81 95       	neg	r24
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	f8 01       	movw	r30, r16
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	80 83       	st	Z, r24
	TCCR1B=5; //prescalar 1024
    14b0:	ee e4       	ldi	r30, 0x4E	; 78
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	85 e0       	ldi	r24, 0x05	; 5
    14b6:	80 83       	st	Z, r24
	while(!(TIFR&4));
    14b8:	e6 e5       	ldi	r30, 0x56	; 86
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	84 70       	andi	r24, 0x04	; 4
    14c4:	90 70       	andi	r25, 0x00	; 0
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	b9 f3       	breq	.-18     	; 0x14b8 <delay_ms+0xa2>
	TCCR1B=0;  //stop the timer
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	10 82       	st	Z, r1
	TIFR|=4;  //reset the overflow flag
    14d0:	a6 e5       	ldi	r26, 0x56	; 86
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e6 e5       	ldi	r30, 0x56	; 86
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	8c 93       	st	X, r24
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <delay_s>:


//function waits 1-4500ms and returns
//its using timer 1 for waiting in polling mode
//ms: delays for 1-4500 ms
void delay_s(unsigned int s){
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <delay_s+0x6>
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <delay_s+0x22>
	while(s!=0){
		delay_ms(1000);s--;
    14fc:	88 ee       	ldi	r24, 0xE8	; 232
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01

//function waits 1-4500ms and returns
//its using timer 1 for waiting in polling mode
//ms: delays for 1-4500 ms
void delay_s(unsigned int s){
	while(s!=0){
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	99 f7       	brne	.-26     	; 0x14fc <delay_s+0x10>
		delay_ms(1000);s--;
	}
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <draw_grad>:
#ifdef GRAD_ON
void draw_grad(unsigned char pos_x, unsigned char pos_y)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <draw_grad+0x6>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	6a 83       	std	Y+2, r22	; 0x02
    lcd_graphics_plot_pixel(pos_x + 1, pos_y + 2, PIXEL_ON);
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	ac 01       	movw	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 96       	adiw	r24, 0x02	; 2
    1540:	9c 01       	movw	r18, r24
    1542:	ca 01       	movw	r24, r20
    1544:	b9 01       	movw	r22, r18
    1546:	4f ef       	ldi	r20, 0xFF	; 255
    1548:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(pos_x + 1, pos_y + 3, PIXEL_ON);
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	ac 01       	movw	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	03 96       	adiw	r24, 0x03	; 3
    155e:	9c 01       	movw	r18, r24
    1560:	ca 01       	movw	r24, r20
    1562:	b9 01       	movw	r22, r18
    1564:	4f ef       	ldi	r20, 0xFF	; 255
    1566:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(pos_x + 2, pos_y + 1, PIXEL_ON);
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 96       	adiw	r24, 0x02	; 2
    1572:	ac 01       	movw	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	9c 01       	movw	r18, r24
    157e:	ca 01       	movw	r24, r20
    1580:	b9 01       	movw	r22, r18
    1582:	4f ef       	ldi	r20, 0xFF	; 255
    1584:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(pos_x + 2, pos_y + 4, PIXEL_ON);
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 96       	adiw	r24, 0x02	; 2
    1590:	ac 01       	movw	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	04 96       	adiw	r24, 0x04	; 4
    159a:	9c 01       	movw	r18, r24
    159c:	ca 01       	movw	r24, r20
    159e:	b9 01       	movw	r22, r18
    15a0:	4f ef       	ldi	r20, 0xFF	; 255
    15a2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(pos_x + 3, pos_y + 1, PIXEL_ON);
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	03 96       	adiw	r24, 0x03	; 3
    15ae:	ac 01       	movw	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	9c 01       	movw	r18, r24
    15ba:	ca 01       	movw	r24, r20
    15bc:	b9 01       	movw	r22, r18
    15be:	4f ef       	ldi	r20, 0xFF	; 255
    15c0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(pos_x + 3, pos_y + 4, PIXEL_ON);
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	03 96       	adiw	r24, 0x03	; 3
    15cc:	ac 01       	movw	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	04 96       	adiw	r24, 0x04	; 4
    15d6:	9c 01       	movw	r18, r24
    15d8:	ca 01       	movw	r24, r20
    15da:	b9 01       	movw	r22, r18
    15dc:	4f ef       	ldi	r20, 0xFF	; 255
    15de:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(pos_x + 4, pos_y + 2, PIXEL_ON);
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	04 96       	adiw	r24, 0x04	; 4
    15ea:	ac 01       	movw	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 96       	adiw	r24, 0x02	; 2
    15f4:	9c 01       	movw	r18, r24
    15f6:	ca 01       	movw	r24, r20
    15f8:	b9 01       	movw	r22, r18
    15fa:	4f ef       	ldi	r20, 0xFF	; 255
    15fc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(pos_x + 4, pos_y + 3, PIXEL_ON);
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	04 96       	adiw	r24, 0x04	; 4
    1608:	ac 01       	movw	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	03 96       	adiw	r24, 0x03	; 3
    1612:	9c 01       	movw	r18, r24
    1614:	ca 01       	movw	r24, r20
    1616:	b9 01       	movw	r22, r18
    1618:	4f ef       	ldi	r20, 0xFF	; 255
    161a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <draw_flame>:
#endif
#ifdef FLAME_AND_FLAKE_ON
void draw_flame(void)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <draw_flame+0x6>
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	unsigned char x, y;
	
	for (x = 1; x <= 17; x++)
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	1b c0       	rjmp	.+54     	; 0x166e <draw_flame+0x46>
	{
		for (y = 1; y <= 17; y++)
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	12 c0       	rjmp	.+36     	; 0x1662 <draw_flame+0x3a>
		{
			lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + x, PIC_POS_FLAME_FLAKE_Y + y, PIXEL_OFF);
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 96       	adiw	r24, 0x28	; 40
    1646:	ac 01       	movw	r20, r24
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	9c 01       	movw	r18, r24
    1652:	ca 01       	movw	r24, r20
    1654:	b9 01       	movw	r22, r18
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
{
	unsigned char x, y;
	
	for (x = 1; x <= 17; x++)
	{
		for (y = 1; y <= 17; y++)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	82 31       	cpi	r24, 0x12	; 18
    1666:	58 f3       	brcs	.-42     	; 0x163e <draw_flame+0x16>
#ifdef FLAME_AND_FLAKE_ON
void draw_flame(void)
{
	unsigned char x, y;
	
	for (x = 1; x <= 17; x++)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	8f 5f       	subi	r24, 0xFF	; 255
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	82 31       	cpi	r24, 0x12	; 18
    1672:	10 f3       	brcs	.-60     	; 0x1638 <draw_flame+0x10>
		for (y = 1; y <= 17; y++)
		{
			lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + x, PIC_POS_FLAME_FLAKE_Y + y, PIXEL_OFF);
		}
	}
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1674:	8a e2       	ldi	r24, 0x2A	; 42
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	6c e0       	ldi	r22, 0x0C	; 12
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	4f ef       	ldi	r20, 0xFF	; 255
    167e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1682:	8a e2       	ldi	r24, 0x2A	; 42
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	6d e0       	ldi	r22, 0x0D	; 13
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	4f ef       	ldi	r20, 0xFF	; 255
    168c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1690:	8a e2       	ldi	r24, 0x2A	; 42
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	6e e0       	ldi	r22, 0x0E	; 14
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	4f ef       	ldi	r20, 0xFF	; 255
    169a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    169e:	8b e2       	ldi	r24, 0x2B	; 43
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	6b e0       	ldi	r22, 0x0B	; 11
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	4f ef       	ldi	r20, 0xFF	; 255
    16a8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    16ac:	8b e2       	ldi	r24, 0x2B	; 43
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	6c e0       	ldi	r22, 0x0C	; 12
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	4f ef       	ldi	r20, 0xFF	; 255
    16b6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    16ba:	8b e2       	ldi	r24, 0x2B	; 43
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	6d e0       	ldi	r22, 0x0D	; 13
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	4f ef       	ldi	r20, 0xFF	; 255
    16c4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    16c8:	8b e2       	ldi	r24, 0x2B	; 43
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	6e e0       	ldi	r22, 0x0E	; 14
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	4f ef       	ldi	r20, 0xFF	; 255
    16d2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    16d6:	8b e2       	ldi	r24, 0x2B	; 43
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	6f e0       	ldi	r22, 0x0F	; 15
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	4f ef       	ldi	r20, 0xFF	; 255
    16e0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    16e4:	8b e2       	ldi	r24, 0x2B	; 43
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	60 e1       	ldi	r22, 0x10	; 16
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	4f ef       	ldi	r20, 0xFF	; 255
    16ee:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    16f2:	8c e2       	ldi	r24, 0x2C	; 44
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	67 e0       	ldi	r22, 0x07	; 7
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	4f ef       	ldi	r20, 0xFF	; 255
    16fc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1700:	8c e2       	ldi	r24, 0x2C	; 44
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	68 e0       	ldi	r22, 0x08	; 8
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	4f ef       	ldi	r20, 0xFF	; 255
    170a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    170e:	8c e2       	ldi	r24, 0x2C	; 44
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	69 e0       	ldi	r22, 0x09	; 9
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	4f ef       	ldi	r20, 0xFF	; 255
    1718:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    171c:	8c e2       	ldi	r24, 0x2C	; 44
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	6a e0       	ldi	r22, 0x0A	; 10
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	4f ef       	ldi	r20, 0xFF	; 255
    1726:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    172a:	8c e2       	ldi	r24, 0x2C	; 44
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	6b e0       	ldi	r22, 0x0B	; 11
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	4f ef       	ldi	r20, 0xFF	; 255
    1734:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1738:	8c e2       	ldi	r24, 0x2C	; 44
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	6c e0       	ldi	r22, 0x0C	; 12
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	4f ef       	ldi	r20, 0xFF	; 255
    1742:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1746:	8c e2       	ldi	r24, 0x2C	; 44
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	6d e0       	ldi	r22, 0x0D	; 13
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	4f ef       	ldi	r20, 0xFF	; 255
    1750:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1754:	8c e2       	ldi	r24, 0x2C	; 44
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	6e e0       	ldi	r22, 0x0E	; 14
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	4f ef       	ldi	r20, 0xFF	; 255
    175e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    1762:	8c e2       	ldi	r24, 0x2C	; 44
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	6f e0       	ldi	r22, 0x0F	; 15
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	4f ef       	ldi	r20, 0xFF	; 255
    176c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    1770:	8c e2       	ldi	r24, 0x2C	; 44
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	60 e1       	ldi	r22, 0x10	; 16
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	4f ef       	ldi	r20, 0xFF	; 255
    177a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    177e:	8c e2       	ldi	r24, 0x2C	; 44
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	61 e1       	ldi	r22, 0x11	; 17
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	4f ef       	ldi	r20, 0xFF	; 255
    1788:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    178c:	8d e2       	ldi	r24, 0x2D	; 45
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	69 e0       	ldi	r22, 0x09	; 9
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	4f ef       	ldi	r20, 0xFF	; 255
    1796:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    179a:	8d e2       	ldi	r24, 0x2D	; 45
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	6a e0       	ldi	r22, 0x0A	; 10
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	4f ef       	ldi	r20, 0xFF	; 255
    17a4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    17a8:	8d e2       	ldi	r24, 0x2D	; 45
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	6b e0       	ldi	r22, 0x0B	; 11
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	4f ef       	ldi	r20, 0xFF	; 255
    17b2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    17b6:	8d e2       	ldi	r24, 0x2D	; 45
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	6c e0       	ldi	r22, 0x0C	; 12
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	4f ef       	ldi	r20, 0xFF	; 255
    17c0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    17c4:	8d e2       	ldi	r24, 0x2D	; 45
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	60 e1       	ldi	r22, 0x10	; 16
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	4f ef       	ldi	r20, 0xFF	; 255
    17ce:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    17d2:	8d e2       	ldi	r24, 0x2D	; 45
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	61 e1       	ldi	r22, 0x11	; 17
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	4f ef       	ldi	r20, 0xFF	; 255
    17dc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    17e0:	8d e2       	ldi	r24, 0x2D	; 45
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	62 e1       	ldi	r22, 0x12	; 18
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	4f ef       	ldi	r20, 0xFF	; 255
    17ea:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    17ee:	8e e2       	ldi	r24, 0x2E	; 46
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	66 e0       	ldi	r22, 0x06	; 6
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	4f ef       	ldi	r20, 0xFF	; 255
    17f8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    17fc:	8e e2       	ldi	r24, 0x2E	; 46
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	67 e0       	ldi	r22, 0x07	; 7
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	4f ef       	ldi	r20, 0xFF	; 255
    1806:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    180a:	8e e2       	ldi	r24, 0x2E	; 46
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	68 e0       	ldi	r22, 0x08	; 8
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	4f ef       	ldi	r20, 0xFF	; 255
    1814:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1818:	8e e2       	ldi	r24, 0x2E	; 46
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	69 e0       	ldi	r22, 0x09	; 9
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	4f ef       	ldi	r20, 0xFF	; 255
    1822:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1826:	8e e2       	ldi	r24, 0x2E	; 46
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	6a e0       	ldi	r22, 0x0A	; 10
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	4f ef       	ldi	r20, 0xFF	; 255
    1830:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1834:	8e e2       	ldi	r24, 0x2E	; 46
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	6b e0       	ldi	r22, 0x0B	; 11
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	4f ef       	ldi	r20, 0xFF	; 255
    183e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1842:	8e e2       	ldi	r24, 0x2E	; 46
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	6c e0       	ldi	r22, 0x0C	; 12
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	4f ef       	ldi	r20, 0xFF	; 255
    184c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    1850:	8e e2       	ldi	r24, 0x2E	; 46
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	61 e1       	ldi	r22, 0x11	; 17
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	4f ef       	ldi	r20, 0xFF	; 255
    185a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    185e:	8e e2       	ldi	r24, 0x2E	; 46
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	62 e1       	ldi	r22, 0x12	; 18
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	4f ef       	ldi	r20, 0xFF	; 255
    1868:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    186c:	8f e2       	ldi	r24, 0x2F	; 47
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	64 e0       	ldi	r22, 0x04	; 4
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	4f ef       	ldi	r20, 0xFF	; 255
    1876:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
    187a:	8f e2       	ldi	r24, 0x2F	; 47
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	65 e0       	ldi	r22, 0x05	; 5
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	4f ef       	ldi	r20, 0xFF	; 255
    1884:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    1888:	8f e2       	ldi	r24, 0x2F	; 47
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	66 e0       	ldi	r22, 0x06	; 6
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	4f ef       	ldi	r20, 0xFF	; 255
    1892:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    1896:	8f e2       	ldi	r24, 0x2F	; 47
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	67 e0       	ldi	r22, 0x07	; 7
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	4f ef       	ldi	r20, 0xFF	; 255
    18a0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    18a4:	8f e2       	ldi	r24, 0x2F	; 47
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	68 e0       	ldi	r22, 0x08	; 8
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	4f ef       	ldi	r20, 0xFF	; 255
    18ae:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    18b2:	8f e2       	ldi	r24, 0x2F	; 47
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	69 e0       	ldi	r22, 0x09	; 9
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	4f ef       	ldi	r20, 0xFF	; 255
    18bc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    18c0:	8f e2       	ldi	r24, 0x2F	; 47
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	6a e0       	ldi	r22, 0x0A	; 10
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	4f ef       	ldi	r20, 0xFF	; 255
    18ca:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    18ce:	8f e2       	ldi	r24, 0x2F	; 47
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	6b e0       	ldi	r22, 0x0B	; 11
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	4f ef       	ldi	r20, 0xFF	; 255
    18d8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    18dc:	8f e2       	ldi	r24, 0x2F	; 47
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	62 e1       	ldi	r22, 0x12	; 18
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	4f ef       	ldi	r20, 0xFF	; 255
    18e6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    18ea:	80 e3       	ldi	r24, 0x30	; 48
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	67 e0       	ldi	r22, 0x07	; 7
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	4f ef       	ldi	r20, 0xFF	; 255
    18f4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    18f8:	80 e3       	ldi	r24, 0x30	; 48
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	68 e0       	ldi	r22, 0x08	; 8
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	4f ef       	ldi	r20, 0xFF	; 255
    1902:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1906:	80 e3       	ldi	r24, 0x30	; 48
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	69 e0       	ldi	r22, 0x09	; 9
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	4f ef       	ldi	r20, 0xFF	; 255
    1910:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1914:	80 e3       	ldi	r24, 0x30	; 48
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	6a e0       	ldi	r22, 0x0A	; 10
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	4f ef       	ldi	r20, 0xFF	; 255
    191e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1922:	80 e3       	ldi	r24, 0x30	; 48
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	6b e0       	ldi	r22, 0x0B	; 11
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	4f ef       	ldi	r20, 0xFF	; 255
    192c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    1930:	80 e3       	ldi	r24, 0x30	; 48
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	62 e1       	ldi	r22, 0x12	; 18
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	4f ef       	ldi	r20, 0xFF	; 255
    193a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
    193e:	81 e3       	ldi	r24, 0x31	; 49
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	65 e0       	ldi	r22, 0x05	; 5
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	4f ef       	ldi	r20, 0xFF	; 255
    1948:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    194c:	81 e3       	ldi	r24, 0x31	; 49
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	66 e0       	ldi	r22, 0x06	; 6
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	4f ef       	ldi	r20, 0xFF	; 255
    1956:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    195a:	81 e3       	ldi	r24, 0x31	; 49
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	4f ef       	ldi	r20, 0xFF	; 255
    1964:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1968:	81 e3       	ldi	r24, 0x31	; 49
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	68 e0       	ldi	r22, 0x08	; 8
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	4f ef       	ldi	r20, 0xFF	; 255
    1972:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1976:	81 e3       	ldi	r24, 0x31	; 49
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	69 e0       	ldi	r22, 0x09	; 9
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    1984:	81 e3       	ldi	r24, 0x31	; 49
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	62 e1       	ldi	r22, 0x12	; 18
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	4f ef       	ldi	r20, 0xFF	; 255
    198e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 1, PIXEL_ON);
    1992:	82 e3       	ldi	r24, 0x32	; 50
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	4f ef       	ldi	r20, 0xFF	; 255
    199c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
    19a0:	82 e3       	ldi	r24, 0x32	; 50
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	63 e0       	ldi	r22, 0x03	; 3
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	4f ef       	ldi	r20, 0xFF	; 255
    19aa:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    19ae:	82 e3       	ldi	r24, 0x32	; 50
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	64 e0       	ldi	r22, 0x04	; 4
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	4f ef       	ldi	r20, 0xFF	; 255
    19b8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
    19bc:	82 e3       	ldi	r24, 0x32	; 50
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	65 e0       	ldi	r22, 0x05	; 5
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	4f ef       	ldi	r20, 0xFF	; 255
    19c6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    19ca:	82 e3       	ldi	r24, 0x32	; 50
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	66 e0       	ldi	r22, 0x06	; 6
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	4f ef       	ldi	r20, 0xFF	; 255
    19d4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    19d8:	82 e3       	ldi	r24, 0x32	; 50
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	67 e0       	ldi	r22, 0x07	; 7
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	4f ef       	ldi	r20, 0xFF	; 255
    19e2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    19e6:	82 e3       	ldi	r24, 0x32	; 50
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	68 e0       	ldi	r22, 0x08	; 8
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	4f ef       	ldi	r20, 0xFF	; 255
    19f0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    19f4:	82 e3       	ldi	r24, 0x32	; 50
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	62 e1       	ldi	r22, 0x12	; 18
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	4f ef       	ldi	r20, 0xFF	; 255
    19fe:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    1a02:	83 e3       	ldi	r24, 0x33	; 51
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	64 e0       	ldi	r22, 0x04	; 4
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	4f ef       	ldi	r20, 0xFF	; 255
    1a0c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
    1a10:	83 e3       	ldi	r24, 0x33	; 51
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	65 e0       	ldi	r22, 0x05	; 5
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	4f ef       	ldi	r20, 0xFF	; 255
    1a1a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    1a1e:	83 e3       	ldi	r24, 0x33	; 51
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	66 e0       	ldi	r22, 0x06	; 6
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	4f ef       	ldi	r20, 0xFF	; 255
    1a28:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    1a2c:	83 e3       	ldi	r24, 0x33	; 51
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	67 e0       	ldi	r22, 0x07	; 7
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	4f ef       	ldi	r20, 0xFF	; 255
    1a36:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1a3a:	83 e3       	ldi	r24, 0x33	; 51
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	68 e0       	ldi	r22, 0x08	; 8
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	4f ef       	ldi	r20, 0xFF	; 255
    1a44:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1a48:	83 e3       	ldi	r24, 0x33	; 51
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	69 e0       	ldi	r22, 0x09	; 9
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	4f ef       	ldi	r20, 0xFF	; 255
    1a52:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1a56:	83 e3       	ldi	r24, 0x33	; 51
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	6a e0       	ldi	r22, 0x0A	; 10
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	4f ef       	ldi	r20, 0xFF	; 255
    1a60:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1a64:	83 e3       	ldi	r24, 0x33	; 51
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	6b e0       	ldi	r22, 0x0B	; 11
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	4f ef       	ldi	r20, 0xFF	; 255
    1a6e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1a72:	83 e3       	ldi	r24, 0x33	; 51
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	6c e0       	ldi	r22, 0x0C	; 12
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	4f ef       	ldi	r20, 0xFF	; 255
    1a7c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1a80:	83 e3       	ldi	r24, 0x33	; 51
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	6d e0       	ldi	r22, 0x0D	; 13
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	4f ef       	ldi	r20, 0xFF	; 255
    1a8a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    1a8e:	83 e3       	ldi	r24, 0x33	; 51
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	62 e1       	ldi	r22, 0x12	; 18
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	4f ef       	ldi	r20, 0xFF	; 255
    1a98:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    1a9c:	84 e3       	ldi	r24, 0x34	; 52
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	66 e0       	ldi	r22, 0x06	; 6
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	4f ef       	ldi	r20, 0xFF	; 255
    1aa6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    1aaa:	84 e3       	ldi	r24, 0x34	; 52
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	67 e0       	ldi	r22, 0x07	; 7
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	4f ef       	ldi	r20, 0xFF	; 255
    1ab4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1ab8:	84 e3       	ldi	r24, 0x34	; 52
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	68 e0       	ldi	r22, 0x08	; 8
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	4f ef       	ldi	r20, 0xFF	; 255
    1ac2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1ac6:	84 e3       	ldi	r24, 0x34	; 52
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	69 e0       	ldi	r22, 0x09	; 9
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	4f ef       	ldi	r20, 0xFF	; 255
    1ad0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1ad4:	84 e3       	ldi	r24, 0x34	; 52
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	6a e0       	ldi	r22, 0x0A	; 10
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	4f ef       	ldi	r20, 0xFF	; 255
    1ade:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1ae2:	84 e3       	ldi	r24, 0x34	; 52
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	6b e0       	ldi	r22, 0x0B	; 11
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	4f ef       	ldi	r20, 0xFF	; 255
    1aec:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    1af0:	84 e3       	ldi	r24, 0x34	; 52
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	61 e1       	ldi	r22, 0x11	; 17
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	4f ef       	ldi	r20, 0xFF	; 255
    1afa:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    1afe:	84 e3       	ldi	r24, 0x34	; 52
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	62 e1       	ldi	r22, 0x12	; 18
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	4f ef       	ldi	r20, 0xFF	; 255
    1b08:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    1b0c:	85 e3       	ldi	r24, 0x35	; 53
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	67 e0       	ldi	r22, 0x07	; 7
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	4f ef       	ldi	r20, 0xFF	; 255
    1b16:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1b1a:	85 e3       	ldi	r24, 0x35	; 53
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	68 e0       	ldi	r22, 0x08	; 8
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	4f ef       	ldi	r20, 0xFF	; 255
    1b24:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1b28:	85 e3       	ldi	r24, 0x35	; 53
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	69 e0       	ldi	r22, 0x09	; 9
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	4f ef       	ldi	r20, 0xFF	; 255
    1b32:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1b36:	85 e3       	ldi	r24, 0x35	; 53
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	6a e0       	ldi	r22, 0x0A	; 10
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	4f ef       	ldi	r20, 0xFF	; 255
    1b40:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1b44:	85 e3       	ldi	r24, 0x35	; 53
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	6b e0       	ldi	r22, 0x0B	; 11
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	4f ef       	ldi	r20, 0xFF	; 255
    1b4e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1b52:	85 e3       	ldi	r24, 0x35	; 53
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	6c e0       	ldi	r22, 0x0C	; 12
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	4f ef       	ldi	r20, 0xFF	; 255
    1b5c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1b60:	85 e3       	ldi	r24, 0x35	; 53
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	6d e0       	ldi	r22, 0x0D	; 13
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	4f ef       	ldi	r20, 0xFF	; 255
    1b6a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1b6e:	85 e3       	ldi	r24, 0x35	; 53
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	6e e0       	ldi	r22, 0x0E	; 14
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	4f ef       	ldi	r20, 0xFF	; 255
    1b78:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    1b7c:	85 e3       	ldi	r24, 0x35	; 53
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	6f e0       	ldi	r22, 0x0F	; 15
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	4f ef       	ldi	r20, 0xFF	; 255
    1b86:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    1b8a:	85 e3       	ldi	r24, 0x35	; 53
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	60 e1       	ldi	r22, 0x10	; 16
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	4f ef       	ldi	r20, 0xFF	; 255
    1b94:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    1b98:	85 e3       	ldi	r24, 0x35	; 53
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	61 e1       	ldi	r22, 0x11	; 17
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	4f ef       	ldi	r20, 0xFF	; 255
    1ba2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1ba6:	86 e3       	ldi	r24, 0x36	; 54
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	6a e0       	ldi	r22, 0x0A	; 10
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	4f ef       	ldi	r20, 0xFF	; 255
    1bb0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1bb4:	86 e3       	ldi	r24, 0x36	; 54
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	6b e0       	ldi	r22, 0x0B	; 11
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	4f ef       	ldi	r20, 0xFF	; 255
    1bbe:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1bc2:	86 e3       	ldi	r24, 0x36	; 54
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	6c e0       	ldi	r22, 0x0C	; 12
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	4f ef       	ldi	r20, 0xFF	; 255
    1bcc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1bd0:	86 e3       	ldi	r24, 0x36	; 54
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	6d e0       	ldi	r22, 0x0D	; 13
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	4f ef       	ldi	r20, 0xFF	; 255
    1bda:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1bde:	86 e3       	ldi	r24, 0x36	; 54
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	6e e0       	ldi	r22, 0x0E	; 14
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	4f ef       	ldi	r20, 0xFF	; 255
    1be8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    1bec:	86 e3       	ldi	r24, 0x36	; 54
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	6f e0       	ldi	r22, 0x0F	; 15
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	4f ef       	ldi	r20, 0xFF	; 255
    1bf6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    1bfa:	86 e3       	ldi	r24, 0x36	; 54
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	60 e1       	ldi	r22, 0x10	; 16
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	4f ef       	ldi	r20, 0xFF	; 255
    1c04:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1c08:	87 e3       	ldi	r24, 0x37	; 55
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	68 e0       	ldi	r22, 0x08	; 8
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	4f ef       	ldi	r20, 0xFF	; 255
    1c12:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1c16:	87 e3       	ldi	r24, 0x37	; 55
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	69 e0       	ldi	r22, 0x09	; 9
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	4f ef       	ldi	r20, 0xFF	; 255
    1c20:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1c24:	87 e3       	ldi	r24, 0x37	; 55
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	6a e0       	ldi	r22, 0x0A	; 10
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	4f ef       	ldi	r20, 0xFF	; 255
    1c2e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1c32:	87 e3       	ldi	r24, 0x37	; 55
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	6b e0       	ldi	r22, 0x0B	; 11
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	4f ef       	ldi	r20, 0xFF	; 255
    1c3c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1c40:	87 e3       	ldi	r24, 0x37	; 55
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	6c e0       	ldi	r22, 0x0C	; 12
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	4f ef       	ldi	r20, 0xFF	; 255
    1c4a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1c4e:	87 e3       	ldi	r24, 0x37	; 55
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	6d e0       	ldi	r22, 0x0D	; 13
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	4f ef       	ldi	r20, 0xFF	; 255
    1c58:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1c5c:	87 e3       	ldi	r24, 0x37	; 55
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	6e e0       	ldi	r22, 0x0E	; 14
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	4f ef       	ldi	r20, 0xFF	; 255
    1c66:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    1c6a:	87 e3       	ldi	r24, 0x37	; 55
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	6f e0       	ldi	r22, 0x0F	; 15
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	4f ef       	ldi	r20, 0xFF	; 255
    1c74:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1c78:	88 e3       	ldi	r24, 0x38	; 56
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	6c e0       	ldi	r22, 0x0C	; 12
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	4f ef       	ldi	r20, 0xFF	; 255
    1c82:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1c86:	88 e3       	ldi	r24, 0x38	; 56
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	6d e0       	ldi	r22, 0x0D	; 13
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	4f ef       	ldi	r20, 0xFF	; 255
    1c90:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1c94:	88 e3       	ldi	r24, 0x38	; 56
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	6e e0       	ldi	r22, 0x0E	; 14
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	4f ef       	ldi	r20, 0xFF	; 255
    1c9e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <draw_flake>:

void draw_flake(void)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <draw_flake+0x6>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
	unsigned char x, y;
	
	for (x = 1; x <= 17; x++)
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	1b c0       	rjmp	.+54     	; 0x1cf2 <draw_flake+0x46>
	{
		for (y = 1; y <= 17; y++)
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	12 c0       	rjmp	.+36     	; 0x1ce6 <draw_flake+0x3a>
		{
			lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + x, PIC_POS_FLAME_FLAKE_Y + y, PIXEL_OFF);
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	88 96       	adiw	r24, 0x28	; 40
    1cca:	ac 01       	movw	r20, r24
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	ca 01       	movw	r24, r20
    1cd8:	b9 01       	movw	r22, r18
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
{
	unsigned char x, y;
	
	for (x = 1; x <= 17; x++)
	{
		for (y = 1; y <= 17; y++)
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	82 31       	cpi	r24, 0x12	; 18
    1cea:	58 f3       	brcs	.-42     	; 0x1cc2 <draw_flake+0x16>

void draw_flake(void)
{
	unsigned char x, y;
	
	for (x = 1; x <= 17; x++)
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	8f 5f       	subi	r24, 0xFF	; 255
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	82 31       	cpi	r24, 0x12	; 18
    1cf6:	10 f3       	brcs	.-60     	; 0x1cbc <draw_flake+0x10>
		for (y = 1; y <= 17; y++)
		{
			lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + x, PIC_POS_FLAME_FLAKE_Y + y, PIXEL_OFF);
		}
	}
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 1, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1cf8:	89 e2       	ldi	r24, 0x29	; 41
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	6a e0       	ldi	r22, 0x0A	; 10
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	4f ef       	ldi	r20, 0xFF	; 255
    1d02:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    1d06:	8a e2       	ldi	r24, 0x2A	; 42
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	66 e0       	ldi	r22, 0x06	; 6
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	4f ef       	ldi	r20, 0xFF	; 255
    1d10:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1d14:	8a e2       	ldi	r24, 0x2A	; 42
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	68 e0       	ldi	r22, 0x08	; 8
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	4f ef       	ldi	r20, 0xFF	; 255
    1d1e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1d22:	8a e2       	ldi	r24, 0x2A	; 42
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	6a e0       	ldi	r22, 0x0A	; 10
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	4f ef       	ldi	r20, 0xFF	; 255
    1d2c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1d30:	8a e2       	ldi	r24, 0x2A	; 42
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	6c e0       	ldi	r22, 0x0C	; 12
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	4f ef       	ldi	r20, 0xFF	; 255
    1d3a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1d3e:	8a e2       	ldi	r24, 0x2A	; 42
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	6e e0       	ldi	r22, 0x0E	; 14
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	4f ef       	ldi	r20, 0xFF	; 255
    1d48:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    1d4c:	8b e2       	ldi	r24, 0x2B	; 43
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	64 e0       	ldi	r22, 0x04	; 4
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	4f ef       	ldi	r20, 0xFF	; 255
    1d56:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    1d5a:	8b e2       	ldi	r24, 0x2B	; 43
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	66 e0       	ldi	r22, 0x06	; 6
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	4f ef       	ldi	r20, 0xFF	; 255
    1d64:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1d68:	8b e2       	ldi	r24, 0x2B	; 43
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	69 e0       	ldi	r22, 0x09	; 9
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	4f ef       	ldi	r20, 0xFF	; 255
    1d72:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1d76:	8b e2       	ldi	r24, 0x2B	; 43
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	6a e0       	ldi	r22, 0x0A	; 10
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	4f ef       	ldi	r20, 0xFF	; 255
    1d80:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1d84:	8b e2       	ldi	r24, 0x2B	; 43
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	6b e0       	ldi	r22, 0x0B	; 11
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	4f ef       	ldi	r20, 0xFF	; 255
    1d8e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1d92:	8b e2       	ldi	r24, 0x2B	; 43
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	6e e0       	ldi	r22, 0x0E	; 14
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	4f ef       	ldi	r20, 0xFF	; 255
    1d9c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    1da0:	8b e2       	ldi	r24, 0x2B	; 43
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	60 e1       	ldi	r22, 0x10	; 16
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	4f ef       	ldi	r20, 0xFF	; 255
    1daa:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
    1dae:	8c e2       	ldi	r24, 0x2C	; 44
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	65 e0       	ldi	r22, 0x05	; 5
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	4f ef       	ldi	r20, 0xFF	; 255
    1db8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1dbc:	8c e2       	ldi	r24, 0x2C	; 44
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	6a e0       	ldi	r22, 0x0A	; 10
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	4f ef       	ldi	r20, 0xFF	; 255
    1dc6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    1dca:	8c e2       	ldi	r24, 0x2C	; 44
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	6f e0       	ldi	r22, 0x0F	; 15
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	4f ef       	ldi	r20, 0xFF	; 255
    1dd4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
    1dd8:	8d e2       	ldi	r24, 0x2D	; 45
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	63 e0       	ldi	r22, 0x03	; 3
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	4f ef       	ldi	r20, 0xFF	; 255
    1de2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    1de6:	8d e2       	ldi	r24, 0x2D	; 45
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	64 e0       	ldi	r22, 0x04	; 4
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	4f ef       	ldi	r20, 0xFF	; 255
    1df0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    1df4:	8d e2       	ldi	r24, 0x2D	; 45
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	66 e0       	ldi	r22, 0x06	; 6
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	4f ef       	ldi	r20, 0xFF	; 255
    1dfe:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1e02:	8d e2       	ldi	r24, 0x2D	; 45
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	6a e0       	ldi	r22, 0x0A	; 10
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	4f ef       	ldi	r20, 0xFF	; 255
    1e0c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1e10:	8d e2       	ldi	r24, 0x2D	; 45
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	6e e0       	ldi	r22, 0x0E	; 14
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	4f ef       	ldi	r20, 0xFF	; 255
    1e1a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    1e1e:	8d e2       	ldi	r24, 0x2D	; 45
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	60 e1       	ldi	r22, 0x10	; 16
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	4f ef       	ldi	r20, 0xFF	; 255
    1e28:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    1e2c:	8d e2       	ldi	r24, 0x2D	; 45
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	61 e1       	ldi	r22, 0x11	; 17
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	4f ef       	ldi	r20, 0xFF	; 255
    1e36:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    1e3a:	8e e2       	ldi	r24, 0x2E	; 46
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	67 e0       	ldi	r22, 0x07	; 7
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	4f ef       	ldi	r20, 0xFF	; 255
    1e44:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1e48:	8e e2       	ldi	r24, 0x2E	; 46
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	6a e0       	ldi	r22, 0x0A	; 10
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	4f ef       	ldi	r20, 0xFF	; 255
    1e52:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1e56:	8e e2       	ldi	r24, 0x2E	; 46
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	6d e0       	ldi	r22, 0x0D	; 13
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	4f ef       	ldi	r20, 0xFF	; 255
    1e60:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
    1e64:	8f e2       	ldi	r24, 0x2F	; 47
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	63 e0       	ldi	r22, 0x03	; 3
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	4f ef       	ldi	r20, 0xFF	; 255
    1e6e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1e72:	8f e2       	ldi	r24, 0x2F	; 47
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	68 e0       	ldi	r22, 0x08	; 8
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	4f ef       	ldi	r20, 0xFF	; 255
    1e7c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1e80:	8f e2       	ldi	r24, 0x2F	; 47
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	6a e0       	ldi	r22, 0x0A	; 10
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	4f ef       	ldi	r20, 0xFF	; 255
    1e8a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1e8e:	8f e2       	ldi	r24, 0x2F	; 47
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	6c e0       	ldi	r22, 0x0C	; 12
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	4f ef       	ldi	r20, 0xFF	; 255
    1e98:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    1e9c:	8f e2       	ldi	r24, 0x2F	; 47
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	61 e1       	ldi	r22, 0x11	; 17
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	4f ef       	ldi	r20, 0xFF	; 255
    1ea6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    1eaa:	80 e3       	ldi	r24, 0x30	; 48
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	64 e0       	ldi	r22, 0x04	; 4
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	4f ef       	ldi	r20, 0xFF	; 255
    1eb4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1eb8:	80 e3       	ldi	r24, 0x30	; 48
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	69 e0       	ldi	r22, 0x09	; 9
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	4f ef       	ldi	r20, 0xFF	; 255
    1ec2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1ec6:	80 e3       	ldi	r24, 0x30	; 48
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	6a e0       	ldi	r22, 0x0A	; 10
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	4f ef       	ldi	r20, 0xFF	; 255
    1ed0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1ed4:	80 e3       	ldi	r24, 0x30	; 48
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	6b e0       	ldi	r22, 0x0B	; 11
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	4f ef       	ldi	r20, 0xFF	; 255
    1ede:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    1ee2:	80 e3       	ldi	r24, 0x30	; 48
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	60 e1       	ldi	r22, 0x10	; 16
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	4f ef       	ldi	r20, 0xFF	; 255
    1eec:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 1, PIXEL_ON);
    1ef0:	81 e3       	ldi	r24, 0x31	; 49
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	62 e0       	ldi	r22, 0x02	; 2
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	4f ef       	ldi	r20, 0xFF	; 255
    1efa:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
    1efe:	81 e3       	ldi	r24, 0x31	; 49
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	63 e0       	ldi	r22, 0x03	; 3
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	4f ef       	ldi	r20, 0xFF	; 255
    1f08:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    1f0c:	81 e3       	ldi	r24, 0x31	; 49
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	64 e0       	ldi	r22, 0x04	; 4
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	4f ef       	ldi	r20, 0xFF	; 255
    1f16:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
    1f1a:	81 e3       	ldi	r24, 0x31	; 49
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	65 e0       	ldi	r22, 0x05	; 5
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	4f ef       	ldi	r20, 0xFF	; 255
    1f24:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    1f28:	81 e3       	ldi	r24, 0x31	; 49
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	66 e0       	ldi	r22, 0x06	; 6
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	4f ef       	ldi	r20, 0xFF	; 255
    1f32:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    1f36:	81 e3       	ldi	r24, 0x31	; 49
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	67 e0       	ldi	r22, 0x07	; 7
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	4f ef       	ldi	r20, 0xFF	; 255
    1f40:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    1f44:	81 e3       	ldi	r24, 0x31	; 49
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	68 e0       	ldi	r22, 0x08	; 8
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	4f ef       	ldi	r20, 0xFF	; 255
    1f4e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1f52:	81 e3       	ldi	r24, 0x31	; 49
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	69 e0       	ldi	r22, 0x09	; 9
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	4f ef       	ldi	r20, 0xFF	; 255
    1f5c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1f60:	81 e3       	ldi	r24, 0x31	; 49
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	6a e0       	ldi	r22, 0x0A	; 10
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	4f ef       	ldi	r20, 0xFF	; 255
    1f6a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    1f6e:	81 e3       	ldi	r24, 0x31	; 49
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	6b e0       	ldi	r22, 0x0B	; 11
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	4f ef       	ldi	r20, 0xFF	; 255
    1f78:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    1f7c:	81 e3       	ldi	r24, 0x31	; 49
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	6c e0       	ldi	r22, 0x0C	; 12
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	4f ef       	ldi	r20, 0xFF	; 255
    1f86:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    1f8a:	81 e3       	ldi	r24, 0x31	; 49
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	6d e0       	ldi	r22, 0x0D	; 13
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	4f ef       	ldi	r20, 0xFF	; 255
    1f94:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    1f98:	81 e3       	ldi	r24, 0x31	; 49
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	6e e0       	ldi	r22, 0x0E	; 14
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	4f ef       	ldi	r20, 0xFF	; 255
    1fa2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    1fa6:	81 e3       	ldi	r24, 0x31	; 49
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	6f e0       	ldi	r22, 0x0F	; 15
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	4f ef       	ldi	r20, 0xFF	; 255
    1fb0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    1fb4:	81 e3       	ldi	r24, 0x31	; 49
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	60 e1       	ldi	r22, 0x10	; 16
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	4f ef       	ldi	r20, 0xFF	; 255
    1fbe:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    1fc2:	81 e3       	ldi	r24, 0x31	; 49
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	61 e1       	ldi	r22, 0x11	; 17
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	4f ef       	ldi	r20, 0xFF	; 255
    1fcc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
    1fd0:	81 e3       	ldi	r24, 0x31	; 49
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	62 e1       	ldi	r22, 0x12	; 18
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	4f ef       	ldi	r20, 0xFF	; 255
    1fda:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    1fde:	82 e3       	ldi	r24, 0x32	; 50
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	64 e0       	ldi	r22, 0x04	; 4
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	4f ef       	ldi	r20, 0xFF	; 255
    1fe8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    1fec:	82 e3       	ldi	r24, 0x32	; 50
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	69 e0       	ldi	r22, 0x09	; 9
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	4f ef       	ldi	r20, 0xFF	; 255
    1ff6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    1ffa:	82 e3       	ldi	r24, 0x32	; 50
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	6a e0       	ldi	r22, 0x0A	; 10
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	4f ef       	ldi	r20, 0xFF	; 255
    2004:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    2008:	82 e3       	ldi	r24, 0x32	; 50
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	6b e0       	ldi	r22, 0x0B	; 11
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	4f ef       	ldi	r20, 0xFF	; 255
    2012:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    2016:	82 e3       	ldi	r24, 0x32	; 50
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	60 e1       	ldi	r22, 0x10	; 16
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	4f ef       	ldi	r20, 0xFF	; 255
    2020:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
    2024:	83 e3       	ldi	r24, 0x33	; 51
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	63 e0       	ldi	r22, 0x03	; 3
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	4f ef       	ldi	r20, 0xFF	; 255
    202e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    2032:	83 e3       	ldi	r24, 0x33	; 51
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	68 e0       	ldi	r22, 0x08	; 8
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	4f ef       	ldi	r20, 0xFF	; 255
    203c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    2040:	83 e3       	ldi	r24, 0x33	; 51
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	6a e0       	ldi	r22, 0x0A	; 10
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	4f ef       	ldi	r20, 0xFF	; 255
    204a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    204e:	83 e3       	ldi	r24, 0x33	; 51
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	6c e0       	ldi	r22, 0x0C	; 12
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	4f ef       	ldi	r20, 0xFF	; 255
    2058:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    205c:	83 e3       	ldi	r24, 0x33	; 51
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	61 e1       	ldi	r22, 0x11	; 17
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	4f ef       	ldi	r20, 0xFF	; 255
    2066:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
    206a:	84 e3       	ldi	r24, 0x34	; 52
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	67 e0       	ldi	r22, 0x07	; 7
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	4f ef       	ldi	r20, 0xFF	; 255
    2074:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    2078:	84 e3       	ldi	r24, 0x34	; 52
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	6a e0       	ldi	r22, 0x0A	; 10
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	4f ef       	ldi	r20, 0xFF	; 255
    2082:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
    2086:	84 e3       	ldi	r24, 0x34	; 52
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	6d e0       	ldi	r22, 0x0D	; 13
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	4f ef       	ldi	r20, 0xFF	; 255
    2090:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
    2094:	85 e3       	ldi	r24, 0x35	; 53
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	63 e0       	ldi	r22, 0x03	; 3
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	4f ef       	ldi	r20, 0xFF	; 255
    209e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    20a2:	85 e3       	ldi	r24, 0x35	; 53
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	64 e0       	ldi	r22, 0x04	; 4
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	4f ef       	ldi	r20, 0xFF	; 255
    20ac:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    20b0:	85 e3       	ldi	r24, 0x35	; 53
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	66 e0       	ldi	r22, 0x06	; 6
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	4f ef       	ldi	r20, 0xFF	; 255
    20ba:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    20be:	85 e3       	ldi	r24, 0x35	; 53
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	6a e0       	ldi	r22, 0x0A	; 10
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	4f ef       	ldi	r20, 0xFF	; 255
    20c8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    20cc:	85 e3       	ldi	r24, 0x35	; 53
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	6e e0       	ldi	r22, 0x0E	; 14
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	4f ef       	ldi	r20, 0xFF	; 255
    20d6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    20da:	85 e3       	ldi	r24, 0x35	; 53
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	60 e1       	ldi	r22, 0x10	; 16
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	4f ef       	ldi	r20, 0xFF	; 255
    20e4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
    20e8:	85 e3       	ldi	r24, 0x35	; 53
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	61 e1       	ldi	r22, 0x11	; 17
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	4f ef       	ldi	r20, 0xFF	; 255
    20f2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
    20f6:	86 e3       	ldi	r24, 0x36	; 54
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	65 e0       	ldi	r22, 0x05	; 5
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	4f ef       	ldi	r20, 0xFF	; 255
    2100:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    2104:	86 e3       	ldi	r24, 0x36	; 54
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	6a e0       	ldi	r22, 0x0A	; 10
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	4f ef       	ldi	r20, 0xFF	; 255
    210e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
    2112:	86 e3       	ldi	r24, 0x36	; 54
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	6f e0       	ldi	r22, 0x0F	; 15
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	4f ef       	ldi	r20, 0xFF	; 255
    211c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
    2120:	87 e3       	ldi	r24, 0x37	; 55
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	64 e0       	ldi	r22, 0x04	; 4
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	4f ef       	ldi	r20, 0xFF	; 255
    212a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    212e:	87 e3       	ldi	r24, 0x37	; 55
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	66 e0       	ldi	r22, 0x06	; 6
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	4f ef       	ldi	r20, 0xFF	; 255
    2138:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
    213c:	87 e3       	ldi	r24, 0x37	; 55
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	69 e0       	ldi	r22, 0x09	; 9
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	4f ef       	ldi	r20, 0xFF	; 255
    2146:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    214a:	87 e3       	ldi	r24, 0x37	; 55
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	6a e0       	ldi	r22, 0x0A	; 10
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	4f ef       	ldi	r20, 0xFF	; 255
    2154:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
    2158:	87 e3       	ldi	r24, 0x37	; 55
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	6b e0       	ldi	r22, 0x0B	; 11
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	4f ef       	ldi	r20, 0xFF	; 255
    2162:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    2166:	87 e3       	ldi	r24, 0x37	; 55
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	6e e0       	ldi	r22, 0x0E	; 14
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	4f ef       	ldi	r20, 0xFF	; 255
    2170:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
    2174:	87 e3       	ldi	r24, 0x37	; 55
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	60 e1       	ldi	r22, 0x10	; 16
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	4f ef       	ldi	r20, 0xFF	; 255
    217e:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
    2182:	88 e3       	ldi	r24, 0x38	; 56
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	66 e0       	ldi	r22, 0x06	; 6
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	4f ef       	ldi	r20, 0xFF	; 255
    218c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
    2190:	88 e3       	ldi	r24, 0x38	; 56
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	68 e0       	ldi	r22, 0x08	; 8
    2196:	70 e0       	ldi	r23, 0x00	; 0
    2198:	4f ef       	ldi	r20, 0xFF	; 255
    219a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    219e:	88 e3       	ldi	r24, 0x38	; 56
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	6a e0       	ldi	r22, 0x0A	; 10
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	4f ef       	ldi	r20, 0xFF	; 255
    21a8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
    21ac:	88 e3       	ldi	r24, 0x38	; 56
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	6c e0       	ldi	r22, 0x0C	; 12
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	4f ef       	ldi	r20, 0xFF	; 255
    21b6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
    21ba:	88 e3       	ldi	r24, 0x38	; 56
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	6e e0       	ldi	r22, 0x0E	; 14
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	4f ef       	ldi	r20, 0xFF	; 255
    21c4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
    lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 17, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
    21c8:	89 e3       	ldi	r24, 0x39	; 57
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	6a e0       	ldi	r22, 0x0A	; 10
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	4f ef       	ldi	r20, 0xFF	; 255
    21d2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <__vector_21>:
//unsigned int touch_ad_y = 0;
//unsigned char touch_bcd_x[6] = "x0000";
//unsigned char touch_bcd_y[6] = "y0000";

SIGNAL (SIG_ADC)								//a/d converter in interrupt mode
{
    21e0:	1f 92       	push	r1
    21e2:	0f 92       	push	r0
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	0f 92       	push	r0
    21e8:	00 90 5b 00 	lds	r0, 0x005B
    21ec:	0f 92       	push	r0
    21ee:	11 24       	eor	r1, r1
    21f0:	2f 93       	push	r18
    21f2:	3f 93       	push	r19
    21f4:	8f 93       	push	r24
    21f6:	9f 93       	push	r25
    21f8:	ef 93       	push	r30
    21fa:	ff 93       	push	r31
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
	val_ad = ADCL;
    2204:	e4 e2       	ldi	r30, 0x24	; 36
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	90 93 21 04 	sts	0x0421, r25
    2212:	80 93 20 04 	sts	0x0420, r24
	val_ad |= (ADCH<<8);
    2216:	e5 e2       	ldi	r30, 0x25	; 37
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	98 2f       	mov	r25, r24
    2222:	88 27       	eor	r24, r24
    2224:	9c 01       	movw	r18, r24
    2226:	80 91 20 04 	lds	r24, 0x0420
    222a:	90 91 21 04 	lds	r25, 0x0421
    222e:	82 2b       	or	r24, r18
    2230:	93 2b       	or	r25, r19
    2232:	90 93 21 04 	sts	0x0421, r25
    2236:	80 93 20 04 	sts	0x0420, r24
}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	3f 91       	pop	r19
    2248:	2f 91       	pop	r18
    224a:	0f 90       	pop	r0
    224c:	00 92 5b 00 	sts	0x005B, r0
    2250:	0f 90       	pop	r0
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	0f 90       	pop	r0
    2256:	1f 90       	pop	r1
    2258:	18 95       	reti

0000225a <main>:

int main(void)									//main program
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <main+0x6>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <main+0x8>
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
//============= 	VAR generell		================
	unsigned char x_pix, y_pix = 0;			//x & y position of meassured point
    2266:	1b 82       	std	Y+3, r1	; 0x03
//============= 	Flake and Flame		================
#ifdef FLAME_AND_FLAKE_ON
	unsigned char flake_drawn = 0;
    2268:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char flame_drawn = 0;
    226a:	19 82       	std	Y+1, r1	; 0x01
#endif
//============= 		Init LCD		================	
	lcd_graphics_init();						//init LCD
    226c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_graphics_init>
	lcd_graphics_clear();						//clear LCD
    2270:	0e 94 58 09 	call	0x12b0	; 0x12b0 <lcd_graphics_clear>
	init_out_pin('a', 0);						//porta - pin0 as output for touchscreen
    2274:	81 e6       	ldi	r24, 0x61	; 97
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	0e 94 89 02 	call	0x512	; 0x512 <init_out_pin>
	init_out_pin('d', 0);
    227c:	84 e6       	ldi	r24, 0x64	; 100
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	0e 94 89 02 	call	0x512	; 0x512 <init_out_pin>
	reset_pin('d', 0);
    2284:	84 e6       	ldi	r24, 0x64	; 100
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	0e 94 1b 01 	call	0x236	; 0x236 <reset_pin>
		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
	}
	lcd_graphics_clear();
#endif
//=============	Input Mode Selection	================	
	call_input_mode_screen();
    228c:	0e 94 8b 12 	call	0x2516	; 0x2516 <call_input_mode_screen>
	if (selected_mode == 1)
    2290:	80 91 2b 04 	lds	r24, 0x042B
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	11 f4       	brne	.+4      	; 0x229c <main+0x42>
		call_num_pad_mode();
    2298:	0e 94 40 13 	call	0x2680	; 0x2680 <call_num_pad_mode>
	if (selected_mode == 2)
    229c:	80 91 2b 04 	lds	r24, 0x042B
    22a0:	82 30       	cpi	r24, 0x02	; 2
    22a2:	11 f4       	brne	.+4      	; 0x22a8 <main+0x4e>
		call_slider_mode();
    22a4:	0e 94 8b 18 	call	0x3116	; 0x3116 <call_slider_mode>
//============= 	Controller Screen	================
	draw_layout();
    22a8:	0e 94 2d 1c 	call	0x385a	; 0x385a <draw_layout>
//============= 	Init a/d converter	================
	sei();
    22ac:	78 94       	sei
	ADMUX = 0x40|AD_PIN;						//connect to AD_PIN
    22ae:	e7 e2       	ldi	r30, 0x27	; 39
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 e4       	ldi	r24, 0x40	; 64
    22b4:	80 83       	st	Z, r24
	ADCSRA = 0x9e;								//enable ad converter
    22b6:	e6 e2       	ldi	r30, 0x26	; 38
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	8e e9       	ldi	r24, 0x9E	; 158
    22bc:	80 83       	st	Z, r24
	ADCSRA |= 0x60;								//start converter
    22be:	a6 e2       	ldi	r26, 0x26	; 38
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e6 e2       	ldi	r30, 0x26	; 38
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	80 66       	ori	r24, 0x60	; 96
    22ca:	8c 93       	st	X, r24
//============= 		Program			================
	x_pix = 0;									//pixel x position
    22cc:	1c 82       	std	Y+4, r1	; 0x04
	y_pix = 0;									//pixel y positio
    22ce:	1b 82       	std	Y+3, r1	; 0x03
	clr_diagram();								//clear data array
    22d0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <clr_diagram>
	init_out_pin('a', 0);						//touch control pin
    22d4:	81 e6       	ldi	r24, 0x61	; 97
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	0e 94 89 02 	call	0x512	; 0x512 <init_out_pin>
	//set_pin('d', 0);
	while(1)
	{
		if (x_pix <= 79)
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	80 35       	cpi	r24, 0x50	; 80
    22e0:	08 f0       	brcs	.+2      	; 0x22e4 <main+0x8a>
    22e2:	72 c0       	rjmp	.+228    	; 0x23c8 <main+0x16e>
		{
			diagram[x_pix/8][y_pix] |= (1 << ((-1*(x_pix%8))+7));
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	98 2f       	mov	r25, r24
    22e8:	96 95       	lsr	r25
    22ea:	96 95       	lsr	r25
    22ec:	96 95       	lsr	r25
    22ee:	69 2f       	mov	r22, r25
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	a8 2f       	mov	r26, r24
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	49 2f       	mov	r20, r25
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	8c e3       	ldi	r24, 0x3C	; 60
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	fc 01       	movw	r30, r24
    2308:	4e 9f       	mul	r20, r30
    230a:	c0 01       	movw	r24, r0
    230c:	4f 9f       	mul	r20, r31
    230e:	90 0d       	add	r25, r0
    2310:	5e 9f       	mul	r21, r30
    2312:	90 0d       	add	r25, r0
    2314:	11 24       	eor	r1, r1
    2316:	82 0f       	add	r24, r18
    2318:	93 1f       	adc	r25, r19
    231a:	fc 01       	movw	r30, r24
    231c:	ed 5b       	subi	r30, 0xBD	; 189
    231e:	fb 4f       	sbci	r31, 0xFB	; 251
    2320:	80 81       	ld	r24, Z
    2322:	48 2f       	mov	r20, r24
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	80 95       	com	r24
    232c:	90 95       	com	r25
    232e:	9c 01       	movw	r18, r24
    2330:	27 70       	andi	r18, 0x07	; 7
    2332:	30 70       	andi	r19, 0x00	; 0
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	02 c0       	rjmp	.+4      	; 0x233e <main+0xe4>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	2a 95       	dec	r18
    2340:	e2 f7       	brpl	.-8      	; 0x233a <main+0xe0>
    2342:	84 2b       	or	r24, r20
    2344:	28 2f       	mov	r18, r24
    2346:	8c e3       	ldi	r24, 0x3C	; 60
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	ac 01       	movw	r20, r24
    234c:	64 9f       	mul	r22, r20
    234e:	c0 01       	movw	r24, r0
    2350:	65 9f       	mul	r22, r21
    2352:	90 0d       	add	r25, r0
    2354:	74 9f       	mul	r23, r20
    2356:	90 0d       	add	r25, r0
    2358:	11 24       	eor	r1, r1
    235a:	8a 0f       	add	r24, r26
    235c:	9b 1f       	adc	r25, r27
    235e:	fc 01       	movw	r30, r24
    2360:	ed 5b       	subi	r30, 0xBD	; 189
    2362:	fb 4f       	sbci	r31, 0xFB	; 251
    2364:	20 83       	st	Z, r18
			y_pix = round(0.0048875855*val_ad*11.8);
    2366:	80 91 20 04 	lds	r24, 0x0420
    236a:	90 91 21 04 	lds	r25, 0x0421
    236e:	cc 01       	movw	r24, r24
    2370:	a0 e0       	ldi	r26, 0x00	; 0
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	2a e0       	ldi	r18, 0x0A	; 10
    2386:	38 e2       	ldi	r19, 0x28	; 40
    2388:	40 ea       	ldi	r20, 0xA0	; 160
    238a:	5b e3       	ldi	r21, 0x3B	; 59
    238c:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	2d ec       	ldi	r18, 0xCD	; 205
    239a:	3c ec       	ldi	r19, 0xCC	; 204
    239c:	4c e3       	ldi	r20, 0x3C	; 60
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	8b 83       	std	Y+3, r24	; 0x03
			x_pix++;
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (x_pix == 80)
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	80 35       	cpi	r24, 0x50	; 80
    23cc:	11 f4       	brne	.+4      	; 0x23d2 <main+0x178>
		{
			draw_diagram();
    23ce:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <draw_diagram>
		}
		if (val_ad <= val_min)
    23d2:	20 91 20 04 	lds	r18, 0x0420
    23d6:	30 91 21 04 	lds	r19, 0x0421
    23da:	80 91 22 04 	lds	r24, 0x0422
    23de:	90 91 23 04 	lds	r25, 0x0423
    23e2:	82 17       	cp	r24, r18
    23e4:	93 07       	cpc	r25, r19
    23e6:	60 f0       	brcs	.+24     	; 0x2400 <main+0x1a6>
		{
			set_pin('d', 0);
    23e8:	84 e6       	ldi	r24, 0x64	; 100
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	0e 94 67 00 	call	0xce	; 0xce <set_pin>
#ifdef FLAME_AND_FLAKE_ON
			if (!(flame_drawn))
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	88 23       	and	r24, r24
    23f4:	29 f4       	brne	.+10     	; 0x2400 <main+0x1a6>
			{
				draw_flame();
    23f6:	0e 94 14 0b 	call	0x1628	; 0x1628 <draw_flame>
				flame_drawn = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	89 83       	std	Y+1, r24	; 0x01
				flake_drawn = 0;
    23fe:	1a 82       	std	Y+2, r1	; 0x02
			}
#endif
		}
		if ((val_ad >= val_max))
    2400:	20 91 20 04 	lds	r18, 0x0420
    2404:	30 91 21 04 	lds	r19, 0x0421
    2408:	80 91 24 04 	lds	r24, 0x0424
    240c:	90 91 25 04 	lds	r25, 0x0425
    2410:	28 17       	cp	r18, r24
    2412:	39 07       	cpc	r19, r25
    2414:	60 f0       	brcs	.+24     	; 0x242e <main+0x1d4>
		{
			reset_pin('d', 0);
    2416:	84 e6       	ldi	r24, 0x64	; 100
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	0e 94 1b 01 	call	0x236	; 0x236 <reset_pin>
#ifdef FLAME_AND_FLAKE_ON
			if (!(flake_drawn))
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	88 23       	and	r24, r24
    2422:	29 f4       	brne	.+10     	; 0x242e <main+0x1d4>
			{
				draw_flake();
    2424:	0e 94 56 0e 	call	0x1cac	; 0x1cac <draw_flake>
				flake_drawn = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	8a 83       	std	Y+2, r24	; 0x02
				flame_drawn = 0;
    242c:	19 82       	std	Y+1, r1	; 0x01
			}
#endif
		}
#ifdef SHOW_AD_VALUE
		val_ad_bcd[0] = ((round(val_ad * 0.096774)) / 10) + 48;
    242e:	80 91 20 04 	lds	r24, 0x0420
    2432:	90 91 21 04 	lds	r25, 0x0421
    2436:	cc 01       	movw	r24, r24
    2438:	a0 e0       	ldi	r26, 0x00	; 0
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	22 e7       	ldi	r18, 0x72	; 114
    244e:	31 e3       	ldi	r19, 0x31	; 49
    2450:	46 ec       	ldi	r20, 0xC6	; 198
    2452:	5d e3       	ldi	r21, 0x3D	; 61
    2454:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e4       	ldi	r20, 0x40	; 64
    2486:	52 e4       	ldi	r21, 0x42	; 66
    2488:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	80 93 e0 02 	sts	0x02E0, r24
		val_ad_bcd[1] = ((int)(round(val_ad * 0.096774))%10) + 48;
    24a0:	80 91 20 04 	lds	r24, 0x0420
    24a4:	90 91 21 04 	lds	r25, 0x0421
    24a8:	cc 01       	movw	r24, r24
    24aa:	a0 e0       	ldi	r26, 0x00	; 0
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	22 e7       	ldi	r18, 0x72	; 114
    24c0:	31 e3       	ldi	r19, 0x31	; 49
    24c2:	46 ec       	ldi	r20, 0xC6	; 198
    24c4:	5d e3       	ldi	r21, 0x3D	; 61
    24c6:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 44 22 	call	0x4488	; 0x4488 <__fixsfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	2a e0       	ldi	r18, 0x0A	; 10
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	b9 01       	movw	r22, r18
    24ec:	0e 94 02 24 	call	0x4804	; 0x4804 <__divmodhi4>
    24f0:	80 5d       	subi	r24, 0xD0	; 208
    24f2:	80 93 e1 02 	sts	0x02E1, r24
		g_draw_string(13, 14, val_ad_bcd);
    24f6:	20 ee       	ldi	r18, 0xE0	; 224
    24f8:	32 e0       	ldi	r19, 0x02	; 2
    24fa:	8d e0       	ldi	r24, 0x0D	; 13
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	6e e0       	ldi	r22, 0x0E	; 14
    2500:	70 e0       	ldi	r23, 0x00	; 0
    2502:	a9 01       	movw	r20, r18
    2504:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
#endif
		delay_ms(val_refr);
    2508:	80 91 26 04 	lds	r24, 0x0426
    250c:	90 91 27 04 	lds	r25, 0x0427
    2510:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>
    2514:	e3 ce       	rjmp	.-570    	; 0x22dc <main+0x82>

00002516 <call_input_mode_screen>:
	} 
}	

void call_input_mode_screen(void)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
//======================================================		
//============= 		Input Mode		================
//======================================================
	g_draw_rectangle(0, 0, 160, 80);				//frame
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	40 ea       	ldi	r20, 0xA0	; 160
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	20 e5       	ldi	r18, 0x50	; 80
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	
	g_draw_string(17, 11, "Please select a mode:");
    2532:	2d ef       	ldi	r18, 0xFD	; 253
    2534:	32 e0       	ldi	r19, 0x02	; 2
    2536:	81 e1       	ldi	r24, 0x11	; 17
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	6b e0       	ldi	r22, 0x0B	; 11
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
//============= 		num pad mode	================	
	g_draw_rectangle(5, 30, 150, 20);				//frame
    2544:	85 e0       	ldi	r24, 0x05	; 5
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	6e e1       	ldi	r22, 0x1E	; 30
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	46 e9       	ldi	r20, 0x96	; 150
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	24 e1       	ldi	r18, 0x14	; 20
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(27, 36, "Num Pad Input Mode");
    2558:	23 e1       	ldi	r18, 0x13	; 19
    255a:	33 e0       	ldi	r19, 0x03	; 3
    255c:	8b e1       	ldi	r24, 0x1B	; 27
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	64 e2       	ldi	r22, 0x24	; 36
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	a9 01       	movw	r20, r18
    2566:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
//============= 		num pad mode	================
	g_draw_rectangle(5, 55, 150, 20);				//frame
    256a:	85 e0       	ldi	r24, 0x05	; 5
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	67 e3       	ldi	r22, 0x37	; 55
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	46 e9       	ldi	r20, 0x96	; 150
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	24 e1       	ldi	r18, 0x14	; 20
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(30, 61, "Slider Input Mode");	
    257e:	26 e2       	ldi	r18, 0x26	; 38
    2580:	33 e0       	ldi	r19, 0x03	; 3
    2582:	8e e1       	ldi	r24, 0x1E	; 30
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	6d e3       	ldi	r22, 0x3D	; 61
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	a9 01       	movw	r20, r18
    258c:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	
	delay_ms(1000);									//wait for touch refresh
    2590:	88 ee       	ldi	r24, 0xE8	; 232
    2592:	93 e0       	ldi	r25, 0x03	; 3
    2594:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>
	buffer_touch_ad_x = 0;
    2598:	10 92 29 04 	sts	0x0429, r1
    259c:	10 92 28 04 	sts	0x0428, r1
	buffer_touch_ad_y = 0;
    25a0:	10 92 2a 04 	sts	0x042A, r1
	button_pressed = 0;
    25a4:	10 92 32 04 	sts	0x0432, r1
    25a8:	63 c0       	rjmp	.+198    	; 0x2670 <call_input_mode_screen+0x15a>
	
	while (button_pressed <= 3)
	{
		buffer_touch_ad_y = get_touch_y();
    25aa:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <get_touch_y>
    25ae:	80 93 2a 04 	sts	0x042A, r24
		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
    25b2:	80 91 2a 04 	lds	r24, 0x042A
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <get_touch_x>
    25be:	90 93 29 04 	sts	0x0429, r25
    25c2:	80 93 28 04 	sts	0x0428, r24

		if (buffer_touch_ad_x > 160)
    25c6:	80 91 28 04 	lds	r24, 0x0428
    25ca:	90 91 29 04 	lds	r25, 0x0429
    25ce:	81 3a       	cpi	r24, 0xA1	; 161
    25d0:	91 05       	cpc	r25, r1
    25d2:	30 f0       	brcs	.+12     	; 0x25e0 <call_input_mode_screen+0xca>
			buffer_touch_ad_x = 160;
    25d4:	80 ea       	ldi	r24, 0xA0	; 160
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	90 93 29 04 	sts	0x0429, r25
    25dc:	80 93 28 04 	sts	0x0428, r24
		
		if (buffer_touch_ad_x == 0)
    25e0:	80 91 28 04 	lds	r24, 0x0428
    25e4:	90 91 29 04 	lds	r25, 0x0429
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	11 f4       	brne	.+4      	; 0x25f0 <call_input_mode_screen+0xda>
			buffer_touch_ad_y = 0;
    25ec:	10 92 2a 04 	sts	0x042A, r1
			
		if ((buffer_touch_ad_y >= 30) && (buffer_touch_ad_y <= 50) && (buffer_touch_ad_x >= 2) && (buffer_touch_ad_x <= 152))
    25f0:	80 91 2a 04 	lds	r24, 0x042A
    25f4:	8e 31       	cpi	r24, 0x1E	; 30
    25f6:	d8 f0       	brcs	.+54     	; 0x262e <call_input_mode_screen+0x118>
    25f8:	80 91 2a 04 	lds	r24, 0x042A
    25fc:	83 33       	cpi	r24, 0x33	; 51
    25fe:	b8 f4       	brcc	.+46     	; 0x262e <call_input_mode_screen+0x118>
    2600:	80 91 28 04 	lds	r24, 0x0428
    2604:	90 91 29 04 	lds	r25, 0x0429
    2608:	82 30       	cpi	r24, 0x02	; 2
    260a:	91 05       	cpc	r25, r1
    260c:	80 f0       	brcs	.+32     	; 0x262e <call_input_mode_screen+0x118>
    260e:	80 91 28 04 	lds	r24, 0x0428
    2612:	90 91 29 04 	lds	r25, 0x0429
    2616:	89 39       	cpi	r24, 0x99	; 153
    2618:	91 05       	cpc	r25, r1
    261a:	48 f4       	brcc	.+18     	; 0x262e <call_input_mode_screen+0x118>
		{
			selected_mode = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	80 93 2b 04 	sts	0x042B, r24
			button_pressed++;
    2622:	80 91 32 04 	lds	r24, 0x0432
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	80 93 32 04 	sts	0x0432, r24
    262c:	21 c0       	rjmp	.+66     	; 0x2670 <call_input_mode_screen+0x15a>
		}
		else 
		{
			if ((buffer_touch_ad_y >= 55) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 2) && (buffer_touch_ad_x <= 152))
    262e:	80 91 2a 04 	lds	r24, 0x042A
    2632:	87 33       	cpi	r24, 0x37	; 55
    2634:	d8 f0       	brcs	.+54     	; 0x266c <call_input_mode_screen+0x156>
    2636:	80 91 2a 04 	lds	r24, 0x042A
    263a:	81 35       	cpi	r24, 0x51	; 81
    263c:	b8 f4       	brcc	.+46     	; 0x266c <call_input_mode_screen+0x156>
    263e:	80 91 28 04 	lds	r24, 0x0428
    2642:	90 91 29 04 	lds	r25, 0x0429
    2646:	82 30       	cpi	r24, 0x02	; 2
    2648:	91 05       	cpc	r25, r1
    264a:	80 f0       	brcs	.+32     	; 0x266c <call_input_mode_screen+0x156>
    264c:	80 91 28 04 	lds	r24, 0x0428
    2650:	90 91 29 04 	lds	r25, 0x0429
    2654:	89 39       	cpi	r24, 0x99	; 153
    2656:	91 05       	cpc	r25, r1
    2658:	48 f4       	brcc	.+18     	; 0x266c <call_input_mode_screen+0x156>
			{
				selected_mode = 2;
    265a:	82 e0       	ldi	r24, 0x02	; 2
    265c:	80 93 2b 04 	sts	0x042B, r24
				button_pressed++;
    2660:	80 91 32 04 	lds	r24, 0x0432
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	80 93 32 04 	sts	0x0432, r24
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <call_input_mode_screen+0x15a>
			}
			else
				button_pressed = 0;
    266c:	10 92 32 04 	sts	0x0432, r1
	delay_ms(1000);									//wait for touch refresh
	buffer_touch_ad_x = 0;
	buffer_touch_ad_y = 0;
	button_pressed = 0;
	
	while (button_pressed <= 3)
    2670:	80 91 32 04 	lds	r24, 0x0432
    2674:	84 30       	cpi	r24, 0x04	; 4
    2676:	08 f4       	brcc	.+2      	; 0x267a <call_input_mode_screen+0x164>
    2678:	98 cf       	rjmp	.-208    	; 0x25aa <call_input_mode_screen+0x94>
			}
			else
				button_pressed = 0;
		}
	}
}
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <call_num_pad_mode>:

void call_num_pad_mode(void)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	00 d0       	rcall	.+0      	; 0x2686 <call_num_pad_mode+0x6>
    2686:	00 d0       	rcall	.+0      	; 0x2688 <call_num_pad_mode+0x8>
    2688:	0f 92       	push	r0
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
//======================================================		
//============= 		Num Pad mode	================
//======================================================
	unsigned char i;

	lcd_graphics_clear();	
    268e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <lcd_graphics_clear>
	g_draw_rectangle(0, 0, 160, 80);
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	40 ea       	ldi	r20, 0xA0	; 160
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	20 e5       	ldi	r18, 0x50	; 80
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_rectangle(0, 0, 160, 23);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	70 e0       	ldi	r23, 0x00	; 0
    26ae:	40 ea       	ldi	r20, 0xA0	; 160
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	27 e1       	ldi	r18, 0x17	; 23
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	
	g_draw_rectangle(0, 22, 30, 20);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	66 e1       	ldi	r22, 0x16	; 22
    26c0:	70 e0       	ldi	r23, 0x00	; 0
    26c2:	4e e1       	ldi	r20, 0x1E	; 30
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	24 e1       	ldi	r18, 0x14	; 20
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(12, 28, "1");
    26ce:	28 e3       	ldi	r18, 0x38	; 56
    26d0:	33 e0       	ldi	r19, 0x03	; 3
    26d2:	8c e0       	ldi	r24, 0x0C	; 12
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	6c e1       	ldi	r22, 0x1C	; 28
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	a9 01       	movw	r20, r18
    26dc:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(0, 41, 30, 20);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	69 e2       	ldi	r22, 0x29	; 41
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	4e e1       	ldi	r20, 0x1E	; 30
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	24 e1       	ldi	r18, 0x14	; 20
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(12, 48, "2");
    26f4:	2a e3       	ldi	r18, 0x3A	; 58
    26f6:	33 e0       	ldi	r19, 0x03	; 3
    26f8:	8c e0       	ldi	r24, 0x0C	; 12
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	60 e3       	ldi	r22, 0x30	; 48
    26fe:	70 e0       	ldi	r23, 0x00	; 0
    2700:	a9 01       	movw	r20, r18
    2702:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(0, 60, 30, 20);
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	6c e3       	ldi	r22, 0x3C	; 60
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	4e e1       	ldi	r20, 0x1E	; 30
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	24 e1       	ldi	r18, 0x14	; 20
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(12, 67, "3");
    271a:	2c e3       	ldi	r18, 0x3C	; 60
    271c:	33 e0       	ldi	r19, 0x03	; 3
    271e:	8c e0       	ldi	r24, 0x0C	; 12
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	63 e4       	ldi	r22, 0x43	; 67
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	a9 01       	movw	r20, r18
    2728:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	
	g_draw_rectangle(43, 22, 30, 20);
    272c:	8b e2       	ldi	r24, 0x2B	; 43
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	66 e1       	ldi	r22, 0x16	; 22
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	4e e1       	ldi	r20, 0x1E	; 30
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	24 e1       	ldi	r18, 0x14	; 20
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(55, 28, "4");
    2740:	2e e3       	ldi	r18, 0x3E	; 62
    2742:	33 e0       	ldi	r19, 0x03	; 3
    2744:	87 e3       	ldi	r24, 0x37	; 55
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	6c e1       	ldi	r22, 0x1C	; 28
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	a9 01       	movw	r20, r18
    274e:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(43, 41, 30, 20);
    2752:	8b e2       	ldi	r24, 0x2B	; 43
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	69 e2       	ldi	r22, 0x29	; 41
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	4e e1       	ldi	r20, 0x1E	; 30
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	24 e1       	ldi	r18, 0x14	; 20
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(55, 48, "5");
    2766:	20 e4       	ldi	r18, 0x40	; 64
    2768:	33 e0       	ldi	r19, 0x03	; 3
    276a:	87 e3       	ldi	r24, 0x37	; 55
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	60 e3       	ldi	r22, 0x30	; 48
    2770:	70 e0       	ldi	r23, 0x00	; 0
    2772:	a9 01       	movw	r20, r18
    2774:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(43, 60, 30, 20);
    2778:	8b e2       	ldi	r24, 0x2B	; 43
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	6c e3       	ldi	r22, 0x3C	; 60
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	4e e1       	ldi	r20, 0x1E	; 30
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	24 e1       	ldi	r18, 0x14	; 20
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(55, 67, "6");
    278c:	22 e4       	ldi	r18, 0x42	; 66
    278e:	33 e0       	ldi	r19, 0x03	; 3
    2790:	87 e3       	ldi	r24, 0x37	; 55
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	63 e4       	ldi	r22, 0x43	; 67
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	
	g_draw_rectangle(86, 22, 30, 20);
    279e:	86 e5       	ldi	r24, 0x56	; 86
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	66 e1       	ldi	r22, 0x16	; 22
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	4e e1       	ldi	r20, 0x1E	; 30
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	24 e1       	ldi	r18, 0x14	; 20
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(98, 28, "7");
    27b2:	24 e4       	ldi	r18, 0x44	; 68
    27b4:	33 e0       	ldi	r19, 0x03	; 3
    27b6:	82 e6       	ldi	r24, 0x62	; 98
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	6c e1       	ldi	r22, 0x1C	; 28
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	a9 01       	movw	r20, r18
    27c0:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(86, 41, 30, 20);
    27c4:	86 e5       	ldi	r24, 0x56	; 86
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	69 e2       	ldi	r22, 0x29	; 41
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	4e e1       	ldi	r20, 0x1E	; 30
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	24 e1       	ldi	r18, 0x14	; 20
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(98, 48, "8");
    27d8:	26 e4       	ldi	r18, 0x46	; 70
    27da:	33 e0       	ldi	r19, 0x03	; 3
    27dc:	82 e6       	ldi	r24, 0x62	; 98
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	60 e3       	ldi	r22, 0x30	; 48
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	a9 01       	movw	r20, r18
    27e6:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(86, 60, 30, 20);
    27ea:	86 e5       	ldi	r24, 0x56	; 86
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	6c e3       	ldi	r22, 0x3C	; 60
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	4e e1       	ldi	r20, 0x1E	; 30
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	24 e1       	ldi	r18, 0x14	; 20
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(98, 67, "9");
    27fe:	28 e4       	ldi	r18, 0x48	; 72
    2800:	33 e0       	ldi	r19, 0x03	; 3
    2802:	82 e6       	ldi	r24, 0x62	; 98
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	63 e4       	ldi	r22, 0x43	; 67
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	a9 01       	movw	r20, r18
    280c:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>

	g_draw_rectangle(130, 22, 30, 20);
    2810:	82 e8       	ldi	r24, 0x82	; 130
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	66 e1       	ldi	r22, 0x16	; 22
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	4e e1       	ldi	r20, 0x1E	; 30
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	24 e1       	ldi	r18, 0x14	; 20
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(142, 28, "0");
    2824:	2a e4       	ldi	r18, 0x4A	; 74
    2826:	33 e0       	ldi	r19, 0x03	; 3
    2828:	8e e8       	ldi	r24, 0x8E	; 142
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	6c e1       	ldi	r22, 0x1C	; 28
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	a9 01       	movw	r20, r18
    2832:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(130, 41, 30, 20);
    2836:	82 e8       	ldi	r24, 0x82	; 130
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	69 e2       	ldi	r22, 0x29	; 41
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	4e e1       	ldi	r20, 0x1E	; 30
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	24 e1       	ldi	r18, 0x14	; 20
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(139, 48, "Ok");
    284a:	2c e4       	ldi	r18, 0x4C	; 76
    284c:	33 e0       	ldi	r19, 0x03	; 3
    284e:	8b e8       	ldi	r24, 0x8B	; 139
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	60 e3       	ldi	r22, 0x30	; 48
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	a9 01       	movw	r20, r18
    2858:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(130, 60, 30, 20);
    285c:	82 e8       	ldi	r24, 0x82	; 130
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	6c e3       	ldi	r22, 0x3C	; 60
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	4e e1       	ldi	r20, 0x1E	; 30
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	24 e1       	ldi	r18, 0x14	; 20
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(139, 67, "<-");
    2870:	2f e4       	ldi	r18, 0x4F	; 79
    2872:	33 e0       	ldi	r19, 0x03	; 3
    2874:	8b e8       	ldi	r24, 0x8B	; 139
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	63 e4       	ldi	r22, 0x43	; 67
    287a:	70 e0       	ldi	r23, 0x00	; 0
    287c:	a9 01       	movw	r20, r18
    287e:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	
	num_pad_cursor_pos = 0;
    2882:	10 92 41 04 	sts	0x0441, r1
    2886:	3a c4       	rjmp	.+2164   	; 0x30fc <call_num_pad_mode+0xa7c>
	
	while(num_pad_value_control != 4)
	{
		buffer_touch_ad_y = get_touch_y();
    2888:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <get_touch_y>
    288c:	80 93 2a 04 	sts	0x042A, r24
		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
    2890:	80 91 2a 04 	lds	r24, 0x042A
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <get_touch_x>
    289c:	90 93 29 04 	sts	0x0429, r25
    28a0:	80 93 28 04 	sts	0x0428, r24
		
		if (buffer_touch_ad_x > 160)
    28a4:	80 91 28 04 	lds	r24, 0x0428
    28a8:	90 91 29 04 	lds	r25, 0x0429
    28ac:	81 3a       	cpi	r24, 0xA1	; 161
    28ae:	91 05       	cpc	r25, r1
    28b0:	30 f0       	brcs	.+12     	; 0x28be <call_num_pad_mode+0x23e>
			buffer_touch_ad_x = 160;
    28b2:	80 ea       	ldi	r24, 0xA0	; 160
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	90 93 29 04 	sts	0x0429, r25
    28ba:	80 93 28 04 	sts	0x0428, r24
		
		if (buffer_touch_ad_x == 0)
    28be:	80 91 28 04 	lds	r24, 0x0428
    28c2:	90 91 29 04 	lds	r25, 0x0429
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	11 f4       	brne	.+4      	; 0x28ce <call_num_pad_mode+0x24e>
			buffer_touch_ad_y = 0;
    28ca:	10 92 2a 04 	sts	0x042A, r1
			
		
		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 30) && (buffer_touch_ad_x <= 50))
    28ce:	80 91 2a 04 	lds	r24, 0x042A
    28d2:	84 31       	cpi	r24, 0x14	; 20
    28d4:	c0 f0       	brcs	.+48     	; 0x2906 <call_num_pad_mode+0x286>
    28d6:	80 91 2a 04 	lds	r24, 0x042A
    28da:	89 32       	cpi	r24, 0x29	; 41
    28dc:	a0 f4       	brcc	.+40     	; 0x2906 <call_num_pad_mode+0x286>
    28de:	80 91 28 04 	lds	r24, 0x0428
    28e2:	90 91 29 04 	lds	r25, 0x0429
    28e6:	8e 31       	cpi	r24, 0x1E	; 30
    28e8:	91 05       	cpc	r25, r1
    28ea:	68 f0       	brcs	.+26     	; 0x2906 <call_num_pad_mode+0x286>
    28ec:	80 91 28 04 	lds	r24, 0x0428
    28f0:	90 91 29 04 	lds	r25, 0x0429
    28f4:	83 33       	cpi	r24, 0x33	; 51
    28f6:	91 05       	cpc	r25, r1
    28f8:	30 f4       	brcc	.+12     	; 0x2906 <call_num_pad_mode+0x286>
			num_pad_pressed[1]++;
    28fa:	80 91 34 04 	lds	r24, 0x0434
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	80 93 34 04 	sts	0x0434, r24
    2904:	02 c0       	rjmp	.+4      	; 0x290a <call_num_pad_mode+0x28a>
		else
			num_pad_pressed[1] = 0;
    2906:	10 92 34 04 	sts	0x0434, r1
			//g_draw_string(100, 2, "1");
		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 30) && (buffer_touch_ad_x <= 50))
    290a:	80 91 2a 04 	lds	r24, 0x042A
    290e:	89 32       	cpi	r24, 0x29	; 41
    2910:	c0 f0       	brcs	.+48     	; 0x2942 <call_num_pad_mode+0x2c2>
    2912:	80 91 2a 04 	lds	r24, 0x042A
    2916:	8e 33       	cpi	r24, 0x3E	; 62
    2918:	a0 f4       	brcc	.+40     	; 0x2942 <call_num_pad_mode+0x2c2>
    291a:	80 91 28 04 	lds	r24, 0x0428
    291e:	90 91 29 04 	lds	r25, 0x0429
    2922:	8e 31       	cpi	r24, 0x1E	; 30
    2924:	91 05       	cpc	r25, r1
    2926:	68 f0       	brcs	.+26     	; 0x2942 <call_num_pad_mode+0x2c2>
    2928:	80 91 28 04 	lds	r24, 0x0428
    292c:	90 91 29 04 	lds	r25, 0x0429
    2930:	83 33       	cpi	r24, 0x33	; 51
    2932:	91 05       	cpc	r25, r1
    2934:	30 f4       	brcc	.+12     	; 0x2942 <call_num_pad_mode+0x2c2>
			num_pad_pressed[2]++;
    2936:	80 91 35 04 	lds	r24, 0x0435
    293a:	8f 5f       	subi	r24, 0xFF	; 255
    293c:	80 93 35 04 	sts	0x0435, r24
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <call_num_pad_mode+0x2c6>
		else
			num_pad_pressed[2] = 0;
    2942:	10 92 35 04 	sts	0x0435, r1
			//g_draw_string(100, 2, "2");
		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 30) && (buffer_touch_ad_x <= 60))
    2946:	80 91 2a 04 	lds	r24, 0x042A
    294a:	8e 33       	cpi	r24, 0x3E	; 62
    294c:	c0 f0       	brcs	.+48     	; 0x297e <call_num_pad_mode+0x2fe>
    294e:	80 91 2a 04 	lds	r24, 0x042A
    2952:	81 35       	cpi	r24, 0x51	; 81
    2954:	a0 f4       	brcc	.+40     	; 0x297e <call_num_pad_mode+0x2fe>
    2956:	80 91 28 04 	lds	r24, 0x0428
    295a:	90 91 29 04 	lds	r25, 0x0429
    295e:	8e 31       	cpi	r24, 0x1E	; 30
    2960:	91 05       	cpc	r25, r1
    2962:	68 f0       	brcs	.+26     	; 0x297e <call_num_pad_mode+0x2fe>
    2964:	80 91 28 04 	lds	r24, 0x0428
    2968:	90 91 29 04 	lds	r25, 0x0429
    296c:	8d 33       	cpi	r24, 0x3D	; 61
    296e:	91 05       	cpc	r25, r1
    2970:	30 f4       	brcc	.+12     	; 0x297e <call_num_pad_mode+0x2fe>
			num_pad_pressed[3]++;
    2972:	80 91 36 04 	lds	r24, 0x0436
    2976:	8f 5f       	subi	r24, 0xFF	; 255
    2978:	80 93 36 04 	sts	0x0436, r24
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <call_num_pad_mode+0x302>
		else
			num_pad_pressed[3] = 0;
    297e:	10 92 36 04 	sts	0x0436, r1
			//g_draw_string(100, 2, "3");
		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 60) && (buffer_touch_ad_x <= 80))
    2982:	80 91 2a 04 	lds	r24, 0x042A
    2986:	84 31       	cpi	r24, 0x14	; 20
    2988:	c0 f0       	brcs	.+48     	; 0x29ba <call_num_pad_mode+0x33a>
    298a:	80 91 2a 04 	lds	r24, 0x042A
    298e:	89 32       	cpi	r24, 0x29	; 41
    2990:	a0 f4       	brcc	.+40     	; 0x29ba <call_num_pad_mode+0x33a>
    2992:	80 91 28 04 	lds	r24, 0x0428
    2996:	90 91 29 04 	lds	r25, 0x0429
    299a:	8c 33       	cpi	r24, 0x3C	; 60
    299c:	91 05       	cpc	r25, r1
    299e:	68 f0       	brcs	.+26     	; 0x29ba <call_num_pad_mode+0x33a>
    29a0:	80 91 28 04 	lds	r24, 0x0428
    29a4:	90 91 29 04 	lds	r25, 0x0429
    29a8:	81 35       	cpi	r24, 0x51	; 81
    29aa:	91 05       	cpc	r25, r1
    29ac:	30 f4       	brcc	.+12     	; 0x29ba <call_num_pad_mode+0x33a>
			num_pad_pressed[4]++;
    29ae:	80 91 37 04 	lds	r24, 0x0437
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	80 93 37 04 	sts	0x0437, r24
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <call_num_pad_mode+0x33e>
		else
			num_pad_pressed[4] = 0;
    29ba:	10 92 37 04 	sts	0x0437, r1
			//g_draw_string(100, 2, "4");
		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 60) && (buffer_touch_ad_x <= 80))
    29be:	80 91 2a 04 	lds	r24, 0x042A
    29c2:	89 32       	cpi	r24, 0x29	; 41
    29c4:	c0 f0       	brcs	.+48     	; 0x29f6 <call_num_pad_mode+0x376>
    29c6:	80 91 2a 04 	lds	r24, 0x042A
    29ca:	8e 33       	cpi	r24, 0x3E	; 62
    29cc:	a0 f4       	brcc	.+40     	; 0x29f6 <call_num_pad_mode+0x376>
    29ce:	80 91 28 04 	lds	r24, 0x0428
    29d2:	90 91 29 04 	lds	r25, 0x0429
    29d6:	8c 33       	cpi	r24, 0x3C	; 60
    29d8:	91 05       	cpc	r25, r1
    29da:	68 f0       	brcs	.+26     	; 0x29f6 <call_num_pad_mode+0x376>
    29dc:	80 91 28 04 	lds	r24, 0x0428
    29e0:	90 91 29 04 	lds	r25, 0x0429
    29e4:	81 35       	cpi	r24, 0x51	; 81
    29e6:	91 05       	cpc	r25, r1
    29e8:	30 f4       	brcc	.+12     	; 0x29f6 <call_num_pad_mode+0x376>
			num_pad_pressed[5]++;
    29ea:	80 91 38 04 	lds	r24, 0x0438
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	80 93 38 04 	sts	0x0438, r24
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <call_num_pad_mode+0x37a>
		else
			num_pad_pressed[5] = 0;
    29f6:	10 92 38 04 	sts	0x0438, r1
			//g_draw_string(100, 2, "5");
		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 80) && (buffer_touch_ad_x <= 100))
    29fa:	80 91 2a 04 	lds	r24, 0x042A
    29fe:	8e 33       	cpi	r24, 0x3E	; 62
    2a00:	c0 f0       	brcs	.+48     	; 0x2a32 <call_num_pad_mode+0x3b2>
    2a02:	80 91 2a 04 	lds	r24, 0x042A
    2a06:	81 35       	cpi	r24, 0x51	; 81
    2a08:	a0 f4       	brcc	.+40     	; 0x2a32 <call_num_pad_mode+0x3b2>
    2a0a:	80 91 28 04 	lds	r24, 0x0428
    2a0e:	90 91 29 04 	lds	r25, 0x0429
    2a12:	80 35       	cpi	r24, 0x50	; 80
    2a14:	91 05       	cpc	r25, r1
    2a16:	68 f0       	brcs	.+26     	; 0x2a32 <call_num_pad_mode+0x3b2>
    2a18:	80 91 28 04 	lds	r24, 0x0428
    2a1c:	90 91 29 04 	lds	r25, 0x0429
    2a20:	85 36       	cpi	r24, 0x65	; 101
    2a22:	91 05       	cpc	r25, r1
    2a24:	30 f4       	brcc	.+12     	; 0x2a32 <call_num_pad_mode+0x3b2>
			num_pad_pressed[6]++;
    2a26:	80 91 39 04 	lds	r24, 0x0439
    2a2a:	8f 5f       	subi	r24, 0xFF	; 255
    2a2c:	80 93 39 04 	sts	0x0439, r24
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <call_num_pad_mode+0x3b6>
		else
			num_pad_pressed[6] = 0;
    2a32:	10 92 39 04 	sts	0x0439, r1
			//g_draw_string(100, 2, "6");
			
		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 90) && (buffer_touch_ad_x <= 130))
    2a36:	80 91 2a 04 	lds	r24, 0x042A
    2a3a:	84 31       	cpi	r24, 0x14	; 20
    2a3c:	c0 f0       	brcs	.+48     	; 0x2a6e <call_num_pad_mode+0x3ee>
    2a3e:	80 91 2a 04 	lds	r24, 0x042A
    2a42:	89 32       	cpi	r24, 0x29	; 41
    2a44:	a0 f4       	brcc	.+40     	; 0x2a6e <call_num_pad_mode+0x3ee>
    2a46:	80 91 28 04 	lds	r24, 0x0428
    2a4a:	90 91 29 04 	lds	r25, 0x0429
    2a4e:	8a 35       	cpi	r24, 0x5A	; 90
    2a50:	91 05       	cpc	r25, r1
    2a52:	68 f0       	brcs	.+26     	; 0x2a6e <call_num_pad_mode+0x3ee>
    2a54:	80 91 28 04 	lds	r24, 0x0428
    2a58:	90 91 29 04 	lds	r25, 0x0429
    2a5c:	83 38       	cpi	r24, 0x83	; 131
    2a5e:	91 05       	cpc	r25, r1
    2a60:	30 f4       	brcc	.+12     	; 0x2a6e <call_num_pad_mode+0x3ee>
			num_pad_pressed[7]++;
    2a62:	80 91 3a 04 	lds	r24, 0x043A
    2a66:	8f 5f       	subi	r24, 0xFF	; 255
    2a68:	80 93 3a 04 	sts	0x043A, r24
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <call_num_pad_mode+0x3f2>
		else
			num_pad_pressed[7] = 0;
    2a6e:	10 92 3a 04 	sts	0x043A, r1
			//g_draw_string(100, 2, "7");
		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 90) && (buffer_touch_ad_x <= 130))
    2a72:	80 91 2a 04 	lds	r24, 0x042A
    2a76:	89 32       	cpi	r24, 0x29	; 41
    2a78:	c0 f0       	brcs	.+48     	; 0x2aaa <call_num_pad_mode+0x42a>
    2a7a:	80 91 2a 04 	lds	r24, 0x042A
    2a7e:	8e 33       	cpi	r24, 0x3E	; 62
    2a80:	a0 f4       	brcc	.+40     	; 0x2aaa <call_num_pad_mode+0x42a>
    2a82:	80 91 28 04 	lds	r24, 0x0428
    2a86:	90 91 29 04 	lds	r25, 0x0429
    2a8a:	8a 35       	cpi	r24, 0x5A	; 90
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	68 f0       	brcs	.+26     	; 0x2aaa <call_num_pad_mode+0x42a>
    2a90:	80 91 28 04 	lds	r24, 0x0428
    2a94:	90 91 29 04 	lds	r25, 0x0429
    2a98:	83 38       	cpi	r24, 0x83	; 131
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	30 f4       	brcc	.+12     	; 0x2aaa <call_num_pad_mode+0x42a>
			num_pad_pressed[8]++;
    2a9e:	80 91 3b 04 	lds	r24, 0x043B
    2aa2:	8f 5f       	subi	r24, 0xFF	; 255
    2aa4:	80 93 3b 04 	sts	0x043B, r24
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <call_num_pad_mode+0x42e>
		else
			num_pad_pressed[8] = 0;
    2aaa:	10 92 3b 04 	sts	0x043B, r1
			//g_draw_string(100, 2, "8");
		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 110) && (buffer_touch_ad_x <= 130))
    2aae:	80 91 2a 04 	lds	r24, 0x042A
    2ab2:	8e 33       	cpi	r24, 0x3E	; 62
    2ab4:	c0 f0       	brcs	.+48     	; 0x2ae6 <call_num_pad_mode+0x466>
    2ab6:	80 91 2a 04 	lds	r24, 0x042A
    2aba:	81 35       	cpi	r24, 0x51	; 81
    2abc:	a0 f4       	brcc	.+40     	; 0x2ae6 <call_num_pad_mode+0x466>
    2abe:	80 91 28 04 	lds	r24, 0x0428
    2ac2:	90 91 29 04 	lds	r25, 0x0429
    2ac6:	8e 36       	cpi	r24, 0x6E	; 110
    2ac8:	91 05       	cpc	r25, r1
    2aca:	68 f0       	brcs	.+26     	; 0x2ae6 <call_num_pad_mode+0x466>
    2acc:	80 91 28 04 	lds	r24, 0x0428
    2ad0:	90 91 29 04 	lds	r25, 0x0429
    2ad4:	83 38       	cpi	r24, 0x83	; 131
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	30 f4       	brcc	.+12     	; 0x2ae6 <call_num_pad_mode+0x466>
			num_pad_pressed[9]++;
    2ada:	80 91 3c 04 	lds	r24, 0x043C
    2ade:	8f 5f       	subi	r24, 0xFF	; 255
    2ae0:	80 93 3c 04 	sts	0x043C, r24
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <call_num_pad_mode+0x46a>
		else
			num_pad_pressed[9] = 0;
    2ae6:	10 92 3c 04 	sts	0x043C, r1
			//g_draw_string(100, 2, "9");
			
		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 140) && (buffer_touch_ad_x <= 160))
    2aea:	80 91 2a 04 	lds	r24, 0x042A
    2aee:	84 31       	cpi	r24, 0x14	; 20
    2af0:	c0 f0       	brcs	.+48     	; 0x2b22 <call_num_pad_mode+0x4a2>
    2af2:	80 91 2a 04 	lds	r24, 0x042A
    2af6:	89 32       	cpi	r24, 0x29	; 41
    2af8:	a0 f4       	brcc	.+40     	; 0x2b22 <call_num_pad_mode+0x4a2>
    2afa:	80 91 28 04 	lds	r24, 0x0428
    2afe:	90 91 29 04 	lds	r25, 0x0429
    2b02:	8c 38       	cpi	r24, 0x8C	; 140
    2b04:	91 05       	cpc	r25, r1
    2b06:	68 f0       	brcs	.+26     	; 0x2b22 <call_num_pad_mode+0x4a2>
    2b08:	80 91 28 04 	lds	r24, 0x0428
    2b0c:	90 91 29 04 	lds	r25, 0x0429
    2b10:	81 3a       	cpi	r24, 0xA1	; 161
    2b12:	91 05       	cpc	r25, r1
    2b14:	30 f4       	brcc	.+12     	; 0x2b22 <call_num_pad_mode+0x4a2>
			num_pad_pressed[0]++;
    2b16:	80 91 33 04 	lds	r24, 0x0433
    2b1a:	8f 5f       	subi	r24, 0xFF	; 255
    2b1c:	80 93 33 04 	sts	0x0433, r24
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <call_num_pad_mode+0x4a6>
		else
			num_pad_pressed[0] = 0;
    2b22:	10 92 33 04 	sts	0x0433, r1
			//g_draw_string(100, 2, "0");
		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 140) && (buffer_touch_ad_x <= 160))
    2b26:	80 91 2a 04 	lds	r24, 0x042A
    2b2a:	89 32       	cpi	r24, 0x29	; 41
    2b2c:	c0 f0       	brcs	.+48     	; 0x2b5e <call_num_pad_mode+0x4de>
    2b2e:	80 91 2a 04 	lds	r24, 0x042A
    2b32:	8e 33       	cpi	r24, 0x3E	; 62
    2b34:	a0 f4       	brcc	.+40     	; 0x2b5e <call_num_pad_mode+0x4de>
    2b36:	80 91 28 04 	lds	r24, 0x0428
    2b3a:	90 91 29 04 	lds	r25, 0x0429
    2b3e:	8c 38       	cpi	r24, 0x8C	; 140
    2b40:	91 05       	cpc	r25, r1
    2b42:	68 f0       	brcs	.+26     	; 0x2b5e <call_num_pad_mode+0x4de>
    2b44:	80 91 28 04 	lds	r24, 0x0428
    2b48:	90 91 29 04 	lds	r25, 0x0429
    2b4c:	81 3a       	cpi	r24, 0xA1	; 161
    2b4e:	91 05       	cpc	r25, r1
    2b50:	30 f4       	brcc	.+12     	; 0x2b5e <call_num_pad_mode+0x4de>
			num_pad_pressed[10]++;
    2b52:	80 91 3d 04 	lds	r24, 0x043D
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	80 93 3d 04 	sts	0x043D, r24
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <call_num_pad_mode+0x4e2>
		else
			num_pad_pressed[10] = 0;
    2b5e:	10 92 3d 04 	sts	0x043D, r1
			//g_draw_string(100, 2, "r");
		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 140) && (buffer_touch_ad_x <= 160))
    2b62:	80 91 2a 04 	lds	r24, 0x042A
    2b66:	8e 33       	cpi	r24, 0x3E	; 62
    2b68:	c0 f0       	brcs	.+48     	; 0x2b9a <call_num_pad_mode+0x51a>
    2b6a:	80 91 2a 04 	lds	r24, 0x042A
    2b6e:	81 35       	cpi	r24, 0x51	; 81
    2b70:	a0 f4       	brcc	.+40     	; 0x2b9a <call_num_pad_mode+0x51a>
    2b72:	80 91 28 04 	lds	r24, 0x0428
    2b76:	90 91 29 04 	lds	r25, 0x0429
    2b7a:	8c 38       	cpi	r24, 0x8C	; 140
    2b7c:	91 05       	cpc	r25, r1
    2b7e:	68 f0       	brcs	.+26     	; 0x2b9a <call_num_pad_mode+0x51a>
    2b80:	80 91 28 04 	lds	r24, 0x0428
    2b84:	90 91 29 04 	lds	r25, 0x0429
    2b88:	81 3a       	cpi	r24, 0xA1	; 161
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	30 f4       	brcc	.+12     	; 0x2b9a <call_num_pad_mode+0x51a>
			num_pad_pressed[11]++;
    2b8e:	80 91 3e 04 	lds	r24, 0x043E
    2b92:	8f 5f       	subi	r24, 0xFF	; 255
    2b94:	80 93 3e 04 	sts	0x043E, r24
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <call_num_pad_mode+0x51e>
		else
			num_pad_pressed[11] = 0;
    2b9a:	10 92 3e 04 	sts	0x043E, r1
			//g_draw_string(100, 2, "b");
		
		
		switch (num_pad_value_control)
    2b9e:	80 91 3f 04 	lds	r24, 0x043F
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	3d 83       	std	Y+5, r19	; 0x05
    2ba8:	2c 83       	std	Y+4, r18	; 0x04
    2baa:	4c 81       	ldd	r20, Y+4	; 0x04
    2bac:	5d 81       	ldd	r21, Y+5	; 0x05
    2bae:	41 30       	cpi	r20, 0x01	; 1
    2bb0:	51 05       	cpc	r21, r1
    2bb2:	c1 f1       	breq	.+112    	; 0x2c24 <call_num_pad_mode+0x5a4>
    2bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	91 05       	cpc	r25, r1
    2bbc:	34 f4       	brge	.+12     	; 0x2bca <call_num_pad_mode+0x54a>
    2bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc2:	21 15       	cp	r18, r1
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	71 f0       	breq	.+28     	; 0x2be4 <call_num_pad_mode+0x564>
    2bc8:	c9 c1       	rjmp	.+914    	; 0x2f5c <call_num_pad_mode+0x8dc>
    2bca:	4c 81       	ldd	r20, Y+4	; 0x04
    2bcc:	5d 81       	ldd	r21, Y+5	; 0x05
    2bce:	42 30       	cpi	r20, 0x02	; 2
    2bd0:	51 05       	cpc	r21, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <call_num_pad_mode+0x556>
    2bd4:	47 c0       	rjmp	.+142    	; 0x2c64 <call_num_pad_mode+0x5e4>
    2bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bda:	83 30       	cpi	r24, 0x03	; 3
    2bdc:	91 05       	cpc	r25, r1
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <call_num_pad_mode+0x562>
    2be0:	54 c0       	rjmp	.+168    	; 0x2c8a <call_num_pad_mode+0x60a>
    2be2:	bc c1       	rjmp	.+888    	; 0x2f5c <call_num_pad_mode+0x8dc>
		{
			case 0:
				g_draw_string(5, 7, "Enter min. Temp: ");
    2be4:	22 e5       	ldi	r18, 0x52	; 82
    2be6:	33 e0       	ldi	r19, 0x03	; 3
    2be8:	85 e0       	ldi	r24, 0x05	; 5
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	67 e0       	ldi	r22, 0x07	; 7
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	a9 01       	movw	r20, r18
    2bf2:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
				g_draw_string(107, 7, num_input_min_temp);
    2bf6:	20 ef       	ldi	r18, 0xF0	; 240
    2bf8:	32 e0       	ldi	r19, 0x02	; 2
    2bfa:	8b e6       	ldi	r24, 0x6B	; 107
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	67 e0       	ldi	r22, 0x07	; 7
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	a9 01       	movw	r20, r18
    2c04:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
				g_draw_string(125, 7, "C");
    2c08:	24 e6       	ldi	r18, 0x64	; 100
    2c0a:	33 e0       	ldi	r19, 0x03	; 3
    2c0c:	8d e7       	ldi	r24, 0x7D	; 125
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	67 e0       	ldi	r22, 0x07	; 7
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	a9 01       	movw	r20, r18
    2c16:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
#ifdef GRAD_ON
				draw_grad(119, 6);
    2c1a:	87 e7       	ldi	r24, 0x77	; 119
    2c1c:	66 e0       	ldi	r22, 0x06	; 6
    2c1e:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
    2c22:	9c c1       	rjmp	.+824    	; 0x2f5c <call_num_pad_mode+0x8dc>
#endif
				break;
			case 1:
				g_draw_string(5, 7, "Enter max. Temp: ");
    2c24:	26 e6       	ldi	r18, 0x66	; 102
    2c26:	33 e0       	ldi	r19, 0x03	; 3
    2c28:	85 e0       	ldi	r24, 0x05	; 5
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	67 e0       	ldi	r22, 0x07	; 7
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	a9 01       	movw	r20, r18
    2c32:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
				g_draw_string(107, 7, num_input_max_temp);
    2c36:	23 ef       	ldi	r18, 0xF3	; 243
    2c38:	32 e0       	ldi	r19, 0x02	; 2
    2c3a:	8b e6       	ldi	r24, 0x6B	; 107
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	67 e0       	ldi	r22, 0x07	; 7
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	a9 01       	movw	r20, r18
    2c44:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
				g_draw_string(125, 7, "C");
    2c48:	24 e6       	ldi	r18, 0x64	; 100
    2c4a:	33 e0       	ldi	r19, 0x03	; 3
    2c4c:	8d e7       	ldi	r24, 0x7D	; 125
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	67 e0       	ldi	r22, 0x07	; 7
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	a9 01       	movw	r20, r18
    2c56:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
#ifdef GRAD_ON
				draw_grad(119, 6);
    2c5a:	87 e7       	ldi	r24, 0x77	; 119
    2c5c:	66 e0       	ldi	r22, 0x06	; 6
    2c5e:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
    2c62:	7c c1       	rjmp	.+760    	; 0x2f5c <call_num_pad_mode+0x8dc>
#endif
				break;
			case 2:
				g_draw_string(5, 7, "Enter ref. Time: ");
    2c64:	28 e7       	ldi	r18, 0x78	; 120
    2c66:	33 e0       	ldi	r19, 0x03	; 3
    2c68:	85 e0       	ldi	r24, 0x05	; 5
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	67 e0       	ldi	r22, 0x07	; 7
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	a9 01       	movw	r20, r18
    2c72:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
				g_draw_string(107, 7, num_input_refr_time);
    2c76:	26 ef       	ldi	r18, 0xF6	; 246
    2c78:	32 e0       	ldi	r19, 0x02	; 2
    2c7a:	8b e6       	ldi	r24, 0x6B	; 107
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	67 e0       	ldi	r22, 0x07	; 7
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	a9 01       	movw	r20, r18
    2c84:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
    2c88:	69 c1       	rjmp	.+722    	; 0x2f5c <call_num_pad_mode+0x8dc>
				break;
			case 3:
				val_min = (num_input_min_temp[0] - 48)*10;
    2c8a:	80 91 f0 02 	lds	r24, 0x02F0
    2c8e:	88 2f       	mov	r24, r24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9c 01       	movw	r18, r24
    2c94:	22 0f       	add	r18, r18
    2c96:	33 1f       	adc	r19, r19
    2c98:	c9 01       	movw	r24, r18
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	82 0f       	add	r24, r18
    2ca4:	93 1f       	adc	r25, r19
    2ca6:	80 5e       	subi	r24, 0xE0	; 224
    2ca8:	91 40       	sbci	r25, 0x01	; 1
    2caa:	90 93 23 04 	sts	0x0423, r25
    2cae:	80 93 22 04 	sts	0x0422, r24
				val_min += (num_input_min_temp[1] - 48)*1;
    2cb2:	80 91 f1 02 	lds	r24, 0x02F1
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	80 91 22 04 	lds	r24, 0x0422
    2cbe:	90 91 23 04 	lds	r25, 0x0423
    2cc2:	82 0f       	add	r24, r18
    2cc4:	93 1f       	adc	r25, r19
    2cc6:	c0 97       	sbiw	r24, 0x30	; 48
    2cc8:	90 93 23 04 	sts	0x0423, r25
    2ccc:	80 93 22 04 	sts	0x0422, r24

				val_max = (num_input_max_temp[0] - 48)*10;
    2cd0:	80 91 f3 02 	lds	r24, 0x02F3
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9c 01       	movw	r18, r24
    2cda:	22 0f       	add	r18, r18
    2cdc:	33 1f       	adc	r19, r19
    2cde:	c9 01       	movw	r24, r18
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	82 0f       	add	r24, r18
    2cea:	93 1f       	adc	r25, r19
    2cec:	80 5e       	subi	r24, 0xE0	; 224
    2cee:	91 40       	sbci	r25, 0x01	; 1
    2cf0:	90 93 25 04 	sts	0x0425, r25
    2cf4:	80 93 24 04 	sts	0x0424, r24
				val_max += (num_input_max_temp[1] - 48)*1;
    2cf8:	80 91 f4 02 	lds	r24, 0x02F4
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	80 91 24 04 	lds	r24, 0x0424
    2d04:	90 91 25 04 	lds	r25, 0x0425
    2d08:	82 0f       	add	r24, r18
    2d0a:	93 1f       	adc	r25, r19
    2d0c:	c0 97       	sbiw	r24, 0x30	; 48
    2d0e:	90 93 25 04 	sts	0x0425, r25
    2d12:	80 93 24 04 	sts	0x0424, r24
				
				if (val_max < val_min)
    2d16:	20 91 24 04 	lds	r18, 0x0424
    2d1a:	30 91 25 04 	lds	r19, 0x0425
    2d1e:	80 91 22 04 	lds	r24, 0x0422
    2d22:	90 91 23 04 	lds	r25, 0x0423
    2d26:	28 17       	cp	r18, r24
    2d28:	39 07       	cpc	r19, r25
    2d2a:	80 f4       	brcc	.+32     	; 0x2d4c <call_num_pad_mode+0x6cc>
				{
					g_draw_string(5, 7, "Error: Min > Max Temp!  ");
    2d2c:	2a e8       	ldi	r18, 0x8A	; 138
    2d2e:	33 e0       	ldi	r19, 0x03	; 3
    2d30:	85 e0       	ldi	r24, 0x05	; 5
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	67 e0       	ldi	r22, 0x07	; 7
    2d36:	70 e0       	ldi	r23, 0x00	; 0
    2d38:	a9 01       	movw	r20, r18
    2d3a:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
					delay_ms(3000);
    2d3e:	88 eb       	ldi	r24, 0xB8	; 184
    2d40:	9b e0       	ldi	r25, 0x0B	; 11
    2d42:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>
					num_pad_value_control = 0;					
    2d46:	10 92 3f 04 	sts	0x043F, r1
    2d4a:	08 c1       	rjmp	.+528    	; 0x2f5c <call_num_pad_mode+0x8dc>
				}
				else
				{
					val_refr = (num_input_refr_time[0] - 48)*1000;
    2d4c:	80 91 f6 02 	lds	r24, 0x02F6
    2d50:	88 2f       	mov	r24, r24
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9c 01       	movw	r18, r24
    2d56:	20 53       	subi	r18, 0x30	; 48
    2d58:	30 40       	sbci	r19, 0x00	; 0
    2d5a:	88 ee       	ldi	r24, 0xE8	; 232
    2d5c:	93 e0       	ldi	r25, 0x03	; 3
    2d5e:	ac 01       	movw	r20, r24
    2d60:	24 9f       	mul	r18, r20
    2d62:	c0 01       	movw	r24, r0
    2d64:	25 9f       	mul	r18, r21
    2d66:	90 0d       	add	r25, r0
    2d68:	34 9f       	mul	r19, r20
    2d6a:	90 0d       	add	r25, r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	90 93 27 04 	sts	0x0427, r25
    2d72:	80 93 26 04 	sts	0x0426, r24
					val_refr += (num_input_refr_time[1] - 48)*100;
    2d76:	80 91 f7 02 	lds	r24, 0x02F7
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	84 e6       	ldi	r24, 0x64	; 100
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	ac 01       	movw	r20, r24
    2d84:	24 9f       	mul	r18, r20
    2d86:	c0 01       	movw	r24, r0
    2d88:	25 9f       	mul	r18, r21
    2d8a:	90 0d       	add	r25, r0
    2d8c:	34 9f       	mul	r19, r20
    2d8e:	90 0d       	add	r25, r0
    2d90:	11 24       	eor	r1, r1
    2d92:	9c 01       	movw	r18, r24
    2d94:	80 91 26 04 	lds	r24, 0x0426
    2d98:	90 91 27 04 	lds	r25, 0x0427
    2d9c:	82 0f       	add	r24, r18
    2d9e:	93 1f       	adc	r25, r19
    2da0:	80 5c       	subi	r24, 0xC0	; 192
    2da2:	92 41       	sbci	r25, 0x12	; 18
    2da4:	90 93 27 04 	sts	0x0427, r25
    2da8:	80 93 26 04 	sts	0x0426, r24
					val_refr += (num_input_refr_time[2] - 48)*10;
    2dac:	80 91 f8 02 	lds	r24, 0x02F8
    2db0:	88 2f       	mov	r24, r24
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 01       	movw	r18, r24
    2db6:	22 0f       	add	r18, r18
    2db8:	33 1f       	adc	r19, r19
    2dba:	c9 01       	movw	r24, r18
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	82 0f       	add	r24, r18
    2dc6:	93 1f       	adc	r25, r19
    2dc8:	9c 01       	movw	r18, r24
    2dca:	80 91 26 04 	lds	r24, 0x0426
    2dce:	90 91 27 04 	lds	r25, 0x0427
    2dd2:	82 0f       	add	r24, r18
    2dd4:	93 1f       	adc	r25, r19
    2dd6:	80 5e       	subi	r24, 0xE0	; 224
    2dd8:	91 40       	sbci	r25, 0x01	; 1
    2dda:	90 93 27 04 	sts	0x0427, r25
    2dde:	80 93 26 04 	sts	0x0426, r24
					val_refr += (num_input_refr_time[3] - 48)*1;
    2de2:	80 91 f9 02 	lds	r24, 0x02F9
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	80 91 26 04 	lds	r24, 0x0426
    2dee:	90 91 27 04 	lds	r25, 0x0427
    2df2:	82 0f       	add	r24, r18
    2df4:	93 1f       	adc	r25, r19
    2df6:	c0 97       	sbiw	r24, 0x30	; 48
    2df8:	90 93 27 04 	sts	0x0427, r25
    2dfc:	80 93 26 04 	sts	0x0426, r24
					if (val_refr > 1000)
    2e00:	80 91 26 04 	lds	r24, 0x0426
    2e04:	90 91 27 04 	lds	r25, 0x0427
    2e08:	53 e0       	ldi	r21, 0x03	; 3
    2e0a:	89 3e       	cpi	r24, 0xE9	; 233
    2e0c:	95 07       	cpc	r25, r21
    2e0e:	88 f0       	brcs	.+34     	; 0x2e32 <call_num_pad_mode+0x7b2>
					{
						g_draw_string(5, 7, "Error: Ref Time > 1000! ");
    2e10:	23 ea       	ldi	r18, 0xA3	; 163
    2e12:	33 e0       	ldi	r19, 0x03	; 3
    2e14:	85 e0       	ldi	r24, 0x05	; 5
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	67 e0       	ldi	r22, 0x07	; 7
    2e1a:	70 e0       	ldi	r23, 0x00	; 0
    2e1c:	a9 01       	movw	r20, r18
    2e1e:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
						delay_ms(3000);
    2e22:	88 eb       	ldi	r24, 0xB8	; 184
    2e24:	9b e0       	ldi	r25, 0x0B	; 11
    2e26:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>
						num_pad_value_control = 2;
    2e2a:	82 e0       	ldi	r24, 0x02	; 2
    2e2c:	80 93 3f 04 	sts	0x043F, r24
    2e30:	95 c0       	rjmp	.+298    	; 0x2f5c <call_num_pad_mode+0x8dc>
					}
					else
					{
						bar_1_height = (val_min + 1) / 2;
    2e32:	80 91 22 04 	lds	r24, 0x0422
    2e36:	90 91 23 04 	lds	r25, 0x0423
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	96 95       	lsr	r25
    2e3e:	87 95       	ror	r24
    2e40:	80 93 2c 04 	sts	0x042C, r24
						bar_2_height = (val_max + 1) / 2;
    2e44:	80 91 24 04 	lds	r24, 0x0424
    2e48:	90 91 25 04 	lds	r25, 0x0425
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	96 95       	lsr	r25
    2e50:	87 95       	ror	r24
    2e52:	80 93 2e 04 	sts	0x042E, r24
						num_pad_value_control = 4;
    2e56:	84 e0       	ldi	r24, 0x04	; 4
    2e58:	80 93 3f 04 	sts	0x043F, r24
						val_min = round((double)val_min / 0.096774);
    2e5c:	80 91 22 04 	lds	r24, 0x0422
    2e60:	90 91 23 04 	lds	r25, 0x0423
    2e64:	cc 01       	movw	r24, r24
    2e66:	a0 e0       	ldi	r26, 0x00	; 0
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	22 e7       	ldi	r18, 0x72	; 114
    2e7c:	31 e3       	ldi	r19, 0x31	; 49
    2e7e:	46 ec       	ldi	r20, 0xC6	; 198
    2e80:	5d e3       	ldi	r21, 0x3D	; 61
    2e82:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	90 93 23 04 	sts	0x0423, r25
    2ea6:	80 93 22 04 	sts	0x0422, r24
						val_max = round((double)val_max / 0.096774);
    2eaa:	80 91 24 04 	lds	r24, 0x0424
    2eae:	90 91 25 04 	lds	r25, 0x0425
    2eb2:	cc 01       	movw	r24, r24
    2eb4:	a0 e0       	ldi	r26, 0x00	; 0
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	22 e7       	ldi	r18, 0x72	; 114
    2eca:	31 e3       	ldi	r19, 0x31	; 49
    2ecc:	46 ec       	ldi	r20, 0xC6	; 198
    2ece:	5d e3       	ldi	r21, 0x3D	; 61
    2ed0:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	90 93 25 04 	sts	0x0425, r25
    2ef4:	80 93 24 04 	sts	0x0424, r24
						for (i = 0; i <= 3; i++)
    2ef8:	19 82       	std	Y+1, r1	; 0x01
    2efa:	2d c0       	rjmp	.+90     	; 0x2f56 <call_num_pad_mode+0x8d6>
						{
							val_refr_bcd[i] = num_input_refr_time[i];
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	28 2f       	mov	r18, r24
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	88 2f       	mov	r24, r24
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	fc 01       	movw	r30, r24
    2f0a:	ea 50       	subi	r30, 0x0A	; 10
    2f0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2f0e:	80 81       	ld	r24, Z
    2f10:	f9 01       	movw	r30, r18
    2f12:	e7 51       	subi	r30, 0x17	; 23
    2f14:	fd 4f       	sbci	r31, 0xFD	; 253
    2f16:	80 83       	st	Z, r24
							val_min_bcd[i] = num_input_min_temp[i];
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	88 2f       	mov	r24, r24
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	fc 01       	movw	r30, r24
    2f26:	e0 51       	subi	r30, 0x10	; 16
    2f28:	fd 4f       	sbci	r31, 0xFD	; 253
    2f2a:	80 81       	ld	r24, Z
    2f2c:	f9 01       	movw	r30, r18
    2f2e:	ed 51       	subi	r30, 0x1D	; 29
    2f30:	fd 4f       	sbci	r31, 0xFD	; 253
    2f32:	80 83       	st	Z, r24
							val_max_bcd[i] = num_input_max_temp[i];
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	88 2f       	mov	r24, r24
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	fc 01       	movw	r30, r24
    2f42:	ed 50       	subi	r30, 0x0D	; 13
    2f44:	fd 4f       	sbci	r31, 0xFD	; 253
    2f46:	80 81       	ld	r24, Z
    2f48:	f9 01       	movw	r30, r18
    2f4a:	ea 51       	subi	r30, 0x1A	; 26
    2f4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2f4e:	80 83       	st	Z, r24
						bar_1_height = (val_min + 1) / 2;
						bar_2_height = (val_max + 1) / 2;
						num_pad_value_control = 4;
						val_min = round((double)val_min / 0.096774);
						val_max = round((double)val_max / 0.096774);
						for (i = 0; i <= 3; i++)
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	8f 5f       	subi	r24, 0xFF	; 255
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	84 30       	cpi	r24, 0x04	; 4
    2f5a:	80 f2       	brcs	.-96     	; 0x2efc <call_num_pad_mode+0x87c>
					}	
				}
				break;
		}
		
		i_count = 0;
    2f5c:	10 92 42 04 	sts	0x0442, r1
		for (i = 0; i <= 11; i++)
    2f60:	19 82       	std	Y+1, r1	; 0x01
    2f62:	9d c0       	rjmp	.+314    	; 0x309e <call_num_pad_mode+0xa1e>
		{
			if (num_pad_pressed[i] >= 2)
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	88 2f       	mov	r24, r24
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	ed 5c       	subi	r30, 0xCD	; 205
    2f6e:	fb 4f       	sbci	r31, 0xFB	; 251
    2f70:	80 81       	ld	r24, Z
    2f72:	82 30       	cpi	r24, 0x02	; 2
    2f74:	28 f0       	brcs	.+10     	; 0x2f80 <call_num_pad_mode+0x900>
			{
				i_count++;
    2f76:	80 91 42 04 	lds	r24, 0x0442
    2f7a:	8f 5f       	subi	r24, 0xFF	; 255
    2f7c:	80 93 42 04 	sts	0x0442, r24
			}
			if ((num_pad_pressed[i] >= 2) && !(num_pad_input_recognised))
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	fc 01       	movw	r30, r24
    2f88:	ed 5c       	subi	r30, 0xCD	; 205
    2f8a:	fb 4f       	sbci	r31, 0xFB	; 251
    2f8c:	80 81       	ld	r24, Z
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	08 f4       	brcc	.+2      	; 0x2f94 <call_num_pad_mode+0x914>
    2f92:	82 c0       	rjmp	.+260    	; 0x3098 <call_num_pad_mode+0xa18>
    2f94:	80 91 40 04 	lds	r24, 0x0440
    2f98:	88 23       	and	r24, r24
    2f9a:	09 f0       	breq	.+2      	; 0x2f9e <call_num_pad_mode+0x91e>
    2f9c:	7d c0       	rjmp	.+250    	; 0x3098 <call_num_pad_mode+0xa18>
			{
				num_pad_input_recognised = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	80 93 40 04 	sts	0x0440, r24
				if (i == 10)
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	8a 30       	cpi	r24, 0x0A	; 10
    2fa8:	41 f4       	brne	.+16     	; 0x2fba <call_num_pad_mode+0x93a>
				{
					num_pad_value_control++;
    2faa:	80 91 3f 04 	lds	r24, 0x043F
    2fae:	8f 5f       	subi	r24, 0xFF	; 255
    2fb0:	80 93 3f 04 	sts	0x043F, r24
					num_pad_cursor_pos = 0;
    2fb4:	10 92 41 04 	sts	0x0441, r1
    2fb8:	6f c0       	rjmp	.+222    	; 0x3098 <call_num_pad_mode+0xa18>
				}
				else if (i == 11)
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8b 30       	cpi	r24, 0x0B	; 11
    2fbe:	a9 f4       	brne	.+42     	; 0x2fea <call_num_pad_mode+0x96a>
				{
					if (num_pad_value_control != 0)
    2fc0:	80 91 3f 04 	lds	r24, 0x043F
    2fc4:	88 23       	and	r24, r24
    2fc6:	71 f0       	breq	.+28     	; 0x2fe4 <call_num_pad_mode+0x964>
					{
						num_pad_value_control--;
    2fc8:	80 91 3f 04 	lds	r24, 0x043F
    2fcc:	81 50       	subi	r24, 0x01	; 1
    2fce:	80 93 3f 04 	sts	0x043F, r24
						g_draw_string(107, 7, "      ");
    2fd2:	2c eb       	ldi	r18, 0xBC	; 188
    2fd4:	33 e0       	ldi	r19, 0x03	; 3
    2fd6:	8b e6       	ldi	r24, 0x6B	; 107
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	67 e0       	ldi	r22, 0x07	; 7
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	a9 01       	movw	r20, r18
    2fe0:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
					}
					num_pad_cursor_pos = 0;
    2fe4:	10 92 41 04 	sts	0x0441, r1
    2fe8:	57 c0       	rjmp	.+174    	; 0x3098 <call_num_pad_mode+0xa18>
				}
				else 
				{
					switch (num_pad_value_control)
    2fea:	80 91 3f 04 	lds	r24, 0x043F
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	3b 83       	std	Y+3, r19	; 0x03
    2ff4:	2a 83       	std	Y+2, r18	; 0x02
    2ff6:	4a 81       	ldd	r20, Y+2	; 0x02
    2ff8:	5b 81       	ldd	r21, Y+3	; 0x03
    2ffa:	41 30       	cpi	r20, 0x01	; 1
    2ffc:	51 05       	cpc	r21, r1
    2ffe:	09 f1       	breq	.+66     	; 0x3042 <call_num_pad_mode+0x9c2>
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	9b 81       	ldd	r25, Y+3	; 0x03
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	91 05       	cpc	r25, r1
    3008:	91 f1       	breq	.+100    	; 0x306e <call_num_pad_mode+0x9ee>
    300a:	2a 81       	ldd	r18, Y+2	; 0x02
    300c:	3b 81       	ldd	r19, Y+3	; 0x03
    300e:	21 15       	cp	r18, r1
    3010:	31 05       	cpc	r19, r1
    3012:	09 f0       	breq	.+2      	; 0x3016 <call_num_pad_mode+0x996>
    3014:	41 c0       	rjmp	.+130    	; 0x3098 <call_num_pad_mode+0xa18>
					{
						case 0:
							num_input_min_temp[num_pad_cursor_pos] = i+48;
    3016:	80 91 41 04 	lds	r24, 0x0441
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	80 5d       	subi	r24, 0xD0	; 208
    3022:	f9 01       	movw	r30, r18
    3024:	e0 51       	subi	r30, 0x10	; 16
    3026:	fd 4f       	sbci	r31, 0xFD	; 253
    3028:	80 83       	st	Z, r24
							num_pad_cursor_pos++;
    302a:	80 91 41 04 	lds	r24, 0x0441
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	80 93 41 04 	sts	0x0441, r24
							if (num_pad_cursor_pos == 2)
    3034:	80 91 41 04 	lds	r24, 0x0441
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	71 f5       	brne	.+92     	; 0x3098 <call_num_pad_mode+0xa18>
								num_pad_cursor_pos = 0;
    303c:	10 92 41 04 	sts	0x0441, r1
    3040:	2b c0       	rjmp	.+86     	; 0x3098 <call_num_pad_mode+0xa18>
							break;
						case 1:
							num_input_max_temp[num_pad_cursor_pos] = i+48;
    3042:	80 91 41 04 	lds	r24, 0x0441
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	80 5d       	subi	r24, 0xD0	; 208
    304e:	f9 01       	movw	r30, r18
    3050:	ed 50       	subi	r30, 0x0D	; 13
    3052:	fd 4f       	sbci	r31, 0xFD	; 253
    3054:	80 83       	st	Z, r24
							num_pad_cursor_pos++;
    3056:	80 91 41 04 	lds	r24, 0x0441
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	80 93 41 04 	sts	0x0441, r24
							if (num_pad_cursor_pos == 2)
    3060:	80 91 41 04 	lds	r24, 0x0441
    3064:	82 30       	cpi	r24, 0x02	; 2
    3066:	c1 f4       	brne	.+48     	; 0x3098 <call_num_pad_mode+0xa18>
								num_pad_cursor_pos = 0;
    3068:	10 92 41 04 	sts	0x0441, r1
    306c:	15 c0       	rjmp	.+42     	; 0x3098 <call_num_pad_mode+0xa18>
							break;
						case 2:
							num_input_refr_time[num_pad_cursor_pos] = i+48;
    306e:	80 91 41 04 	lds	r24, 0x0441
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	80 5d       	subi	r24, 0xD0	; 208
    307a:	f9 01       	movw	r30, r18
    307c:	ea 50       	subi	r30, 0x0A	; 10
    307e:	fd 4f       	sbci	r31, 0xFD	; 253
    3080:	80 83       	st	Z, r24
							num_pad_cursor_pos++;
    3082:	80 91 41 04 	lds	r24, 0x0441
    3086:	8f 5f       	subi	r24, 0xFF	; 255
    3088:	80 93 41 04 	sts	0x0441, r24
							if (num_pad_cursor_pos == 4)
    308c:	80 91 41 04 	lds	r24, 0x0441
    3090:	84 30       	cpi	r24, 0x04	; 4
    3092:	11 f4       	brne	.+4      	; 0x3098 <call_num_pad_mode+0xa18>
								num_pad_cursor_pos = 0;
    3094:	10 92 41 04 	sts	0x0441, r1
				}
				break;
		}
		
		i_count = 0;
		for (i = 0; i <= 11; i++)
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	8f 5f       	subi	r24, 0xFF	; 255
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	8c 30       	cpi	r24, 0x0C	; 12
    30a2:	08 f4       	brcc	.+2      	; 0x30a6 <call_num_pad_mode+0xa26>
    30a4:	5f cf       	rjmp	.-322    	; 0x2f64 <call_num_pad_mode+0x8e4>
					}
				}
			}
		}
		
		if (i_count == 0)
    30a6:	80 91 42 04 	lds	r24, 0x0442
    30aa:	88 23       	and	r24, r24
    30ac:	11 f4       	brne	.+4      	; 0x30b2 <call_num_pad_mode+0xa32>
			num_pad_input_recognised = 0;
    30ae:	10 92 40 04 	sts	0x0440, r1
			
		for (i = 0; i <= 40; i++)
    30b2:	19 82       	std	Y+1, r1	; 0x01
    30b4:	0d c0       	rjmp	.+26     	; 0x30d0 <call_num_pad_mode+0xa50>
		{
			lcd_graphics_plot_pixel(105+i, 16, PIXEL_OFF);
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	88 2f       	mov	r24, r24
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	87 59       	subi	r24, 0x97	; 151
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	60 e1       	ldi	r22, 0x10	; 16
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
		}
		
		if (i_count == 0)
			num_pad_input_recognised = 0;
			
		for (i = 0; i <= 40; i++)
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	8f 5f       	subi	r24, 0xFF	; 255
    30ce:	89 83       	std	Y+1, r24	; 0x01
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	89 32       	cpi	r24, 0x29	; 41
    30d4:	80 f3       	brcs	.-32     	; 0x30b6 <call_num_pad_mode+0xa36>
		{
			lcd_graphics_plot_pixel(105+i, 16, PIXEL_OFF);
		}
		g_draw_horizontal_line(107 + (num_pad_cursor_pos*6), 16, 5);
    30d6:	80 91 41 04 	lds	r24, 0x0441
    30da:	28 2f       	mov	r18, r24
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	c9 01       	movw	r24, r18
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	82 0f       	add	r24, r18
    30e6:	93 1f       	adc	r25, r19
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	85 59       	subi	r24, 0x95	; 149
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	60 e1       	ldi	r22, 0x10	; 16
    30f2:	70 e0       	ldi	r23, 0x00	; 0
    30f4:	45 e0       	ldi	r20, 0x05	; 5
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	0e 94 ac 05 	call	0xb58	; 0xb58 <g_draw_horizontal_line>
	g_draw_rectangle(130, 60, 30, 20);
	g_draw_string(139, 67, "<-");
	
	num_pad_cursor_pos = 0;
	
	while(num_pad_value_control != 4)
    30fc:	80 91 3f 04 	lds	r24, 0x043F
    3100:	84 30       	cpi	r24, 0x04	; 4
    3102:	09 f0       	breq	.+2      	; 0x3106 <call_num_pad_mode+0xa86>
    3104:	c1 cb       	rjmp	.-2174   	; 0x2888 <call_num_pad_mode+0x208>
		{
			lcd_graphics_plot_pixel(105+i, 16, PIXEL_OFF);
		}
		g_draw_horizontal_line(107 + (num_pad_cursor_pos*6), 16, 5);
	}
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <call_slider_mode>:

void call_slider_mode(void)
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	0f 92       	push	r0
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
//======================================================		
//============= 		Slider mode		================
//======================================================
	unsigned char i;

	lcd_graphics_clear();
    3120:	0e 94 58 09 	call	0x12b0	; 0x12b0 <lcd_graphics_clear>
	g_draw_rectangle(0, 0, 160, 80);
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	40 ea       	ldi	r20, 0xA0	; 160
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	20 e5       	ldi	r18, 0x50	; 80
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(7, 70, "Min");
    3138:	23 ec       	ldi	r18, 0xC3	; 195
    313a:	33 e0       	ldi	r19, 0x03	; 3
    313c:	87 e0       	ldi	r24, 0x07	; 7
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	66 e4       	ldi	r22, 0x46	; 70
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	a9 01       	movw	r20, r18
    3146:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(10, 15, 9, 52);
    314a:	8a e0       	ldi	r24, 0x0A	; 10
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	6f e0       	ldi	r22, 0x0F	; 15
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	49 e0       	ldi	r20, 0x09	; 9
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	24 e3       	ldi	r18, 0x34	; 52
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(52, 70, "Max");
    315e:	27 ec       	ldi	r18, 0xC7	; 199
    3160:	33 e0       	ldi	r19, 0x03	; 3
    3162:	84 e3       	ldi	r24, 0x34	; 52
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	66 e4       	ldi	r22, 0x46	; 70
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	a9 01       	movw	r20, r18
    316c:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(55, 15, 9, 52);
    3170:	87 e3       	ldi	r24, 0x37	; 55
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	6f e0       	ldi	r22, 0x0F	; 15
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	49 e0       	ldi	r20, 0x09	; 9
    317a:	50 e0       	ldi	r21, 0x00	; 0
    317c:	24 e3       	ldi	r18, 0x34	; 52
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(90, 70, "T_refr");
    3184:	2b ec       	ldi	r18, 0xCB	; 203
    3186:	33 e0       	ldi	r19, 0x03	; 3
    3188:	8a e5       	ldi	r24, 0x5A	; 90
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	66 e4       	ldi	r22, 0x46	; 70
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	a9 01       	movw	r20, r18
    3192:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_rectangle(100, 15, 9, 52);
    3196:	84 e6       	ldi	r24, 0x64	; 100
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	6f e0       	ldi	r22, 0x0F	; 15
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	49 e0       	ldi	r20, 0x09	; 9
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	24 e3       	ldi	r18, 0x34	; 52
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_rectangle(132, 63, 25, 15);
    31aa:	84 e8       	ldi	r24, 0x84	; 132
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	6f e3       	ldi	r22, 0x3F	; 63
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	49 e1       	ldi	r20, 0x19	; 25
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	2f e0       	ldi	r18, 0x0F	; 15
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(139, 67, "Ok");
    31be:	2c e4       	ldi	r18, 0x4C	; 76
    31c0:	33 e0       	ldi	r19, 0x03	; 3
    31c2:	8b e8       	ldi	r24, 0x8B	; 139
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	63 e4       	ldi	r22, 0x43	; 67
    31c8:	70 e0       	ldi	r23, 0x00	; 0
    31ca:	a9 01       	movw	r20, r18
    31cc:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	
	button_pressed = 0;
    31d0:	10 92 32 04 	sts	0x0432, r1
    31d4:	39 c3       	rjmp	.+1650   	; 0x3848 <call_slider_mode+0x732>
	
	while((button_pressed <= 3))
	{
		buffer_touch_ad_y = get_touch_y();
    31d6:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <get_touch_y>
    31da:	80 93 2a 04 	sts	0x042A, r24
		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
    31de:	80 91 2a 04 	lds	r24, 0x042A
    31e2:	88 2f       	mov	r24, r24
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <get_touch_x>
    31ea:	90 93 29 04 	sts	0x0429, r25
    31ee:	80 93 28 04 	sts	0x0428, r24
		
		if (buffer_touch_ad_x > 160)
    31f2:	80 91 28 04 	lds	r24, 0x0428
    31f6:	90 91 29 04 	lds	r25, 0x0429
    31fa:	81 3a       	cpi	r24, 0xA1	; 161
    31fc:	91 05       	cpc	r25, r1
    31fe:	30 f0       	brcs	.+12     	; 0x320c <call_slider_mode+0xf6>
			buffer_touch_ad_x = 160;
    3200:	80 ea       	ldi	r24, 0xA0	; 160
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	90 93 29 04 	sts	0x0429, r25
    3208:	80 93 28 04 	sts	0x0428, r24
		
		if (buffer_touch_ad_x == 0)
    320c:	80 91 28 04 	lds	r24, 0x0428
    3210:	90 91 29 04 	lds	r25, 0x0429
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	11 f4       	brne	.+4      	; 0x321c <call_slider_mode+0x106>
			buffer_touch_ad_y = 0;
    3218:	10 92 2a 04 	sts	0x042A, r1
//============= 		Bar 1 			================
		if ((buffer_touch_ad_x >= 20) && (buffer_touch_ad_x <= 50))
    321c:	80 91 28 04 	lds	r24, 0x0428
    3220:	90 91 29 04 	lds	r25, 0x0429
    3224:	84 31       	cpi	r24, 0x14	; 20
    3226:	91 05       	cpc	r25, r1
    3228:	08 f4       	brcc	.+2      	; 0x322c <call_slider_mode+0x116>
    322a:	d2 c0       	rjmp	.+420    	; 0x33d0 <call_slider_mode+0x2ba>
    322c:	80 91 28 04 	lds	r24, 0x0428
    3230:	90 91 29 04 	lds	r25, 0x0429
    3234:	83 33       	cpi	r24, 0x33	; 51
    3236:	91 05       	cpc	r25, r1
    3238:	08 f0       	brcs	.+2      	; 0x323c <call_slider_mode+0x126>
    323a:	ca c0       	rjmp	.+404    	; 0x33d0 <call_slider_mode+0x2ba>
		{
			if ((buffer_touch_ad_y >= 17) && (buffer_touch_ad_y <= 67))
    323c:	80 91 2a 04 	lds	r24, 0x042A
    3240:	81 31       	cpi	r24, 0x11	; 17
    3242:	08 f4       	brcc	.+2      	; 0x3246 <call_slider_mode+0x130>
    3244:	c5 c0       	rjmp	.+394    	; 0x33d0 <call_slider_mode+0x2ba>
    3246:	80 91 2a 04 	lds	r24, 0x042A
    324a:	84 34       	cpi	r24, 0x44	; 68
    324c:	08 f0       	brcs	.+2      	; 0x3250 <call_slider_mode+0x13a>
    324e:	c0 c0       	rjmp	.+384    	; 0x33d0 <call_slider_mode+0x2ba>
			{
				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
    3250:	80 91 2a 04 	lds	r24, 0x042A
    3254:	81 31       	cpi	r24, 0x11	; 17
    3256:	38 f4       	brcc	.+14     	; 0x3266 <call_slider_mode+0x150>
    3258:	80 91 2a 04 	lds	r24, 0x042A
    325c:	8b 30       	cpi	r24, 0x0B	; 11
    325e:	18 f0       	brcs	.+6      	; 0x3266 <call_slider_mode+0x150>
					buffer_touch_ad_y = 17;
    3260:	81 e1       	ldi	r24, 0x11	; 17
    3262:	80 93 2a 04 	sts	0x042A, r24
				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
    3266:	80 91 2a 04 	lds	r24, 0x042A
    326a:	84 34       	cpi	r24, 0x44	; 68
    326c:	38 f0       	brcs	.+14     	; 0x327c <call_slider_mode+0x166>
    326e:	80 91 2a 04 	lds	r24, 0x042A
    3272:	8a 34       	cpi	r24, 0x4A	; 74
    3274:	18 f4       	brcc	.+6      	; 0x327c <call_slider_mode+0x166>
					buffer_touch_ad_y = 67;				
    3276:	83 e4       	ldi	r24, 0x43	; 67
    3278:	80 93 2a 04 	sts	0x042A, r24
				bar_1_height = 50-(buffer_touch_ad_y-17);
    327c:	90 91 2a 04 	lds	r25, 0x042A
    3280:	83 e4       	ldi	r24, 0x43	; 67
    3282:	89 1b       	sub	r24, r25
    3284:	80 93 2c 04 	sts	0x042C, r24
				for (i = 17; i < buffer_touch_ad_y-1; i++)
    3288:	81 e1       	ldi	r24, 0x11	; 17
    328a:	89 83       	std	Y+1, r24	; 0x01
    328c:	30 c0       	rjmp	.+96     	; 0x32ee <call_slider_mode+0x1d8>
				{
					lcd_graphics_plot_pixel(12, i, PIXEL_OFF);
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	8c e0       	ldi	r24, 0x0C	; 12
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	b9 01       	movw	r22, r18
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(13, i, PIXEL_OFF);
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	8d e0       	ldi	r24, 0x0D	; 13
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	b9 01       	movw	r22, r18
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(14, i, PIXEL_OFF);
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	8e e0       	ldi	r24, 0x0E	; 14
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	b9 01       	movw	r22, r18
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(15, i, PIXEL_OFF);
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	8f e0       	ldi	r24, 0x0F	; 15
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	b9 01       	movw	r22, r18
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(16, i, PIXEL_OFF);
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	80 e1       	ldi	r24, 0x10	; 16
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	b9 01       	movw	r22, r18
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
					buffer_touch_ad_y = 17;
				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
					buffer_touch_ad_y = 67;				
				bar_1_height = 50-(buffer_touch_ad_y-17);
				for (i = 17; i < buffer_touch_ad_y-1; i++)
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	8f 5f       	subi	r24, 0xFF	; 255
    32ec:	89 83       	std	Y+1, r24	; 0x01
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	28 2f       	mov	r18, r24
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	80 91 2a 04 	lds	r24, 0x042A
    32f8:	88 2f       	mov	r24, r24
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	28 17       	cp	r18, r24
    3300:	39 07       	cpc	r19, r25
    3302:	2c f2       	brlt	.-118    	; 0x328e <call_slider_mode+0x178>
					lcd_graphics_plot_pixel(13, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(14, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(15, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(16, i, PIXEL_OFF);
				}
				for (i = 12; i <= 16; i++)
    3304:	8c e0       	ldi	r24, 0x0C	; 12
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	13 c0       	rjmp	.+38     	; 0x3330 <call_slider_mode+0x21a>
				{
					g_draw_vertical_line(i, buffer_touch_ad_y, bar_1_height);
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	68 2f       	mov	r22, r24
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	80 91 2a 04 	lds	r24, 0x042A
    3314:	48 2f       	mov	r20, r24
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	80 91 2c 04 	lds	r24, 0x042C
    331c:	28 2f       	mov	r18, r24
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	cb 01       	movw	r24, r22
    3322:	ba 01       	movw	r22, r20
    3324:	a9 01       	movw	r20, r18
    3326:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <g_draw_vertical_line>
					lcd_graphics_plot_pixel(13, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(14, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(15, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(16, i, PIXEL_OFF);
				}
				for (i = 12; i <= 16; i++)
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	8f 5f       	subi	r24, 0xFF	; 255
    332e:	89 83       	std	Y+1, r24	; 0x01
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	81 31       	cpi	r24, 0x11	; 17
    3334:	50 f3       	brcs	.-44     	; 0x330a <call_slider_mode+0x1f4>
				{
					g_draw_vertical_line(i, buffer_touch_ad_y, bar_1_height);
				}
				val_min = round((double)bar_1_height/0.048875855);
    3336:	80 91 2c 04 	lds	r24, 0x042C
    333a:	88 2f       	mov	r24, r24
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	a0 e0       	ldi	r26, 0x00	; 0
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	2c e0       	ldi	r18, 0x0C	; 12
    3354:	32 e3       	ldi	r19, 0x32	; 50
    3356:	48 e4       	ldi	r20, 0x48	; 72
    3358:	5d e3       	ldi	r21, 0x3D	; 61
    335a:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	90 93 23 04 	sts	0x0423, r25
    337e:	80 93 22 04 	sts	0x0422, r24
				if (bar_1_height != 0)
    3382:	80 91 2c 04 	lds	r24, 0x042C
    3386:	88 23       	and	r24, r24
    3388:	51 f0       	breq	.+20     	; 0x339e <call_slider_mode+0x288>
					val_min_bar = (bar_1_height*2) - 1;
    338a:	80 91 2c 04 	lds	r24, 0x042C
    338e:	88 2f       	mov	r24, r24
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	81 50       	subi	r24, 0x01	; 1
    3398:	80 93 2d 04 	sts	0x042D, r24
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <call_slider_mode+0x28c>
				else
					val_min_bar = 0;
    339e:	10 92 2d 04 	sts	0x042D, r1
				val_min_bcd[0] = (val_min_bar/10)+48;
    33a2:	80 91 2d 04 	lds	r24, 0x042D
    33a6:	9a e0       	ldi	r25, 0x0A	; 10
    33a8:	69 2f       	mov	r22, r25
    33aa:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodqi4>
    33ae:	80 5d       	subi	r24, 0xD0	; 208
    33b0:	80 93 e3 02 	sts	0x02E3, r24
				val_min_bar %= 10;
    33b4:	80 91 2d 04 	lds	r24, 0x042D
    33b8:	9a e0       	ldi	r25, 0x0A	; 10
    33ba:	69 2f       	mov	r22, r25
    33bc:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodqi4>
    33c0:	89 2f       	mov	r24, r25
    33c2:	80 93 2d 04 	sts	0x042D, r24
				val_min_bcd[1] = val_min_bar+48;
    33c6:	80 91 2d 04 	lds	r24, 0x042D
    33ca:	80 5d       	subi	r24, 0xD0	; 208
    33cc:	80 93 e4 02 	sts	0x02E4, r24
			}
		}
//============= 		Bar 2 			================
		if ((buffer_touch_ad_x >= 73) && (buffer_touch_ad_x <= 87))
    33d0:	80 91 28 04 	lds	r24, 0x0428
    33d4:	90 91 29 04 	lds	r25, 0x0429
    33d8:	89 34       	cpi	r24, 0x49	; 73
    33da:	91 05       	cpc	r25, r1
    33dc:	08 f4       	brcc	.+2      	; 0x33e0 <call_slider_mode+0x2ca>
    33de:	d2 c0       	rjmp	.+420    	; 0x3584 <call_slider_mode+0x46e>
    33e0:	80 91 28 04 	lds	r24, 0x0428
    33e4:	90 91 29 04 	lds	r25, 0x0429
    33e8:	88 35       	cpi	r24, 0x58	; 88
    33ea:	91 05       	cpc	r25, r1
    33ec:	08 f0       	brcs	.+2      	; 0x33f0 <call_slider_mode+0x2da>
    33ee:	ca c0       	rjmp	.+404    	; 0x3584 <call_slider_mode+0x46e>
		{
			if ((buffer_touch_ad_y >= 17) && (buffer_touch_ad_y <= 67))
    33f0:	80 91 2a 04 	lds	r24, 0x042A
    33f4:	81 31       	cpi	r24, 0x11	; 17
    33f6:	08 f4       	brcc	.+2      	; 0x33fa <call_slider_mode+0x2e4>
    33f8:	c5 c0       	rjmp	.+394    	; 0x3584 <call_slider_mode+0x46e>
    33fa:	80 91 2a 04 	lds	r24, 0x042A
    33fe:	84 34       	cpi	r24, 0x44	; 68
    3400:	08 f0       	brcs	.+2      	; 0x3404 <call_slider_mode+0x2ee>
    3402:	c0 c0       	rjmp	.+384    	; 0x3584 <call_slider_mode+0x46e>
			{
				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
    3404:	80 91 2a 04 	lds	r24, 0x042A
    3408:	81 31       	cpi	r24, 0x11	; 17
    340a:	38 f4       	brcc	.+14     	; 0x341a <call_slider_mode+0x304>
    340c:	80 91 2a 04 	lds	r24, 0x042A
    3410:	8b 30       	cpi	r24, 0x0B	; 11
    3412:	18 f0       	brcs	.+6      	; 0x341a <call_slider_mode+0x304>
					buffer_touch_ad_y = 17;
    3414:	81 e1       	ldi	r24, 0x11	; 17
    3416:	80 93 2a 04 	sts	0x042A, r24
				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
    341a:	80 91 2a 04 	lds	r24, 0x042A
    341e:	84 34       	cpi	r24, 0x44	; 68
    3420:	38 f0       	brcs	.+14     	; 0x3430 <call_slider_mode+0x31a>
    3422:	80 91 2a 04 	lds	r24, 0x042A
    3426:	8a 34       	cpi	r24, 0x4A	; 74
    3428:	18 f4       	brcc	.+6      	; 0x3430 <call_slider_mode+0x31a>
					buffer_touch_ad_y = 67;				
    342a:	83 e4       	ldi	r24, 0x43	; 67
    342c:	80 93 2a 04 	sts	0x042A, r24
				bar_2_height = 50-(buffer_touch_ad_y-17);
    3430:	90 91 2a 04 	lds	r25, 0x042A
    3434:	83 e4       	ldi	r24, 0x43	; 67
    3436:	89 1b       	sub	r24, r25
    3438:	80 93 2e 04 	sts	0x042E, r24
				for (i = 17; i < buffer_touch_ad_y-1; i++)
    343c:	81 e1       	ldi	r24, 0x11	; 17
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	30 c0       	rjmp	.+96     	; 0x34a2 <call_slider_mode+0x38c>
				{
					lcd_graphics_plot_pixel(57, i, PIXEL_OFF);
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	89 e3       	ldi	r24, 0x39	; 57
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	b9 01       	movw	r22, r18
    344e:	40 e0       	ldi	r20, 0x00	; 0
    3450:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(58, i, PIXEL_OFF);
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	28 2f       	mov	r18, r24
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	8a e3       	ldi	r24, 0x3A	; 58
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	b9 01       	movw	r22, r18
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(59, i, PIXEL_OFF);
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	28 2f       	mov	r18, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	8b e3       	ldi	r24, 0x3B	; 59
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	b9 01       	movw	r22, r18
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(60, i, PIXEL_OFF);
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	28 2f       	mov	r18, r24
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	8c e3       	ldi	r24, 0x3C	; 60
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	b9 01       	movw	r22, r18
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(61, i, PIXEL_OFF);
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	8d e3       	ldi	r24, 0x3D	; 61
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	b9 01       	movw	r22, r18
    3496:	40 e0       	ldi	r20, 0x00	; 0
    3498:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
					buffer_touch_ad_y = 17;
				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
					buffer_touch_ad_y = 67;				
				bar_2_height = 50-(buffer_touch_ad_y-17);
				for (i = 17; i < buffer_touch_ad_y-1; i++)
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	8f 5f       	subi	r24, 0xFF	; 255
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	28 2f       	mov	r18, r24
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	80 91 2a 04 	lds	r24, 0x042A
    34ac:	88 2f       	mov	r24, r24
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	28 17       	cp	r18, r24
    34b4:	39 07       	cpc	r19, r25
    34b6:	2c f2       	brlt	.-118    	; 0x3442 <call_slider_mode+0x32c>
					lcd_graphics_plot_pixel(58, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(59, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(60, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(61, i, PIXEL_OFF);
				}
				for (i = 57; i <= 61; i++)
    34b8:	89 e3       	ldi	r24, 0x39	; 57
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	13 c0       	rjmp	.+38     	; 0x34e4 <call_slider_mode+0x3ce>
				{
					g_draw_vertical_line(i, buffer_touch_ad_y, bar_2_height);
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	68 2f       	mov	r22, r24
    34c2:	70 e0       	ldi	r23, 0x00	; 0
    34c4:	80 91 2a 04 	lds	r24, 0x042A
    34c8:	48 2f       	mov	r20, r24
    34ca:	50 e0       	ldi	r21, 0x00	; 0
    34cc:	80 91 2e 04 	lds	r24, 0x042E
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	cb 01       	movw	r24, r22
    34d6:	ba 01       	movw	r22, r20
    34d8:	a9 01       	movw	r20, r18
    34da:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <g_draw_vertical_line>
					lcd_graphics_plot_pixel(58, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(59, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(60, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(61, i, PIXEL_OFF);
				}
				for (i = 57; i <= 61; i++)
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	8f 5f       	subi	r24, 0xFF	; 255
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	8e 33       	cpi	r24, 0x3E	; 62
    34e8:	50 f3       	brcs	.-44     	; 0x34be <call_slider_mode+0x3a8>
				{
					g_draw_vertical_line(i, buffer_touch_ad_y, bar_2_height);
				}
				val_max = round((double)bar_2_height/0.048875855);
    34ea:	80 91 2e 04 	lds	r24, 0x042E
    34ee:	88 2f       	mov	r24, r24
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	a0 e0       	ldi	r26, 0x00	; 0
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	bc 01       	movw	r22, r24
    34f8:	cd 01       	movw	r24, r26
    34fa:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	2c e0       	ldi	r18, 0x0C	; 12
    3508:	32 e3       	ldi	r19, 0x32	; 50
    350a:	48 e4       	ldi	r20, 0x48	; 72
    350c:	5d e3       	ldi	r21, 0x3D	; 61
    350e:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	bc 01       	movw	r22, r24
    3524:	cd 01       	movw	r24, r26
    3526:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	90 93 25 04 	sts	0x0425, r25
    3532:	80 93 24 04 	sts	0x0424, r24
				if (bar_2_height != 0)
    3536:	80 91 2e 04 	lds	r24, 0x042E
    353a:	88 23       	and	r24, r24
    353c:	51 f0       	breq	.+20     	; 0x3552 <call_slider_mode+0x43c>
					val_max_bar = (bar_2_height*2) - 1;
    353e:	80 91 2e 04 	lds	r24, 0x042E
    3542:	88 2f       	mov	r24, r24
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	81 50       	subi	r24, 0x01	; 1
    354c:	80 93 2f 04 	sts	0x042F, r24
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <call_slider_mode+0x440>
				else
					val_max_bar = 0;
    3552:	10 92 2f 04 	sts	0x042F, r1
				val_max_bcd[0] = (val_max_bar/10)+48;
    3556:	80 91 2f 04 	lds	r24, 0x042F
    355a:	9a e0       	ldi	r25, 0x0A	; 10
    355c:	69 2f       	mov	r22, r25
    355e:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodqi4>
    3562:	80 5d       	subi	r24, 0xD0	; 208
    3564:	80 93 e6 02 	sts	0x02E6, r24
				val_max_bar %= 10;
    3568:	80 91 2f 04 	lds	r24, 0x042F
    356c:	9a e0       	ldi	r25, 0x0A	; 10
    356e:	69 2f       	mov	r22, r25
    3570:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodqi4>
    3574:	89 2f       	mov	r24, r25
    3576:	80 93 2f 04 	sts	0x042F, r24
				val_max_bcd[1] = val_max_bar+48;
    357a:	80 91 2f 04 	lds	r24, 0x042F
    357e:	80 5d       	subi	r24, 0xD0	; 208
    3580:	80 93 e7 02 	sts	0x02E7, r24
			}
		}
//============= 		Bar 3 			================
		if ((buffer_touch_ad_x >= 118) && (buffer_touch_ad_x <= 132))
    3584:	80 91 28 04 	lds	r24, 0x0428
    3588:	90 91 29 04 	lds	r25, 0x0429
    358c:	86 37       	cpi	r24, 0x76	; 118
    358e:	91 05       	cpc	r25, r1
    3590:	08 f4       	brcc	.+2      	; 0x3594 <call_slider_mode+0x47e>
    3592:	a8 c0       	rjmp	.+336    	; 0x36e4 <call_slider_mode+0x5ce>
    3594:	80 91 28 04 	lds	r24, 0x0428
    3598:	90 91 29 04 	lds	r25, 0x0429
    359c:	85 38       	cpi	r24, 0x85	; 133
    359e:	91 05       	cpc	r25, r1
    35a0:	08 f0       	brcs	.+2      	; 0x35a4 <call_slider_mode+0x48e>
    35a2:	a0 c0       	rjmp	.+320    	; 0x36e4 <call_slider_mode+0x5ce>
		{
			if ((buffer_touch_ad_y >= 17) && (buffer_touch_ad_y <= 67))
    35a4:	80 91 2a 04 	lds	r24, 0x042A
    35a8:	81 31       	cpi	r24, 0x11	; 17
    35aa:	08 f4       	brcc	.+2      	; 0x35ae <call_slider_mode+0x498>
    35ac:	9b c0       	rjmp	.+310    	; 0x36e4 <call_slider_mode+0x5ce>
    35ae:	80 91 2a 04 	lds	r24, 0x042A
    35b2:	84 34       	cpi	r24, 0x44	; 68
    35b4:	08 f0       	brcs	.+2      	; 0x35b8 <call_slider_mode+0x4a2>
    35b6:	96 c0       	rjmp	.+300    	; 0x36e4 <call_slider_mode+0x5ce>
			{
				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
    35b8:	80 91 2a 04 	lds	r24, 0x042A
    35bc:	81 31       	cpi	r24, 0x11	; 17
    35be:	38 f4       	brcc	.+14     	; 0x35ce <call_slider_mode+0x4b8>
    35c0:	80 91 2a 04 	lds	r24, 0x042A
    35c4:	8b 30       	cpi	r24, 0x0B	; 11
    35c6:	18 f0       	brcs	.+6      	; 0x35ce <call_slider_mode+0x4b8>
					buffer_touch_ad_y = 17;
    35c8:	81 e1       	ldi	r24, 0x11	; 17
    35ca:	80 93 2a 04 	sts	0x042A, r24
				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
    35ce:	80 91 2a 04 	lds	r24, 0x042A
    35d2:	84 34       	cpi	r24, 0x44	; 68
    35d4:	38 f0       	brcs	.+14     	; 0x35e4 <call_slider_mode+0x4ce>
    35d6:	80 91 2a 04 	lds	r24, 0x042A
    35da:	8a 34       	cpi	r24, 0x4A	; 74
    35dc:	18 f4       	brcc	.+6      	; 0x35e4 <call_slider_mode+0x4ce>
					buffer_touch_ad_y = 67;				
    35de:	83 e4       	ldi	r24, 0x43	; 67
    35e0:	80 93 2a 04 	sts	0x042A, r24
				bar_3_height = 50-(buffer_touch_ad_y-17);
    35e4:	90 91 2a 04 	lds	r25, 0x042A
    35e8:	83 e4       	ldi	r24, 0x43	; 67
    35ea:	89 1b       	sub	r24, r25
    35ec:	80 93 30 04 	sts	0x0430, r24
				for (i = 17; i < buffer_touch_ad_y-1; i++)
    35f0:	81 e1       	ldi	r24, 0x11	; 17
    35f2:	89 83       	std	Y+1, r24	; 0x01
    35f4:	30 c0       	rjmp	.+96     	; 0x3656 <call_slider_mode+0x540>
				{
					lcd_graphics_plot_pixel(102, i, PIXEL_OFF);
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	86 e6       	ldi	r24, 0x66	; 102
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	b9 01       	movw	r22, r18
    3602:	40 e0       	ldi	r20, 0x00	; 0
    3604:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(103, i, PIXEL_OFF);
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	87 e6       	ldi	r24, 0x67	; 103
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	b9 01       	movw	r22, r18
    3614:	40 e0       	ldi	r20, 0x00	; 0
    3616:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(104, i, PIXEL_OFF);
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	88 e6       	ldi	r24, 0x68	; 104
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	b9 01       	movw	r22, r18
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(105, i, PIXEL_OFF);
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	28 2f       	mov	r18, r24
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	89 e6       	ldi	r24, 0x69	; 105
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	b9 01       	movw	r22, r18
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
					lcd_graphics_plot_pixel(106, i, PIXEL_OFF);
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	8a e6       	ldi	r24, 0x6A	; 106
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	b9 01       	movw	r22, r18
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
					buffer_touch_ad_y = 17;
				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
					buffer_touch_ad_y = 67;				
				bar_3_height = 50-(buffer_touch_ad_y-17);
				for (i = 17; i < buffer_touch_ad_y-1; i++)
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	89 83       	std	Y+1, r24	; 0x01
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	80 91 2a 04 	lds	r24, 0x042A
    3660:	88 2f       	mov	r24, r24
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	28 17       	cp	r18, r24
    3668:	39 07       	cpc	r19, r25
    366a:	2c f2       	brlt	.-118    	; 0x35f6 <call_slider_mode+0x4e0>
					lcd_graphics_plot_pixel(103, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(104, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(105, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(106, i, PIXEL_OFF);
				}
				for (i = 102; i <= 106; i++)
    366c:	86 e6       	ldi	r24, 0x66	; 102
    366e:	89 83       	std	Y+1, r24	; 0x01
    3670:	13 c0       	rjmp	.+38     	; 0x3698 <call_slider_mode+0x582>
				{
					g_draw_vertical_line(i, buffer_touch_ad_y, bar_3_height);
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	68 2f       	mov	r22, r24
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	80 91 2a 04 	lds	r24, 0x042A
    367c:	48 2f       	mov	r20, r24
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	80 91 30 04 	lds	r24, 0x0430
    3684:	28 2f       	mov	r18, r24
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	cb 01       	movw	r24, r22
    368a:	ba 01       	movw	r22, r20
    368c:	a9 01       	movw	r20, r18
    368e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <g_draw_vertical_line>
					lcd_graphics_plot_pixel(103, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(104, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(105, i, PIXEL_OFF);
					lcd_graphics_plot_pixel(106, i, PIXEL_OFF);
				}
				for (i = 102; i <= 106; i++)
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	8f 5f       	subi	r24, 0xFF	; 255
    3696:	89 83       	std	Y+1, r24	; 0x01
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	8b 36       	cpi	r24, 0x6B	; 107
    369c:	50 f3       	brcs	.-44     	; 0x3672 <call_slider_mode+0x55c>
				{
					g_draw_vertical_line(i, buffer_touch_ad_y, bar_3_height);
				}
				val_refr = bar_3_height;
    369e:	80 91 30 04 	lds	r24, 0x0430
    36a2:	88 2f       	mov	r24, r24
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	90 93 27 04 	sts	0x0427, r25
    36aa:	80 93 26 04 	sts	0x0426, r24
				val_refr_bar = bar_3_height;
    36ae:	80 91 30 04 	lds	r24, 0x0430
    36b2:	80 93 31 04 	sts	0x0431, r24
				val_refr_bcd[2] = (val_refr_bar/10)+48;
    36b6:	80 91 31 04 	lds	r24, 0x0431
    36ba:	9a e0       	ldi	r25, 0x0A	; 10
    36bc:	69 2f       	mov	r22, r25
    36be:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodqi4>
    36c2:	80 5d       	subi	r24, 0xD0	; 208
    36c4:	80 93 eb 02 	sts	0x02EB, r24
				val_refr_bar %= 10;
    36c8:	80 91 31 04 	lds	r24, 0x0431
    36cc:	9a e0       	ldi	r25, 0x0A	; 10
    36ce:	69 2f       	mov	r22, r25
    36d0:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodqi4>
    36d4:	89 2f       	mov	r24, r25
    36d6:	80 93 31 04 	sts	0x0431, r24
				val_refr_bcd[3] = val_refr_bar+48;
    36da:	80 91 31 04 	lds	r24, 0x0431
    36de:	80 5d       	subi	r24, 0xD0	; 208
    36e0:	80 93 ec 02 	sts	0x02EC, r24
			}
		}
//============= 		Button 			================
		if ((buffer_touch_ad_x >= 152) && (buffer_touch_ad_x <= 160) && (buffer_touch_ad_y >= 63) && (buffer_touch_ad_y <= 80))
    36e4:	80 91 28 04 	lds	r24, 0x0428
    36e8:	90 91 29 04 	lds	r25, 0x0429
    36ec:	88 39       	cpi	r24, 0x98	; 152
    36ee:	91 05       	cpc	r25, r1
    36f0:	a8 f0       	brcs	.+42     	; 0x371c <call_slider_mode+0x606>
    36f2:	80 91 28 04 	lds	r24, 0x0428
    36f6:	90 91 29 04 	lds	r25, 0x0429
    36fa:	81 3a       	cpi	r24, 0xA1	; 161
    36fc:	91 05       	cpc	r25, r1
    36fe:	70 f4       	brcc	.+28     	; 0x371c <call_slider_mode+0x606>
    3700:	80 91 2a 04 	lds	r24, 0x042A
    3704:	8f 33       	cpi	r24, 0x3F	; 63
    3706:	50 f0       	brcs	.+20     	; 0x371c <call_slider_mode+0x606>
    3708:	80 91 2a 04 	lds	r24, 0x042A
    370c:	81 35       	cpi	r24, 0x51	; 81
    370e:	30 f4       	brcc	.+12     	; 0x371c <call_slider_mode+0x606>
		{
			button_pressed++;
    3710:	80 91 32 04 	lds	r24, 0x0432
    3714:	8f 5f       	subi	r24, 0xFF	; 255
    3716:	80 93 32 04 	sts	0x0432, r24
    371a:	02 c0       	rjmp	.+4      	; 0x3720 <call_slider_mode+0x60a>
		}
		else
		{
			button_pressed = 0;
    371c:	10 92 32 04 	sts	0x0432, r1
		}
		if ((button_pressed == 2) && (val_min > val_max))
    3720:	80 91 32 04 	lds	r24, 0x0432
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	09 f0       	breq	.+2      	; 0x372a <call_slider_mode+0x614>
    3728:	5a c0       	rjmp	.+180    	; 0x37de <call_slider_mode+0x6c8>
    372a:	20 91 22 04 	lds	r18, 0x0422
    372e:	30 91 23 04 	lds	r19, 0x0423
    3732:	80 91 24 04 	lds	r24, 0x0424
    3736:	90 91 25 04 	lds	r25, 0x0425
    373a:	82 17       	cp	r24, r18
    373c:	93 07       	cpc	r25, r19
    373e:	08 f0       	brcs	.+2      	; 0x3742 <call_slider_mode+0x62c>
    3740:	4e c0       	rjmp	.+156    	; 0x37de <call_slider_mode+0x6c8>
		{
			g_draw_string(112, 20, "Error:   ");
    3742:	22 ed       	ldi	r18, 0xD2	; 210
    3744:	33 e0       	ldi	r19, 0x03	; 3
    3746:	80 e7       	ldi	r24, 0x70	; 112
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	64 e1       	ldi	r22, 0x14	; 20
    374c:	70 e0       	ldi	r23, 0x00	; 0
    374e:	a9 01       	movw	r20, r18
    3750:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			g_draw_string(112, 30, "Val_min  ");
    3754:	2c ed       	ldi	r18, 0xDC	; 220
    3756:	33 e0       	ldi	r19, 0x03	; 3
    3758:	80 e7       	ldi	r24, 0x70	; 112
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	6e e1       	ldi	r22, 0x1E	; 30
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	a9 01       	movw	r20, r18
    3762:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			g_draw_string(112, 40, ">        ");
    3766:	26 ee       	ldi	r18, 0xE6	; 230
    3768:	33 e0       	ldi	r19, 0x03	; 3
    376a:	80 e7       	ldi	r24, 0x70	; 112
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	68 e2       	ldi	r22, 0x28	; 40
    3770:	70 e0       	ldi	r23, 0x00	; 0
    3772:	a9 01       	movw	r20, r18
    3774:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			g_draw_string(112, 50, "Val_max! ");
    3778:	20 ef       	ldi	r18, 0xF0	; 240
    377a:	33 e0       	ldi	r19, 0x03	; 3
    377c:	80 e7       	ldi	r24, 0x70	; 112
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	62 e3       	ldi	r22, 0x32	; 50
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	a9 01       	movw	r20, r18
    3786:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			delay_ms(2000);
    378a:	80 ed       	ldi	r24, 0xD0	; 208
    378c:	97 e0       	ldi	r25, 0x07	; 7
    378e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>
			g_draw_string(112, 20, "         ");
    3792:	2a ef       	ldi	r18, 0xFA	; 250
    3794:	33 e0       	ldi	r19, 0x03	; 3
    3796:	80 e7       	ldi	r24, 0x70	; 112
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	64 e1       	ldi	r22, 0x14	; 20
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	a9 01       	movw	r20, r18
    37a0:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			g_draw_string(112, 30, "         ");
    37a4:	2a ef       	ldi	r18, 0xFA	; 250
    37a6:	33 e0       	ldi	r19, 0x03	; 3
    37a8:	80 e7       	ldi	r24, 0x70	; 112
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	6e e1       	ldi	r22, 0x1E	; 30
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	a9 01       	movw	r20, r18
    37b2:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			g_draw_string(112, 40, "         ");
    37b6:	2a ef       	ldi	r18, 0xFA	; 250
    37b8:	33 e0       	ldi	r19, 0x03	; 3
    37ba:	80 e7       	ldi	r24, 0x70	; 112
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	68 e2       	ldi	r22, 0x28	; 40
    37c0:	70 e0       	ldi	r23, 0x00	; 0
    37c2:	a9 01       	movw	r20, r18
    37c4:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			g_draw_string(112, 50, "         ");
    37c8:	2a ef       	ldi	r18, 0xFA	; 250
    37ca:	33 e0       	ldi	r19, 0x03	; 3
    37cc:	80 e7       	ldi	r24, 0x70	; 112
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	62 e3       	ldi	r22, 0x32	; 50
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	a9 01       	movw	r20, r18
    37d6:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
			button_pressed = 0;
    37da:	10 92 32 04 	sts	0x0432, r1
		}
//======================================================
		g_draw_string(5, 4, val_min_bcd);
    37de:	23 ee       	ldi	r18, 0xE3	; 227
    37e0:	32 e0       	ldi	r19, 0x02	; 2
    37e2:	85 e0       	ldi	r24, 0x05	; 5
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	64 e0       	ldi	r22, 0x04	; 4
    37e8:	70 e0       	ldi	r23, 0x00	; 0
    37ea:	a9 01       	movw	r20, r18
    37ec:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
		g_draw_string(23, 4, "C");
    37f0:	24 e6       	ldi	r18, 0x64	; 100
    37f2:	33 e0       	ldi	r19, 0x03	; 3
    37f4:	87 e1       	ldi	r24, 0x17	; 23
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	64 e0       	ldi	r22, 0x04	; 4
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	a9 01       	movw	r20, r18
    37fe:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
		g_draw_string(50, 4, val_max_bcd);
    3802:	26 ee       	ldi	r18, 0xE6	; 230
    3804:	32 e0       	ldi	r19, 0x02	; 2
    3806:	82 e3       	ldi	r24, 0x32	; 50
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	64 e0       	ldi	r22, 0x04	; 4
    380c:	70 e0       	ldi	r23, 0x00	; 0
    380e:	a9 01       	movw	r20, r18
    3810:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
		g_draw_string(68, 4, "C");
    3814:	24 e6       	ldi	r18, 0x64	; 100
    3816:	33 e0       	ldi	r19, 0x03	; 3
    3818:	84 e4       	ldi	r24, 0x44	; 68
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	64 e0       	ldi	r22, 0x04	; 4
    381e:	70 e0       	ldi	r23, 0x00	; 0
    3820:	a9 01       	movw	r20, r18
    3822:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
		g_draw_string(95, 4, val_refr_bcd);
    3826:	29 ee       	ldi	r18, 0xE9	; 233
    3828:	32 e0       	ldi	r19, 0x02	; 2
    382a:	8f e5       	ldi	r24, 0x5F	; 95
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	64 e0       	ldi	r22, 0x04	; 4
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	a9 01       	movw	r20, r18
    3834:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
#ifdef GRAD_ON
		draw_grad(17, 2);
    3838:	81 e1       	ldi	r24, 0x11	; 17
    383a:	62 e0       	ldi	r22, 0x02	; 2
    383c:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
		draw_grad(62, 2);
    3840:	8e e3       	ldi	r24, 0x3E	; 62
    3842:	62 e0       	ldi	r22, 0x02	; 2
    3844:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
	g_draw_rectangle(132, 63, 25, 15);
	g_draw_string(139, 67, "Ok");
	
	button_pressed = 0;
	
	while((button_pressed <= 3))
    3848:	80 91 32 04 	lds	r24, 0x0432
    384c:	84 30       	cpi	r24, 0x04	; 4
    384e:	08 f4       	brcc	.+2      	; 0x3852 <call_slider_mode+0x73c>
    3850:	c2 cc       	rjmp	.-1660   	; 0x31d6 <call_slider_mode+0xc0>
		if (button_pressed)
			g_draw_string(128, 22, "b 1");
		else
			g_draw_string(128, 22, "b 0");*/
	}
}
    3852:	0f 90       	pop	r0
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <draw_layout>:

void draw_layout(void)
{
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	0f 92       	push	r0
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
//============= 		Layout 			================
	unsigned char i;

	lcd_graphics_clear();
    3868:	0e 94 58 09 	call	0x12b0	; 0x12b0 <lcd_graphics_clear>
	g_draw_rectangle(0, 0, 160, 80);
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	60 e0       	ldi	r22, 0x00	; 0
    3872:	70 e0       	ldi	r23, 0x00	; 0
    3874:	40 ea       	ldi	r20, 0xA0	; 160
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	20 e5       	ldi	r18, 0x50	; 80
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_rectangle(0, 0, 60, 80);
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	4c e3       	ldi	r20, 0x3C	; 60
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	20 e5       	ldi	r18, 0x50	; 80
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
	g_draw_string(5, 5, "A/D:");
    3894:	24 e0       	ldi	r18, 0x04	; 4
    3896:	34 e0       	ldi	r19, 0x04	; 4
    3898:	85 e0       	ldi	r24, 0x05	; 5
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	65 e0       	ldi	r22, 0x05	; 5
    389e:	70 e0       	ldi	r23, 0x00	; 0
    38a0:	a9 01       	movw	r20, r18
    38a2:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(13, 14, val_ad_bcd);
    38a6:	20 ee       	ldi	r18, 0xE0	; 224
    38a8:	32 e0       	ldi	r19, 0x02	; 2
    38aa:	8d e0       	ldi	r24, 0x0D	; 13
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	6e e0       	ldi	r22, 0x0E	; 14
    38b0:	70 e0       	ldi	r23, 0x00	; 0
    38b2:	a9 01       	movw	r20, r18
    38b4:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(31, 14, "C");
    38b8:	24 e6       	ldi	r18, 0x64	; 100
    38ba:	33 e0       	ldi	r19, 0x03	; 3
    38bc:	8f e1       	ldi	r24, 0x1F	; 31
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	6e e0       	ldi	r22, 0x0E	; 14
    38c2:	70 e0       	ldi	r23, 0x00	; 0
    38c4:	a9 01       	movw	r20, r18
    38c6:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(5, 23, "Min:");
    38ca:	29 e0       	ldi	r18, 0x09	; 9
    38cc:	34 e0       	ldi	r19, 0x04	; 4
    38ce:	85 e0       	ldi	r24, 0x05	; 5
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	67 e1       	ldi	r22, 0x17	; 23
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	a9 01       	movw	r20, r18
    38d8:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(13, 32, val_min_bcd);
    38dc:	23 ee       	ldi	r18, 0xE3	; 227
    38de:	32 e0       	ldi	r19, 0x02	; 2
    38e0:	8d e0       	ldi	r24, 0x0D	; 13
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	60 e2       	ldi	r22, 0x20	; 32
    38e6:	70 e0       	ldi	r23, 0x00	; 0
    38e8:	a9 01       	movw	r20, r18
    38ea:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(31, 32, "C");
    38ee:	24 e6       	ldi	r18, 0x64	; 100
    38f0:	33 e0       	ldi	r19, 0x03	; 3
    38f2:	8f e1       	ldi	r24, 0x1F	; 31
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	60 e2       	ldi	r22, 0x20	; 32
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	a9 01       	movw	r20, r18
    38fc:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(5, 41, "Max:");
    3900:	2e e0       	ldi	r18, 0x0E	; 14
    3902:	34 e0       	ldi	r19, 0x04	; 4
    3904:	85 e0       	ldi	r24, 0x05	; 5
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	69 e2       	ldi	r22, 0x29	; 41
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	a9 01       	movw	r20, r18
    390e:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(13, 50, val_max_bcd);
    3912:	26 ee       	ldi	r18, 0xE6	; 230
    3914:	32 e0       	ldi	r19, 0x02	; 2
    3916:	8d e0       	ldi	r24, 0x0D	; 13
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	62 e3       	ldi	r22, 0x32	; 50
    391c:	70 e0       	ldi	r23, 0x00	; 0
    391e:	a9 01       	movw	r20, r18
    3920:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(31, 50, "C");
    3924:	24 e6       	ldi	r18, 0x64	; 100
    3926:	33 e0       	ldi	r19, 0x03	; 3
    3928:	8f e1       	ldi	r24, 0x1F	; 31
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	62 e3       	ldi	r22, 0x32	; 50
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	a9 01       	movw	r20, r18
    3932:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(5, 59, "T_refr:");
    3936:	23 e1       	ldi	r18, 0x13	; 19
    3938:	34 e0       	ldi	r19, 0x04	; 4
    393a:	85 e0       	ldi	r24, 0x05	; 5
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	6b e3       	ldi	r22, 0x3B	; 59
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	a9 01       	movw	r20, r18
    3944:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(13, 68, val_refr_bcd);
    3948:	29 ee       	ldi	r18, 0xE9	; 233
    394a:	32 e0       	ldi	r19, 0x02	; 2
    394c:	8d e0       	ldi	r24, 0x0D	; 13
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	64 e4       	ldi	r22, 0x44	; 68
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	a9 01       	movw	r20, r18
    3956:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_horizontal_line(74, 75, 80);
    395a:	8a e4       	ldi	r24, 0x4A	; 74
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	6b e4       	ldi	r22, 0x4B	; 75
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	40 e5       	ldi	r20, 0x50	; 80
    3964:	50 e0       	ldi	r21, 0x00	; 0
    3966:	0e 94 ac 05 	call	0xb58	; 0xb58 <g_draw_horizontal_line>
	g_draw_vertical_line(74, 5, 70);
    396a:	8a e4       	ldi	r24, 0x4A	; 74
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	65 e0       	ldi	r22, 0x05	; 5
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	46 e4       	ldi	r20, 0x46	; 70
    3974:	50 e0       	ldi	r21, 0x00	; 0
    3976:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <g_draw_vertical_line>
	g_draw_string(151, 65, "t");
    397a:	2b e1       	ldi	r18, 0x1B	; 27
    397c:	34 e0       	ldi	r19, 0x04	; 4
    397e:	87 e9       	ldi	r24, 0x97	; 151
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	61 e4       	ldi	r22, 0x41	; 65
    3984:	70 e0       	ldi	r23, 0x00	; 0
    3986:	a9 01       	movw	r20, r18
    3988:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
	g_draw_string(67, 2, "C");
    398c:	24 e6       	ldi	r18, 0x64	; 100
    398e:	33 e0       	ldi	r19, 0x03	; 3
    3990:	83 e4       	ldi	r24, 0x43	; 67
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	62 e0       	ldi	r22, 0x02	; 2
    3996:	70 e0       	ldi	r23, 0x00	; 0
    3998:	a9 01       	movw	r20, r18
    399a:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
#ifdef GRAD_ON
	draw_grad(61, 0);
    399e:	8d e3       	ldi	r24, 0x3D	; 61
    39a0:	60 e0       	ldi	r22, 0x00	; 0
    39a2:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
	draw_grad(25, 12);
    39a6:	89 e1       	ldi	r24, 0x19	; 25
    39a8:	6c e0       	ldi	r22, 0x0C	; 12
    39aa:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
	draw_grad(25, 30);
    39ae:	89 e1       	ldi	r24, 0x19	; 25
    39b0:	6e e1       	ldi	r22, 0x1E	; 30
    39b2:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
	draw_grad(25, 48);
    39b6:	89 e1       	ldi	r24, 0x19	; 25
    39b8:	60 e3       	ldi	r22, 0x30	; 48
    39ba:	0e 94 90 0a 	call	0x1520	; 0x1520 <draw_grad>
#endif
#ifdef FLAME_AND_FLAKE_ON
	g_draw_rectangle(PIC_POS_FLAME_FLAKE_X - 1, PIC_POS_FLAME_FLAKE_Y - 1, 21, 21);
    39be:	87 e2       	ldi	r24, 0x27	; 39
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	70 e0       	ldi	r23, 0x00	; 0
    39c6:	45 e1       	ldi	r20, 0x15	; 21
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	25 e1       	ldi	r18, 0x15	; 21
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	0e 94 18 06 	call	0xc30	; 0xc30 <g_draw_rectangle>
#endif
//============= 		Arrow X			================
	lcd_graphics_plot_pixel(152, 74, PIXEL_ON);
    39d2:	88 e9       	ldi	r24, 0x98	; 152
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	6a e4       	ldi	r22, 0x4A	; 74
    39d8:	70 e0       	ldi	r23, 0x00	; 0
    39da:	4f ef       	ldi	r20, 0xFF	; 255
    39dc:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
	lcd_graphics_plot_pixel(152, 76, PIXEL_ON);
    39e0:	88 e9       	ldi	r24, 0x98	; 152
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	6c e4       	ldi	r22, 0x4C	; 76
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	4f ef       	ldi	r20, 0xFF	; 255
    39ea:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
//============= 		Arrow Y			================	
	lcd_graphics_plot_pixel(73, 7, PIXEL_ON);
    39ee:	89 e4       	ldi	r24, 0x49	; 73
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	67 e0       	ldi	r22, 0x07	; 7
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	4f ef       	ldi	r20, 0xFF	; 255
    39f8:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
	lcd_graphics_plot_pixel(75, 7, PIXEL_ON);
    39fc:	8b e4       	ldi	r24, 0x4B	; 75
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	67 e0       	ldi	r22, 0x07	; 7
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	4f ef       	ldi	r20, 0xFF	; 255
    3a06:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
//============= 		5V Level		================	
	g_draw_horizontal_line(73, 15, 2);
    3a0a:	89 e4       	ldi	r24, 0x49	; 73
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	6f e0       	ldi	r22, 0x0F	; 15
    3a10:	70 e0       	ldi	r23, 0x00	; 0
    3a12:	42 e0       	ldi	r20, 0x02	; 2
    3a14:	50 e0       	ldi	r21, 0x00	; 0
    3a16:	0e 94 ac 05 	call	0xb58	; 0xb58 <g_draw_horizontal_line>
	g_draw_string(61, 12, "99");
    3a1a:	2d e1       	ldi	r18, 0x1D	; 29
    3a1c:	34 e0       	ldi	r19, 0x04	; 4
    3a1e:	8d e3       	ldi	r24, 0x3D	; 61
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	6c e0       	ldi	r22, 0x0C	; 12
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	a9 01       	movw	r20, r18
    3a28:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
//============= 		Min/Max Level	================
	for (i = 73; i <= 154; i++)
    3a2c:	89 e4       	ldi	r24, 0x49	; 73
    3a2e:	89 83       	std	Y+1, r24	; 0x01
    3a30:	90 c0       	rjmp	.+288    	; 0x3b52 <draw_layout+0x2f8>
	{
		if (!(i%3))
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	93 e0       	ldi	r25, 0x03	; 3
    3a36:	69 2f       	mov	r22, r25
    3a38:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodqi4>
    3a3c:	89 2f       	mov	r24, r25
    3a3e:	88 23       	and	r24, r24
    3a40:	09 f0       	breq	.+2      	; 0x3a44 <draw_layout+0x1ea>
    3a42:	84 c0       	rjmp	.+264    	; 0x3b4c <draw_layout+0x2f2>
		{
			lcd_graphics_plot_pixel(i, 14+round(60 - bar_2_height * 118 / 100), PIXEL_ON);
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	08 2f       	mov	r16, r24
    3a48:	10 e0       	ldi	r17, 0x00	; 0
    3a4a:	80 91 2e 04 	lds	r24, 0x042E
    3a4e:	28 2f       	mov	r18, r24
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	86 e7       	ldi	r24, 0x76	; 118
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	ac 01       	movw	r20, r24
    3a58:	24 9f       	mul	r18, r20
    3a5a:	c0 01       	movw	r24, r0
    3a5c:	25 9f       	mul	r18, r21
    3a5e:	90 0d       	add	r25, r0
    3a60:	34 9f       	mul	r19, r20
    3a62:	90 0d       	add	r25, r0
    3a64:	11 24       	eor	r1, r1
    3a66:	24 e6       	ldi	r18, 0x64	; 100
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	b9 01       	movw	r22, r18
    3a6c:	0e 94 02 24 	call	0x4804	; 0x4804 <__divmodhi4>
    3a70:	cb 01       	movw	r24, r22
    3a72:	9c 01       	movw	r18, r24
    3a74:	8c e3       	ldi	r24, 0x3C	; 60
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	82 1b       	sub	r24, r18
    3a7a:	93 0b       	sbc	r25, r19
    3a7c:	aa 27       	eor	r26, r26
    3a7e:	97 fd       	sbrc	r25, 7
    3a80:	a0 95       	com	r26
    3a82:	ba 2f       	mov	r27, r26
    3a84:	bc 01       	movw	r22, r24
    3a86:	cd 01       	movw	r24, r26
    3a88:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	bc 01       	movw	r22, r24
    3a92:	cd 01       	movw	r24, r26
    3a94:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e6       	ldi	r20, 0x60	; 96
    3aa6:	51 e4       	ldi	r21, 0x41	; 65
    3aa8:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	cd 01       	movw	r24, r26
    3ab4:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	9c 01       	movw	r18, r24
    3abe:	c8 01       	movw	r24, r16
    3ac0:	b9 01       	movw	r22, r18
    3ac2:	4f ef       	ldi	r20, 0xFF	; 255
    3ac4:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
			lcd_graphics_plot_pixel(i, 14+round(60 - bar_1_height * 118 / 100), PIXEL_ON);
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	08 2f       	mov	r16, r24
    3acc:	10 e0       	ldi	r17, 0x00	; 0
    3ace:	80 91 2c 04 	lds	r24, 0x042C
    3ad2:	28 2f       	mov	r18, r24
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	86 e7       	ldi	r24, 0x76	; 118
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	ac 01       	movw	r20, r24
    3adc:	24 9f       	mul	r18, r20
    3ade:	c0 01       	movw	r24, r0
    3ae0:	25 9f       	mul	r18, r21
    3ae2:	90 0d       	add	r25, r0
    3ae4:	34 9f       	mul	r19, r20
    3ae6:	90 0d       	add	r25, r0
    3ae8:	11 24       	eor	r1, r1
    3aea:	24 e6       	ldi	r18, 0x64	; 100
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	b9 01       	movw	r22, r18
    3af0:	0e 94 02 24 	call	0x4804	; 0x4804 <__divmodhi4>
    3af4:	cb 01       	movw	r24, r22
    3af6:	9c 01       	movw	r18, r24
    3af8:	8c e3       	ldi	r24, 0x3C	; 60
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	82 1b       	sub	r24, r18
    3afe:	93 0b       	sbc	r25, r19
    3b00:	aa 27       	eor	r26, r26
    3b02:	97 fd       	sbrc	r25, 7
    3b04:	a0 95       	com	r26
    3b06:	ba 2f       	mov	r27, r26
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	bc 01       	movw	r22, r24
    3b16:	cd 01       	movw	r24, r26
    3b18:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e6       	ldi	r20, 0x60	; 96
    3b2a:	51 e4       	ldi	r21, 0x41	; 65
    3b2c:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	bc 01       	movw	r22, r24
    3b36:	cd 01       	movw	r24, r26
    3b38:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9c 01       	movw	r18, r24
    3b42:	c8 01       	movw	r24, r16
    3b44:	b9 01       	movw	r22, r18
    3b46:	4f ef       	ldi	r20, 0xFF	; 255
    3b48:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
	lcd_graphics_plot_pixel(75, 7, PIXEL_ON);
//============= 		5V Level		================	
	g_draw_horizontal_line(73, 15, 2);
	g_draw_string(61, 12, "99");
//============= 		Min/Max Level	================
	for (i = 73; i <= 154; i++)
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	8f 5f       	subi	r24, 0xFF	; 255
    3b50:	89 83       	std	Y+1, r24	; 0x01
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	8b 39       	cpi	r24, 0x9B	; 155
    3b56:	08 f4       	brcc	.+2      	; 0x3b5a <draw_layout+0x300>
    3b58:	6c cf       	rjmp	.-296    	; 0x3a32 <draw_layout+0x1d8>
			lcd_graphics_plot_pixel(i, 14+round(60 - bar_2_height * 118 / 100), PIXEL_ON);
			lcd_graphics_plot_pixel(i, 14+round(60 - bar_1_height * 118 / 100), PIXEL_ON);
		}
	}
//============= 		/Layout			================
}
    3b5a:	0f 90       	pop	r0
    3b5c:	cf 91       	pop	r28
    3b5e:	df 91       	pop	r29
    3b60:	1f 91       	pop	r17
    3b62:	0f 91       	pop	r16
    3b64:	08 95       	ret

00003b66 <get_touch_x>:

unsigned int get_touch_x(unsigned int y)
{
    3b66:	ef 92       	push	r14
    3b68:	ff 92       	push	r15
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	2a 97       	sbiw	r28, 0x0a	; 10
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	98 87       	std	Y+8, r25	; 0x08
    3b84:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int x;
	unsigned int x_left;
	unsigned int x_right;
	
	init_in_pin('f', 2);	
    3b86:	86 e6       	ldi	r24, 0x66	; 102
    3b88:	62 e0       	ldi	r22, 0x02	; 2
    3b8a:	0e 94 3d 03 	call	0x67a	; 0x67a <init_in_pin>
	init_out_pin('f', 1);
    3b8e:	86 e6       	ldi	r24, 0x66	; 102
    3b90:	61 e0       	ldi	r22, 0x01	; 1
    3b92:	0e 94 89 02 	call	0x512	; 0x512 <init_out_pin>
	set_pin('f', 1);
    3b96:	86 e6       	ldi	r24, 0x66	; 102
    3b98:	61 e0       	ldi	r22, 0x01	; 1
    3b9a:	0e 94 67 00 	call	0xce	; 0xce <set_pin>
	reset_pin('a', 0);
    3b9e:	81 e6       	ldi	r24, 0x61	; 97
    3ba0:	60 e0       	ldi	r22, 0x00	; 0
    3ba2:	0e 94 1b 01 	call	0x236	; 0x236 <reset_pin>
	delay_ms(10);
    3ba6:	8a e0       	ldi	r24, 0x0A	; 10
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>

	ADMUX = 0x42;				//connect to AD_2
    3bae:	e7 e2       	ldi	r30, 0x27	; 39
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	82 e4       	ldi	r24, 0x42	; 66
    3bb4:	80 83       	st	Z, r24
	ADCSRA = 0x97;				//enable ad converter
    3bb6:	e6 e2       	ldi	r30, 0x26	; 38
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	87 e9       	ldi	r24, 0x97	; 151
    3bbc:	80 83       	st	Z, r24
	ADCSRA |= 0x40;				//start converter
    3bbe:	a6 e2       	ldi	r26, 0x26	; 38
    3bc0:	b0 e0       	ldi	r27, 0x00	; 0
    3bc2:	e6 e2       	ldi	r30, 0x26	; 38
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	80 81       	ld	r24, Z
    3bc8:	80 64       	ori	r24, 0x40	; 64
    3bca:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);
    3bcc:	e6 e2       	ldi	r30, 0x26	; 38
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	88 2f       	mov	r24, r24
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	80 71       	andi	r24, 0x10	; 16
    3bd8:	90 70       	andi	r25, 0x00	; 0
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	b9 f3       	breq	.-18     	; 0x3bcc <get_touch_x+0x66>
	ADCSRA |= 0x10;
    3bde:	a6 e2       	ldi	r26, 0x26	; 38
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	e6 e2       	ldi	r30, 0x26	; 38
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	80 61       	ori	r24, 0x10	; 16
    3bea:	8c 93       	st	X, r24
	x = ADCL|ADCH<<8;
    3bec:	e4 e2       	ldi	r30, 0x24	; 36
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	28 2f       	mov	r18, r24
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	e5 e2       	ldi	r30, 0x25	; 37
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	88 2f       	mov	r24, r24
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	98 2f       	mov	r25, r24
    3c02:	88 27       	eor	r24, r24
    3c04:	82 2b       	or	r24, r18
    3c06:	93 2b       	or	r25, r19
    3c08:	9e 83       	std	Y+6, r25	; 0x06
    3c0a:	8d 83       	std	Y+5, r24	; 0x05
	if (x == 0)
    3c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	19 f4       	brne	.+6      	; 0x3c1a <get_touch_x+0xb4>
		return 0;
    3c14:	1a 86       	std	Y+10, r1	; 0x0a
    3c16:	19 86       	std	Y+9, r1	; 0x09
    3c18:	a6 c0       	rjmp	.+332    	; 0x3d66 <get_touch_x+0x200>
	x_left = round(427-(y*((float)(427-186)/80.0)));
    3c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c1c:	98 85       	ldd	r25, Y+8	; 0x08
    3c1e:	cc 01       	movw	r24, r24
    3c20:	a0 e0       	ldi	r26, 0x00	; 0
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	bc 01       	movw	r22, r24
    3c26:	cd 01       	movw	r24, r26
    3c28:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	bc 01       	movw	r22, r24
    3c32:	cd 01       	movw	r24, r26
    3c34:	2d ec       	ldi	r18, 0xCD	; 205
    3c36:	3c ec       	ldi	r19, 0xCC	; 204
    3c38:	40 e4       	ldi	r20, 0x40	; 64
    3c3a:	50 ec       	ldi	r21, 0xC0	; 192
    3c3c:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	bc 01       	movw	r22, r24
    3c46:	cd 01       	movw	r24, r26
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e8       	ldi	r19, 0x80	; 128
    3c4c:	45 ed       	ldi	r20, 0xD5	; 213
    3c4e:	53 e4       	ldi	r21, 0x43	; 67
    3c50:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	bc 01       	movw	r22, r24
    3c5a:	cd 01       	movw	r24, r26
    3c5c:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	bc 01       	movw	r22, r24
    3c66:	cd 01       	movw	r24, r26
    3c68:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	9c 83       	std	Y+4, r25	; 0x04
    3c72:	8b 83       	std	Y+3, r24	; 0x03
	x_right = round(300-(y*((float)(300-110)/80.0)));
    3c74:	8f 81       	ldd	r24, Y+7	; 0x07
    3c76:	98 85       	ldd	r25, Y+8	; 0x08
    3c78:	cc 01       	movw	r24, r24
    3c7a:	a0 e0       	ldi	r26, 0x00	; 0
    3c7c:	b0 e0       	ldi	r27, 0x00	; 0
    3c7e:	bc 01       	movw	r22, r24
    3c80:	cd 01       	movw	r24, r26
    3c82:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	bc 01       	movw	r22, r24
    3c8c:	cd 01       	movw	r24, r26
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	48 e1       	ldi	r20, 0x18	; 24
    3c94:	50 ec       	ldi	r21, 0xC0	; 192
    3c96:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	bc 01       	movw	r22, r24
    3ca0:	cd 01       	movw	r24, r26
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	46 e9       	ldi	r20, 0x96	; 150
    3ca8:	53 e4       	ldi	r21, 0x43	; 67
    3caa:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	bc 01       	movw	r22, r24
    3cb4:	cd 01       	movw	r24, r26
    3cb6:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	bc 01       	movw	r22, r24
    3cc0:	cd 01       	movw	r24, r26
    3cc2:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	9a 83       	std	Y+2, r25	; 0x02
    3ccc:	89 83       	std	Y+1, r24	; 0x01
	
	return round(160-((x-x_right)*160.0/(float)(x_left-x_right)));
    3cce:	2d 81       	ldd	r18, Y+5	; 0x05
    3cd0:	3e 81       	ldd	r19, Y+6	; 0x06
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd6:	a9 01       	movw	r20, r18
    3cd8:	48 1b       	sub	r20, r24
    3cda:	59 0b       	sbc	r21, r25
    3cdc:	ca 01       	movw	r24, r20
    3cde:	cc 01       	movw	r24, r24
    3ce0:	a0 e0       	ldi	r26, 0x00	; 0
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	bc 01       	movw	r22, r24
    3cf2:	cd 01       	movw	r24, r26
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e2       	ldi	r20, 0x20	; 32
    3cfa:	53 ec       	ldi	r21, 0xC3	; 195
    3cfc:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	7c 01       	movw	r14, r24
    3d06:	8d 01       	movw	r16, r26
    3d08:	2b 81       	ldd	r18, Y+3	; 0x03
    3d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	a9 01       	movw	r20, r18
    3d12:	48 1b       	sub	r20, r24
    3d14:	59 0b       	sbc	r21, r25
    3d16:	ca 01       	movw	r24, r20
    3d18:	cc 01       	movw	r24, r24
    3d1a:	a0 e0       	ldi	r26, 0x00	; 0
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	bc 01       	movw	r22, r24
    3d20:	cd 01       	movw	r24, r26
    3d22:	0e 94 75 22 	call	0x44ea	; 0x44ea <__floatunsisf>
    3d26:	9b 01       	movw	r18, r22
    3d28:	ac 01       	movw	r20, r24
    3d2a:	c8 01       	movw	r24, r16
    3d2c:	b7 01       	movw	r22, r14
    3d2e:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	bc 01       	movw	r22, r24
    3d38:	cd 01       	movw	r24, r26
    3d3a:	20 e0       	ldi	r18, 0x00	; 0
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	40 e2       	ldi	r20, 0x20	; 32
    3d40:	53 e4       	ldi	r21, 0x43	; 67
    3d42:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	bc 01       	movw	r22, r24
    3d4c:	cd 01       	movw	r24, r26
    3d4e:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	9a 87       	std	Y+10, r25	; 0x0a
    3d64:	89 87       	std	Y+9, r24	; 0x09
    3d66:	89 85       	ldd	r24, Y+9	; 0x09
    3d68:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    3d6a:	2a 96       	adiw	r28, 0x0a	; 10
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	de bf       	out	0x3e, r29	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	cf 91       	pop	r28
    3d78:	df 91       	pop	r29
    3d7a:	1f 91       	pop	r17
    3d7c:	0f 91       	pop	r16
    3d7e:	ff 90       	pop	r15
    3d80:	ef 90       	pop	r14
    3d82:	08 95       	ret

00003d84 <get_touch_y>:

unsigned char get_touch_y(void)
{
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
	init_in_pin('f', 1);	
    3d8c:	86 e6       	ldi	r24, 0x66	; 102
    3d8e:	61 e0       	ldi	r22, 0x01	; 1
    3d90:	0e 94 3d 03 	call	0x67a	; 0x67a <init_in_pin>
	init_out_pin('f', 2);
    3d94:	86 e6       	ldi	r24, 0x66	; 102
    3d96:	62 e0       	ldi	r22, 0x02	; 2
    3d98:	0e 94 89 02 	call	0x512	; 0x512 <init_out_pin>
	reset_pin('f', 2);
    3d9c:	86 e6       	ldi	r24, 0x66	; 102
    3d9e:	62 e0       	ldi	r22, 0x02	; 2
    3da0:	0e 94 1b 01 	call	0x236	; 0x236 <reset_pin>
	set_pin('a', 0);
    3da4:	81 e6       	ldi	r24, 0x61	; 97
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	0e 94 67 00 	call	0xce	; 0xce <set_pin>
	delay_ms(10);
    3dac:	8a e0       	ldi	r24, 0x0A	; 10
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <delay_ms>

	ADMUX = 0x41;				//connect to AD_1
    3db4:	e7 e2       	ldi	r30, 0x27	; 39
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	81 e4       	ldi	r24, 0x41	; 65
    3dba:	80 83       	st	Z, r24
	ADCSRA = 0x97;				//enable ad converter
    3dbc:	e6 e2       	ldi	r30, 0x26	; 38
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	87 e9       	ldi	r24, 0x97	; 151
    3dc2:	80 83       	st	Z, r24
	ADCSRA |= 0x40;				//start converter
    3dc4:	a6 e2       	ldi	r26, 0x26	; 38
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	e6 e2       	ldi	r30, 0x26	; 38
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	80 64       	ori	r24, 0x40	; 64
    3dd0:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);
    3dd2:	e6 e2       	ldi	r30, 0x26	; 38
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	80 81       	ld	r24, Z
    3dd8:	88 2f       	mov	r24, r24
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	80 71       	andi	r24, 0x10	; 16
    3dde:	90 70       	andi	r25, 0x00	; 0
    3de0:	00 97       	sbiw	r24, 0x00	; 0
    3de2:	b9 f3       	breq	.-18     	; 0x3dd2 <get_touch_y+0x4e>
	ADCSRA |= 0x10;
    3de4:	a6 e2       	ldi	r26, 0x26	; 38
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	e6 e2       	ldi	r30, 0x26	; 38
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
    3dee:	80 61       	ori	r24, 0x10	; 16
    3df0:	8c 93       	st	X, r24

	return round(((ADCL|ADCH<<8)-262)/6.5);
    3df2:	e4 e2       	ldi	r30, 0x24	; 36
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	80 81       	ld	r24, Z
    3df8:	28 2f       	mov	r18, r24
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	e5 e2       	ldi	r30, 0x25	; 37
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	98 2f       	mov	r25, r24
    3e08:	88 27       	eor	r24, r24
    3e0a:	82 2b       	or	r24, r18
    3e0c:	93 2b       	or	r25, r19
    3e0e:	86 50       	subi	r24, 0x06	; 6
    3e10:	91 40       	sbci	r25, 0x01	; 1
    3e12:	aa 27       	eor	r26, r26
    3e14:	97 fd       	sbrc	r25, 7
    3e16:	a0 95       	com	r26
    3e18:	ba 2f       	mov	r27, r26
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	cd 01       	movw	r24, r26
    3e1e:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	bc 01       	movw	r22, r24
    3e28:	cd 01       	movw	r24, r26
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	40 ed       	ldi	r20, 0xD0	; 208
    3e30:	50 e4       	ldi	r21, 0x40	; 64
    3e32:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	bc 01       	movw	r22, r24
    3e3c:	cd 01       	movw	r24, r26
    3e3e:	0e 94 8e 23 	call	0x471c	; 0x471c <round>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	bc 01       	movw	r22, r24
    3e48:	cd 01       	movw	r24, r26
    3e4a:	0e 94 49 22 	call	0x4492	; 0x4492 <__fixunssfsi>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
}
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <clr_diagram>:

void clr_diagram(void)
{
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	00 d0       	rcall	.+0      	; 0x3e5e <clr_diagram+0x6>
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
	unsigned char x, y = 0;
    3e62:	19 82       	std	Y+1, r1	; 0x01
	
	for (x = 0; x <= 9; x++)
    3e64:	1a 82       	std	Y+2, r1	; 0x02
    3e66:	21 c0       	rjmp	.+66     	; 0x3eaa <clr_diagram+0x52>
	{
		for (y = 0; y <= 59; y++)
    3e68:	19 82       	std	Y+1, r1	; 0x01
    3e6a:	19 c0       	rjmp	.+50     	; 0x3e9e <clr_diagram+0x46>
		{
			diagram[x][y] = 0;
    3e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6e:	48 2f       	mov	r20, r24
    3e70:	50 e0       	ldi	r21, 0x00	; 0
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	28 2f       	mov	r18, r24
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	8c e3       	ldi	r24, 0x3C	; 60
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	bc 01       	movw	r22, r24
    3e7e:	46 9f       	mul	r20, r22
    3e80:	c0 01       	movw	r24, r0
    3e82:	47 9f       	mul	r20, r23
    3e84:	90 0d       	add	r25, r0
    3e86:	56 9f       	mul	r21, r22
    3e88:	90 0d       	add	r25, r0
    3e8a:	11 24       	eor	r1, r1
    3e8c:	82 0f       	add	r24, r18
    3e8e:	93 1f       	adc	r25, r19
    3e90:	fc 01       	movw	r30, r24
    3e92:	ed 5b       	subi	r30, 0xBD	; 189
    3e94:	fb 4f       	sbci	r31, 0xFB	; 251
    3e96:	10 82       	st	Z, r1
{
	unsigned char x, y = 0;
	
	for (x = 0; x <= 9; x++)
	{
		for (y = 0; y <= 59; y++)
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	8f 5f       	subi	r24, 0xFF	; 255
    3e9c:	89 83       	std	Y+1, r24	; 0x01
    3e9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ea0:	8c 33       	cpi	r24, 0x3C	; 60
    3ea2:	20 f3       	brcs	.-56     	; 0x3e6c <clr_diagram+0x14>

void clr_diagram(void)
{
	unsigned char x, y = 0;
	
	for (x = 0; x <= 9; x++)
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	8f 5f       	subi	r24, 0xFF	; 255
    3ea8:	8a 83       	std	Y+2, r24	; 0x02
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	8a 30       	cpi	r24, 0x0A	; 10
    3eae:	e0 f2       	brcs	.-72     	; 0x3e68 <clr_diagram+0x10>
		for (y = 0; y <= 59; y++)
		{
			diagram[x][y] = 0;
		}
	}	
}
    3eb0:	0f 90       	pop	r0
    3eb2:	0f 90       	pop	r0
    3eb4:	cf 91       	pop	r28
    3eb6:	df 91       	pop	r29
    3eb8:	08 95       	ret

00003eba <draw_diagram>:

void draw_diagram(void)
{
    3eba:	df 93       	push	r29
    3ebc:	cf 93       	push	r28
    3ebe:	00 d0       	rcall	.+0      	; 0x3ec0 <draw_diagram+0x6>
    3ec0:	00 d0       	rcall	.+0      	; 0x3ec2 <draw_diagram+0x8>
    3ec2:	0f 92       	push	r0
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
	unsigned char x, y = 0;
    3ec8:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char bit = 7;
    3eca:	87 e0       	ldi	r24, 0x07	; 7
    3ecc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char x_buffer = 74;
    3ece:	8a e4       	ldi	r24, 0x4A	; 74
    3ed0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char y_buffer = 75;
    3ed2:	8b e4       	ldi	r24, 0x4B	; 75
    3ed4:	89 83       	std	Y+1, r24	; 0x01
	
	for (x = 0; x <= 9; x++)
    3ed6:	1d 82       	std	Y+5, r1	; 0x05
    3ed8:	6a c0       	rjmp	.+212    	; 0x3fae <draw_diagram+0xf4>
	{
		for (bit = 0; bit <= 7; bit++)
    3eda:	1b 82       	std	Y+3, r1	; 0x03
    3edc:	61 c0       	rjmp	.+194    	; 0x3fa0 <draw_diagram+0xe6>
		{
			for (y = 0; y <= 59; y++)
    3ede:	1c 82       	std	Y+4, r1	; 0x04
    3ee0:	58 c0       	rjmp	.+176    	; 0x3f92 <draw_diagram+0xd8>
			{
				if (diagram[x][y] & (1 << ((-1*bit)+7)))
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	48 2f       	mov	r20, r24
    3ee6:	50 e0       	ldi	r21, 0x00	; 0
    3ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eea:	28 2f       	mov	r18, r24
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	8c e3       	ldi	r24, 0x3C	; 60
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	bc 01       	movw	r22, r24
    3ef4:	46 9f       	mul	r20, r22
    3ef6:	c0 01       	movw	r24, r0
    3ef8:	47 9f       	mul	r20, r23
    3efa:	90 0d       	add	r25, r0
    3efc:	56 9f       	mul	r21, r22
    3efe:	90 0d       	add	r25, r0
    3f00:	11 24       	eor	r1, r1
    3f02:	82 0f       	add	r24, r18
    3f04:	93 1f       	adc	r25, r19
    3f06:	fc 01       	movw	r30, r24
    3f08:	ed 5b       	subi	r30, 0xBD	; 189
    3f0a:	fb 4f       	sbci	r31, 0xFB	; 251
    3f0c:	80 81       	ld	r24, Z
    3f0e:	48 2f       	mov	r20, r24
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	8b 81       	ldd	r24, Y+3	; 0x03
    3f14:	28 2f       	mov	r18, r24
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	87 e0       	ldi	r24, 0x07	; 7
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	82 1b       	sub	r24, r18
    3f1e:	93 0b       	sbc	r25, r19
    3f20:	9a 01       	movw	r18, r20
    3f22:	02 c0       	rjmp	.+4      	; 0x3f28 <draw_diagram+0x6e>
    3f24:	35 95       	asr	r19
    3f26:	27 95       	ror	r18
    3f28:	8a 95       	dec	r24
    3f2a:	e2 f7       	brpl	.-8      	; 0x3f24 <draw_diagram+0x6a>
    3f2c:	c9 01       	movw	r24, r18
    3f2e:	81 70       	andi	r24, 0x01	; 1
    3f30:	90 70       	andi	r25, 0x00	; 0
    3f32:	88 23       	and	r24, r24
    3f34:	59 f1       	breq	.+86     	; 0x3f8c <draw_diagram+0xd2>
				{
					draw_line(x_buffer, y_buffer, (x*8)+75+bit, (-1*(y))+74);
    3f36:	8d 81       	ldd	r24, Y+5	; 0x05
    3f38:	88 2f       	mov	r24, r24
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	88 0f       	add	r24, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	98 2f       	mov	r25, r24
    3f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4c:	89 0f       	add	r24, r25
    3f4e:	28 2f       	mov	r18, r24
    3f50:	25 5b       	subi	r18, 0xB5	; 181
    3f52:	9a e4       	ldi	r25, 0x4A	; 74
    3f54:	8c 81       	ldd	r24, Y+4	; 0x04
    3f56:	98 1b       	sub	r25, r24
    3f58:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5a:	69 81       	ldd	r22, Y+1	; 0x01
    3f5c:	42 2f       	mov	r20, r18
    3f5e:	29 2f       	mov	r18, r25
    3f60:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <draw_line>
					x_buffer = (x*8)+75+bit;
    3f64:	8d 81       	ldd	r24, Y+5	; 0x05
    3f66:	88 2f       	mov	r24, r24
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	88 0f       	add	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	88 0f       	add	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	98 2f       	mov	r25, r24
    3f78:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7a:	89 0f       	add	r24, r25
    3f7c:	85 5b       	subi	r24, 0xB5	; 181
    3f7e:	8a 83       	std	Y+2, r24	; 0x02
					y_buffer = (-1*(y))+74;
    3f80:	9a e4       	ldi	r25, 0x4A	; 74
    3f82:	8c 81       	ldd	r24, Y+4	; 0x04
    3f84:	39 2f       	mov	r19, r25
    3f86:	38 1b       	sub	r19, r24
    3f88:	83 2f       	mov	r24, r19
    3f8a:	89 83       	std	Y+1, r24	; 0x01
	
	for (x = 0; x <= 9; x++)
	{
		for (bit = 0; bit <= 7; bit++)
		{
			for (y = 0; y <= 59; y++)
    3f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8e:	8f 5f       	subi	r24, 0xFF	; 255
    3f90:	8c 83       	std	Y+4, r24	; 0x04
    3f92:	8c 81       	ldd	r24, Y+4	; 0x04
    3f94:	8c 33       	cpi	r24, 0x3C	; 60
    3f96:	08 f4       	brcc	.+2      	; 0x3f9a <draw_diagram+0xe0>
    3f98:	a4 cf       	rjmp	.-184    	; 0x3ee2 <draw_diagram+0x28>
	unsigned char x_buffer = 74;
	unsigned char y_buffer = 75;
	
	for (x = 0; x <= 9; x++)
	{
		for (bit = 0; bit <= 7; bit++)
    3f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9c:	8f 5f       	subi	r24, 0xFF	; 255
    3f9e:	8b 83       	std	Y+3, r24	; 0x03
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	88 30       	cpi	r24, 0x08	; 8
    3fa4:	08 f4       	brcc	.+2      	; 0x3fa8 <draw_diagram+0xee>
    3fa6:	9b cf       	rjmp	.-202    	; 0x3ede <draw_diagram+0x24>
	unsigned char x, y = 0;
	unsigned char bit = 7;
	unsigned char x_buffer = 74;
	unsigned char y_buffer = 75;
	
	for (x = 0; x <= 9; x++)
    3fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3faa:	8f 5f       	subi	r24, 0xFF	; 255
    3fac:	8d 83       	std	Y+5, r24	; 0x05
    3fae:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb0:	8a 30       	cpi	r24, 0x0A	; 10
    3fb2:	08 f4       	brcc	.+2      	; 0x3fb6 <draw_diagram+0xfc>
    3fb4:	92 cf       	rjmp	.-220    	; 0x3eda <draw_diagram+0x20>
				//else
					//lcd_graphics_plot_pixel((x*8)+75+bit, (-1*(y))+74, PIXEL_OFF);
			}
		}
	}
	g_draw_string(151, 65, "t");
    3fb6:	2b e1       	ldi	r18, 0x1B	; 27
    3fb8:	34 e0       	ldi	r19, 0x04	; 4
    3fba:	87 e9       	ldi	r24, 0x97	; 151
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	61 e4       	ldi	r22, 0x41	; 65
    3fc0:	70 e0       	ldi	r23, 0x00	; 0
    3fc2:	a9 01       	movw	r20, r18
    3fc4:	0e 94 df 06 	call	0xdbe	; 0xdbe <g_draw_string>
}
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	cf 91       	pop	r28
    3fd4:	df 91       	pop	r29
    3fd6:	08 95       	ret

00003fd8 <draw_line>:

void draw_line(unsigned char x_start, unsigned char y_start, unsigned char x_end, unsigned char y_end)
{
    3fd8:	ef 92       	push	r14
    3fda:	ff 92       	push	r15
    3fdc:	0f 93       	push	r16
    3fde:	1f 93       	push	r17
    3fe0:	df 93       	push	r29
    3fe2:	cf 93       	push	r28
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	2e 97       	sbiw	r28, 0x0e	; 14
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	8b 87       	std	Y+11, r24	; 0x0b
    3ff6:	6c 87       	std	Y+12, r22	; 0x0c
    3ff8:	4d 87       	std	Y+13, r20	; 0x0d
    3ffa:	2e 87       	std	Y+14, r18	; 0x0e
	signed char dx;
	signed char dy;
	float m, n;

	dx = (signed)(x_end - x_start);
    3ffc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ffe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4000:	29 2f       	mov	r18, r25
    4002:	28 1b       	sub	r18, r24
    4004:	82 2f       	mov	r24, r18
    4006:	8a 87       	std	Y+10, r24	; 0x0a
	dy = (signed)(y_end - y_start);
    4008:	9e 85       	ldd	r25, Y+14	; 0x0e
    400a:	8c 85       	ldd	r24, Y+12	; 0x0c
    400c:	29 2f       	mov	r18, r25
    400e:	28 1b       	sub	r18, r24
    4010:	82 2f       	mov	r24, r18
    4012:	89 87       	std	Y+9, r24	; 0x09
	
	lcd_graphics_plot_pixel(x_start, y_start, PIXEL_ON);
    4014:	8b 85       	ldd	r24, Y+11	; 0x0b
    4016:	48 2f       	mov	r20, r24
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	8c 85       	ldd	r24, Y+12	; 0x0c
    401c:	28 2f       	mov	r18, r24
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	ca 01       	movw	r24, r20
    4022:	b9 01       	movw	r22, r18
    4024:	4f ef       	ldi	r20, 0xFF	; 255
    4026:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>

	if (fabs(dx) > fabs(dy)) 
    402a:	8a 85       	ldd	r24, Y+10	; 0x0a
    402c:	99 27       	eor	r25, r25
    402e:	87 fd       	sbrc	r24, 7
    4030:	90 95       	com	r25
    4032:	a9 2f       	mov	r26, r25
    4034:	b9 2f       	mov	r27, r25
    4036:	bc 01       	movw	r22, r24
    4038:	cd 01       	movw	r24, r26
    403a:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	7c 01       	movw	r14, r24
    4044:	8d 01       	movw	r16, r26
    4046:	e8 94       	clt
    4048:	17 f9       	bld	r17, 7
    404a:	89 85       	ldd	r24, Y+9	; 0x09
    404c:	99 27       	eor	r25, r25
    404e:	87 fd       	sbrc	r24, 7
    4050:	90 95       	com	r25
    4052:	a9 2f       	mov	r26, r25
    4054:	b9 2f       	mov	r27, r25
    4056:	bc 01       	movw	r22, r24
    4058:	cd 01       	movw	r24, r26
    405a:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	9c 01       	movw	r18, r24
    4064:	ad 01       	movw	r20, r26
    4066:	5f 77       	andi	r21, 0x7F	; 127
    4068:	c8 01       	movw	r24, r16
    406a:	b7 01       	movw	r22, r14
    406c:	0e 94 27 23 	call	0x464e	; 0x464e <__gesf2>
    4070:	18 16       	cp	r1, r24
    4072:	0c f0       	brlt	.+2      	; 0x4076 <draw_line+0x9e>
    4074:	94 c0       	rjmp	.+296    	; 0x419e <draw_line+0x1c6>
	{
		m = (float) dy / (float) dx;
    4076:	89 85       	ldd	r24, Y+9	; 0x09
    4078:	99 27       	eor	r25, r25
    407a:	87 fd       	sbrc	r24, 7
    407c:	90 95       	com	r25
    407e:	a9 2f       	mov	r26, r25
    4080:	b9 2f       	mov	r27, r25
    4082:	bc 01       	movw	r22, r24
    4084:	cd 01       	movw	r24, r26
    4086:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    408a:	7b 01       	movw	r14, r22
    408c:	8c 01       	movw	r16, r24
    408e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4090:	99 27       	eor	r25, r25
    4092:	87 fd       	sbrc	r24, 7
    4094:	90 95       	com	r25
    4096:	a9 2f       	mov	r26, r25
    4098:	b9 2f       	mov	r27, r25
    409a:	bc 01       	movw	r22, r24
    409c:	cd 01       	movw	r24, r26
    409e:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    40a2:	9b 01       	movw	r18, r22
    40a4:	ac 01       	movw	r20, r24
    40a6:	c8 01       	movw	r24, r16
    40a8:	b7 01       	movw	r22, r14
    40aa:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	8d 83       	std	Y+5, r24	; 0x05
    40b4:	9e 83       	std	Y+6, r25	; 0x06
    40b6:	af 83       	std	Y+7, r26	; 0x07
    40b8:	b8 87       	std	Y+8, r27	; 0x08
		n = y_start - (m*x_start);
    40ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    40bc:	88 2f       	mov	r24, r24
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	aa 27       	eor	r26, r26
    40c2:	97 fd       	sbrc	r25, 7
    40c4:	a0 95       	com	r26
    40c6:	ba 2f       	mov	r27, r26
    40c8:	bc 01       	movw	r22, r24
    40ca:	cd 01       	movw	r24, r26
    40cc:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    40d0:	7b 01       	movw	r14, r22
    40d2:	8c 01       	movw	r16, r24
    40d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    40d6:	88 2f       	mov	r24, r24
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	aa 27       	eor	r26, r26
    40dc:	97 fd       	sbrc	r25, 7
    40de:	a0 95       	com	r26
    40e0:	ba 2f       	mov	r27, r26
    40e2:	bc 01       	movw	r22, r24
    40e4:	cd 01       	movw	r24, r26
    40e6:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	bc 01       	movw	r22, r24
    40f0:	cd 01       	movw	r24, r26
    40f2:	2d 81       	ldd	r18, Y+5	; 0x05
    40f4:	3e 81       	ldd	r19, Y+6	; 0x06
    40f6:	4f 81       	ldd	r20, Y+7	; 0x07
    40f8:	58 85       	ldd	r21, Y+8	; 0x08
    40fa:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	9c 01       	movw	r18, r24
    4104:	ad 01       	movw	r20, r26
    4106:	c8 01       	movw	r24, r16
    4108:	b7 01       	movw	r22, r14
    410a:	0e 94 73 21 	call	0x42e6	; 0x42e6 <__subsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	89 83       	std	Y+1, r24	; 0x01
    4114:	9a 83       	std	Y+2, r25	; 0x02
    4116:	ab 83       	std	Y+3, r26	; 0x03
    4118:	bc 83       	std	Y+4, r27	; 0x04
		if (dx < 0)
    411a:	8a 85       	ldd	r24, Y+10	; 0x0a
    411c:	88 23       	and	r24, r24
    411e:	1c f4       	brge	.+6      	; 0x4126 <draw_line+0x14e>
			dx = -1;
    4120:	8f ef       	ldi	r24, 0xFF	; 255
    4122:	8a 87       	std	Y+10, r24	; 0x0a
    4124:	37 c0       	rjmp	.+110    	; 0x4194 <draw_line+0x1bc>
		else
			dx = 1;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	8a 87       	std	Y+10, r24	; 0x0a
    412a:	34 c0       	rjmp	.+104    	; 0x4194 <draw_line+0x1bc>
		while (x_start != x_end) 
		{
			x_start += dx;
    412c:	9a 85       	ldd	r25, Y+10	; 0x0a
    412e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4130:	89 0f       	add	r24, r25
    4132:	8b 87       	std	Y+11, r24	; 0x0b
			lcd_graphics_plot_pixel(x_start, (int)(m*x_start + n), PIXEL_ON);
    4134:	8b 85       	ldd	r24, Y+11	; 0x0b
    4136:	08 2f       	mov	r16, r24
    4138:	10 e0       	ldi	r17, 0x00	; 0
    413a:	8b 85       	ldd	r24, Y+11	; 0x0b
    413c:	88 2f       	mov	r24, r24
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	aa 27       	eor	r26, r26
    4142:	97 fd       	sbrc	r25, 7
    4144:	a0 95       	com	r26
    4146:	ba 2f       	mov	r27, r26
    4148:	bc 01       	movw	r22, r24
    414a:	cd 01       	movw	r24, r26
    414c:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	2d 81       	ldd	r18, Y+5	; 0x05
    415a:	3e 81       	ldd	r19, Y+6	; 0x06
    415c:	4f 81       	ldd	r20, Y+7	; 0x07
    415e:	58 85       	ldd	r21, Y+8	; 0x08
    4160:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	bc 01       	movw	r22, r24
    416a:	cd 01       	movw	r24, r26
    416c:	29 81       	ldd	r18, Y+1	; 0x01
    416e:	3a 81       	ldd	r19, Y+2	; 0x02
    4170:	4b 81       	ldd	r20, Y+3	; 0x03
    4172:	5c 81       	ldd	r21, Y+4	; 0x04
    4174:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	0e 94 44 22 	call	0x4488	; 0x4488 <__fixsfsi>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	9c 01       	movw	r18, r24
    418a:	c8 01       	movw	r24, r16
    418c:	b9 01       	movw	r22, r18
    418e:	4f ef       	ldi	r20, 0xFF	; 255
    4190:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
		n = y_start - (m*x_start);
		if (dx < 0)
			dx = -1;
		else
			dx = 1;
		while (x_start != x_end) 
    4194:	9b 85       	ldd	r25, Y+11	; 0x0b
    4196:	8d 85       	ldd	r24, Y+13	; 0x0d
    4198:	98 17       	cp	r25, r24
    419a:	41 f6       	brne	.-112    	; 0x412c <draw_line+0x154>
    419c:	97 c0       	rjmp	.+302    	; 0x42cc <draw_line+0x2f4>
			x_start += dx;
			lcd_graphics_plot_pixel(x_start, (int)(m*x_start + n), PIXEL_ON);
		}
	} 
	else
		if (dy != 0) 
    419e:	89 85       	ldd	r24, Y+9	; 0x09
    41a0:	88 23       	and	r24, r24
    41a2:	09 f4       	brne	.+2      	; 0x41a6 <draw_line+0x1ce>
    41a4:	93 c0       	rjmp	.+294    	; 0x42cc <draw_line+0x2f4>
		{
			m = (float) dx / (float) dy;
    41a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    41a8:	99 27       	eor	r25, r25
    41aa:	87 fd       	sbrc	r24, 7
    41ac:	90 95       	com	r25
    41ae:	a9 2f       	mov	r26, r25
    41b0:	b9 2f       	mov	r27, r25
    41b2:	bc 01       	movw	r22, r24
    41b4:	cd 01       	movw	r24, r26
    41b6:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    41ba:	7b 01       	movw	r14, r22
    41bc:	8c 01       	movw	r16, r24
    41be:	89 85       	ldd	r24, Y+9	; 0x09
    41c0:	99 27       	eor	r25, r25
    41c2:	87 fd       	sbrc	r24, 7
    41c4:	90 95       	com	r25
    41c6:	a9 2f       	mov	r26, r25
    41c8:	b9 2f       	mov	r27, r25
    41ca:	bc 01       	movw	r22, r24
    41cc:	cd 01       	movw	r24, r26
    41ce:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    41d2:	9b 01       	movw	r18, r22
    41d4:	ac 01       	movw	r20, r24
    41d6:	c8 01       	movw	r24, r16
    41d8:	b7 01       	movw	r22, r14
    41da:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__divsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	8d 83       	std	Y+5, r24	; 0x05
    41e4:	9e 83       	std	Y+6, r25	; 0x06
    41e6:	af 83       	std	Y+7, r26	; 0x07
    41e8:	b8 87       	std	Y+8, r27	; 0x08
			n = x_start - (m*y_start);
    41ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    41ec:	88 2f       	mov	r24, r24
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	aa 27       	eor	r26, r26
    41f2:	97 fd       	sbrc	r25, 7
    41f4:	a0 95       	com	r26
    41f6:	ba 2f       	mov	r27, r26
    41f8:	bc 01       	movw	r22, r24
    41fa:	cd 01       	movw	r24, r26
    41fc:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    4200:	7b 01       	movw	r14, r22
    4202:	8c 01       	movw	r16, r24
    4204:	8c 85       	ldd	r24, Y+12	; 0x0c
    4206:	88 2f       	mov	r24, r24
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	aa 27       	eor	r26, r26
    420c:	97 fd       	sbrc	r25, 7
    420e:	a0 95       	com	r26
    4210:	ba 2f       	mov	r27, r26
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	bc 01       	movw	r22, r24
    4220:	cd 01       	movw	r24, r26
    4222:	2d 81       	ldd	r18, Y+5	; 0x05
    4224:	3e 81       	ldd	r19, Y+6	; 0x06
    4226:	4f 81       	ldd	r20, Y+7	; 0x07
    4228:	58 85       	ldd	r21, Y+8	; 0x08
    422a:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	9c 01       	movw	r18, r24
    4234:	ad 01       	movw	r20, r26
    4236:	c8 01       	movw	r24, r16
    4238:	b7 01       	movw	r22, r14
    423a:	0e 94 73 21 	call	0x42e6	; 0x42e6 <__subsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	ab 83       	std	Y+3, r26	; 0x03
    4248:	bc 83       	std	Y+4, r27	; 0x04
			if (dy < 0)
    424a:	89 85       	ldd	r24, Y+9	; 0x09
    424c:	88 23       	and	r24, r24
    424e:	1c f4       	brge	.+6      	; 0x4256 <draw_line+0x27e>
				dy = -1;
    4250:	8f ef       	ldi	r24, 0xFF	; 255
    4252:	89 87       	std	Y+9, r24	; 0x09
    4254:	37 c0       	rjmp	.+110    	; 0x42c4 <draw_line+0x2ec>
			else
				dy = 1;
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	89 87       	std	Y+9, r24	; 0x09
    425a:	34 c0       	rjmp	.+104    	; 0x42c4 <draw_line+0x2ec>
			while (y_start != y_end) 
			{
				y_start += dy;
    425c:	99 85       	ldd	r25, Y+9	; 0x09
    425e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4260:	89 0f       	add	r24, r25
    4262:	8c 87       	std	Y+12, r24	; 0x0c
				lcd_graphics_plot_pixel((int)(m*y_start + n), y_start, PIXEL_ON);
    4264:	8c 85       	ldd	r24, Y+12	; 0x0c
    4266:	88 2f       	mov	r24, r24
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	aa 27       	eor	r26, r26
    426c:	97 fd       	sbrc	r25, 7
    426e:	a0 95       	com	r26
    4270:	ba 2f       	mov	r27, r26
    4272:	bc 01       	movw	r22, r24
    4274:	cd 01       	movw	r24, r26
    4276:	0e 94 77 22 	call	0x44ee	; 0x44ee <__floatsisf>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	bc 01       	movw	r22, r24
    4280:	cd 01       	movw	r24, r26
    4282:	2d 81       	ldd	r18, Y+5	; 0x05
    4284:	3e 81       	ldd	r19, Y+6	; 0x06
    4286:	4f 81       	ldd	r20, Y+7	; 0x07
    4288:	58 85       	ldd	r21, Y+8	; 0x08
    428a:	0e 94 2b 23 	call	0x4656	; 0x4656 <__mulsf3>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	bc 01       	movw	r22, r24
    4294:	cd 01       	movw	r24, r26
    4296:	29 81       	ldd	r18, Y+1	; 0x01
    4298:	3a 81       	ldd	r19, Y+2	; 0x02
    429a:	4b 81       	ldd	r20, Y+3	; 0x03
    429c:	5c 81       	ldd	r21, Y+4	; 0x04
    429e:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__addsf3>
    42a2:	dc 01       	movw	r26, r24
    42a4:	cb 01       	movw	r24, r22
    42a6:	bc 01       	movw	r22, r24
    42a8:	cd 01       	movw	r24, r26
    42aa:	0e 94 44 22 	call	0x4488	; 0x4488 <__fixsfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	ac 01       	movw	r20, r24
    42b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    42b6:	28 2f       	mov	r18, r24
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	ca 01       	movw	r24, r20
    42bc:	b9 01       	movw	r22, r18
    42be:	4f ef       	ldi	r20, 0xFF	; 255
    42c0:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_graphics_plot_pixel>
			n = x_start - (m*y_start);
			if (dy < 0)
				dy = -1;
			else
				dy = 1;
			while (y_start != y_end) 
    42c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    42c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    42c8:	98 17       	cp	r25, r24
    42ca:	41 f6       	brne	.-112    	; 0x425c <draw_line+0x284>
			{
				y_start += dy;
				lcd_graphics_plot_pixel((int)(m*y_start + n), y_start, PIXEL_ON);
			}
		}
}
    42cc:	2e 96       	adiw	r28, 0x0e	; 14
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	cf 91       	pop	r28
    42da:	df 91       	pop	r29
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	ff 90       	pop	r15
    42e2:	ef 90       	pop	r14
    42e4:	08 95       	ret

000042e6 <__subsf3>:
    42e6:	50 58       	subi	r21, 0x80	; 128

000042e8 <__addsf3>:
    42e8:	bb 27       	eor	r27, r27
    42ea:	aa 27       	eor	r26, r26
    42ec:	0e d0       	rcall	.+28     	; 0x430a <__addsf3x>
    42ee:	75 c1       	rjmp	.+746    	; 0x45da <__fp_round>
    42f0:	66 d1       	rcall	.+716    	; 0x45be <__fp_pscA>
    42f2:	30 f0       	brcs	.+12     	; 0x4300 <__addsf3+0x18>
    42f4:	6b d1       	rcall	.+726    	; 0x45cc <__fp_pscB>
    42f6:	20 f0       	brcs	.+8      	; 0x4300 <__addsf3+0x18>
    42f8:	31 f4       	brne	.+12     	; 0x4306 <__addsf3+0x1e>
    42fa:	9f 3f       	cpi	r25, 0xFF	; 255
    42fc:	11 f4       	brne	.+4      	; 0x4302 <__addsf3+0x1a>
    42fe:	1e f4       	brtc	.+6      	; 0x4306 <__addsf3+0x1e>
    4300:	5b c1       	rjmp	.+694    	; 0x45b8 <__fp_nan>
    4302:	0e f4       	brtc	.+2      	; 0x4306 <__addsf3+0x1e>
    4304:	e0 95       	com	r30
    4306:	e7 fb       	bst	r30, 7
    4308:	51 c1       	rjmp	.+674    	; 0x45ac <__fp_inf>

0000430a <__addsf3x>:
    430a:	e9 2f       	mov	r30, r25
    430c:	77 d1       	rcall	.+750    	; 0x45fc <__fp_split3>
    430e:	80 f3       	brcs	.-32     	; 0x42f0 <__addsf3+0x8>
    4310:	ba 17       	cp	r27, r26
    4312:	62 07       	cpc	r22, r18
    4314:	73 07       	cpc	r23, r19
    4316:	84 07       	cpc	r24, r20
    4318:	95 07       	cpc	r25, r21
    431a:	18 f0       	brcs	.+6      	; 0x4322 <__addsf3x+0x18>
    431c:	71 f4       	brne	.+28     	; 0x433a <__addsf3x+0x30>
    431e:	9e f5       	brtc	.+102    	; 0x4386 <__addsf3x+0x7c>
    4320:	8f c1       	rjmp	.+798    	; 0x4640 <__fp_zero>
    4322:	0e f4       	brtc	.+2      	; 0x4326 <__addsf3x+0x1c>
    4324:	e0 95       	com	r30
    4326:	0b 2e       	mov	r0, r27
    4328:	ba 2f       	mov	r27, r26
    432a:	a0 2d       	mov	r26, r0
    432c:	0b 01       	movw	r0, r22
    432e:	b9 01       	movw	r22, r18
    4330:	90 01       	movw	r18, r0
    4332:	0c 01       	movw	r0, r24
    4334:	ca 01       	movw	r24, r20
    4336:	a0 01       	movw	r20, r0
    4338:	11 24       	eor	r1, r1
    433a:	ff 27       	eor	r31, r31
    433c:	59 1b       	sub	r21, r25
    433e:	99 f0       	breq	.+38     	; 0x4366 <__addsf3x+0x5c>
    4340:	59 3f       	cpi	r21, 0xF9	; 249
    4342:	50 f4       	brcc	.+20     	; 0x4358 <__addsf3x+0x4e>
    4344:	50 3e       	cpi	r21, 0xE0	; 224
    4346:	68 f1       	brcs	.+90     	; 0x43a2 <__addsf3x+0x98>
    4348:	1a 16       	cp	r1, r26
    434a:	f0 40       	sbci	r31, 0x00	; 0
    434c:	a2 2f       	mov	r26, r18
    434e:	23 2f       	mov	r18, r19
    4350:	34 2f       	mov	r19, r20
    4352:	44 27       	eor	r20, r20
    4354:	58 5f       	subi	r21, 0xF8	; 248
    4356:	f3 cf       	rjmp	.-26     	; 0x433e <__addsf3x+0x34>
    4358:	46 95       	lsr	r20
    435a:	37 95       	ror	r19
    435c:	27 95       	ror	r18
    435e:	a7 95       	ror	r26
    4360:	f0 40       	sbci	r31, 0x00	; 0
    4362:	53 95       	inc	r21
    4364:	c9 f7       	brne	.-14     	; 0x4358 <__addsf3x+0x4e>
    4366:	7e f4       	brtc	.+30     	; 0x4386 <__addsf3x+0x7c>
    4368:	1f 16       	cp	r1, r31
    436a:	ba 0b       	sbc	r27, r26
    436c:	62 0b       	sbc	r22, r18
    436e:	73 0b       	sbc	r23, r19
    4370:	84 0b       	sbc	r24, r20
    4372:	ba f0       	brmi	.+46     	; 0x43a2 <__addsf3x+0x98>
    4374:	91 50       	subi	r25, 0x01	; 1
    4376:	a1 f0       	breq	.+40     	; 0x43a0 <__addsf3x+0x96>
    4378:	ff 0f       	add	r31, r31
    437a:	bb 1f       	adc	r27, r27
    437c:	66 1f       	adc	r22, r22
    437e:	77 1f       	adc	r23, r23
    4380:	88 1f       	adc	r24, r24
    4382:	c2 f7       	brpl	.-16     	; 0x4374 <__addsf3x+0x6a>
    4384:	0e c0       	rjmp	.+28     	; 0x43a2 <__addsf3x+0x98>
    4386:	ba 0f       	add	r27, r26
    4388:	62 1f       	adc	r22, r18
    438a:	73 1f       	adc	r23, r19
    438c:	84 1f       	adc	r24, r20
    438e:	48 f4       	brcc	.+18     	; 0x43a2 <__addsf3x+0x98>
    4390:	87 95       	ror	r24
    4392:	77 95       	ror	r23
    4394:	67 95       	ror	r22
    4396:	b7 95       	ror	r27
    4398:	f7 95       	ror	r31
    439a:	9e 3f       	cpi	r25, 0xFE	; 254
    439c:	08 f0       	brcs	.+2      	; 0x43a0 <__addsf3x+0x96>
    439e:	b3 cf       	rjmp	.-154    	; 0x4306 <__addsf3+0x1e>
    43a0:	93 95       	inc	r25
    43a2:	88 0f       	add	r24, r24
    43a4:	08 f0       	brcs	.+2      	; 0x43a8 <__addsf3x+0x9e>
    43a6:	99 27       	eor	r25, r25
    43a8:	ee 0f       	add	r30, r30
    43aa:	97 95       	ror	r25
    43ac:	87 95       	ror	r24
    43ae:	08 95       	ret

000043b0 <__cmpsf2>:
    43b0:	d9 d0       	rcall	.+434    	; 0x4564 <__fp_cmp>
    43b2:	08 f4       	brcc	.+2      	; 0x43b6 <__cmpsf2+0x6>
    43b4:	81 e0       	ldi	r24, 0x01	; 1
    43b6:	08 95       	ret

000043b8 <__divsf3>:
    43b8:	0c d0       	rcall	.+24     	; 0x43d2 <__divsf3x>
    43ba:	0f c1       	rjmp	.+542    	; 0x45da <__fp_round>
    43bc:	07 d1       	rcall	.+526    	; 0x45cc <__fp_pscB>
    43be:	40 f0       	brcs	.+16     	; 0x43d0 <__divsf3+0x18>
    43c0:	fe d0       	rcall	.+508    	; 0x45be <__fp_pscA>
    43c2:	30 f0       	brcs	.+12     	; 0x43d0 <__divsf3+0x18>
    43c4:	21 f4       	brne	.+8      	; 0x43ce <__divsf3+0x16>
    43c6:	5f 3f       	cpi	r21, 0xFF	; 255
    43c8:	19 f0       	breq	.+6      	; 0x43d0 <__divsf3+0x18>
    43ca:	f0 c0       	rjmp	.+480    	; 0x45ac <__fp_inf>
    43cc:	51 11       	cpse	r21, r1
    43ce:	39 c1       	rjmp	.+626    	; 0x4642 <__fp_szero>
    43d0:	f3 c0       	rjmp	.+486    	; 0x45b8 <__fp_nan>

000043d2 <__divsf3x>:
    43d2:	14 d1       	rcall	.+552    	; 0x45fc <__fp_split3>
    43d4:	98 f3       	brcs	.-26     	; 0x43bc <__divsf3+0x4>

000043d6 <__divsf3_pse>:
    43d6:	99 23       	and	r25, r25
    43d8:	c9 f3       	breq	.-14     	; 0x43cc <__divsf3+0x14>
    43da:	55 23       	and	r21, r21
    43dc:	b1 f3       	breq	.-20     	; 0x43ca <__divsf3+0x12>
    43de:	95 1b       	sub	r25, r21
    43e0:	55 0b       	sbc	r21, r21
    43e2:	bb 27       	eor	r27, r27
    43e4:	aa 27       	eor	r26, r26
    43e6:	62 17       	cp	r22, r18
    43e8:	73 07       	cpc	r23, r19
    43ea:	84 07       	cpc	r24, r20
    43ec:	38 f0       	brcs	.+14     	; 0x43fc <__divsf3_pse+0x26>
    43ee:	9f 5f       	subi	r25, 0xFF	; 255
    43f0:	5f 4f       	sbci	r21, 0xFF	; 255
    43f2:	22 0f       	add	r18, r18
    43f4:	33 1f       	adc	r19, r19
    43f6:	44 1f       	adc	r20, r20
    43f8:	aa 1f       	adc	r26, r26
    43fa:	a9 f3       	breq	.-22     	; 0x43e6 <__divsf3_pse+0x10>
    43fc:	33 d0       	rcall	.+102    	; 0x4464 <__divsf3_pse+0x8e>
    43fe:	0e 2e       	mov	r0, r30
    4400:	3a f0       	brmi	.+14     	; 0x4410 <__divsf3_pse+0x3a>
    4402:	e0 e8       	ldi	r30, 0x80	; 128
    4404:	30 d0       	rcall	.+96     	; 0x4466 <__divsf3_pse+0x90>
    4406:	91 50       	subi	r25, 0x01	; 1
    4408:	50 40       	sbci	r21, 0x00	; 0
    440a:	e6 95       	lsr	r30
    440c:	00 1c       	adc	r0, r0
    440e:	ca f7       	brpl	.-14     	; 0x4402 <__divsf3_pse+0x2c>
    4410:	29 d0       	rcall	.+82     	; 0x4464 <__divsf3_pse+0x8e>
    4412:	fe 2f       	mov	r31, r30
    4414:	27 d0       	rcall	.+78     	; 0x4464 <__divsf3_pse+0x8e>
    4416:	66 0f       	add	r22, r22
    4418:	77 1f       	adc	r23, r23
    441a:	88 1f       	adc	r24, r24
    441c:	bb 1f       	adc	r27, r27
    441e:	26 17       	cp	r18, r22
    4420:	37 07       	cpc	r19, r23
    4422:	48 07       	cpc	r20, r24
    4424:	ab 07       	cpc	r26, r27
    4426:	b0 e8       	ldi	r27, 0x80	; 128
    4428:	09 f0       	breq	.+2      	; 0x442c <__divsf3_pse+0x56>
    442a:	bb 0b       	sbc	r27, r27
    442c:	80 2d       	mov	r24, r0
    442e:	bf 01       	movw	r22, r30
    4430:	ff 27       	eor	r31, r31
    4432:	93 58       	subi	r25, 0x83	; 131
    4434:	5f 4f       	sbci	r21, 0xFF	; 255
    4436:	2a f0       	brmi	.+10     	; 0x4442 <__divsf3_pse+0x6c>
    4438:	9e 3f       	cpi	r25, 0xFE	; 254
    443a:	51 05       	cpc	r21, r1
    443c:	68 f0       	brcs	.+26     	; 0x4458 <__divsf3_pse+0x82>
    443e:	b6 c0       	rjmp	.+364    	; 0x45ac <__fp_inf>
    4440:	00 c1       	rjmp	.+512    	; 0x4642 <__fp_szero>
    4442:	5f 3f       	cpi	r21, 0xFF	; 255
    4444:	ec f3       	brlt	.-6      	; 0x4440 <__divsf3_pse+0x6a>
    4446:	98 3e       	cpi	r25, 0xE8	; 232
    4448:	dc f3       	brlt	.-10     	; 0x4440 <__divsf3_pse+0x6a>
    444a:	86 95       	lsr	r24
    444c:	77 95       	ror	r23
    444e:	67 95       	ror	r22
    4450:	b7 95       	ror	r27
    4452:	f7 95       	ror	r31
    4454:	9f 5f       	subi	r25, 0xFF	; 255
    4456:	c9 f7       	brne	.-14     	; 0x444a <__divsf3_pse+0x74>
    4458:	88 0f       	add	r24, r24
    445a:	91 1d       	adc	r25, r1
    445c:	96 95       	lsr	r25
    445e:	87 95       	ror	r24
    4460:	97 f9       	bld	r25, 7
    4462:	08 95       	ret
    4464:	e1 e0       	ldi	r30, 0x01	; 1
    4466:	66 0f       	add	r22, r22
    4468:	77 1f       	adc	r23, r23
    446a:	88 1f       	adc	r24, r24
    446c:	bb 1f       	adc	r27, r27
    446e:	62 17       	cp	r22, r18
    4470:	73 07       	cpc	r23, r19
    4472:	84 07       	cpc	r24, r20
    4474:	ba 07       	cpc	r27, r26
    4476:	20 f0       	brcs	.+8      	; 0x4480 <__divsf3_pse+0xaa>
    4478:	62 1b       	sub	r22, r18
    447a:	73 0b       	sbc	r23, r19
    447c:	84 0b       	sbc	r24, r20
    447e:	ba 0b       	sbc	r27, r26
    4480:	ee 1f       	adc	r30, r30
    4482:	88 f7       	brcc	.-30     	; 0x4466 <__divsf3_pse+0x90>
    4484:	e0 95       	com	r30
    4486:	08 95       	ret

00004488 <__fixsfsi>:
    4488:	04 d0       	rcall	.+8      	; 0x4492 <__fixunssfsi>
    448a:	68 94       	set
    448c:	b1 11       	cpse	r27, r1
    448e:	d9 c0       	rjmp	.+434    	; 0x4642 <__fp_szero>
    4490:	08 95       	ret

00004492 <__fixunssfsi>:
    4492:	bc d0       	rcall	.+376    	; 0x460c <__fp_splitA>
    4494:	88 f0       	brcs	.+34     	; 0x44b8 <__fixunssfsi+0x26>
    4496:	9f 57       	subi	r25, 0x7F	; 127
    4498:	90 f0       	brcs	.+36     	; 0x44be <__fixunssfsi+0x2c>
    449a:	b9 2f       	mov	r27, r25
    449c:	99 27       	eor	r25, r25
    449e:	b7 51       	subi	r27, 0x17	; 23
    44a0:	a0 f0       	brcs	.+40     	; 0x44ca <__fixunssfsi+0x38>
    44a2:	d1 f0       	breq	.+52     	; 0x44d8 <__fixunssfsi+0x46>
    44a4:	66 0f       	add	r22, r22
    44a6:	77 1f       	adc	r23, r23
    44a8:	88 1f       	adc	r24, r24
    44aa:	99 1f       	adc	r25, r25
    44ac:	1a f0       	brmi	.+6      	; 0x44b4 <__fixunssfsi+0x22>
    44ae:	ba 95       	dec	r27
    44b0:	c9 f7       	brne	.-14     	; 0x44a4 <__fixunssfsi+0x12>
    44b2:	12 c0       	rjmp	.+36     	; 0x44d8 <__fixunssfsi+0x46>
    44b4:	b1 30       	cpi	r27, 0x01	; 1
    44b6:	81 f0       	breq	.+32     	; 0x44d8 <__fixunssfsi+0x46>
    44b8:	c3 d0       	rcall	.+390    	; 0x4640 <__fp_zero>
    44ba:	b1 e0       	ldi	r27, 0x01	; 1
    44bc:	08 95       	ret
    44be:	c0 c0       	rjmp	.+384    	; 0x4640 <__fp_zero>
    44c0:	67 2f       	mov	r22, r23
    44c2:	78 2f       	mov	r23, r24
    44c4:	88 27       	eor	r24, r24
    44c6:	b8 5f       	subi	r27, 0xF8	; 248
    44c8:	39 f0       	breq	.+14     	; 0x44d8 <__fixunssfsi+0x46>
    44ca:	b9 3f       	cpi	r27, 0xF9	; 249
    44cc:	cc f3       	brlt	.-14     	; 0x44c0 <__fixunssfsi+0x2e>
    44ce:	86 95       	lsr	r24
    44d0:	77 95       	ror	r23
    44d2:	67 95       	ror	r22
    44d4:	b3 95       	inc	r27
    44d6:	d9 f7       	brne	.-10     	; 0x44ce <__fixunssfsi+0x3c>
    44d8:	3e f4       	brtc	.+14     	; 0x44e8 <__fixunssfsi+0x56>
    44da:	90 95       	com	r25
    44dc:	80 95       	com	r24
    44de:	70 95       	com	r23
    44e0:	61 95       	neg	r22
    44e2:	7f 4f       	sbci	r23, 0xFF	; 255
    44e4:	8f 4f       	sbci	r24, 0xFF	; 255
    44e6:	9f 4f       	sbci	r25, 0xFF	; 255
    44e8:	08 95       	ret

000044ea <__floatunsisf>:
    44ea:	e8 94       	clt
    44ec:	09 c0       	rjmp	.+18     	; 0x4500 <__floatsisf+0x12>

000044ee <__floatsisf>:
    44ee:	97 fb       	bst	r25, 7
    44f0:	3e f4       	brtc	.+14     	; 0x4500 <__floatsisf+0x12>
    44f2:	90 95       	com	r25
    44f4:	80 95       	com	r24
    44f6:	70 95       	com	r23
    44f8:	61 95       	neg	r22
    44fa:	7f 4f       	sbci	r23, 0xFF	; 255
    44fc:	8f 4f       	sbci	r24, 0xFF	; 255
    44fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4500:	99 23       	and	r25, r25
    4502:	a9 f0       	breq	.+42     	; 0x452e <__floatsisf+0x40>
    4504:	f9 2f       	mov	r31, r25
    4506:	96 e9       	ldi	r25, 0x96	; 150
    4508:	bb 27       	eor	r27, r27
    450a:	93 95       	inc	r25
    450c:	f6 95       	lsr	r31
    450e:	87 95       	ror	r24
    4510:	77 95       	ror	r23
    4512:	67 95       	ror	r22
    4514:	b7 95       	ror	r27
    4516:	f1 11       	cpse	r31, r1
    4518:	f8 cf       	rjmp	.-16     	; 0x450a <__floatsisf+0x1c>
    451a:	fa f4       	brpl	.+62     	; 0x455a <__floatsisf+0x6c>
    451c:	bb 0f       	add	r27, r27
    451e:	11 f4       	brne	.+4      	; 0x4524 <__floatsisf+0x36>
    4520:	60 ff       	sbrs	r22, 0
    4522:	1b c0       	rjmp	.+54     	; 0x455a <__floatsisf+0x6c>
    4524:	6f 5f       	subi	r22, 0xFF	; 255
    4526:	7f 4f       	sbci	r23, 0xFF	; 255
    4528:	8f 4f       	sbci	r24, 0xFF	; 255
    452a:	9f 4f       	sbci	r25, 0xFF	; 255
    452c:	16 c0       	rjmp	.+44     	; 0x455a <__floatsisf+0x6c>
    452e:	88 23       	and	r24, r24
    4530:	11 f0       	breq	.+4      	; 0x4536 <__floatsisf+0x48>
    4532:	96 e9       	ldi	r25, 0x96	; 150
    4534:	11 c0       	rjmp	.+34     	; 0x4558 <__floatsisf+0x6a>
    4536:	77 23       	and	r23, r23
    4538:	21 f0       	breq	.+8      	; 0x4542 <__floatsisf+0x54>
    453a:	9e e8       	ldi	r25, 0x8E	; 142
    453c:	87 2f       	mov	r24, r23
    453e:	76 2f       	mov	r23, r22
    4540:	05 c0       	rjmp	.+10     	; 0x454c <__floatsisf+0x5e>
    4542:	66 23       	and	r22, r22
    4544:	71 f0       	breq	.+28     	; 0x4562 <__floatsisf+0x74>
    4546:	96 e8       	ldi	r25, 0x86	; 134
    4548:	86 2f       	mov	r24, r22
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	2a f0       	brmi	.+10     	; 0x455a <__floatsisf+0x6c>
    4550:	9a 95       	dec	r25
    4552:	66 0f       	add	r22, r22
    4554:	77 1f       	adc	r23, r23
    4556:	88 1f       	adc	r24, r24
    4558:	da f7       	brpl	.-10     	; 0x4550 <__floatsisf+0x62>
    455a:	88 0f       	add	r24, r24
    455c:	96 95       	lsr	r25
    455e:	87 95       	ror	r24
    4560:	97 f9       	bld	r25, 7
    4562:	08 95       	ret

00004564 <__fp_cmp>:
    4564:	99 0f       	add	r25, r25
    4566:	00 08       	sbc	r0, r0
    4568:	55 0f       	add	r21, r21
    456a:	aa 0b       	sbc	r26, r26
    456c:	e0 e8       	ldi	r30, 0x80	; 128
    456e:	fe ef       	ldi	r31, 0xFE	; 254
    4570:	16 16       	cp	r1, r22
    4572:	17 06       	cpc	r1, r23
    4574:	e8 07       	cpc	r30, r24
    4576:	f9 07       	cpc	r31, r25
    4578:	c0 f0       	brcs	.+48     	; 0x45aa <__fp_cmp+0x46>
    457a:	12 16       	cp	r1, r18
    457c:	13 06       	cpc	r1, r19
    457e:	e4 07       	cpc	r30, r20
    4580:	f5 07       	cpc	r31, r21
    4582:	98 f0       	brcs	.+38     	; 0x45aa <__fp_cmp+0x46>
    4584:	62 1b       	sub	r22, r18
    4586:	73 0b       	sbc	r23, r19
    4588:	84 0b       	sbc	r24, r20
    458a:	95 0b       	sbc	r25, r21
    458c:	39 f4       	brne	.+14     	; 0x459c <__fp_cmp+0x38>
    458e:	0a 26       	eor	r0, r26
    4590:	61 f0       	breq	.+24     	; 0x45aa <__fp_cmp+0x46>
    4592:	23 2b       	or	r18, r19
    4594:	24 2b       	or	r18, r20
    4596:	25 2b       	or	r18, r21
    4598:	21 f4       	brne	.+8      	; 0x45a2 <__fp_cmp+0x3e>
    459a:	08 95       	ret
    459c:	0a 26       	eor	r0, r26
    459e:	09 f4       	brne	.+2      	; 0x45a2 <__fp_cmp+0x3e>
    45a0:	a1 40       	sbci	r26, 0x01	; 1
    45a2:	a6 95       	lsr	r26
    45a4:	8f ef       	ldi	r24, 0xFF	; 255
    45a6:	81 1d       	adc	r24, r1
    45a8:	81 1d       	adc	r24, r1
    45aa:	08 95       	ret

000045ac <__fp_inf>:
    45ac:	97 f9       	bld	r25, 7
    45ae:	9f 67       	ori	r25, 0x7F	; 127
    45b0:	80 e8       	ldi	r24, 0x80	; 128
    45b2:	70 e0       	ldi	r23, 0x00	; 0
    45b4:	60 e0       	ldi	r22, 0x00	; 0
    45b6:	08 95       	ret

000045b8 <__fp_nan>:
    45b8:	9f ef       	ldi	r25, 0xFF	; 255
    45ba:	80 ec       	ldi	r24, 0xC0	; 192
    45bc:	08 95       	ret

000045be <__fp_pscA>:
    45be:	00 24       	eor	r0, r0
    45c0:	0a 94       	dec	r0
    45c2:	16 16       	cp	r1, r22
    45c4:	17 06       	cpc	r1, r23
    45c6:	18 06       	cpc	r1, r24
    45c8:	09 06       	cpc	r0, r25
    45ca:	08 95       	ret

000045cc <__fp_pscB>:
    45cc:	00 24       	eor	r0, r0
    45ce:	0a 94       	dec	r0
    45d0:	12 16       	cp	r1, r18
    45d2:	13 06       	cpc	r1, r19
    45d4:	14 06       	cpc	r1, r20
    45d6:	05 06       	cpc	r0, r21
    45d8:	08 95       	ret

000045da <__fp_round>:
    45da:	09 2e       	mov	r0, r25
    45dc:	03 94       	inc	r0
    45de:	00 0c       	add	r0, r0
    45e0:	11 f4       	brne	.+4      	; 0x45e6 <__fp_round+0xc>
    45e2:	88 23       	and	r24, r24
    45e4:	52 f0       	brmi	.+20     	; 0x45fa <__fp_round+0x20>
    45e6:	bb 0f       	add	r27, r27
    45e8:	40 f4       	brcc	.+16     	; 0x45fa <__fp_round+0x20>
    45ea:	bf 2b       	or	r27, r31
    45ec:	11 f4       	brne	.+4      	; 0x45f2 <__fp_round+0x18>
    45ee:	60 ff       	sbrs	r22, 0
    45f0:	04 c0       	rjmp	.+8      	; 0x45fa <__fp_round+0x20>
    45f2:	6f 5f       	subi	r22, 0xFF	; 255
    45f4:	7f 4f       	sbci	r23, 0xFF	; 255
    45f6:	8f 4f       	sbci	r24, 0xFF	; 255
    45f8:	9f 4f       	sbci	r25, 0xFF	; 255
    45fa:	08 95       	ret

000045fc <__fp_split3>:
    45fc:	57 fd       	sbrc	r21, 7
    45fe:	90 58       	subi	r25, 0x80	; 128
    4600:	44 0f       	add	r20, r20
    4602:	55 1f       	adc	r21, r21
    4604:	59 f0       	breq	.+22     	; 0x461c <__fp_splitA+0x10>
    4606:	5f 3f       	cpi	r21, 0xFF	; 255
    4608:	71 f0       	breq	.+28     	; 0x4626 <__fp_splitA+0x1a>
    460a:	47 95       	ror	r20

0000460c <__fp_splitA>:
    460c:	88 0f       	add	r24, r24
    460e:	97 fb       	bst	r25, 7
    4610:	99 1f       	adc	r25, r25
    4612:	61 f0       	breq	.+24     	; 0x462c <__fp_splitA+0x20>
    4614:	9f 3f       	cpi	r25, 0xFF	; 255
    4616:	79 f0       	breq	.+30     	; 0x4636 <__fp_splitA+0x2a>
    4618:	87 95       	ror	r24
    461a:	08 95       	ret
    461c:	12 16       	cp	r1, r18
    461e:	13 06       	cpc	r1, r19
    4620:	14 06       	cpc	r1, r20
    4622:	55 1f       	adc	r21, r21
    4624:	f2 cf       	rjmp	.-28     	; 0x460a <__fp_split3+0xe>
    4626:	46 95       	lsr	r20
    4628:	f1 df       	rcall	.-30     	; 0x460c <__fp_splitA>
    462a:	08 c0       	rjmp	.+16     	; 0x463c <__fp_splitA+0x30>
    462c:	16 16       	cp	r1, r22
    462e:	17 06       	cpc	r1, r23
    4630:	18 06       	cpc	r1, r24
    4632:	99 1f       	adc	r25, r25
    4634:	f1 cf       	rjmp	.-30     	; 0x4618 <__fp_splitA+0xc>
    4636:	86 95       	lsr	r24
    4638:	71 05       	cpc	r23, r1
    463a:	61 05       	cpc	r22, r1
    463c:	08 94       	sec
    463e:	08 95       	ret

00004640 <__fp_zero>:
    4640:	e8 94       	clt

00004642 <__fp_szero>:
    4642:	bb 27       	eor	r27, r27
    4644:	66 27       	eor	r22, r22
    4646:	77 27       	eor	r23, r23
    4648:	cb 01       	movw	r24, r22
    464a:	97 f9       	bld	r25, 7
    464c:	08 95       	ret

0000464e <__gesf2>:
    464e:	8a df       	rcall	.-236    	; 0x4564 <__fp_cmp>
    4650:	08 f4       	brcc	.+2      	; 0x4654 <__gesf2+0x6>
    4652:	8f ef       	ldi	r24, 0xFF	; 255
    4654:	08 95       	ret

00004656 <__mulsf3>:
    4656:	0b d0       	rcall	.+22     	; 0x466e <__mulsf3x>
    4658:	c0 cf       	rjmp	.-128    	; 0x45da <__fp_round>
    465a:	b1 df       	rcall	.-158    	; 0x45be <__fp_pscA>
    465c:	28 f0       	brcs	.+10     	; 0x4668 <__mulsf3+0x12>
    465e:	b6 df       	rcall	.-148    	; 0x45cc <__fp_pscB>
    4660:	18 f0       	brcs	.+6      	; 0x4668 <__mulsf3+0x12>
    4662:	95 23       	and	r25, r21
    4664:	09 f0       	breq	.+2      	; 0x4668 <__mulsf3+0x12>
    4666:	a2 cf       	rjmp	.-188    	; 0x45ac <__fp_inf>
    4668:	a7 cf       	rjmp	.-178    	; 0x45b8 <__fp_nan>
    466a:	11 24       	eor	r1, r1
    466c:	ea cf       	rjmp	.-44     	; 0x4642 <__fp_szero>

0000466e <__mulsf3x>:
    466e:	c6 df       	rcall	.-116    	; 0x45fc <__fp_split3>
    4670:	a0 f3       	brcs	.-24     	; 0x465a <__mulsf3+0x4>

00004672 <__mulsf3_pse>:
    4672:	95 9f       	mul	r25, r21
    4674:	d1 f3       	breq	.-12     	; 0x466a <__mulsf3+0x14>
    4676:	95 0f       	add	r25, r21
    4678:	50 e0       	ldi	r21, 0x00	; 0
    467a:	55 1f       	adc	r21, r21
    467c:	62 9f       	mul	r22, r18
    467e:	f0 01       	movw	r30, r0
    4680:	72 9f       	mul	r23, r18
    4682:	bb 27       	eor	r27, r27
    4684:	f0 0d       	add	r31, r0
    4686:	b1 1d       	adc	r27, r1
    4688:	63 9f       	mul	r22, r19
    468a:	aa 27       	eor	r26, r26
    468c:	f0 0d       	add	r31, r0
    468e:	b1 1d       	adc	r27, r1
    4690:	aa 1f       	adc	r26, r26
    4692:	64 9f       	mul	r22, r20
    4694:	66 27       	eor	r22, r22
    4696:	b0 0d       	add	r27, r0
    4698:	a1 1d       	adc	r26, r1
    469a:	66 1f       	adc	r22, r22
    469c:	82 9f       	mul	r24, r18
    469e:	22 27       	eor	r18, r18
    46a0:	b0 0d       	add	r27, r0
    46a2:	a1 1d       	adc	r26, r1
    46a4:	62 1f       	adc	r22, r18
    46a6:	73 9f       	mul	r23, r19
    46a8:	b0 0d       	add	r27, r0
    46aa:	a1 1d       	adc	r26, r1
    46ac:	62 1f       	adc	r22, r18
    46ae:	83 9f       	mul	r24, r19
    46b0:	a0 0d       	add	r26, r0
    46b2:	61 1d       	adc	r22, r1
    46b4:	22 1f       	adc	r18, r18
    46b6:	74 9f       	mul	r23, r20
    46b8:	33 27       	eor	r19, r19
    46ba:	a0 0d       	add	r26, r0
    46bc:	61 1d       	adc	r22, r1
    46be:	23 1f       	adc	r18, r19
    46c0:	84 9f       	mul	r24, r20
    46c2:	60 0d       	add	r22, r0
    46c4:	21 1d       	adc	r18, r1
    46c6:	82 2f       	mov	r24, r18
    46c8:	76 2f       	mov	r23, r22
    46ca:	6a 2f       	mov	r22, r26
    46cc:	11 24       	eor	r1, r1
    46ce:	9f 57       	subi	r25, 0x7F	; 127
    46d0:	50 40       	sbci	r21, 0x00	; 0
    46d2:	8a f0       	brmi	.+34     	; 0x46f6 <__mulsf3_pse+0x84>
    46d4:	e1 f0       	breq	.+56     	; 0x470e <__mulsf3_pse+0x9c>
    46d6:	88 23       	and	r24, r24
    46d8:	4a f0       	brmi	.+18     	; 0x46ec <__mulsf3_pse+0x7a>
    46da:	ee 0f       	add	r30, r30
    46dc:	ff 1f       	adc	r31, r31
    46de:	bb 1f       	adc	r27, r27
    46e0:	66 1f       	adc	r22, r22
    46e2:	77 1f       	adc	r23, r23
    46e4:	88 1f       	adc	r24, r24
    46e6:	91 50       	subi	r25, 0x01	; 1
    46e8:	50 40       	sbci	r21, 0x00	; 0
    46ea:	a9 f7       	brne	.-22     	; 0x46d6 <__mulsf3_pse+0x64>
    46ec:	9e 3f       	cpi	r25, 0xFE	; 254
    46ee:	51 05       	cpc	r21, r1
    46f0:	70 f0       	brcs	.+28     	; 0x470e <__mulsf3_pse+0x9c>
    46f2:	5c cf       	rjmp	.-328    	; 0x45ac <__fp_inf>
    46f4:	a6 cf       	rjmp	.-180    	; 0x4642 <__fp_szero>
    46f6:	5f 3f       	cpi	r21, 0xFF	; 255
    46f8:	ec f3       	brlt	.-6      	; 0x46f4 <__mulsf3_pse+0x82>
    46fa:	98 3e       	cpi	r25, 0xE8	; 232
    46fc:	dc f3       	brlt	.-10     	; 0x46f4 <__mulsf3_pse+0x82>
    46fe:	86 95       	lsr	r24
    4700:	77 95       	ror	r23
    4702:	67 95       	ror	r22
    4704:	b7 95       	ror	r27
    4706:	f7 95       	ror	r31
    4708:	e7 95       	ror	r30
    470a:	9f 5f       	subi	r25, 0xFF	; 255
    470c:	c1 f7       	brne	.-16     	; 0x46fe <__mulsf3_pse+0x8c>
    470e:	fe 2b       	or	r31, r30
    4710:	88 0f       	add	r24, r24
    4712:	91 1d       	adc	r25, r1
    4714:	96 95       	lsr	r25
    4716:	87 95       	ror	r24
    4718:	97 f9       	bld	r25, 7
    471a:	08 95       	ret

0000471c <round>:
    471c:	77 df       	rcall	.-274    	; 0x460c <__fp_splitA>
    471e:	e0 f0       	brcs	.+56     	; 0x4758 <round+0x3c>
    4720:	9e 37       	cpi	r25, 0x7E	; 126
    4722:	d8 f0       	brcs	.+54     	; 0x475a <round+0x3e>
    4724:	96 39       	cpi	r25, 0x96	; 150
    4726:	b8 f4       	brcc	.+46     	; 0x4756 <round+0x3a>
    4728:	9e 38       	cpi	r25, 0x8E	; 142
    472a:	48 f4       	brcc	.+18     	; 0x473e <round+0x22>
    472c:	67 2f       	mov	r22, r23
    472e:	78 2f       	mov	r23, r24
    4730:	88 27       	eor	r24, r24
    4732:	98 5f       	subi	r25, 0xF8	; 248
    4734:	f9 cf       	rjmp	.-14     	; 0x4728 <round+0xc>
    4736:	86 95       	lsr	r24
    4738:	77 95       	ror	r23
    473a:	67 95       	ror	r22
    473c:	93 95       	inc	r25
    473e:	95 39       	cpi	r25, 0x95	; 149
    4740:	d0 f3       	brcs	.-12     	; 0x4736 <round+0x1a>
    4742:	b6 2f       	mov	r27, r22
    4744:	b1 70       	andi	r27, 0x01	; 1
    4746:	6b 0f       	add	r22, r27
    4748:	71 1d       	adc	r23, r1
    474a:	81 1d       	adc	r24, r1
    474c:	20 f4       	brcc	.+8      	; 0x4756 <round+0x3a>
    474e:	87 95       	ror	r24
    4750:	77 95       	ror	r23
    4752:	67 95       	ror	r22
    4754:	93 95       	inc	r25
    4756:	02 c0       	rjmp	.+4      	; 0x475c <__fp_mintl>
    4758:	1c c0       	rjmp	.+56     	; 0x4792 <__fp_mpack>
    475a:	73 cf       	rjmp	.-282    	; 0x4642 <__fp_szero>

0000475c <__fp_mintl>:
    475c:	88 23       	and	r24, r24
    475e:	71 f4       	brne	.+28     	; 0x477c <__fp_mintl+0x20>
    4760:	77 23       	and	r23, r23
    4762:	21 f0       	breq	.+8      	; 0x476c <__fp_mintl+0x10>
    4764:	98 50       	subi	r25, 0x08	; 8
    4766:	87 2b       	or	r24, r23
    4768:	76 2f       	mov	r23, r22
    476a:	07 c0       	rjmp	.+14     	; 0x477a <__fp_mintl+0x1e>
    476c:	66 23       	and	r22, r22
    476e:	11 f4       	brne	.+4      	; 0x4774 <__fp_mintl+0x18>
    4770:	99 27       	eor	r25, r25
    4772:	0d c0       	rjmp	.+26     	; 0x478e <__fp_mintl+0x32>
    4774:	90 51       	subi	r25, 0x10	; 16
    4776:	86 2b       	or	r24, r22
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	60 e0       	ldi	r22, 0x00	; 0
    477c:	2a f0       	brmi	.+10     	; 0x4788 <__fp_mintl+0x2c>
    477e:	9a 95       	dec	r25
    4780:	66 0f       	add	r22, r22
    4782:	77 1f       	adc	r23, r23
    4784:	88 1f       	adc	r24, r24
    4786:	da f7       	brpl	.-10     	; 0x477e <__fp_mintl+0x22>
    4788:	88 0f       	add	r24, r24
    478a:	96 95       	lsr	r25
    478c:	87 95       	ror	r24
    478e:	97 f9       	bld	r25, 7
    4790:	08 95       	ret

00004792 <__fp_mpack>:
    4792:	9f 3f       	cpi	r25, 0xFF	; 255
    4794:	31 f0       	breq	.+12     	; 0x47a2 <__fp_mpack_finite+0xc>

00004796 <__fp_mpack_finite>:
    4796:	91 50       	subi	r25, 0x01	; 1
    4798:	20 f4       	brcc	.+8      	; 0x47a2 <__fp_mpack_finite+0xc>
    479a:	87 95       	ror	r24
    479c:	77 95       	ror	r23
    479e:	67 95       	ror	r22
    47a0:	b7 95       	ror	r27
    47a2:	88 0f       	add	r24, r24
    47a4:	91 1d       	adc	r25, r1
    47a6:	96 95       	lsr	r25
    47a8:	87 95       	ror	r24
    47aa:	97 f9       	bld	r25, 7
    47ac:	08 95       	ret

000047ae <__mulsi3>:
    47ae:	62 9f       	mul	r22, r18
    47b0:	d0 01       	movw	r26, r0
    47b2:	73 9f       	mul	r23, r19
    47b4:	f0 01       	movw	r30, r0
    47b6:	82 9f       	mul	r24, r18
    47b8:	e0 0d       	add	r30, r0
    47ba:	f1 1d       	adc	r31, r1
    47bc:	64 9f       	mul	r22, r20
    47be:	e0 0d       	add	r30, r0
    47c0:	f1 1d       	adc	r31, r1
    47c2:	92 9f       	mul	r25, r18
    47c4:	f0 0d       	add	r31, r0
    47c6:	83 9f       	mul	r24, r19
    47c8:	f0 0d       	add	r31, r0
    47ca:	74 9f       	mul	r23, r20
    47cc:	f0 0d       	add	r31, r0
    47ce:	65 9f       	mul	r22, r21
    47d0:	f0 0d       	add	r31, r0
    47d2:	99 27       	eor	r25, r25
    47d4:	72 9f       	mul	r23, r18
    47d6:	b0 0d       	add	r27, r0
    47d8:	e1 1d       	adc	r30, r1
    47da:	f9 1f       	adc	r31, r25
    47dc:	63 9f       	mul	r22, r19
    47de:	b0 0d       	add	r27, r0
    47e0:	e1 1d       	adc	r30, r1
    47e2:	f9 1f       	adc	r31, r25
    47e4:	bd 01       	movw	r22, r26
    47e6:	cf 01       	movw	r24, r30
    47e8:	11 24       	eor	r1, r1
    47ea:	08 95       	ret

000047ec <__udivmodqi4>:
    47ec:	99 1b       	sub	r25, r25
    47ee:	79 e0       	ldi	r23, 0x09	; 9
    47f0:	04 c0       	rjmp	.+8      	; 0x47fa <__udivmodqi4_ep>

000047f2 <__udivmodqi4_loop>:
    47f2:	99 1f       	adc	r25, r25
    47f4:	96 17       	cp	r25, r22
    47f6:	08 f0       	brcs	.+2      	; 0x47fa <__udivmodqi4_ep>
    47f8:	96 1b       	sub	r25, r22

000047fa <__udivmodqi4_ep>:
    47fa:	88 1f       	adc	r24, r24
    47fc:	7a 95       	dec	r23
    47fe:	c9 f7       	brne	.-14     	; 0x47f2 <__udivmodqi4_loop>
    4800:	80 95       	com	r24
    4802:	08 95       	ret

00004804 <__divmodhi4>:
    4804:	97 fb       	bst	r25, 7
    4806:	09 2e       	mov	r0, r25
    4808:	07 26       	eor	r0, r23
    480a:	0a d0       	rcall	.+20     	; 0x4820 <__divmodhi4_neg1>
    480c:	77 fd       	sbrc	r23, 7
    480e:	04 d0       	rcall	.+8      	; 0x4818 <__divmodhi4_neg2>
    4810:	27 d0       	rcall	.+78     	; 0x4860 <__udivmodhi4>
    4812:	06 d0       	rcall	.+12     	; 0x4820 <__divmodhi4_neg1>
    4814:	00 20       	and	r0, r0
    4816:	1a f4       	brpl	.+6      	; 0x481e <__divmodhi4_exit>

00004818 <__divmodhi4_neg2>:
    4818:	70 95       	com	r23
    481a:	61 95       	neg	r22
    481c:	7f 4f       	sbci	r23, 0xFF	; 255

0000481e <__divmodhi4_exit>:
    481e:	08 95       	ret

00004820 <__divmodhi4_neg1>:
    4820:	f6 f7       	brtc	.-4      	; 0x481e <__divmodhi4_exit>
    4822:	90 95       	com	r25
    4824:	81 95       	neg	r24
    4826:	9f 4f       	sbci	r25, 0xFF	; 255
    4828:	08 95       	ret

0000482a <__divmodsi4>:
    482a:	97 fb       	bst	r25, 7
    482c:	09 2e       	mov	r0, r25
    482e:	05 26       	eor	r0, r21
    4830:	0e d0       	rcall	.+28     	; 0x484e <__divmodsi4_neg1>
    4832:	57 fd       	sbrc	r21, 7
    4834:	04 d0       	rcall	.+8      	; 0x483e <__divmodsi4_neg2>
    4836:	28 d0       	rcall	.+80     	; 0x4888 <__udivmodsi4>
    4838:	0a d0       	rcall	.+20     	; 0x484e <__divmodsi4_neg1>
    483a:	00 1c       	adc	r0, r0
    483c:	38 f4       	brcc	.+14     	; 0x484c <__divmodsi4_exit>

0000483e <__divmodsi4_neg2>:
    483e:	50 95       	com	r21
    4840:	40 95       	com	r20
    4842:	30 95       	com	r19
    4844:	21 95       	neg	r18
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	4f 4f       	sbci	r20, 0xFF	; 255
    484a:	5f 4f       	sbci	r21, 0xFF	; 255

0000484c <__divmodsi4_exit>:
    484c:	08 95       	ret

0000484e <__divmodsi4_neg1>:
    484e:	f6 f7       	brtc	.-4      	; 0x484c <__divmodsi4_exit>
    4850:	90 95       	com	r25
    4852:	80 95       	com	r24
    4854:	70 95       	com	r23
    4856:	61 95       	neg	r22
    4858:	7f 4f       	sbci	r23, 0xFF	; 255
    485a:	8f 4f       	sbci	r24, 0xFF	; 255
    485c:	9f 4f       	sbci	r25, 0xFF	; 255
    485e:	08 95       	ret

00004860 <__udivmodhi4>:
    4860:	aa 1b       	sub	r26, r26
    4862:	bb 1b       	sub	r27, r27
    4864:	51 e1       	ldi	r21, 0x11	; 17
    4866:	07 c0       	rjmp	.+14     	; 0x4876 <__udivmodhi4_ep>

00004868 <__udivmodhi4_loop>:
    4868:	aa 1f       	adc	r26, r26
    486a:	bb 1f       	adc	r27, r27
    486c:	a6 17       	cp	r26, r22
    486e:	b7 07       	cpc	r27, r23
    4870:	10 f0       	brcs	.+4      	; 0x4876 <__udivmodhi4_ep>
    4872:	a6 1b       	sub	r26, r22
    4874:	b7 0b       	sbc	r27, r23

00004876 <__udivmodhi4_ep>:
    4876:	88 1f       	adc	r24, r24
    4878:	99 1f       	adc	r25, r25
    487a:	5a 95       	dec	r21
    487c:	a9 f7       	brne	.-22     	; 0x4868 <__udivmodhi4_loop>
    487e:	80 95       	com	r24
    4880:	90 95       	com	r25
    4882:	bc 01       	movw	r22, r24
    4884:	cd 01       	movw	r24, r26
    4886:	08 95       	ret

00004888 <__udivmodsi4>:
    4888:	a1 e2       	ldi	r26, 0x21	; 33
    488a:	1a 2e       	mov	r1, r26
    488c:	aa 1b       	sub	r26, r26
    488e:	bb 1b       	sub	r27, r27
    4890:	fd 01       	movw	r30, r26
    4892:	0d c0       	rjmp	.+26     	; 0x48ae <__udivmodsi4_ep>

00004894 <__udivmodsi4_loop>:
    4894:	aa 1f       	adc	r26, r26
    4896:	bb 1f       	adc	r27, r27
    4898:	ee 1f       	adc	r30, r30
    489a:	ff 1f       	adc	r31, r31
    489c:	a2 17       	cp	r26, r18
    489e:	b3 07       	cpc	r27, r19
    48a0:	e4 07       	cpc	r30, r20
    48a2:	f5 07       	cpc	r31, r21
    48a4:	20 f0       	brcs	.+8      	; 0x48ae <__udivmodsi4_ep>
    48a6:	a2 1b       	sub	r26, r18
    48a8:	b3 0b       	sbc	r27, r19
    48aa:	e4 0b       	sbc	r30, r20
    48ac:	f5 0b       	sbc	r31, r21

000048ae <__udivmodsi4_ep>:
    48ae:	66 1f       	adc	r22, r22
    48b0:	77 1f       	adc	r23, r23
    48b2:	88 1f       	adc	r24, r24
    48b4:	99 1f       	adc	r25, r25
    48b6:	1a 94       	dec	r1
    48b8:	69 f7       	brne	.-38     	; 0x4894 <__udivmodsi4_loop>
    48ba:	60 95       	com	r22
    48bc:	70 95       	com	r23
    48be:	80 95       	com	r24
    48c0:	90 95       	com	r25
    48c2:	9b 01       	movw	r18, r22
    48c4:	ac 01       	movw	r20, r24
    48c6:	bd 01       	movw	r22, r26
    48c8:	cf 01       	movw	r24, r30
    48ca:	08 95       	ret

000048cc <_exit>:
    48cc:	f8 94       	cli

000048ce <__stop_program>:
    48ce:	ff cf       	rjmp	.-2      	; 0x48ce <__stop_program>

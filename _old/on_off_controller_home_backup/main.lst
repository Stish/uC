   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  72               	.global	set_pin
  74               	set_pin:
  76               	.Ltext1:
   1:lib/io_fct.c  **** #define ADC_VREF_TYPE 0xC0				// ADC Used Internal Reference
   2:lib/io_fct.c  **** 
   3:lib/io_fct.c  **** #include <avr/io.h>
   4:lib/io_fct.c  **** 
   5:lib/io_fct.c  **** void set_pin(char port, char pin)
   6:lib/io_fct.c  **** {
  77               	 .
  78               		in r28,__SP_L__
  79               		in r29,__SP_H__
  80 0000 DF93      	/* prologue: function */
  81 0002 CF93      	/* frame size = 4 */
  82 0004 00D0      		std Y+1,r24
  83 0006 00D0      		std Y+2,r22
  85 000a DEB7      	.LM1:
  86               		ldd r24,Y+1
  87               		mov r18,r24
  88 000c 8983      		ldi r19,lo8(0)
  89 000e 6A83      		std Y+4,r19
   7:lib/io_fct.c  **** 	switch(port)
  90               		ldd r24,Y+3
  91               		ldd r25,Y+4
  92 0010 8981      		cpi r24,99
  93 0012 282F      		cpc r25,__zero_reg__
  94 0014 30E0      		brne .+2
  95 0016 3C83      		rjmp .L5
  96 0018 2B83      		ldd r18,Y+3
  97 001a 8B81      		ldd r19,Y+4
  98 001c 9C81      		cpi r18,100
  99 001e 8336      		cpc r19,__zero_reg__
 100 0020 9105      		brge .L9
 101 0022 01F4      		ldd r24,Y+3
 102 0024 00C0      		ldd r25,Y+4
 103 0026 2B81      		cpi r24,97
 104 0028 3C81      		cpc r25,__zero_reg__
 105 002a 2436      		breq .L3
 106 002c 3105      		ldd r18,Y+3
 107 002e 04F4      		ldd r19,Y+4
 108 0030 8B81      		cpi r18,98
 109 0032 9C81      		cpc r19,__zero_reg__
 110 0034 8136      		breq .L4
 111 0036 9105      		rjmp .L10
 112 0038 01F0      	.L9:
 113 003a 2B81      		ldd r24,Y+3
 114 003c 3C81      		ldd r25,Y+4
 115 003e 2236      		cpi r24,101
 116 0040 3105      		cpc r25,__zero_reg__
 117 0042 01F0      		brne .+2
 118 0044 00C0      		rjmp .L7
 119               		ldd r18,Y+3
 120 0046 8B81      		ldd r19,Y+4
 121 0048 9C81      		cpi r18,101
 122 004a 8536      		cpc r19,__zero_reg__
 123 004c 9105      		brge .+2
 124 004e 01F4      		rjmp .L6
 125 0050 00C0      		ldd r24,Y+3
 126 0052 2B81      		ldd r25,Y+4
 127 0054 3C81      		cpi r24,102
 128 0056 2536      		cpc r25,__zero_reg__
 129 0058 3105      		brne .+2
 130 005a 04F4      		rjmp .L8
 131 005c 00C0      		rjmp .L10
 132 005e 8B81      	.L3:
 134 0062 8636      	.LM2:
 135 0064 9105      		ldi r26,lo8(59)
 136 0066 01F4      		ldi r27,hi8(59)
 137 0068 00C0      		ldi r30,lo8(59)
 138 006a 00C0      		ldi r31,hi8(59)
 139               		ld r24,Z
   8:lib/io_fct.c  **** 	{
   9:lib/io_fct.c  **** 		case ('a'):
  10:lib/io_fct.c  **** 			PORTA |= (0x01 << pin);
 140               	8(0)
 141               		ldi r24,lo8(1)
 142 006c ABE3      		ldi r25,hi8(1)
 143 006e B0E0      		mov r0,r18
 144 0070 EBE3      		rjmp 2f
 145 0072 F0E0      	1:	lsl r24
 146 0074 8081      		rol r25
 147 0076 482F      	2:	dec r0
 148 0078 8A81      		brpl 1b
 149 007a 282F      		or r24,r20
 150 007c 30E0      		st X,r24
 151 007e 81E0      		rjmp .L10
 152 0080 90E0      	.L4:
 154 0084 00C0      	.LM3:
 155 0086 880F      		ldi r26,lo8(56)
 156 0088 991F      		ldi r27,hi8(56)
 157 008a 0A94      		ldi r30,lo8(56)
 158 008c 02F4      		ldi r31,hi8(56)
 159 008e 842B      		ld r24,Z
 160 0090 8C93      		mov r20,r24
 161 0092 00C0      		ldd r24,Y+2
 162               		mov r18,r24
  11:lib/io_fct.c  **** 			break;
  12:lib/io_fct.c  **** 		case ('b'):
  13:lib/io_fct.c  **** 			PORTB |= (0x01 << pin);
 163               	4,lo8(1)
 164               		ldi r25,hi8(1)
 165 0094 A8E3      		mov r0,r18
 166 0096 B0E0      		rjmp 2f
 167 0098 E8E3      	1:	lsl r24
 168 009a F0E0      		rol r25
 169 009c 8081      	2:	dec r0
 170 009e 482F      		brpl 1b
 171 00a0 8A81      		or r24,r20
 172 00a2 282F      		st X,r24
 173 00a4 30E0      		rjmp .L10
 174 00a6 81E0      	.L5:
 176 00aa 022E      	.LM4:
 177 00ac 00C0      		ldi r26,lo8(53)
 178 00ae 880F      		ldi r27,hi8(53)
 179 00b0 991F      		ldi r30,lo8(53)
 180 00b2 0A94      		ldi r31,hi8(53)
 181 00b4 02F4      		ld r24,Z
 182 00b6 842B      		mov r20,r24
 183 00b8 8C93      		ldd r24,Y+2
 184 00ba 00C0      		mov r18,r24
 185               		ldi r19,lo8(0)
  14:lib/io_fct.c  **** 			break;
  15:lib/io_fct.c  **** 		case ('c'):
  16:lib/io_fct.c  **** 			PORTC |= (0x01 << pin);
 186               	5,hi8(1)
 187               		mov r0,r18
 188 00bc A5E3      		rjmp 2f
 189 00be B0E0      	1:	lsl r24
 190 00c0 E5E3      		rol r25
 191 00c2 F0E0      	2:	dec r0
 192 00c4 8081      		brpl 1b
 193 00c6 482F      		or r24,r20
 194 00c8 8A81      		st X,r24
 195 00ca 282F      		rjmp .L10
 196 00cc 30E0      	.L6:
 198 00d0 90E0      	.LM5:
 199 00d2 022E      		ldi r26,lo8(50)
 200 00d4 00C0      		ldi r27,hi8(50)
 201 00d6 880F      		ldi r30,lo8(50)
 202 00d8 991F      		ldi r31,hi8(50)
 203 00da 0A94      		ld r24,Z
 204 00dc 02F4      		mov r20,r24
 205 00de 842B      		ldd r24,Y+2
 206 00e0 8C93      		mov r18,r24
 207 00e2 00C0      		ldi r19,lo8(0)
 208               		ldi r24,lo8(1)
  17:lib/io_fct.c  **** 			break;
  18:lib/io_fct.c  **** 		case ('d'):
  19:lib/io_fct.c  **** 			PORTD |= (0x01 << pin);
 209               	,r18
 210               		rjmp 2f
 211 00e4 A2E3      	1:	lsl r24
 212 00e6 B0E0      		rol r25
 213 00e8 E2E3      	2:	dec r0
 214 00ea F0E0      		brpl 1b
 215 00ec 8081      		or r24,r20
 216 00ee 482F      		st X,r24
 217 00f0 8A81      		rjmp .L10
 218 00f2 282F      	.L7:
 220 00f6 81E0      	.LM6:
 221 00f8 90E0      		ldi r26,lo8(35)
 222 00fa 022E      		ldi r27,hi8(35)
 223 00fc 00C0      		ldi r30,lo8(35)
 224 00fe 880F      		ldi r31,hi8(35)
 225 0100 991F      		ld r24,Z
 226 0102 0A94      		mov r20,r24
 227 0104 02F4      		ldd r24,Y+2
 228 0106 842B      		mov r18,r24
 229 0108 8C93      		ldi r19,lo8(0)
 230 010a 00C0      		ldi r24,lo8(1)
 231               		ldi r25,hi8(1)
  20:lib/io_fct.c  **** 			break;
  21:lib/io_fct.c  **** 		case ('e'):
  22:lib/io_fct.c  **** 			PORTE |= (0x01 << pin);
 232               		lsl r24
 233               		rol r25
 234 010c A3E2      	2:	dec r0
 235 010e B0E0      		brpl 1b
 236 0110 E3E2      		or r24,r20
 237 0112 F0E0      		st X,r24
 238 0114 8081      		rjmp .L10
 239 0116 482F      	.L8:
 241 011a 282F      	.LM7:
 242 011c 30E0      		ldi r26,lo8(98)
 243 011e 81E0      		ldi r27,hi8(98)
 244 0120 90E0      		ldi r30,lo8(98)
 245 0122 022E      		ldi r31,hi8(98)
 246 0124 00C0      		ld r24,Z
 247 0126 880F      		mov r20,r24
 248 0128 991F      		ldd r24,Y+2
 249 012a 0A94      		mov r18,r24
 250 012c 02F4      		ldi r19,lo8(0)
 251 012e 842B      		ldi r24,lo8(1)
 252 0130 8C93      		ldi r25,hi8(1)
 253 0132 00C0      		mov r0,r18
 254               		rjmp 2f
  23:lib/io_fct.c  **** 			break;
  24:lib/io_fct.c  **** 		case ('f'):
  25:lib/io_fct.c  **** 			PORTF |= (0x01 << pin);
 255               	dec r0
 256               		brpl 1b
 257 0134 A2E6      		or r24,r20
 258 0136 B0E0      		st X,r24
 259 0138 E2E6      	.L10:
 260 013a F0E0      	/* epilogue start */
 262 013e 482F      	.LM8:
 263 0140 8A81      		pop __tmp_reg__
 264 0142 282F      		pop __tmp_reg__
 265 0144 30E0      		pop __tmp_reg__
 266 0146 81E0      		pop __tmp_reg__
 267 0148 90E0      		pop r28
 268 014a 022E      		pop r29
 269 014c 00C0      		ret
 271 0150 991F      	.Lscope1:
 275 0158 8C93      	.global	reset_pin
 277               	reset_pin:
  26:lib/io_fct.c  **** 			break;
  27:lib/io_fct.c  **** 		default:
  28:lib/io_fct.c  **** 			break;
  29:lib/io_fct.c  **** 	}
  30:lib/io_fct.c  **** }
 278               	FBB2
 279               	.LM9:
 280 015a 0F90      	.LFBB2:
 281 015c 0F90      		push r29
 282 015e 0F90      		push r28
 283 0160 0F90      		rcall .
 284 0162 CF91      		rcall .
 285 0164 DF91      		in r28,__SP_L__
 286 0166 0895      		in r29,__SP_H__
 287               	/* prologue: function */
 288               	/* frame size = 4 */
 289               		std Y+1,r24
 290               		std Y+2,r22
 292               	.LM10:
 293               		ldd r24,Y+1
 294               		mov r18,r24
  31:lib/io_fct.c  **** 
  32:lib/io_fct.c  **** void reset_pin(char port, char pin)
  33:lib/io_fct.c  **** {
 295               	std Y+4,r19
 296               		std Y+3,r18
 297               		ldd r24,Y+3
 298 0168 DF93      		ldd r25,Y+4
 299 016a CF93      		cpi r24,99
 300 016c 00D0      		cpc r25,__zero_reg__
 301 016e 00D0      		brne .+2
 302 0170 CDB7      		rjmp .L15
 303 0172 DEB7      		ldd r18,Y+3
 304               		ldd r19,Y+4
 305               		cpi r18,100
 306 0174 8983      		cpc r19,__zero_reg__
 307 0176 6A83      		brge .L19
  34:lib/io_fct.c  **** 	switch(port)
 308               		ldd r25,Y+4
 309               		cpi r24,97
 310 0178 8981      		cpc r25,__zero_reg__
 311 017a 282F      		breq .L13
 312 017c 30E0      		ldd r18,Y+3
 313 017e 3C83      		ldd r19,Y+4
 314 0180 2B83      		cpi r18,98
 315 0182 8B81      		cpc r19,__zero_reg__
 316 0184 9C81      		breq .L14
 317 0186 8336      		rjmp .L20
 318 0188 9105      	.L19:
 319 018a 01F4      		ldd r24,Y+3
 320 018c 00C0      		ldd r25,Y+4
 321 018e 2B81      		cpi r24,101
 322 0190 3C81      		cpc r25,__zero_reg__
 323 0192 2436      		brne .+2
 324 0194 3105      		rjmp .L17
 325 0196 04F4      		ldd r18,Y+3
 326 0198 8B81      		ldd r19,Y+4
 327 019a 9C81      		cpi r18,101
 328 019c 8136      		cpc r19,__zero_reg__
 329 019e 9105      		brge .+2
 330 01a0 01F0      		rjmp .L16
 331 01a2 2B81      		ldd r24,Y+3
 332 01a4 3C81      		ldd r25,Y+4
 333 01a6 2236      		cpi r24,102
 334 01a8 3105      		cpc r25,__zero_reg__
 335 01aa 01F0      		brne .+2
 336 01ac 00C0      		rjmp .L18
 337               		rjmp .L20
 338 01ae 8B81      	.L13:
 340 01b2 8536      	.LM11:
 341 01b4 9105      		ldi r26,lo8(59)
 342 01b6 01F4      		ldi r27,hi8(59)
 343 01b8 00C0      		ldi r30,lo8(59)
 344 01ba 2B81      		ldi r31,hi8(59)
 345 01bc 3C81      		ld r24,Z
 346 01be 2536      		mov r20,r24
 347 01c0 3105      		ldd r24,Y+2
 348 01c2 04F4      		mov r18,r24
 349 01c4 00C0      		ldi r19,lo8(0)
 350 01c6 8B81      		ldi r24,lo8(1)
 351 01c8 9C81      		ldi r25,hi8(1)
 352 01ca 8636      		mov r0,r18
 353 01cc 9105      		rjmp 2f
 354 01ce 01F4      	1:	lsl r24
 355 01d0 00C0      		rol r25
 356 01d2 00C0      	2:	dec r0
 357               		brpl 1b
  35:lib/io_fct.c  **** 	{
  36:lib/io_fct.c  **** 		case ('a'):
  37:lib/io_fct.c  **** 			PORTA &= ~(0x01 << pin);
 359               	.LM12:
 360 01d4 ABE3      		ldi r26,lo8(56)
 361 01d6 B0E0      		ldi r27,hi8(56)
 362 01d8 EBE3      		ldi r30,lo8(56)
 363 01da F0E0      		ldi r31,hi8(56)
 364 01dc 8081      		ld r24,Z
 365 01de 482F      		mov r20,r24
 366 01e0 8A81      		ldd r24,Y+2
 367 01e2 282F      		mov r18,r24
 368 01e4 30E0      		ldi r19,lo8(0)
 369 01e6 81E0      		ldi r24,lo8(1)
 370 01e8 90E0      		ldi r25,hi8(1)
 371 01ea 022E      		mov r0,r18
 372 01ec 00C0      		rjmp 2f
 373 01ee 880F      	1:	lsl r24
 374 01f0 991F      		rol r25
 375 01f2 0A94      	2:	dec r0
 376 01f4 02F4      		brpl 1b
 377 01f6 8095      		com r24
 378 01f8 8423      		and r24,r20
 379 01fa 8C93      		st X,r24
 380 01fc 00C0      		rjmp .L20
 381               	.L15:
  38:lib/io_fct.c  **** 			break;
  39:lib/io_fct.c  **** 		case ('b'):
  40:lib/io_fct.c  **** 			PORTB &= ~(0x01 << pin);
 382               	FBB2
 383               	.LM13:
 384 01fe A8E3      		ldi r26,lo8(53)
 385 0200 B0E0      		ldi r27,hi8(53)
 386 0202 E8E3      		ldi r30,lo8(53)
 387 0204 F0E0      		ldi r31,hi8(53)
 388 0206 8081      		ld r24,Z
 389 0208 482F      		mov r20,r24
 390 020a 8A81      		ldd r24,Y+2
 391 020c 282F      		mov r18,r24
 392 020e 30E0      		ldi r19,lo8(0)
 393 0210 81E0      		ldi r24,lo8(1)
 394 0212 90E0      		ldi r25,hi8(1)
 395 0214 022E      		mov r0,r18
 396 0216 00C0      		rjmp 2f
 397 0218 880F      	1:	lsl r24
 398 021a 991F      		rol r25
 399 021c 0A94      	2:	dec r0
 400 021e 02F4      		brpl 1b
 401 0220 8095      		com r24
 402 0222 8423      		and r24,r20
 403 0224 8C93      		st X,r24
 404 0226 00C0      		rjmp .L20
 405               	.L16:
  41:lib/io_fct.c  **** 			break;
  42:lib/io_fct.c  **** 		case ('c'):
  43:lib/io_fct.c  **** 			PORTC &= ~(0x01 << pin);
 406               	FBB2
 407               	.LM14:
 408 0228 A5E3      		ldi r26,lo8(50)
 409 022a B0E0      		ldi r27,hi8(50)
 410 022c E5E3      		ldi r30,lo8(50)
 411 022e F0E0      		ldi r31,hi8(50)
 412 0230 8081      		ld r24,Z
 413 0232 482F      		mov r20,r24
 414 0234 8A81      		ldd r24,Y+2
 415 0236 282F      		mov r18,r24
 416 0238 30E0      		ldi r19,lo8(0)
 417 023a 81E0      		ldi r24,lo8(1)
 418 023c 90E0      		ldi r25,hi8(1)
 419 023e 022E      		mov r0,r18
 420 0240 00C0      		rjmp 2f
 421 0242 880F      	1:	lsl r24
 422 0244 991F      		rol r25
 423 0246 0A94      	2:	dec r0
 424 0248 02F4      		brpl 1b
 425 024a 8095      		com r24
 426 024c 8423      		and r24,r20
 427 024e 8C93      		st X,r24
 428 0250 00C0      		rjmp .L20
 429               	.L17:
  44:lib/io_fct.c  **** 			break;
  45:lib/io_fct.c  **** 		case ('d'):
  46:lib/io_fct.c  **** 			PORTD &= ~(0x01 << pin);
 430               	FBB2
 431               	.LM15:
 432 0252 A2E3      		ldi r26,lo8(35)
 433 0254 B0E0      		ldi r27,hi8(35)
 434 0256 E2E3      		ldi r30,lo8(35)
 435 0258 F0E0      		ldi r31,hi8(35)
 436 025a 8081      		ld r24,Z
 437 025c 482F      		mov r20,r24
 438 025e 8A81      		ldd r24,Y+2
 439 0260 282F      		mov r18,r24
 440 0262 30E0      		ldi r19,lo8(0)
 441 0264 81E0      		ldi r24,lo8(1)
 442 0266 90E0      		ldi r25,hi8(1)
 443 0268 022E      		mov r0,r18
 444 026a 00C0      		rjmp 2f
 445 026c 880F      	1:	lsl r24
 446 026e 991F      		rol r25
 447 0270 0A94      	2:	dec r0
 448 0272 02F4      		brpl 1b
 449 0274 8095      		com r24
 450 0276 8423      		and r24,r20
 451 0278 8C93      		st X,r24
 452 027a 00C0      		rjmp .L20
 453               	.L18:
  47:lib/io_fct.c  **** 			break;
  48:lib/io_fct.c  **** 		case ('e'):
  49:lib/io_fct.c  **** 			PORTE &= ~(0x01 << pin);
 454               	FBB2
 455               	.LM16:
 456 027c A3E2      		ldi r26,lo8(98)
 457 027e B0E0      		ldi r27,hi8(98)
 458 0280 E3E2      		ldi r30,lo8(98)
 459 0282 F0E0      		ldi r31,hi8(98)
 460 0284 8081      		ld r24,Z
 461 0286 482F      		mov r20,r24
 462 0288 8A81      		ldd r24,Y+2
 463 028a 282F      		mov r18,r24
 464 028c 30E0      		ldi r19,lo8(0)
 465 028e 81E0      		ldi r24,lo8(1)
 466 0290 90E0      		ldi r25,hi8(1)
 467 0292 022E      		mov r0,r18
 468 0294 00C0      		rjmp 2f
 469 0296 880F      	1:	lsl r24
 470 0298 991F      		rol r25
 471 029a 0A94      	2:	dec r0
 472 029c 02F4      		brpl 1b
 473 029e 8095      		com r24
 474 02a0 8423      		and r24,r20
 475 02a2 8C93      		st X,r24
 476 02a4 00C0      	.L20:
 477               	/* epilogue start */
  50:lib/io_fct.c  **** 			break;
  51:lib/io_fct.c  **** 		case ('f'):
  52:lib/io_fct.c  **** 			PORTF &= ~(0x01 << pin);
 478               	FBB2
 479               	.LM17:
 480 02a6 A2E6      		pop __tmp_reg__
 481 02a8 B0E0      		pop __tmp_reg__
 482 02aa E2E6      		pop __tmp_reg__
 483 02ac F0E0      		pop __tmp_reg__
 484 02ae 8081      		pop r28
 485 02b0 482F      		pop r29
 486 02b2 8A81      		ret
 488 02b6 30E0      	.Lscope2:
 492 02be 00C0      	.global	toggle_pin
 494 02c2 991F      	toggle_pin:
 496 02c6 02F4      	.LM18:
 497 02c8 8095      	.LFBB3:
 498 02ca 8423      		push r29
 499 02cc 8C93      		push r28
 500               		rcall .
 501               		rcall .
  53:lib/io_fct.c  **** 			break;
  54:lib/io_fct.c  **** 		default:
  55:lib/io_fct.c  **** 			break;
  56:lib/io_fct.c  **** 	}
  57:lib/io_fct.c  **** }
 502               	,__SP_H__
 503               	/* prologue: function */
 504 02ce 0F90      	/* frame size = 4 */
 505 02d0 0F90      		std Y+1,r24
 506 02d2 0F90      		std Y+2,r22
 508 02d6 CF91      	.LM19:
 509 02d8 DF91      		ldd r24,Y+1
 510 02da 0895      		mov r18,r24
 511               		ldi r19,lo8(0)
 512               		std Y+4,r19
 513               		std Y+3,r18
 514               		ldd r24,Y+3
 515               		ldd r25,Y+4
 516               		cpi r24,99
 517               		cpc r25,__zero_reg__
 518               		brne .+2
  58:lib/io_fct.c  **** 
  59:lib/io_fct.c  **** void toggle_pin(char port, char pin)
  60:lib/io_fct.c  **** {
 519               	18,Y+3
 520               		ldd r19,Y+4
 521               		cpi r18,100
 522 02dc DF93      		cpc r19,__zero_reg__
 523 02de CF93      		brge .L29
 524 02e0 00D0      		ldd r24,Y+3
 525 02e2 00D0      		ldd r25,Y+4
 526 02e4 CDB7      		cpi r24,97
 527 02e6 DEB7      		cpc r25,__zero_reg__
 528               		breq .L23
 529               		ldd r18,Y+3
 530 02e8 8983      		ldd r19,Y+4
 531 02ea 6A83      		cpi r18,98
  61:lib/io_fct.c  **** 	switch(port)
 532               	ro_reg__
 533               		breq .L24
 534 02ec 8981      		rjmp .L30
 535 02ee 282F      	.L29:
 536 02f0 30E0      		ldd r24,Y+3
 537 02f2 3C83      		ldd r25,Y+4
 538 02f4 2B83      		cpi r24,101
 539 02f6 8B81      		cpc r25,__zero_reg__
 540 02f8 9C81      		brne .+2
 541 02fa 8336      		rjmp .L27
 542 02fc 9105      		ldd r18,Y+3
 543 02fe 01F4      		ldd r19,Y+4
 544 0300 00C0      		cpi r18,101
 545 0302 2B81      		cpc r19,__zero_reg__
 546 0304 3C81      		brge .+2
 547 0306 2436      		rjmp .L26
 548 0308 3105      		ldd r24,Y+3
 549 030a 04F4      		ldd r25,Y+4
 550 030c 8B81      		cpi r24,102
 551 030e 9C81      		cpc r25,__zero_reg__
 552 0310 8136      		brne .+2
 553 0312 9105      		rjmp .L28
 554 0314 01F0      		rjmp .L30
 555 0316 2B81      	.L23:
 557 031a 2236      	.LM20:
 558 031c 3105      		ldi r26,lo8(59)
 559 031e 01F0      		ldi r27,hi8(59)
 560 0320 00C0      		ldi r30,lo8(59)
 561               		ldi r31,hi8(59)
 562 0322 8B81      		ld r24,Z
 563 0324 9C81      		mov r20,r24
 564 0326 8536      		ldd r24,Y+2
 565 0328 9105      		mov r18,r24
 566 032a 01F4      		ldi r19,lo8(0)
 567 032c 00C0      		ldi r24,lo8(1)
 568 032e 2B81      		ldi r25,hi8(1)
 569 0330 3C81      		mov r0,r18
 570 0332 2536      		rjmp 2f
 571 0334 3105      	1:	lsl r24
 572 0336 04F4      		rol r25
 573 0338 00C0      	2:	dec r0
 574 033a 8B81      		brpl 1b
 575 033c 9C81      		eor r24,r20
 576 033e 8636      		st X,r24
 577 0340 9105      		rjmp .L30
 578 0342 01F4      	.L24:
 580 0346 00C0      	.LM21:
 581               		ldi r26,lo8(56)
  62:lib/io_fct.c  **** 	{
  63:lib/io_fct.c  **** 		case ('a'):
  64:lib/io_fct.c  **** 			PORTA ^= (0x01 << pin);
 582               	
 583               		ld r24,Z
 584 0348 ABE3      		mov r20,r24
 585 034a B0E0      		ldd r24,Y+2
 586 034c EBE3      		mov r18,r24
 587 034e F0E0      		ldi r19,lo8(0)
 588 0350 8081      		ldi r24,lo8(1)
 589 0352 482F      		ldi r25,hi8(1)
 590 0354 8A81      		mov r0,r18
 591 0356 282F      		rjmp 2f
 592 0358 30E0      	1:	lsl r24
 593 035a 81E0      		rol r25
 594 035c 90E0      	2:	dec r0
 595 035e 022E      		brpl 1b
 596 0360 00C0      		eor r24,r20
 597 0362 880F      		st X,r24
 598 0364 991F      		rjmp .L30
 599 0366 0A94      	.L25:
 601 036a 8427      	.LM22:
 602 036c 8C93      		ldi r26,lo8(53)
 603 036e 00C0      		ldi r27,hi8(53)
 604               		ldi r30,lo8(53)
  65:lib/io_fct.c  **** 			break;
  66:lib/io_fct.c  **** 		case ('b'):
  67:lib/io_fct.c  **** 			PORTB ^= (0x01 << pin);
 605               	24,Z
 606               		mov r20,r24
 607 0370 A8E3      		ldd r24,Y+2
 608 0372 B0E0      		mov r18,r24
 609 0374 E8E3      		ldi r19,lo8(0)
 610 0376 F0E0      		ldi r24,lo8(1)
 611 0378 8081      		ldi r25,hi8(1)
 612 037a 482F      		mov r0,r18
 613 037c 8A81      		rjmp 2f
 614 037e 282F      	1:	lsl r24
 615 0380 30E0      		rol r25
 616 0382 81E0      	2:	dec r0
 617 0384 90E0      		brpl 1b
 618 0386 022E      		eor r24,r20
 619 0388 00C0      		st X,r24
 620 038a 880F      		rjmp .L30
 621 038c 991F      	.L26:
 623 0390 02F4      	.LM23:
 624 0392 8427      		ldi r26,lo8(50)
 625 0394 8C93      		ldi r27,hi8(50)
 626 0396 00C0      		ldi r30,lo8(50)
 627               		ldi r31,hi8(50)
  68:lib/io_fct.c  **** 			break;
  69:lib/io_fct.c  **** 		case ('c'):
  70:lib/io_fct.c  **** 			PORTC ^= (0x01 << pin);
 628               		ldd r24,Y+2
 629               		mov r18,r24
 630 0398 A5E3      		ldi r19,lo8(0)
 631 039a B0E0      		ldi r24,lo8(1)
 632 039c E5E3      		ldi r25,hi8(1)
 633 039e F0E0      		mov r0,r18
 634 03a0 8081      		rjmp 2f
 635 03a2 482F      	1:	lsl r24
 636 03a4 8A81      		rol r25
 637 03a6 282F      	2:	dec r0
 638 03a8 30E0      		brpl 1b
 639 03aa 81E0      		eor r24,r20
 640 03ac 90E0      		st X,r24
 641 03ae 022E      		rjmp .L30
 642 03b0 00C0      	.L27:
 644 03b4 991F      	.LM24:
 645 03b6 0A94      		ldi r26,lo8(35)
 646 03b8 02F4      		ldi r27,hi8(35)
 647 03ba 8427      		ldi r30,lo8(35)
 648 03bc 8C93      		ldi r31,hi8(35)
 649 03be 00C0      		ld r24,Z
 650               		mov r20,r24
  71:lib/io_fct.c  **** 			break;
  72:lib/io_fct.c  **** 		case ('d'):
  73:lib/io_fct.c  **** 			PORTD ^= (0x01 << pin);
 651               	24
 652               		ldi r19,lo8(0)
 653 03c0 A2E3      		ldi r24,lo8(1)
 654 03c2 B0E0      		ldi r25,hi8(1)
 655 03c4 E2E3      		mov r0,r18
 656 03c6 F0E0      		rjmp 2f
 657 03c8 8081      	1:	lsl r24
 658 03ca 482F      		rol r25
 659 03cc 8A81      	2:	dec r0
 660 03ce 282F      		brpl 1b
 661 03d0 30E0      		eor r24,r20
 662 03d2 81E0      		st X,r24
 663 03d4 90E0      		rjmp .L30
 664 03d6 022E      	.L28:
 666 03da 880F      	.LM25:
 667 03dc 991F      		ldi r26,lo8(98)
 668 03de 0A94      		ldi r27,hi8(98)
 669 03e0 02F4      		ldi r30,lo8(98)
 670 03e2 8427      		ldi r31,hi8(98)
 671 03e4 8C93      		ld r24,Z
 672 03e6 00C0      		mov r20,r24
 673               		ldd r24,Y+2
  74:lib/io_fct.c  **** 			break;
  75:lib/io_fct.c  **** 		case ('e'):
  76:lib/io_fct.c  **** 			PORTE ^= (0x01 << pin);
 674               	o8(0)
 675               		ldi r24,lo8(1)
 676 03e8 A3E2      		ldi r25,hi8(1)
 677 03ea B0E0      		mov r0,r18
 678 03ec E3E2      		rjmp 2f
 679 03ee F0E0      	1:	lsl r24
 680 03f0 8081      		rol r25
 681 03f2 482F      	2:	dec r0
 682 03f4 8A81      		brpl 1b
 683 03f6 282F      		eor r24,r20
 684 03f8 30E0      		st X,r24
 685 03fa 81E0      	.L30:
 686 03fc 90E0      	/* epilogue start */
 688 0400 00C0      	.LM26:
 689 0402 880F      		pop __tmp_reg__
 690 0404 991F      		pop __tmp_reg__
 691 0406 0A94      		pop __tmp_reg__
 692 0408 02F4      		pop __tmp_reg__
 693 040a 8427      		pop r28
 694 040c 8C93      		pop r29
 695 040e 00C0      		ret
  77:lib/io_fct.c  **** 			break;
  78:lib/io_fct.c  **** 		case ('f'):
  79:lib/io_fct.c  **** 			PORTF ^= (0x01 << pin);
 697               	_out_pin:F(0,15)",36,0,0,init_out_pin
 700 0412 B0E0      	.global	init_out_pin
 702 0416 F0E0      	init_out_pin:
 704 041a 482F      	.LM27:
 705 041c 8A81      	.LFBB4:
 706 041e 282F      		push r29
 707 0420 30E0      		push r28
 708 0422 81E0      		rcall .
 709 0424 90E0      		rcall .
 710 0426 022E      		in r28,__SP_L__
 711 0428 00C0      		in r29,__SP_H__
 712 042a 880F      	/* prologue: function */
 713 042c 991F      	/* frame size = 4 */
 714 042e 0A94      		std Y+1,r24
 715 0430 02F4      		std Y+2,r22
 717 0434 8C93      	.LM28:
 718               		ldd r24,Y+1
 719               		mov r18,r24
  80:lib/io_fct.c  **** 			break;
  81:lib/io_fct.c  **** 		default:
  82:lib/io_fct.c  **** 			break;
  83:lib/io_fct.c  **** 	}
  84:lib/io_fct.c  **** }
 720               	4,r19
 721               		std Y+3,r18
 722 0436 0F90      		ldd r24,Y+3
 723 0438 0F90      		ldd r25,Y+4
 724 043a 0F90      		cpi r24,99
 725 043c 0F90      		cpc r25,__zero_reg__
 726 043e CF91      		brne .+2
 727 0440 DF91      		rjmp .L35
 728 0442 0895      		ldd r18,Y+3
 729               		ldd r19,Y+4
 730               		cpi r18,100
 731               		cpc r19,__zero_reg__
 732               		brge .L39
 733               		ldd r24,Y+3
 734               		ldd r25,Y+4
 735               		cpi r24,97
 736               		cpc r25,__zero_reg__
  85:lib/io_fct.c  **** 
  86:lib/io_fct.c  **** void init_out_pin(char port, char pin)
  87:lib/io_fct.c  **** {
 737               	18,Y+3
 738               		ldd r19,Y+4
 739               		cpi r18,98
 740 0444 DF93      		cpc r19,__zero_reg__
 741 0446 CF93      		breq .L34
 742 0448 00D0      		rjmp .L40
 743 044a 00D0      	.L39:
 744 044c CDB7      		ldd r24,Y+3
 745 044e DEB7      		ldd r25,Y+4
 746               		cpi r24,101
 747               		cpc r25,__zero_reg__
 748 0450 8983      		brne .+2
 749 0452 6A83      		rjmp .L37
  88:lib/io_fct.c  **** 	switch(port)
 750               		ldd r19,Y+4
 751               		cpi r18,101
 752 0454 8981      		cpc r19,__zero_reg__
 753 0456 282F      		brge .+2
 754 0458 30E0      		rjmp .L36
 755 045a 3C83      		ldd r24,Y+3
 756 045c 2B83      		ldd r25,Y+4
 757 045e 8B81      		cpi r24,102
 758 0460 9C81      		cpc r25,__zero_reg__
 759 0462 8336      		brne .+2
 760 0464 9105      		rjmp .L38
 761 0466 01F4      		rjmp .L40
 762 0468 00C0      	.L33:
 764 046c 3C81      	.LM29:
 765 046e 2436      		ldi r26,lo8(58)
 766 0470 3105      		ldi r27,hi8(58)
 767 0472 04F4      		ldi r30,lo8(58)
 768 0474 8B81      		ldi r31,hi8(58)
 769 0476 9C81      		ld r24,Z
 770 0478 8136      		mov r20,r24
 771 047a 9105      		ldd r24,Y+2
 772 047c 01F0      		mov r18,r24
 773 047e 2B81      		ldi r19,lo8(0)
 774 0480 3C81      		ldi r24,lo8(1)
 775 0482 2236      		ldi r25,hi8(1)
 776 0484 3105      		mov r0,r18
 777 0486 01F0      		rjmp 2f
 778 0488 00C0      	1:	lsl r24
 779               		rol r25
 780 048a 8B81      	2:	dec r0
 781 048c 9C81      		brpl 1b
 782 048e 8536      		or r24,r20
 783 0490 9105      		st X,r24
 784 0492 01F4      		rjmp .L40
 785 0494 00C0      	.L34:
 787 0498 3C81      	.LM30:
 788 049a 2536      		ldi r26,lo8(55)
 789 049c 3105      		ldi r27,hi8(55)
 790 049e 04F4      		ldi r30,lo8(55)
 791 04a0 00C0      		ldi r31,hi8(55)
 792 04a2 8B81      		ld r24,Z
 793 04a4 9C81      		mov r20,r24
 794 04a6 8636      		ldd r24,Y+2
 795 04a8 9105      		mov r18,r24
 796 04aa 01F4      		ldi r19,lo8(0)
 797 04ac 00C0      		ldi r24,lo8(1)
 798 04ae 00C0      		ldi r25,hi8(1)
 799               		mov r0,r18
  89:lib/io_fct.c  **** 	{
  90:lib/io_fct.c  **** 		case ('a'):
  91:lib/io_fct.c  **** 			DDRA |= (0x01 << pin);
 800               	r r24,r20
 801               		st X,r24
 802 04b0 AAE3      		rjmp .L40
 803 04b2 B0E0      	.L35:
 805 04b6 F0E0      	.LM31:
 806 04b8 8081      		ldi r26,lo8(52)
 807 04ba 482F      		ldi r27,hi8(52)
 808 04bc 8A81      		ldi r30,lo8(52)
 809 04be 282F      		ldi r31,hi8(52)
 810 04c0 30E0      		ld r24,Z
 811 04c2 81E0      		mov r20,r24
 812 04c4 90E0      		ldd r24,Y+2
 813 04c6 022E      		mov r18,r24
 814 04c8 00C0      		ldi r19,lo8(0)
 815 04ca 880F      		ldi r24,lo8(1)
 816 04cc 991F      		ldi r25,hi8(1)
 817 04ce 0A94      		mov r0,r18
 818 04d0 02F4      		rjmp 2f
 819 04d2 842B      	1:	lsl r24
 820 04d4 8C93      		rol r25
 821 04d6 00C0      	2:	dec r0
 822               		brpl 1b
  92:lib/io_fct.c  **** 			break;
  93:lib/io_fct.c  **** 		case ('b'):
  94:lib/io_fct.c  **** 			DDRB |= (0x01 << pin);
 823               	rjmp .L40
 824               	.L36:
 826 04da B0E0      	.LM32:
 827 04dc E7E3      		ldi r26,lo8(49)
 828 04de F0E0      		ldi r27,hi8(49)
 829 04e0 8081      		ldi r30,lo8(49)
 830 04e2 482F      		ldi r31,hi8(49)
 831 04e4 8A81      		ld r24,Z
 832 04e6 282F      		mov r20,r24
 833 04e8 30E0      		ldd r24,Y+2
 834 04ea 81E0      		mov r18,r24
 835 04ec 90E0      		ldi r19,lo8(0)
 836 04ee 022E      		ldi r24,lo8(1)
 837 04f0 00C0      		ldi r25,hi8(1)
 838 04f2 880F      		mov r0,r18
 839 04f4 991F      		rjmp 2f
 840 04f6 0A94      	1:	lsl r24
 841 04f8 02F4      		rol r25
 842 04fa 842B      	2:	dec r0
 843 04fc 8C93      		brpl 1b
 844 04fe 00C0      		or r24,r20
 845               		st X,r24
  95:lib/io_fct.c  **** 			break;
  96:lib/io_fct.c  **** 		case ('c'):
  97:lib/io_fct.c  **** 			DDRC |= (0x01 << pin);
 846               	n	68,0,103,.LM33-.LFBB4
 847               	.LM33:
 848 0500 A4E3      		ldi r26,lo8(34)
 849 0502 B0E0      		ldi r27,hi8(34)
 850 0504 E4E3      		ldi r30,lo8(34)
 851 0506 F0E0      		ldi r31,hi8(34)
 852 0508 8081      		ld r24,Z
 853 050a 482F      		mov r20,r24
 854 050c 8A81      		ldd r24,Y+2
 855 050e 282F      		mov r18,r24
 856 0510 30E0      		ldi r19,lo8(0)
 857 0512 81E0      		ldi r24,lo8(1)
 858 0514 90E0      		ldi r25,hi8(1)
 859 0516 022E      		mov r0,r18
 860 0518 00C0      		rjmp 2f
 861 051a 880F      	1:	lsl r24
 862 051c 991F      		rol r25
 863 051e 0A94      	2:	dec r0
 864 0520 02F4      		brpl 1b
 865 0522 842B      		or r24,r20
 866 0524 8C93      		st X,r24
 867 0526 00C0      		rjmp .L40
 868               	.L38:
  98:lib/io_fct.c  **** 			break;
  99:lib/io_fct.c  **** 		case ('d'):
 100:lib/io_fct.c  **** 			DDRD |= (0x01 << pin);
 869               	.LFBB4
 870               	.LM34:
 871 0528 A1E3      		ldi r26,lo8(97)
 872 052a B0E0      		ldi r27,hi8(97)
 873 052c E1E3      		ldi r30,lo8(97)
 874 052e F0E0      		ldi r31,hi8(97)
 875 0530 8081      		ld r24,Z
 876 0532 482F      		mov r20,r24
 877 0534 8A81      		ldd r24,Y+2
 878 0536 282F      		mov r18,r24
 879 0538 30E0      		ldi r19,lo8(0)
 880 053a 81E0      		ldi r24,lo8(1)
 881 053c 90E0      		ldi r25,hi8(1)
 882 053e 022E      		mov r0,r18
 883 0540 00C0      		rjmp 2f
 884 0542 880F      	1:	lsl r24
 885 0544 991F      		rol r25
 886 0546 0A94      	2:	dec r0
 887 0548 02F4      		brpl 1b
 888 054a 842B      		or r24,r20
 889 054c 8C93      		st X,r24
 890 054e 00C0      	.L40:
 891               	/* epilogue start */
 101:lib/io_fct.c  **** 			break;
 102:lib/io_fct.c  **** 		case ('e'):
 103:lib/io_fct.c  **** 			DDRE |= (0x01 << pin);
 892               	.LFBB4
 893               	.LM35:
 894 0550 A2E2      		pop __tmp_reg__
 895 0552 B0E0      		pop __tmp_reg__
 896 0554 E2E2      		pop __tmp_reg__
 897 0556 F0E0      		pop __tmp_reg__
 898 0558 8081      		pop r28
 899 055a 482F      		pop r29
 900 055c 8A81      		ret
 902 0560 30E0      	.Lscope4:
 906 0568 00C0      	.global	init_in_pin
 908 056c 991F      	init_in_pin:
 910 0570 02F4      	.LM36:
 911 0572 842B      	.LFBB5:
 912 0574 8C93      		push r29
 913 0576 00C0      		push r28
 914               		rcall .
 104:lib/io_fct.c  **** 			break;
 105:lib/io_fct.c  **** 		case ('f'):
 106:lib/io_fct.c  **** 			DDRF |= (0x01 << pin);
 915               	__
 916               		in r29,__SP_H__
 917 0578 A1E6      	/* prologue: function */
 918 057a B0E0      	/* frame size = 4 */
 919 057c E1E6      		std Y+1,r24
 920 057e F0E0      		std Y+2,r22
 922 0582 482F      	.LM37:
 923 0584 8A81      		ldd r24,Y+1
 924 0586 282F      		mov r18,r24
 925 0588 30E0      		ldi r19,lo8(0)
 926 058a 81E0      		std Y+4,r19
 927 058c 90E0      		std Y+3,r18
 928 058e 022E      		ldd r24,Y+3
 929 0590 00C0      		ldd r25,Y+4
 930 0592 880F      		cpi r24,99
 931 0594 991F      		cpc r25,__zero_reg__
 932 0596 0A94      		brne .+2
 933 0598 02F4      		rjmp .L45
 934 059a 842B      		ldd r18,Y+3
 935 059c 8C93      		ldd r19,Y+4
 936               		cpi r18,100
 937               		cpc r19,__zero_reg__
 107:lib/io_fct.c  **** 			break;
 108:lib/io_fct.c  **** 		default:
 109:lib/io_fct.c  **** 			break;
 110:lib/io_fct.c  **** 	}
 111:lib/io_fct.c  **** }
 938               	
 939               		ldd r25,Y+4
 940 059e 0F90      		cpi r24,97
 941 05a0 0F90      		cpc r25,__zero_reg__
 942 05a2 0F90      		breq .L43
 943 05a4 0F90      		ldd r18,Y+3
 944 05a6 CF91      		ldd r19,Y+4
 945 05a8 DF91      		cpi r18,98
 946 05aa 0895      		cpc r19,__zero_reg__
 947               		breq .L44
 948               		rjmp .L50
 949               	.L49:
 950               		ldd r24,Y+3
 951               		ldd r25,Y+4
 952               		cpi r24,101
 953               		cpc r25,__zero_reg__
 954               		brne .+2
 112:lib/io_fct.c  **** 
 113:lib/io_fct.c  **** void init_in_pin(char port, char pin)
 114:lib/io_fct.c  **** {
 955               	r18,Y+3
 956               		ldd r19,Y+4
 957               		cpi r18,101
 958 05ac DF93      		cpc r19,__zero_reg__
 959 05ae CF93      		brge .+2
 960 05b0 00D0      		rjmp .L46
 961 05b2 00D0      		ldd r24,Y+3
 962 05b4 CDB7      		ldd r25,Y+4
 963 05b6 DEB7      		cpi r24,102
 964               		cpc r25,__zero_reg__
 965               		brne .+2
 966 05b8 8983      		rjmp .L48
 967 05ba 6A83      		rjmp .L50
 115:lib/io_fct.c  **** 	switch(port)
 968               		68,0,118,.LM38-.LFBB5
 969               	.LM38:
 970 05bc 8981      		ldi r26,lo8(58)
 971 05be 282F      		ldi r27,hi8(58)
 972 05c0 30E0      		ldi r30,lo8(58)
 973 05c2 3C83      		ldi r31,hi8(58)
 974 05c4 2B83      		ld r24,Z
 975 05c6 8B81      		mov r20,r24
 976 05c8 9C81      		ldd r24,Y+2
 977 05ca 8336      		mov r18,r24
 978 05cc 9105      		ldi r19,lo8(0)
 979 05ce 01F4      		ldi r24,lo8(1)
 980 05d0 00C0      		ldi r25,hi8(1)
 981 05d2 2B81      		mov r0,r18
 982 05d4 3C81      		rjmp 2f
 983 05d6 2436      	1:	lsl r24
 984 05d8 3105      		rol r25
 985 05da 04F4      	2:	dec r0
 986 05dc 8B81      		brpl 1b
 987 05de 9C81      		com r24
 988 05e0 8136      		and r24,r20
 989 05e2 9105      		st X,r24
 990 05e4 01F0      		rjmp .L50
 991 05e6 2B81      	.L44:
 993 05ea 2236      	.LM39:
 994 05ec 3105      		ldi r26,lo8(55)
 995 05ee 01F0      		ldi r27,hi8(55)
 996 05f0 00C0      		ldi r30,lo8(55)
 997               		ldi r31,hi8(55)
 998 05f2 8B81      		ld r24,Z
 999 05f4 9C81      		mov r20,r24
 1000 05f6 8536      		ldd r24,Y+2
 1001 05f8 9105      		mov r18,r24
 1002 05fa 01F4      		ldi r19,lo8(0)
 1003 05fc 00C0      		ldi r24,lo8(1)
 1004 05fe 2B81      		ldi r25,hi8(1)
 1005 0600 3C81      		mov r0,r18
 1006 0602 2536      		rjmp 2f
 1007 0604 3105      	1:	lsl r24
 1008 0606 04F4      		rol r25
 1009 0608 00C0      	2:	dec r0
 1010 060a 8B81      		brpl 1b
 1011 060c 9C81      		com r24
 1012 060e 8636      		and r24,r20
 1013 0610 9105      		st X,r24
 1014 0612 01F4      		rjmp .L50
 1015 0614 00C0      	.L45:
 1017               	.LM40:
 116:lib/io_fct.c  **** 	{
 117:lib/io_fct.c  **** 		case ('a'):
 118:lib/io_fct.c  **** 			DDRA &= ~(0x01 << pin);
 1018               	
 1019               		ldi r31,hi8(52)
 1020 0618 AAE3      		ld r24,Z
 1021 061a B0E0      		mov r20,r24
 1022 061c EAE3      		ldd r24,Y+2
 1023 061e F0E0      		mov r18,r24
 1024 0620 8081      		ldi r19,lo8(0)
 1025 0622 482F      		ldi r24,lo8(1)
 1026 0624 8A81      		ldi r25,hi8(1)
 1027 0626 282F      		mov r0,r18
 1028 0628 30E0      		rjmp 2f
 1029 062a 81E0      	1:	lsl r24
 1030 062c 90E0      		rol r25
 1031 062e 022E      	2:	dec r0
 1032 0630 00C0      		brpl 1b
 1033 0632 880F      		com r24
 1034 0634 991F      		and r24,r20
 1035 0636 0A94      		st X,r24
 1036 0638 02F4      		rjmp .L50
 1037 063a 8095      	.L46:
 1039 063e 8C93      	.LM41:
 1040 0640 00C0      		ldi r26,lo8(49)
 1041               		ldi r27,hi8(49)
 119:lib/io_fct.c  **** 			break;
 120:lib/io_fct.c  **** 		case ('b'):
 121:lib/io_fct.c  **** 			DDRB &= ~(0x01 << pin);
 1042               	31,hi8(49)
 1043               		ld r24,Z
 1044 0642 A7E3      		mov r20,r24
 1045 0644 B0E0      		ldd r24,Y+2
 1046 0646 E7E3      		mov r18,r24
 1047 0648 F0E0      		ldi r19,lo8(0)
 1048 064a 8081      		ldi r24,lo8(1)
 1049 064c 482F      		ldi r25,hi8(1)
 1050 064e 8A81      		mov r0,r18
 1051 0650 282F      		rjmp 2f
 1052 0652 30E0      	1:	lsl r24
 1053 0654 81E0      		rol r25
 1054 0656 90E0      	2:	dec r0
 1055 0658 022E      		brpl 1b
 1056 065a 00C0      		com r24
 1057 065c 880F      		and r24,r20
 1058 065e 991F      		st X,r24
 1059 0660 0A94      		rjmp .L50
 1060 0662 02F4      	.L47:
 1062 0666 8423      	.LM42:
 1063 0668 8C93      		ldi r26,lo8(34)
 1064 066a 00C0      		ldi r27,hi8(34)
 1065               		ldi r30,lo8(34)
 122:lib/io_fct.c  **** 			break;
 123:lib/io_fct.c  **** 		case ('c'):
 124:lib/io_fct.c  **** 			DDRC &= ~(0x01 << pin);
 1066               	,Z
 1067               		mov r20,r24
 1068 066c A4E3      		ldd r24,Y+2
 1069 066e B0E0      		mov r18,r24
 1070 0670 E4E3      		ldi r19,lo8(0)
 1071 0672 F0E0      		ldi r24,lo8(1)
 1072 0674 8081      		ldi r25,hi8(1)
 1073 0676 482F      		mov r0,r18
 1074 0678 8A81      		rjmp 2f
 1075 067a 282F      	1:	lsl r24
 1076 067c 30E0      		rol r25
 1077 067e 81E0      	2:	dec r0
 1078 0680 90E0      		brpl 1b
 1079 0682 022E      		com r24
 1080 0684 00C0      		and r24,r20
 1081 0686 880F      		st X,r24
 1082 0688 991F      		rjmp .L50
 1083 068a 0A94      	.L48:
 1085 068e 8095      	.LM43:
 1086 0690 8423      		ldi r26,lo8(97)
 1087 0692 8C93      		ldi r27,hi8(97)
 1088 0694 00C0      		ldi r30,lo8(97)
 1089               		ldi r31,hi8(97)
 125:lib/io_fct.c  **** 			break;
 126:lib/io_fct.c  **** 		case ('d'):
 127:lib/io_fct.c  **** 			DDRD &= ~(0x01 << pin);
 1090               	ldd r24,Y+2
 1091               		mov r18,r24
 1092 0696 A1E3      		ldi r19,lo8(0)
 1093 0698 B0E0      		ldi r24,lo8(1)
 1094 069a E1E3      		ldi r25,hi8(1)
 1095 069c F0E0      		mov r0,r18
 1096 069e 8081      		rjmp 2f
 1097 06a0 482F      	1:	lsl r24
 1098 06a2 8A81      		rol r25
 1099 06a4 282F      	2:	dec r0
 1100 06a6 30E0      		brpl 1b
 1101 06a8 81E0      		com r24
 1102 06aa 90E0      		and r24,r20
 1103 06ac 022E      		st X,r24
 1104 06ae 00C0      	.L50:
 1105 06b0 880F      	/* epilogue start */
 1107 06b4 0A94      	.LM44:
 1108 06b6 02F4      		pop __tmp_reg__
 1109 06b8 8095      		pop __tmp_reg__
 1110 06ba 8423      		pop __tmp_reg__
 1111 06bc 8C93      		pop __tmp_reg__
 1112 06be 00C0      		pop r28
 1113               		pop r29
 128:lib/io_fct.c  **** 			break;
 129:lib/io_fct.c  **** 		case ('e'):
 130:lib/io_fct.c  **** 			DDRE &= ~(0x01 << pin);
 1114               	 .-init_in_pin
 1115               	.Lscope5:
 1118 06c4 E2E2      	.global	init_out_port
 1120 06c8 8081      	init_out_port:
 1122 06cc 8A81      	.LM45:
 1123 06ce 282F      	.LFBB6:
 1124 06d0 30E0      		push r29
 1125 06d2 81E0      		push r28
 1126 06d4 90E0      		in r28,__SP_L__
 1127 06d6 022E      		in r29,__SP_H__
 1128 06d8 00C0      		sbiw r28,9
 1129 06da 880F      		in __tmp_reg__,__SREG__
 1130 06dc 991F      		cli
 1131 06de 0A94      		out __SP_H__,r29
 1132 06e0 02F4      		out __SREG__,__tmp_reg__
 1133 06e2 8095      		out __SP_L__,r28
 1134 06e4 8423      	/* prologue: function */
 1135 06e6 8C93      	/* frame size = 9 */
 1136 06e8 00C0      		std Y+1,r24
 131:lib/io_fct.c  **** 			break;
 132:lib/io_fct.c  **** 		case ('f'):
 133:lib/io_fct.c  **** 			DDRF &= ~(0x01 << pin);
 1138               	 r18,r24
 1139               		ldi r19,lo8(0)
 1140 06ea A1E6      		std Y+9,r19
 1141 06ec B0E0      		std Y+8,r18
 1142 06ee E1E6      		ldd r24,Y+8
 1143 06f0 F0E0      		ldd r25,Y+9
 1144 06f2 8081      		cpi r24,99
 1145 06f4 482F      		cpc r25,__zero_reg__
 1146 06f6 8A81      		breq .L55
 1147 06f8 282F      		ldd r18,Y+8
 1148 06fa 30E0      		ldd r19,Y+9
 1149 06fc 81E0      		cpi r18,100
 1150 06fe 90E0      		cpc r19,__zero_reg__
 1151 0700 022E      		brge .L59
 1152 0702 00C0      		ldd r24,Y+8
 1153 0704 880F      		ldd r25,Y+9
 1154 0706 991F      		cpi r24,97
 1155 0708 0A94      		cpc r25,__zero_reg__
 1156 070a 02F4      		breq .L53
 1157 070c 8095      		ldd r18,Y+8
 1158 070e 8423      		ldd r19,Y+9
 1159 0710 8C93      		cpi r18,98
 1160               		cpc r19,__zero_reg__
 1161               		breq .L54
 134:lib/io_fct.c  **** 			break;
 135:lib/io_fct.c  **** 		default:
 136:lib/io_fct.c  **** 			break;
 137:lib/io_fct.c  **** 	}
 138:lib/io_fct.c  **** }
 1162               	4,Y+8
 1163               		ldd r25,Y+9
 1164 0712 0F90      		cpi r24,101
 1165 0714 0F90      		cpc r25,__zero_reg__
 1166 0716 0F90      		breq .L57
 1167 0718 0F90      		ldd r18,Y+8
 1168 071a CF91      		ldd r19,Y+9
 1169 071c DF91      		cpi r18,101
 1170 071e 0895      		cpc r19,__zero_reg__
 1171               		brlt .L56
 1172               		ldd r24,Y+8
 1173               		ldd r25,Y+9
 1174               		cpi r24,102
 1175               		cpc r25,__zero_reg__
 1176               		breq .L58
 1177               		rjmp .L60
 139:lib/io_fct.c  **** 
 140:lib/io_fct.c  **** void init_out_port(char port)
 141:lib/io_fct.c  **** {
 1178               	,0,145,.LM47-.LFBB6
 1179               	.LM47:
 1180               		ldi r30,lo8(58)
 1181 0720 DF93      		ldi r31,hi8(58)
 1182 0722 CF93      		ld r25,Z
 1183 0724 CDB7      		ldi r30,lo8(58)
 1184 0726 DEB7      		ldi r31,hi8(58)
 1185 0728 2997      		ldi r24,lo8(-1)
 1186 072a 0FB6      		st Z,r24
 1187 072c F894      		rjmp .L60
 1188 072e DEBF      	.L54:
 1190 0732 CDBF      	.LM48:
 1191               		ldi r30,lo8(55)
 1192               		ldi r31,hi8(55)
 1193 0734 8983      		ld r18,Z
 142:lib/io_fct.c  **** 	switch(port)
 1194               	
 1195               		ldi r31,hi8(55)
 1196 0736 8981      		ldi r24,lo8(-1)
 1197 0738 282F      		st Z,r24
 1198 073a 30E0      		rjmp .L60
 1199 073c 3987      	.L55:
 1201 0740 8885      	.LM49:
 1202 0742 9985      		ldi r30,lo8(52)
 1203 0744 8336      		ldi r31,hi8(52)
 1204 0746 9105      		ld r19,Z
 1205 0748 01F0      		ldi r30,lo8(52)
 1206 074a 2885      		ldi r31,hi8(52)
 1207 074c 3985      		ldi r24,lo8(-1)
 1208 074e 2436      		st Z,r24
 1209 0750 3105      		rjmp .L60
 1210 0752 04F4      	.L56:
 1212 0756 9985      	.LM50:
 1213 0758 8136      		ldi r30,lo8(49)
 1214 075a 9105      		ldi r31,hi8(49)
 1215 075c 01F0      		ld r24,Z
 1216 075e 2885      		ldi r30,lo8(49)
 1217 0760 3985      		ldi r31,hi8(49)
 1218 0762 2236      		ldi r24,lo8(-1)
 1219 0764 3105      		st Z,r24
 1220 0766 01F0      		rjmp .L60
 1221 0768 00C0      	.L57:
 1223 076a 8885      	.LM51:
 1224 076c 9985      		ldi r30,lo8(34)
 1225 076e 8536      		ldi r31,hi8(34)
 1226 0770 9105      		ld r25,Z
 1227 0772 01F0      		ldi r30,lo8(34)
 1228 0774 2885      		ldi r31,hi8(34)
 1229 0776 3985      		ldi r24,lo8(-1)
 1230 0778 2536      		st Z,r24
 1231 077a 3105      		rjmp .L60
 1232 077c 04F0      	.L58:
 1234 0780 9985      	.LM52:
 1235 0782 8636      		ldi r30,lo8(97)
 1236 0784 9105      		ldi r31,hi8(97)
 1237 0786 01F0      		ld r18,Z
 1238 0788 00C0      		ldi r30,lo8(97)
 1239               		ldi r31,hi8(97)
 143:lib/io_fct.c  **** 	{
 144:lib/io_fct.c  **** 		case ('a'):
 145:lib/io_fct.c  **** 			DDRA |= 0xff;
 1240               	start */
 1242 078a EAE3      	.LM53:
 1243 078c F0E0      		adiw r28,9
 1244 078e 9081      		in __tmp_reg__,__SREG__
 1245 0790 EAE3      		cli
 1246 0792 F0E0      		out __SP_H__,r29
 1247 0794 8FEF      		out __SREG__,__tmp_reg__
 1248 0796 8083      		out __SP_L__,r28
 1249 0798 00C0      		pop r28
 1250               		pop r29
 146:lib/io_fct.c  **** 			break;
 147:lib/io_fct.c  **** 		case ('b'):
 148:lib/io_fct.c  **** 			DDRB |= 0xff;
 1251               		init_out_port, .-init_out_port
 1252               	.Lscope6:
 1255 079e 2081      	.global	init_in_port
 1257 07a2 F0E0      	init_in_port:
 1259 07a6 8083      	.LM54:
 1260 07a8 00C0      	.LFBB7:
 1261               		push r29
 149:lib/io_fct.c  **** 			break;
 150:lib/io_fct.c  **** 		case ('c'):
 151:lib/io_fct.c  **** 			DDRC |= 0xff;
 1262               	in r28,__SP_L__
 1263               		in r29,__SP_H__
 1264 07aa E4E3      		sbiw r28,9
 1265 07ac F0E0      		in __tmp_reg__,__SREG__
 1266 07ae 3081      		cli
 1267 07b0 E4E3      		out __SP_H__,r29
 1268 07b2 F0E0      		out __SREG__,__tmp_reg__
 1269 07b4 8FEF      		out __SP_L__,r28
 1270 07b6 8083      	/* prologue: function */
 1271 07b8 00C0      	/* frame size = 9 */
 1272               		std Y+1,r24
 152:lib/io_fct.c  **** 			break;
 153:lib/io_fct.c  **** 		case ('d'):
 154:lib/io_fct.c  **** 			DDRD |= 0xff;
 1273               	0,169,.LM55-.LFBB7
 1274               	.LM55:
 1275 07ba E1E3      		ldd r24,Y+1
 1276 07bc F0E0      		mov r18,r24
 1277 07be 8081      		ldi r19,lo8(0)
 1278 07c0 E1E3      		std Y+9,r19
 1279 07c2 F0E0      		std Y+8,r18
 1280 07c4 8FEF      		ldd r24,Y+8
 1281 07c6 8083      		ldd r25,Y+9
 1282 07c8 00C0      		cpi r24,99
 1283               		cpc r25,__zero_reg__
 155:lib/io_fct.c  **** 			break;
 156:lib/io_fct.c  **** 		case ('e'):
 157:lib/io_fct.c  **** 			DDRE |= 0xff;
 1284               		ldd r18,Y+8
 1285               		ldd r19,Y+9
 1286 07ca E2E2      		cpi r18,100
 1287 07cc F0E0      		cpc r19,__zero_reg__
 1288 07ce 9081      		brge .L69
 1289 07d0 E2E2      		ldd r24,Y+8
 1290 07d2 F0E0      		ldd r25,Y+9
 1291 07d4 8FEF      		cpi r24,97
 1292 07d6 8083      		cpc r25,__zero_reg__
 1293 07d8 00C0      		breq .L63
 1294               		ldd r18,Y+8
 158:lib/io_fct.c  **** 			break;
 159:lib/io_fct.c  **** 		case ('f'):
 160:lib/io_fct.c  **** 			DDRF |= 0xff;
 1295               	9
 1296               		cpi r18,98
 1297 07da E1E6      		cpc r19,__zero_reg__
 1298 07dc F0E0      		breq .L64
 1299 07de 2081      		rjmp .L70
 1300 07e0 E1E6      	.L69:
 1301 07e2 F0E0      		ldd r24,Y+8
 1302 07e4 8FEF      		ldd r25,Y+9
 1303 07e6 8083      		cpi r24,101
 1304               		cpc r25,__zero_reg__
 1305               		breq .L67
 161:lib/io_fct.c  **** 			break;
 162:lib/io_fct.c  **** 		default:
 163:lib/io_fct.c  **** 			break;
 164:lib/io_fct.c  **** 	}
 165:lib/io_fct.c  **** }
 1306               	8
 1307               		ldd r19,Y+9
 1308 07e8 2996      		cpi r18,101
 1309 07ea 0FB6      		cpc r19,__zero_reg__
 1310 07ec F894      		brlt .L66
 1311 07ee DEBF      		ldd r24,Y+8
 1312 07f0 0FBE      		ldd r25,Y+9
 1313 07f2 CDBF      		cpi r24,102
 1314 07f4 CF91      		cpc r25,__zero_reg__
 1315 07f6 DF91      		breq .L68
 1316 07f8 0895      		rjmp .L70
 1317               	.L63:
 1319               	.LM56:
 1320               		ldi r30,lo8(58)
 1321               		ldi r31,hi8(58)
 1322               		ld r25,Z
 1323               		ldi r30,lo8(58)
 166:lib/io_fct.c  **** 
 167:lib/io_fct.c  **** void init_in_port(char port)
 168:lib/io_fct.c  **** {
 1324               	st Z,__zero_reg__
 1325               		rjmp .L70
 1326               	.L64:
 1328 07fc CF93      	.LM57:
 1329 07fe CDB7      		ldi r30,lo8(55)
 1330 0800 DEB7      		ldi r31,hi8(55)
 1331 0802 2997      		ld r18,Z
 1332 0804 0FB6      		ldi r30,lo8(55)
 1333 0806 F894      		ldi r31,hi8(55)
 1334 0808 DEBF      		st Z,__zero_reg__
 1335 080a 0FBE      		rjmp .L70
 1336 080c CDBF      	.L65:
 1338               	.LM58:
 1339 080e 8983      		ldi r30,lo8(52)
 169:lib/io_fct.c  **** 	switch(port)
 1340               	
 1341               		ld r19,Z
 1342 0810 8981      		ldi r30,lo8(52)
 1343 0812 282F      		ldi r31,hi8(52)
 1344 0814 30E0      		st Z,__zero_reg__
 1345 0816 3987      		rjmp .L70
 1346 0818 2887      	.L66:
 1348 081c 9985      	.LM59:
 1349 081e 8336      		ldi r30,lo8(49)
 1350 0820 9105      		ldi r31,hi8(49)
 1351 0822 01F0      		ld r24,Z
 1352 0824 2885      		ldi r30,lo8(49)
 1353 0826 3985      		ldi r31,hi8(49)
 1354 0828 2436      		st Z,__zero_reg__
 1355 082a 3105      		rjmp .L70
 1356 082c 04F4      	.L67:
 1358 0830 9985      	.LM60:
 1359 0832 8136      		ldi r30,lo8(34)
 1360 0834 9105      		ldi r31,hi8(34)
 1361 0836 01F0      		ld r25,Z
 1362 0838 2885      		ldi r30,lo8(34)
 1363 083a 3985      		ldi r31,hi8(34)
 1364 083c 2236      		st Z,__zero_reg__
 1365 083e 3105      		rjmp .L70
 1366 0840 01F0      	.L68:
 1368               	.LM61:
 1369 0844 8885      		ldi r30,lo8(97)
 1370 0846 9985      		ldi r31,hi8(97)
 1371 0848 8536      		ld r18,Z
 1372 084a 9105      		ldi r30,lo8(97)
 1373 084c 01F0      		ldi r31,hi8(97)
 1374 084e 2885      		st Z,__zero_reg__
 1375 0850 3985      	.L70:
 1376 0852 2536      	/* epilogue start */
 1378 0856 04F0      	.LM62:
 1379 0858 8885      		adiw r28,9
 1380 085a 9985      		in __tmp_reg__,__SREG__
 1381 085c 8636      		cli
 1382 085e 9105      		out __SP_H__,r29
 1383 0860 01F0      		out __SREG__,__tmp_reg__
 1384 0862 00C0      		out __SP_L__,r28
 1385               		pop r28
 170:lib/io_fct.c  **** 	{
 171:lib/io_fct.c  **** 		case ('a'):
 172:lib/io_fct.c  **** 			DDRA &= 0x00;
 1386               	port
 1387               	.Lscope7:
 1390 0868 9081      	.global	USART_Init
 1392 086c F0E0      	USART_Init:
 1394 0870 00C0      	.LM63:
 1395               	.LFBB8:
 173:lib/io_fct.c  **** 			break;
 174:lib/io_fct.c  **** 		case ('b'):
 175:lib/io_fct.c  **** 			DDRB &= 0x00;
 1396               		push r28
 1397               		rcall .
 1398 0872 E7E3      		in r28,__SP_L__
 1399 0874 F0E0      		in r29,__SP_H__
 1400 0876 2081      	/* prologue: function */
 1401 0878 E7E3      	/* frame size = 2 */
 1402 087a F0E0      		std Y+2,r25
 1403 087c 1082      		std Y+1,r24
 1405               	.LM64:
 176:lib/io_fct.c  **** 			break;
 177:lib/io_fct.c  **** 		case ('c'):
 178:lib/io_fct.c  **** 			DDRC &= 0x00;
 1406               	o8(144)
 1407               		ldi r31,hi8(144)
 1408 0880 E4E3      		ldd r24,Y+1
 1409 0882 F0E0      		ldd r25,Y+2
 1410 0884 3081      		mov r24,r25
 1411 0886 E4E3      		clr r25
 1412 0888 F0E0      		st Z,r24
 1414 088c 00C0      	.LM65:
 1415               		ldi r30,lo8(41)
 179:lib/io_fct.c  **** 			break;
 180:lib/io_fct.c  **** 		case ('d'):
 181:lib/io_fct.c  **** 			DDRD &= 0x00;
 1416               	i8(41)
 1417               		ldd r24,Y+1
 1418 088e E1E3      		st Z,r24
 1420 0892 8081      	.LM66:
 1421 0894 E1E3      		ldi r30,lo8(42)
 1422 0896 F0E0      		ldi r31,hi8(42)
 1423 0898 1082      		ldi r24,lo8(24)
 1424 089a 00C0      		st Z,r24
 182:lib/io_fct.c  **** 			break;
 183:lib/io_fct.c  **** 		case ('e'):
 184:lib/io_fct.c  **** 			DDRE &= 0x00;
 1426               	i r30,lo8(149)
 1427               		ldi r31,hi8(149)
 1428 089c E2E2      		ldi r24,lo8(14)
 1429 089e F0E0      		st Z,r24
 1430 08a0 9081      	/* epilogue start */
 1432 08a4 F0E0      	.LM68:
 1433 08a6 1082      		pop __tmp_reg__
 1434 08a8 00C0      		pop __tmp_reg__
 1435               		pop r28
 185:lib/io_fct.c  **** 			break;
 186:lib/io_fct.c  **** 		case ('f'):
 187:lib/io_fct.c  **** 			DDRF &= 0x00;
 1436               	ret
 1438 08aa E1E6      	.Lscope8:
 1440 08ae 2081      	.global	init_serial
 1442 08b2 F0E0      	init_serial:
 1444               	.LM69:
 1445               	.LFBB9:
 188:lib/io_fct.c  **** 			break;
 189:lib/io_fct.c  **** 		default:
 190:lib/io_fct.c  **** 			break;
 191:lib/io_fct.c  **** 	}
 192:lib/io_fct.c  **** }
 1446               		push r28
 1447               		in r28,__SP_L__
 1448 08b6 2996      		in r29,__SP_H__
 1449 08b8 0FB6      	/* prologue: function */
 1450 08ba F894      	/* frame size = 0 */
 1452 08be 0FBE      	.LM70:
 1453 08c0 CDBF      		ldi r30,lo8(43)
 1454 08c2 CF91      		ldi r31,hi8(43)
 1455 08c4 DF91      		st Z,__zero_reg__
 1457               	.LM71:
 1458               		ldi r30,lo8(42)
 1459               		ldi r31,hi8(42)
 1460               		ldi r24,lo8(24)
 1461               		st Z,r24
 1463               	.LM72:
 193:lib/io_fct.c  **** 
 194:lib/io_fct.c  **** void USART_Init( unsigned int baud )
 195:lib/io_fct.c  **** {
 1464               		ldi r31,hi8(149)
 1465               		ldi r24,lo8(-122)
 1466               		st Z,r24
 1468 08ca CF93      	.LM73:
 1469 08cc 00D0      		ldi r30,lo8(144)
 1470 08ce CDB7      		ldi r31,hi8(144)
 1471 08d0 DEB7      		st Z,__zero_reg__
 1473               	.LM74:
 1474 08d2 9A83      		ldi r30,lo8(41)
 1475 08d4 8983      		ldi r31,hi8(41)
 196:lib/io_fct.c  **** 	/* Set baud rate */
 197:lib/io_fct.c  **** 	UBRR0H = (unsigned char)(baud>>8);
 1476               	(8)
 1477               		st Z,r24
 1478 08d6 E0E9      	/* epilogue start */
 1480 08da 8981      	.LM75:
 1481 08dc 9A81      		pop r28
 1482 08de 892F      		pop r29
 1483 08e0 9927      		ret
 198:lib/io_fct.c  **** 	UBRR0L = (unsigned char)baud;
 1485               	
 1487 08e4 E9E2      	.global	init_in_ana
 1489 08e8 8981      	init_in_ana:
 199:lib/io_fct.c  **** 	/* Enable receiver and transmitter */
 200:lib/io_fct.c  **** 	UCSR0B = (1<<RXEN)|(1<<TXEN);
 1491               	:
 1492               	.LFBB10:
 1493 08ec EAE2      		push r29
 1494 08ee F0E0      		push r28
 1495 08f0 88E1      		in r28,__SP_L__
 1496 08f2 8083      		in r29,__SP_H__
 201:lib/io_fct.c  **** 	/* Set frame format: 8data, 2stop bit */
 202:lib/io_fct.c  **** 	UCSR0C = (1<<USBS)|(3<<UCSZ0);
 1497               	logue: function */
 1498               	/* frame size = 0 */
 1500 08f6 F0E0      	.LM77:
 1501 08f8 8EE0      		ldi r30,lo8(39)
 1502 08fa 8083      		ldi r31,hi8(39)
 1503               		ldi r24,lo8(64)
 203:lib/io_fct.c  **** }
 1504               	24
 1506 08fc 0F90      	.LM78:
 1507 08fe 0F90      		ldi r30,lo8(38)
 1508 0900 CF91      		ldi r31,hi8(38)
 1509 0902 DF91      		ldi r24,lo8(-98)
 1510 0904 0895      		st Z,r24
 1512               	.LM79:
 1513               		ldi r26,lo8(38)
 1514               		ldi r27,hi8(38)
 1515               		ldi r30,lo8(38)
 1516               		ldi r31,hi8(38)
 204:lib/io_fct.c  **** 
 205:lib/io_fct.c  **** void init_serial(void)
 206:lib/io_fct.c  **** {
 1517               	i r24,lo8(96)
 1518               		st X,r24
 1519               	/* epilogue start */
 1521 0908 CF93      	.LM80:
 1522 090a CDB7      		pop r28
 1523 090c DEB7      		pop r29
 1524               		ret
 207:lib/io_fct.c  **** //	UBRR0H = 0;		//UBRR to 15 for 115200bps with 20Mhz
 208:lib/io_fct.c  **** //	UBRR0L = 21;
 209:lib/io_fct.c  **** 
 210:lib/io_fct.c  **** 	UCSR0A=0x00;
 1526               	:
 1530 0912 1082      	.global	get_in_pin
 211:lib/io_fct.c  **** 	UCSR0B=0x18;
 1531               	e	get_in_pin, @function
 1532               	get_in_pin:
 1534 0916 F0E0      	.LM81:
 1535 0918 88E1      	.LFBB11:
 1536 091a 8083      		push r29
 212:lib/io_fct.c  **** 	UCSR0C=0x86;
 1537               	r28
 1538               		rcall .
 1539 091c E5E9      		rcall .
 1540 091e F0E0      		push __tmp_reg__
 1541 0920 86E8      		in r28,__SP_L__
 1542 0922 8083      		in r29,__SP_H__
 213:lib/io_fct.c  **** 	UBRR0H=0x00;
 1543               	logue: function */
 1544               	/* frame size = 5 */
 1545 0924 E0E9      		std Y+2,r24
 1546 0926 F0E0      		std Y+3,r22
 214:lib/io_fct.c  **** 	UBRR0L=0x08;
 1548               	:
 1549               		std Y+1,__zero_reg__
 1551 092c F0E0      	.LM83:
 1552 092e 88E0      		ldd r24,Y+2
 1553 0930 8083      		mov r18,r24
 1554               		ldi r19,lo8(0)
 215:lib/io_fct.c  **** 
 216:lib/io_fct.c  **** /*	UCSR0A=0x00;
 217:lib/io_fct.c  **** 	UCSR0B=0x18;
 218:lib/io_fct.c  **** 	UCSR0C=0x06;
 219:lib/io_fct.c  **** 	UBRR0H=0x00;
 220:lib/io_fct.c  **** 	UBRR0L=0x08;
 221:lib/io_fct.c  **** //	UBRR0L=0x08;
 222:lib/io_fct.c  **** 	
 223:lib/io_fct.c  **** /*	UCSR0A = 0x62;	// 
 224:lib/io_fct.c  **** 	UCSR0B = 0x18;	// interrupts disabled, transmitter and reciever enabled, 8bit, no 9th bit
 225:lib/io_fct.c  **** 	UCSR0C = 0x86; 	// no parity, asynchronous, 1 stopbit, 8bit number*/
 226:lib/io_fct.c  **** }
 1555               	5,r19
 1556               		std Y+4,r18
 1557 0932 CF91      		ldd r24,Y+4
 1558 0934 DF91      		ldd r25,Y+5
 1559 0936 0895      		cpi r24,99
 1560               		cpc r25,__zero_reg__
 1561               		breq .L81
 1562               		ldd r18,Y+4
 1563               		ldd r19,Y+5
 1564               		cpi r18,100
 1565               		cpc r19,__zero_reg__
 227:lib/io_fct.c  **** 
 228:lib/io_fct.c  **** void init_in_ana(void)
 229:lib/io_fct.c  **** {
 1566               		ldd r24,Y+4
 1567               		ldd r25,Y+5
 1568               		cpi r24,97
 1569 0938 DF93      		cpc r25,__zero_reg__
 1570 093a CF93      		breq .L79
 1571 093c CDB7      		ldd r18,Y+4
 1572 093e DEB7      		ldd r19,Y+5
 1573               		cpi r18,98
 1574               		cpc r19,__zero_reg__
 230:lib/io_fct.c  **** 	ADMUX = 0x40;	//connect to pin 0
 1575               	0
 1576               		rjmp .L78
 1577 0940 E7E2      	.L85:
 1578 0942 F0E0      		ldd r24,Y+4
 1579 0944 80E4      		ldd r25,Y+5
 1580 0946 8083      		cpi r24,101
 231:lib/io_fct.c  **** 	ADCSRA = 0x9e;	//enable ad converter
 1581               	25,__zero_reg__
 1582               		breq .L83
 1583 0948 E6E2      		ldd r18,Y+4
 1584 094a F0E0      		ldd r19,Y+5
 1585 094c 8EE9      		cpi r18,101
 1586 094e 8083      		cpc r19,__zero_reg__
 232:lib/io_fct.c  **** 	ADCSRA |= 0x60;	//start converter
 1587               	.L82
 1588               		ldd r24,Y+4
 1589 0950 A6E2      		ldd r25,Y+5
 1590 0952 B0E0      		cpi r24,102
 1591 0954 E6E2      		cpc r25,__zero_reg__
 1592 0956 F0E0      		breq .L84
 1593 0958 8081      		rjmp .L78
 1594 095a 8066      	.L79:
 1596               	.LM84:
 233:lib/io_fct.c  **** }
 1597               	o8(57)
 1598               		ldi r31,hi8(57)
 1599 095e CF91      		ld r24,Z
 1600 0960 DF91      		std Y+1,r24
 1601 0962 0895      		rjmp .L78
 1602               	.L80:
 1604               	.LM85:
 1605               		ldi r30,lo8(54)
 1606               		ldi r31,hi8(54)
 1607               		ld r24,Z
 1608               		std Y+1,r24
 1609               		rjmp .L78
 234:lib/io_fct.c  **** 
 235:lib/io_fct.c  **** unsigned char get_in_pin(unsigned char port, unsigned char pin)
 236:lib/io_fct.c  **** {
 1610               		68,0,248,.LM86-.LFBB11
 1611               	.LM86:
 1612               		ldi r30,lo8(51)
 1613 0964 DF93      		ldi r31,hi8(51)
 1614 0966 CF93      		ld r24,Z
 1615 0968 00D0      		std Y+1,r24
 1616 096a 00D0      		rjmp .L78
 1617 096c 0F92      	.L82:
 1619 0970 DEB7      	.LM87:
 1620               		ldi r30,lo8(48)
 1621               		ldi r31,hi8(48)
 1622 0972 8A83      		ld r24,Z
 1623 0974 6B83      		std Y+1,r24
 237:lib/io_fct.c  **** 	unsigned char c = 0;
 1624               	3:
 1626 0976 1982      	.LM88:
 238:lib/io_fct.c  **** 
 239:lib/io_fct.c  **** 	switch(port)
 1627               	i r30,lo8(33)
 1628               		ldi r31,hi8(33)
 1629 0978 8A81      		ld r24,Z
 1630 097a 282F      		std Y+1,r24
 1631 097c 30E0      		rjmp .L78
 1632 097e 3D83      	.L84:
 1634 0982 8C81      	.LM89:
 1635 0984 9D81      		ldi r30,lo8(32)
 1636 0986 8336      		ldi r31,hi8(32)
 1637 0988 9105      		ld r24,Z
 1638 098a 01F0      		std Y+1,r24
 1639 098c 2C81      	.L78:
 1641 0990 2436      	.LM90:
 1642 0992 3105      		ldd r24,Y+3
 1643 0994 04F4      		mov r18,r24
 1644 0996 8C81      		ldi r19,lo8(0)
 1645 0998 9D81      		ldi r24,lo8(1)
 1646 099a 8136      		ldi r25,hi8(1)
 1647 099c 9105      		mov r0,r18
 1648 099e 01F0      		rjmp 2f
 1649 09a0 2C81      	1:	lsl r24
 1650 09a2 3D81      		rol r25
 1651 09a4 2236      	2:	dec r0
 1652 09a6 3105      		brpl 1b
 1653 09a8 01F0      		mov r25,r24
 1654 09aa 00C0      		ldd r24,Y+1
 1655               		and r24,r25
 1656 09ac 8C81      		std Y+1,r24
 1658 09b0 8536      	.LM91:
 1659 09b2 9105      		ldd r24,Y+1
 1660 09b4 01F0      	/* epilogue start */
 1662 09b8 3D81      	.LM92:
 1663 09ba 2536      		pop __tmp_reg__
 1664 09bc 3105      		pop __tmp_reg__
 1665 09be 04F0      		pop __tmp_reg__
 1666 09c0 8C81      		pop __tmp_reg__
 1667 09c2 9D81      		pop __tmp_reg__
 1668 09c4 8636      		pop r28
 1669 09c6 9105      		pop r29
 1670 09c8 01F0      		ret
 240:lib/io_fct.c  **** 	{
 241:lib/io_fct.c  **** 		case ('a'):
 242:lib/io_fct.c  **** 			c = PINA;
 1673               	0,.Lscope11-.LFBB11
 1674               	.Lscope11:
 1677 09d0 8081      	.global	read_adc
 1679 09d4 00C0      	read_adc:
 243:lib/io_fct.c  **** 			break;
 244:lib/io_fct.c  **** 		case ('b'):
 245:lib/io_fct.c  **** 			c = PINB;
 1681               	LFBB12:
 1682               		push r29
 1683 09d6 E6E3      		push r28
 1684 09d8 F0E0      		push __tmp_reg__
 1685 09da 8081      		in r28,__SP_L__
 1686 09dc 8983      		in r29,__SP_H__
 1687 09de 00C0      	/* prologue: function */
 1688               	/* frame size = 1 */
 246:lib/io_fct.c  **** 			break;
 247:lib/io_fct.c  **** 		case ('c'):
 248:lib/io_fct.c  **** 			c = PINC;
 1689               	,r24
 1691 09e0 E3E3      	.LM94:
 1692 09e2 F0E0      		ldi r30,lo8(39)
 1693 09e4 8081      		ldi r31,hi8(39)
 1694 09e6 8983      		ldd r24,Y+1
 1695 09e8 00C0      		ori r24,lo8(-64)
 1696               		st Z,r24
 249:lib/io_fct.c  **** 			break;
 250:lib/io_fct.c  **** 		case ('d'):
 251:lib/io_fct.c  **** 			c = PIND;
 1697               	68,0,271,.LM95-.LFBB12
 1698               	.LM95:
 1699 09ea E0E3      		ldi r26,lo8(38)
 1700 09ec F0E0      		ldi r27,hi8(38)
 1701 09ee 8081      		ldi r30,lo8(38)
 1702 09f0 8983      		ldi r31,hi8(38)
 1703 09f2 00C0      		ld r24,Z
 1704               		ori r24,lo8(64)
 252:lib/io_fct.c  **** 			break;
 253:lib/io_fct.c  **** 		case ('e'):
 254:lib/io_fct.c  **** 			c = PINE;
 1705               	4
 1706               	.L88:
 1708 09f6 F0E0      	.LM96:
 1709 09f8 8081      		ldi r30,lo8(38)
 1710 09fa 8983      		ldi r31,hi8(38)
 1711 09fc 00C0      		ld r24,Z
 1712               		mov r24,r24
 255:lib/io_fct.c  **** 			break;
 256:lib/io_fct.c  **** 		case ('f'):
 257:lib/io_fct.c  **** 			c = PINF;
 1713               	,lo8(0)
 1714               		andi r24,lo8(16)
 1715 09fe E0E2      		andi r25,hi8(16)
 1716 0a00 F0E0      		sbiw r24,0
 1717 0a02 8081      		breq .L88
 1719               	.LM97:
 258:lib/io_fct.c  **** 			break;
 259:lib/io_fct.c  **** 		default:
 260:lib/io_fct.c  **** 			break;
 261:lib/io_fct.c  **** 	}	
 262:lib/io_fct.c  **** 	c &= (0x01 << pin);
 1720               	6,lo8(38)
 1721               		ldi r27,hi8(38)
 1722 0a06 8B81      		ldi r30,lo8(38)
 1723 0a08 282F      		ldi r31,hi8(38)
 1724 0a0a 30E0      		ld r24,Z
 1725 0a0c 81E0      		ori r24,lo8(16)
 1726 0a0e 90E0      		st X,r24
 1728 0a12 00C0      	.LM98:
 1729 0a14 880F      		ldi r30,lo8(36)
 1730 0a16 991F      		ldi r31,hi8(36)
 1731 0a18 0A94      		ld r24,Z
 1732 0a1a 02F4      		ldd r25,Z+1
 1733 0a1c 982F      	/* epilogue start */
 1735 0a20 8923      	.LM99:
 1736 0a22 8983      		pop __tmp_reg__
 263:lib/io_fct.c  **** 	
 264:lib/io_fct.c  **** 	return c;
 1737               	
 1738               		ret
 1740               	.Lscope12:
 265:lib/io_fct.c  **** }
 1741               	tabn	162,0,0,0
 1742               		.data
 1745 0a2a 0F90      	Font5x7:
 1746 0a2c 0F90      		.byte	0
 1747 0a2e 0F90      		.byte	0
 1748 0a30 CF91      		.byte	0
 1749 0a32 DF91      		.byte	0
 1750 0a34 0895      		.byte	0
 1751               		.byte	0
 1752               		.byte	0
 1753               		.byte	95
 1754               		.byte	0
 1755               		.byte	0
 1756               		.byte	0
 1757               		.byte	7
 1758               		.byte	0
 1759               		.byte	7
 1760               		.byte	0
 266:lib/io_fct.c  **** 
 267:lib/io_fct.c  **** unsigned int read_adc(unsigned char adc_input)                  // Read Result ADC
 268:lib/io_fct.c  **** {
 1761               	
 1762               		.byte	20
 1763               		.byte	127
 1764 0a36 DF93      		.byte	20
 1765 0a38 CF93      		.byte	36
 1766 0a3a 0F92      		.byte	42
 1767 0a3c CDB7      		.byte	127
 1768 0a3e DEB7      		.byte	42
 1769               		.byte	18
 1770               		.byte	35
 1771 0a40 8983      		.byte	19
 269:lib/io_fct.c  **** 	ADMUX=adc_input|ADC_VREF_TYPE;
 1772               	.byte	100
 1773               		.byte	98
 1774 0a42 E7E2      		.byte	54
 1775 0a44 F0E0      		.byte	73
 1776 0a46 8981      		.byte	85
 1777 0a48 806C      		.byte	34
 1778 0a4a 8083      		.byte	80
 270:lib/io_fct.c  **** 	
 271:lib/io_fct.c  **** 	ADCSRA|=0x40;                                                 // Start the AD conversion
 1779               	0
 1780               		.byte	5
 1781 0a4c A6E2      		.byte	3
 1782 0a4e B0E0      		.byte	0
 1783 0a50 E6E2      		.byte	0
 1784 0a52 F0E0      		.byte	0
 1785 0a54 8081      		.byte	28
 1786 0a56 8064      		.byte	34
 1787 0a58 8C93      		.byte	65
 1788               		.byte	0
 272:lib/io_fct.c  **** 	
 273:lib/io_fct.c  **** 	while ((ADCSRA & 0x10)==0);                                   // Wait for the AD conversion to com
 1789               	.byte	65
 1790               		.byte	34
 1791 0a5a E6E2      		.byte	28
 1792 0a5c F0E0      		.byte	0
 1793 0a5e 8081      		.byte	8
 1794 0a60 882F      		.byte	42
 1795 0a62 90E0      		.byte	28
 1796 0a64 8071      		.byte	42
 1797 0a66 9070      		.byte	8
 1798 0a68 0097      		.byte	8
 1799 0a6a 01F0      		.byte	8
 274:lib/io_fct.c  **** 	ADCSRA|=0x10;
 1800               	.byte	8
 1801               		.byte	8
 1802 0a6c A6E2      		.byte	0
 1803 0a6e B0E0      		.byte	80
 1804 0a70 E6E2      		.byte	48
 1805 0a72 F0E0      		.byte	0
 1806 0a74 8081      		.byte	0
 1807 0a76 8061      		.byte	8
 1808 0a78 8C93      		.byte	8
 275:lib/io_fct.c  **** 	
 276:lib/io_fct.c  **** 	return ADCW;
 1809               		.byte	8
 1810               		.byte	8
 1811 0a7a E4E2      		.byte	0
 1812 0a7c F0E0      		.byte	96
 1813 0a7e 8081      		.byte	96
 1814 0a80 9181      		.byte	0
 1815               		.byte	0
 277:lib/io_fct.c  **** }
 1816               	32
 1817               		.byte	16
 1818 0a82 0F90      		.byte	8
 1819 0a84 CF91      		.byte	4
 1820 0a86 DF91      		.byte	2
 1821 0a88 0895      		.byte	62
 1822               		.byte	81
 1823               		.byte	73
 1824               		.byte	69
 1825               		.byte	62
 1826               		.byte	0
 1827               		.byte	66
 1828               		.byte	127
 1829 0000 00        		.byte	64
 1830 0001 00        		.byte	0
 1831 0002 00        		.byte	66
 1832 0003 00        		.byte	97
 1833 0004 00        		.byte	81
 1834 0005 00        		.byte	73
 1835 0006 00        		.byte	70
 1836 0007 5F        		.byte	33
 1837 0008 00        		.byte	65
 1838 0009 00        		.byte	69
 1839 000a 00        		.byte	75
 1840 000b 07        		.byte	49
 1841 000c 00        		.byte	24
 1842 000d 07        		.byte	20
 1843 000e 00        		.byte	18
 1844 000f 14        		.byte	127
 1845 0010 7F        		.byte	16
 1846 0011 14        		.byte	39
 1847 0012 7F        		.byte	69
 1848 0013 14        		.byte	69
 1849 0014 24        		.byte	69
 1850 0015 2A        		.byte	57
 1851 0016 7F        		.byte	60
 1852 0017 2A        		.byte	74
 1853 0018 12        		.byte	73
 1854 0019 23        		.byte	73
 1855 001a 13        		.byte	48
 1856 001b 08        		.byte	1
 1857 001c 64        		.byte	113
 1858 001d 62        		.byte	9
 1859 001e 36        		.byte	5
 1860 001f 49        		.byte	3
 1861 0020 55        		.byte	54
 1862 0021 22        		.byte	73
 1863 0022 50        		.byte	73
 1864 0023 00        		.byte	73
 1865 0024 05        		.byte	54
 1866 0025 03        		.byte	6
 1867 0026 00        		.byte	73
 1868 0027 00        		.byte	73
 1869 0028 00        		.byte	41
 1870 0029 1C        		.byte	30
 1871 002a 22        		.byte	0
 1872 002b 41        		.byte	54
 1873 002c 00        		.byte	54
 1874 002d 00        		.byte	0
 1875 002e 41        		.byte	0
 1876 002f 22        		.byte	0
 1877 0030 1C        		.byte	86
 1878 0031 00        		.byte	54
 1879 0032 08        		.byte	0
 1880 0033 2A        		.byte	0
 1881 0034 1C        		.byte	0
 1882 0035 2A        		.byte	8
 1883 0036 08        		.byte	20
 1884 0037 08        		.byte	34
 1885 0038 08        		.byte	65
 1886 0039 3E        		.byte	20
 1887 003a 08        		.byte	20
 1888 003b 08        		.byte	20
 1889 003c 00        		.byte	20
 1890 003d 50        		.byte	20
 1891 003e 30        		.byte	65
 1892 003f 00        		.byte	34
 1893 0040 00        		.byte	20
 1894 0041 08        		.byte	8
 1895 0042 08        		.byte	0
 1896 0043 08        		.byte	2
 1897 0044 08        		.byte	1
 1898 0045 08        		.byte	81
 1899 0046 00        		.byte	9
 1900 0047 60        		.byte	6
 1901 0048 60        		.byte	50
 1902 0049 00        		.byte	73
 1903 004a 00        		.byte	121
 1904 004b 20        		.byte	65
 1905 004c 10        		.byte	62
 1906 004d 08        		.byte	126
 1907 004e 04        		.byte	17
 1908 004f 02        		.byte	17
 1909 0050 3E        		.byte	17
 1910 0051 51        		.byte	126
 1911 0052 49        		.byte	127
 1912 0053 45        		.byte	73
 1913 0054 3E        		.byte	73
 1914 0055 00        		.byte	73
 1915 0056 42        		.byte	54
 1916 0057 7F        		.byte	62
 1917 0058 40        		.byte	65
 1918 0059 00        		.byte	65
 1919 005a 42        		.byte	65
 1920 005b 61        		.byte	34
 1921 005c 51        		.byte	127
 1922 005d 49        		.byte	65
 1923 005e 46        		.byte	65
 1924 005f 21        		.byte	34
 1925 0060 41        		.byte	28
 1926 0061 45        		.byte	127
 1927 0062 4B        		.byte	73
 1928 0063 31        		.byte	73
 1929 0064 18        		.byte	73
 1930 0065 14        		.byte	65
 1931 0066 12        		.byte	127
 1932 0067 7F        		.byte	9
 1933 0068 10        		.byte	9
 1934 0069 27        		.byte	1
 1935 006a 45        		.byte	1
 1936 006b 45        		.byte	62
 1937 006c 45        		.byte	65
 1938 006d 39        		.byte	65
 1939 006e 3C        		.byte	81
 1940 006f 4A        		.byte	50
 1941 0070 49        		.byte	127
 1942 0071 49        		.byte	8
 1943 0072 30        		.byte	8
 1944 0073 01        		.byte	8
 1945 0074 71        		.byte	127
 1946 0075 09        		.byte	0
 1947 0076 05        		.byte	65
 1948 0077 03        		.byte	127
 1949 0078 36        		.byte	65
 1950 0079 49        		.byte	0
 1951 007a 49        		.byte	32
 1952 007b 49        		.byte	64
 1953 007c 36        		.byte	65
 1954 007d 06        		.byte	63
 1955 007e 49        		.byte	1
 1956 007f 49        		.byte	127
 1957 0080 29        		.byte	8
 1958 0081 1E        		.byte	20
 1959 0082 00        		.byte	34
 1960 0083 36        		.byte	65
 1961 0084 36        		.byte	127
 1962 0085 00        		.byte	64
 1963 0086 00        		.byte	64
 1964 0087 00        		.byte	64
 1965 0088 56        		.byte	64
 1966 0089 36        		.byte	127
 1967 008a 00        		.byte	2
 1968 008b 00        		.byte	4
 1969 008c 00        		.byte	2
 1970 008d 08        		.byte	127
 1971 008e 14        		.byte	127
 1972 008f 22        		.byte	4
 1973 0090 41        		.byte	8
 1974 0091 14        		.byte	16
 1975 0092 14        		.byte	127
 1976 0093 14        		.byte	62
 1977 0094 14        		.byte	65
 1978 0095 14        		.byte	65
 1979 0096 41        		.byte	65
 1980 0097 22        		.byte	62
 1981 0098 14        		.byte	127
 1982 0099 08        		.byte	9
 1983 009a 00        		.byte	9
 1984 009b 02        		.byte	9
 1985 009c 01        		.byte	6
 1986 009d 51        		.byte	62
 1987 009e 09        		.byte	65
 1988 009f 06        		.byte	81
 1989 00a0 32        		.byte	33
 1990 00a1 49        		.byte	94
 1991 00a2 79        		.byte	127
 1992 00a3 41        		.byte	9
 1993 00a4 3E        		.byte	25
 1994 00a5 7E        		.byte	41
 1995 00a6 11        		.byte	70
 1996 00a7 11        		.byte	70
 1997 00a8 11        		.byte	73
 1998 00a9 7E        		.byte	73
 1999 00aa 7F        		.byte	73
 2000 00ab 49        		.byte	49
 2001 00ac 49        		.byte	1
 2002 00ad 49        		.byte	1
 2003 00ae 36        		.byte	127
 2004 00af 3E        		.byte	1
 2005 00b0 41        		.byte	1
 2006 00b1 41        		.byte	63
 2007 00b2 41        		.byte	64
 2008 00b3 22        		.byte	64
 2009 00b4 7F        		.byte	64
 2010 00b5 41        		.byte	63
 2011 00b6 41        		.byte	31
 2012 00b7 22        		.byte	32
 2013 00b8 1C        		.byte	64
 2014 00b9 7F        		.byte	32
 2015 00ba 49        		.byte	31
 2016 00bb 49        		.byte	127
 2017 00bc 49        		.byte	32
 2018 00bd 41        		.byte	24
 2019 00be 7F        		.byte	32
 2020 00bf 09        		.byte	127
 2021 00c0 09        		.byte	99
 2022 00c1 01        		.byte	20
 2023 00c2 01        		.byte	8
 2024 00c3 3E        		.byte	20
 2025 00c4 41        		.byte	99
 2026 00c5 41        		.byte	3
 2027 00c6 51        		.byte	4
 2028 00c7 32        		.byte	120
 2029 00c8 7F        		.byte	4
 2030 00c9 08        		.byte	3
 2031 00ca 08        		.byte	97
 2032 00cb 08        		.byte	81
 2033 00cc 7F        		.byte	73
 2034 00cd 00        		.byte	69
 2035 00ce 41        		.byte	67
 2036 00cf 7F        		.byte	0
 2037 00d0 41        		.byte	0
 2038 00d1 00        		.byte	127
 2039 00d2 20        		.byte	65
 2040 00d3 40        		.byte	65
 2041 00d4 41        		.byte	2
 2042 00d5 3F        		.byte	4
 2043 00d6 01        		.byte	8
 2044 00d7 7F        		.byte	16
 2045 00d8 08        		.byte	32
 2046 00d9 14        		.byte	65
 2047 00da 22        		.byte	65
 2048 00db 41        		.byte	127
 2049 00dc 7F        		.byte	0
 2050 00dd 40        		.byte	0
 2051 00de 40        		.byte	4
 2052 00df 40        		.byte	2
 2053 00e0 40        		.byte	1
 2054 00e1 7F        		.byte	2
 2055 00e2 02        		.byte	4
 2056 00e3 04        		.byte	64
 2057 00e4 02        		.byte	64
 2058 00e5 7F        		.byte	64
 2059 00e6 7F        		.byte	64
 2060 00e7 04        		.byte	64
 2061 00e8 08        		.byte	0
 2062 00e9 10        		.byte	1
 2063 00ea 7F        		.byte	2
 2064 00eb 3E        		.byte	4
 2065 00ec 41        		.byte	0
 2066 00ed 41        		.byte	32
 2067 00ee 41        		.byte	84
 2068 00ef 3E        		.byte	84
 2069 00f0 7F        		.byte	84
 2070 00f1 09        		.byte	120
 2071 00f2 09        		.byte	127
 2072 00f3 09        		.byte	72
 2073 00f4 06        		.byte	68
 2074 00f5 3E        		.byte	68
 2075 00f6 41        		.byte	56
 2076 00f7 51        		.byte	56
 2077 00f8 21        		.byte	68
 2078 00f9 5E        		.byte	68
 2079 00fa 7F        		.byte	68
 2080 00fb 09        		.byte	32
 2081 00fc 19        		.byte	56
 2082 00fd 29        		.byte	68
 2083 00fe 46        		.byte	68
 2084 00ff 46        		.byte	72
 2085 0100 49        		.byte	127
 2086 0101 49        		.byte	56
 2087 0102 49        		.byte	84
 2088 0103 31        		.byte	84
 2089 0104 01        		.byte	84
 2090 0105 01        		.byte	24
 2091 0106 7F        		.byte	8
 2092 0107 01        		.byte	126
 2093 0108 01        		.byte	9
 2094 0109 3F        		.byte	1
 2095 010a 40        		.byte	2
 2096 010b 40        		.byte	8
 2097 010c 40        		.byte	20
 2098 010d 3F        		.byte	84
 2099 010e 1F        		.byte	84
 2100 010f 20        		.byte	60
 2101 0110 40        		.byte	127
 2102 0111 20        		.byte	8
 2103 0112 1F        		.byte	4
 2104 0113 7F        		.byte	4
 2105 0114 20        		.byte	120
 2106 0115 18        		.byte	0
 2107 0116 20        		.byte	68
 2108 0117 7F        		.byte	125
 2109 0118 63        		.byte	64
 2110 0119 14        		.byte	0
 2111 011a 08        		.byte	32
 2112 011b 14        		.byte	64
 2113 011c 63        		.byte	68
 2114 011d 03        		.byte	61
 2115 011e 04        		.byte	0
 2116 011f 78        		.byte	0
 2117 0120 04        		.byte	127
 2118 0121 03        		.byte	16
 2119 0122 61        		.byte	40
 2120 0123 51        		.byte	68
 2121 0124 49        		.byte	0
 2122 0125 45        		.byte	65
 2123 0126 43        		.byte	127
 2124 0127 00        		.byte	64
 2125 0128 00        		.byte	0
 2126 0129 7F        		.byte	124
 2127 012a 41        		.byte	4
 2128 012b 41        		.byte	24
 2129 012c 02        		.byte	4
 2130 012d 04        		.byte	120
 2131 012e 08        		.byte	124
 2132 012f 10        		.byte	8
 2133 0130 20        		.byte	4
 2134 0131 41        		.byte	4
 2135 0132 41        		.byte	120
 2136 0133 7F        		.byte	56
 2137 0134 00        		.byte	68
 2138 0135 00        		.byte	68
 2139 0136 04        		.byte	68
 2140 0137 02        		.byte	56
 2141 0138 01        		.byte	124
 2142 0139 02        		.byte	20
 2143 013a 04        		.byte	20
 2144 013b 40        		.byte	20
 2145 013c 40        		.byte	8
 2146 013d 40        		.byte	8
 2147 013e 40        		.byte	20
 2148 013f 40        		.byte	20
 2149 0140 00        		.byte	24
 2150 0141 01        		.byte	124
 2151 0142 02        		.byte	124
 2152 0143 04        		.byte	8
 2153 0144 00        		.byte	4
 2154 0145 20        		.byte	4
 2155 0146 54        		.byte	8
 2156 0147 54        		.byte	72
 2157 0148 54        		.byte	84
 2158 0149 78        		.byte	84
 2159 014a 7F        		.byte	84
 2160 014b 48        		.byte	32
 2161 014c 44        		.byte	4
 2162 014d 44        		.byte	63
 2163 014e 38        		.byte	68
 2164 014f 38        		.byte	64
 2165 0150 44        		.byte	32
 2166 0151 44        		.byte	60
 2167 0152 44        		.byte	64
 2168 0153 20        		.byte	64
 2169 0154 38        		.byte	32
 2170 0155 44        		.byte	124
 2171 0156 44        		.byte	28
 2172 0157 48        		.byte	32
 2173 0158 7F        		.byte	64
 2174 0159 38        		.byte	32
 2175 015a 54        		.byte	28
 2176 015b 54        		.byte	60
 2177 015c 54        		.byte	64
 2178 015d 18        		.byte	48
 2179 015e 08        		.byte	64
 2180 015f 7E        		.byte	60
 2181 0160 09        		.byte	68
 2182 0161 01        		.byte	40
 2183 0162 02        		.byte	16
 2184 0163 08        		.byte	40
 2185 0164 14        		.byte	68
 2186 0165 54        		.byte	12
 2187 0166 54        		.byte	80
 2188 0167 3C        		.byte	80
 2189 0168 7F        		.byte	80
 2190 0169 08        		.byte	60
 2191 016a 04        		.byte	68
 2192 016b 04        		.byte	100
 2193 016c 78        		.byte	84
 2194 016d 00        		.byte	76
 2195 016e 44        		.byte	68
 2196 016f 7D        		.byte	0
 2197 0170 40        		.byte	8
 2198 0171 00        		.byte	54
 2199 0172 20        		.byte	65
 2200 0173 40        		.byte	0
 2201 0174 44        		.byte	0
 2202 0175 3D        		.byte	0
 2203 0176 00        		.byte	127
 2204 0177 00        		.byte	0
 2205 0178 7F        		.byte	0
 2206 0179 10        		.byte	0
 2207 017a 28        		.byte	65
 2208 017b 44        		.byte	54
 2209 017c 00        		.byte	8
 2210 017d 41        		.byte	0
 2211 017e 7F        		.byte	8
 2212 017f 40        		.byte	8
 2213 0180 00        		.byte	42
 2214 0181 7C        		.byte	28
 2215 0182 04        		.byte	8
 2216 0183 18        		.byte	8
 2217 0184 04        		.byte	28
 2218 0185 78        		.byte	42
 2219 0186 7C        		.byte	8
 2220 0187 08        		.byte	8
 2221 0188 04        		.text
 2228 018f 38        	.global	g_draw_horizontal_line
 2230 0191 14        	g_draw_horizontal_line:
 2232 0193 14        	.Ltext2:
 2234 0195 08        	.LM100:
 2235 0196 14        	.LFBB13:
 2236 0197 14        		push r29
 2237 0198 18        		push r28
 2238 0199 7C        		in r28,__SP_L__
 2239 019a 7C        		in r29,__SP_H__
 2240 019b 08        		sbiw r28,8
 2241 019c 04        		in __tmp_reg__,__SREG__
 2242 019d 04        		cli
 2243 019e 08        		out __SP_H__,r29
 2244 019f 48        		out __SREG__,__tmp_reg__
 2245 01a0 54        		out __SP_L__,r28
 2246 01a1 54        	/* prologue: function */
 2247 01a2 54        	/* frame size = 8 */
 2248 01a3 20        		std Y+4,r25
 2249 01a4 04        		std Y+3,r24
 2250 01a5 3F        		std Y+6,r23
 2251 01a6 44        		std Y+5,r22
 2252 01a7 40        		std Y+8,r21
 2253 01a8 20        		std Y+7,r20
 2255 01aa 40        	.LM101:
 2256 01ab 40        		ldd r24,Y+3
 2257 01ac 20        		ldd r25,Y+4
 2258 01ad 7C        		std Y+2,r25
 2259 01ae 1C        		std Y+1,r24
 2260 01af 20        		rjmp .L91
 2261 01b0 40        	.L92:
 2263 01b2 1C        	.LM102:
 2264 01b3 3C        		ldd r24,Y+1
 2265 01b4 40        		ldd r25,Y+2
 2266 01b5 30        		ldd r18,Y+5
 2267 01b6 40        		ldd r19,Y+6
 2268 01b7 3C        		movw r22,r18
 2269 01b8 44        		ldi r20,lo8(-1)
 2270 01b9 28        		call lcd_graphics_plot_pixel
 2272 01bb 28        	.LM103:
 2273 01bc 44        		ldd r24,Y+1
 2274 01bd 0C        		ldd r25,Y+2
 2275 01be 50        		adiw r24,1
 2276 01bf 50        		std Y+2,r25
 2277 01c0 50        		std Y+1,r24
 2278 01c1 3C        	.L91:
 2279 01c2 44        		ldd r18,Y+3
 2280 01c3 64        		ldd r19,Y+4
 2281 01c4 54        		ldd r24,Y+7
 2282 01c5 4C        		ldd r25,Y+8
 2283 01c6 44        		add r18,r24
 2284 01c7 00        		adc r19,r25
 2285 01c8 08        		ldd r24,Y+1
 2286 01c9 36        		ldd r25,Y+2
 2287 01ca 41        		cp r18,r24
 2288 01cb 00        		cpc r19,r25
 2289 01cc 00        		brsh .L92
 2290 01cd 00        	/* epilogue start */
 2292 01cf 00        	.LM104:
 2293 01d0 00        		adiw r28,8
 2294 01d1 00        		in __tmp_reg__,__SREG__
 2295 01d2 41        		cli
 2296 01d3 36        		out __SP_H__,r29
 2297 01d4 08        		out __SREG__,__tmp_reg__
 2298 01d5 00        		out __SP_L__,r28
 2299 01d6 08        		pop r28
 2300 01d7 08        		pop r29
 2301 01d8 2A        		ret
 2306 01dd 2A        	.Lscope13:
 2311               	.global	g_draw_vertical_line
 2313               	g_draw_vertical_line:
 2315               	.LM105:
 2316               	.LFBB14:
 2317               		push r29
 2318               		push r28
 2319               		in r28,__SP_L__
 2320               		in r29,__SP_H__
   1:./lib/graphics.c **** /* 
   2:./lib/graphics.c ****  * Basic Raster Graphics interface to the lcd_graphics_* LCD graphics driver 
   3:./lib/graphics.c ****  * functions.
   4:./lib/graphics.c ****  * Vanya A. Sergeev - <vsergeev@gmail.com>
   5:./lib/graphics.c ****  *
   6:./lib/graphics.c ****  * font5x7.h header file comes from Procyon AVRlib.
   7:./lib/graphics.c ****  *
   8:./lib/graphics.c ****  */
   9:./lib/graphics.c **** 
  10:./lib/graphics.c **** #include "lc7981.h"
  11:./lib/graphics.c **** #include "graphics.h"
  12:./lib/graphics.c **** 
  13:./lib/graphics.c **** /**
  14:./lib/graphics.c ****  * Draws a horizontal line, left to right, at the specified coordinates and of
  15:./lib/graphics.c ****  * the specified length.
  16:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
  17:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  18:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  19:./lib/graphics.c ****  */
  20:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
 2321               	__,r28
 2322               	/* prologue: function */
 2323               	/* frame size = 8 */
 2324 0a8a DF93      		std Y+4,r25
 2325 0a8c CF93      		std Y+3,r24
 2326 0a8e CDB7      		std Y+6,r23
 2327 0a90 DEB7      		std Y+5,r22
 2328 0a92 2897      		std Y+8,r21
 2329 0a94 0FB6      		std Y+7,r20
 2331 0a98 DEBF      	.LM106:
 2332 0a9a 0FBE      		ldd r24,Y+5
 2333 0a9c CDBF      		ldd r25,Y+6
 2334               		std Y+2,r25
 2335               		std Y+1,r24
 2336 0a9e 9C83      		rjmp .L95
 2337 0aa0 8B83      	.L96:
 2339 0aa4 6D83      	.LM107:
 2340 0aa6 5887      		ldd r24,Y+3
 2341 0aa8 4F83      		ldd r25,Y+4
  21:./lib/graphics.c **** for (i = x; i <= x+length; i++)
  22:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
 2342               	,Y+2
 2343               		movw r22,r18
 2344 0aaa 8B81      		ldi r20,lo8(-1)
 2345 0aac 9C81      		call lcd_graphics_plot_pixel
 2347 0ab0 8983      	.LM108:
 2348 0ab2 00C0      		ldd r24,Y+1
 2349               		ldd r25,Y+2
  23:./lib/graphics.c ****  short length) {
 2350               	4,1
 2351               		std Y+2,r25
 2352 0ab4 8981      		std Y+1,r24
 2353 0ab6 9A81      	.L95:
 2354 0ab8 2D81      		ldd r18,Y+5
 2355 0aba 3E81      		ldd r19,Y+6
 2356 0abc B901      		ldd r24,Y+7
 2357 0abe 4FEF      		ldd r25,Y+8
 2358 0ac0 0E94 0000 		add r18,r24
 2359               		adc r19,r25
 2360               		ldd r24,Y+1
 2361 0ac4 8981      		ldd r25,Y+2
 2362 0ac6 9A81      		cp r24,r18
 2363 0ac8 0196      		cpc r25,r19
 2364 0aca 9A83      		brlo .L96
 2365 0acc 8983      	/* epilogue start */
 2367 0ace 2B81      	.LM109:
 2368 0ad0 3C81      		adiw r28,8
 2369 0ad2 8F81      		in __tmp_reg__,__SREG__
 2370 0ad4 9885      		cli
 2371 0ad6 280F      		out __SP_H__,r29
 2372 0ad8 391F      		out __SREG__,__tmp_reg__
 2373 0ada 8981      		out __SP_L__,r28
 2374 0adc 9A81      		pop r28
 2375 0ade 2817      		pop r29
 2376 0ae0 3907      		ret
  24:./lib/graphics.c ****  the line, in pixels.
 2379               	14
 2381 0ae4 2896      	.Lscope14:
 2387 0af0 CF91      	.global	g_draw_rectangle
 2389 0af4 0895      	g_draw_rectangle:
 2391               	.LM110:
 2392               	.LFBB15:
 2393               		push r29
 2394               		push r28
 2395               		in r28,__SP_L__
 2396               		in r29,__SP_H__
 2397               		sbiw r28,8
 2398               		in __tmp_reg__,__SREG__
 2399               		cli
 2400               		out __SP_H__,r29
 2401               		out __SREG__,__tmp_reg__
  25:./lib/graphics.c **** ne's origin.
  26:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  27:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  28:./lib/graphics.c ****  */
  29:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  30:./lib/graphics.c **** 	unsigned short i;
  31:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  32:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  33:./lib/graphics.c **** }
 2402               	ologue: function */
 2403               	/* frame size = 8 */
 2404               		std Y+2,r25
 2405 0af6 DF93      		std Y+1,r24
 2406 0af8 CF93      		std Y+4,r23
 2407 0afa CDB7      		std Y+3,r22
 2408 0afc DEB7      		std Y+6,r21
 2409 0afe 2897      		std Y+5,r20
 2410 0b00 0FB6      		std Y+8,r19
 2411 0b02 F894      		std Y+7,r18
 2413 0b06 0FBE      	.LM111:
 2414 0b08 CDBF      		ldd r24,Y+5
 2415               		ldd r25,Y+6
 2416               		sbiw r24,1
 2417 0b0a 9C83      		std Y+6,r25
 2418 0b0c 8B83      		std Y+5,r24
 2420 0b10 6D83      	.LM112:
 2421 0b12 5887      		ldd r24,Y+7
 2422 0b14 4F83      		ldd r25,Y+8
  34:./lib/graphics.c **** ort length) {
  35:./lib/graphics.c **** 	unsigned short i;
 2423               	r25
 2424               		std Y+7,r24
 2426 0b18 9E81      	.LM113:
 2427 0b1a 9A83      		ldd r24,Y+1
 2428 0b1c 8983      		ldd r25,Y+2
 2429 0b1e 00C0      		ldd r18,Y+3
 2430               		ldd r19,Y+4
  36:./lib/graphics.c **** .
 2431               	,Y+5
 2432               		ldd r21,Y+6
 2433 0b20 8B81      		movw r22,r18
 2434 0b22 9C81      		call g_draw_horizontal_line
 2436 0b26 3A81      	.LM114:
 2437 0b28 B901      		ldd r24,Y+1
 2438 0b2a 4FEF      		ldd r25,Y+2
 2439 0b2c 0E94 0000 		ldd r18,Y+3
 2440               		ldd r19,Y+4
 2441               		ldd r20,Y+7
 2442 0b30 8981      		ldd r21,Y+8
 2443 0b32 9A81      		movw r22,r18
 2444 0b34 0196      		call g_draw_vertical_line
 2446 0b38 8983      	.LM115:
 2447               		ldd r18,Y+1
 2448 0b3a 2D81      		ldd r19,Y+2
 2449 0b3c 3E81      		ldd r24,Y+5
 2450 0b3e 8F81      		ldd r25,Y+6
 2451 0b40 9885      		add r24,r18
 2452 0b42 280F      		adc r25,r19
 2453 0b44 391F      		ldd r18,Y+3
 2454 0b46 8981      		ldd r19,Y+4
 2455 0b48 9A81      		ldd r20,Y+7
 2456 0b4a 8217      		ldd r21,Y+8
 2457 0b4c 9307      		movw r22,r18
 2458 0b4e 00F0      		call g_draw_vertical_line
  37:./lib/graphics.c **** ne's origin.
 2460               	,Y+4
 2461               		ldd r24,Y+7
 2462 0b50 2896      		ldd r25,Y+8
 2463 0b52 0FB6      		movw r20,r18
 2464 0b54 F894      		add r20,r24
 2465 0b56 DEBF      		adc r21,r25
 2466 0b58 0FBE      		ldd r24,Y+1
 2467 0b5a CDBF      		ldd r25,Y+2
 2468 0b5c CF91      		ldd r18,Y+5
 2469 0b5e DF91      		ldd r19,Y+6
 2470 0b60 0895      		movw r22,r20
 2471               		movw r20,r18
 2472               		call g_draw_horizontal_line
 2473               	/* epilogue start */
 2475               	.LM117:
 2476               		adiw r28,8
 2477               		in __tmp_reg__,__SREG__
 2478               		cli
 2479               		out __SP_H__,r29
 2480               		out __SREG__,__tmp_reg__
 2481               		out __SP_L__,r28
 2482               		pop r28
 2483               		pop r29
  38:./lib/graphics.c **** ight, at the specified coordinates and of
  39:./lib/graphics.c ****  * the specified length.
  40:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
  41:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  42:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  43:./lib/graphics.c ****  */
  44:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  45:./lib/graphics.c **** 	unsigned short i;
  46:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  47:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
 2484               	ngle, .-g_draw_rectangle
 2485               	.Lscope15:
 2490 0b68 DEB7      	.global	g_draw_char
 2492 0b6c 0FB6      	g_draw_char:
 2494 0b70 DEBF      	.LM118:
 2495 0b72 0FBE      	.LFBB16:
 2496 0b74 CDBF      		push r29
 2497               		push r28
 2498               		in r28,__SP_L__
 2499 0b76 9A83      		in r29,__SP_H__
 2500 0b78 8983      		sbiw r28,8
 2501 0b7a 7C83      		in __tmp_reg__,__SREG__
 2502 0b7c 6B83      		cli
 2503 0b7e 5E83      		out __SP_H__,r29
 2504 0b80 4D83      		out __SREG__,__tmp_reg__
 2505 0b82 3887      		out __SP_L__,r28
 2506 0b84 2F83      	/* prologue: function */
  48:./lib/graphics.c **** Draws a vertical line, top to bottom, at the specified coordinates and of 
  49:./lib/graphics.c ****  * the specified length.
 2507               	td Y+5,r25
 2508               		std Y+4,r24
 2509 0b86 8D81      		std Y+7,r23
 2510 0b88 9E81      		std Y+6,r22
 2511 0b8a 0197      		std Y+8,r20
 2513 0b8e 8D83      	.LM119:
  50:./lib/graphics.c **** /**
 2514               	4,Y+8
 2515               		subi r24,lo8(-(-32))
 2516 0b90 8F81      		std Y+3,r24
 2518 0b94 0197      	.LM120:
 2519 0b96 9887      		ldd r24,Y+3
 2520 0b98 8F83      		cpi r24,lo8(95)
  51:./lib/graphics.c **** gth) {
 2521               	+2
 2522               		rjmp .L108
 2524 0b9c 9A81      	.LM121:
 2525 0b9e 2B81      		std Y+2,__zero_reg__
 2526 0ba0 3C81      		rjmp .L102
 2527 0ba2 4D81      	.L107:
 2529 0ba6 B901      	.LM122:
 2530 0ba8 0E94 0000 		std Y+1,__zero_reg__
  52:./lib/graphics.c ****  the line, in pixels.
 2531               	3
 2532               	.L106:
 2534 0bae 9A81      	.LM123:
 2535 0bb0 2B81      		ldd r24,Y+3
 2536 0bb2 3C81      		mov r18,r24
 2537 0bb4 4F81      		ldi r19,lo8(0)
 2538 0bb6 5885      		movw r24,r18
 2539 0bb8 B901      		lsl r24
 2540 0bba 0E94 0000 		rol r25
  53:./lib/graphics.c **** ne's origin.
 2541               	rol r25
 2542               		add r18,r24
 2543 0bbe 2981      		adc r19,r25
 2544 0bc0 3A81      		ldd r24,Y+2
 2545 0bc2 8D81      		mov r24,r24
 2546 0bc4 9E81      		ldi r25,lo8(0)
 2547 0bc6 820F      		add r24,r18
 2548 0bc8 931F      		adc r25,r19
 2549 0bca 2B81      		movw r30,r24
 2550 0bcc 3C81      		subi r30,lo8(-(Font5x7))
 2551 0bce 4F81      		sbci r31,hi8(-(Font5x7))
 2552 0bd0 5885      		ld r24,Z
 2553 0bd2 B901      		mov r18,r24
 2554 0bd4 0E94 0000 		ldi r19,lo8(0)
  54:./lib/graphics.c **** ight, at the specified coordinates and of
 2555               	mov r24,r24
 2556               		ldi r25,lo8(0)
 2557 0bd8 2B81      		movw r20,r18
 2558 0bda 3C81      		rjmp 2f
 2559 0bdc 8F81      	1:	asr r21
 2560 0bde 9885      		ror r20
 2561 0be0 A901      	2:	dec r24
 2562 0be2 480F      		brpl 1b
 2563 0be4 591F      		movw r24,r20
 2564 0be6 8981      		andi r24,lo8(1)
 2565 0be8 9A81      		andi r25,hi8(1)
 2566 0bea 2D81      		tst r24
 2567 0bec 3E81      		breq .L104
 2569 0bf0 A901      	.LM124:
 2570 0bf2 0E94 0000 		ldd r24,Y+1
 2571               		mov r18,r24
  55:./lib/graphics.c **** * the specified length.
 2572               	ldd r24,Y+6
 2573               		ldd r25,Y+7
 2574 0bf6 2896      		add r18,r24
 2575 0bf8 0FB6      		adc r19,r25
 2576 0bfa F894      		ldd r24,Y+4
 2577 0bfc DEBF      		ldd r25,Y+5
 2578 0bfe 0FBE      		movw r22,r18
 2579 0c00 CDBF      		ldi r20,lo8(-1)
 2580 0c02 CF91      		call lcd_graphics_plot_pixel
 2581 0c04 DF91      		rjmp .L105
 2582 0c06 0895      	.L104:
 2584               	.LM125:
 2585               		ldd r24,Y+1
 2586               		mov r18,r24
 2587               		ldi r19,lo8(0)
 2588               		ldd r24,Y+6
 2589               		ldd r25,Y+7
 2590               		add r18,r24
 2591               		adc r19,r25
  56:./lib/graphics.c **** * @param x The x coordinante of the line's origin.
  57:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  58:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  59:./lib/graphics.c ****  */
  60:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  61:./lib/graphics.c **** 	unsigned short i;
  62:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  63:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  64:./lib/graphics.c **** }
  65:./lib/graphics.c **** 
  66:./lib/graphics.c **** /**
 2592               	5,Y+5
 2593               		movw r22,r18
 2594               		ldi r20,lo8(0)
 2595 0c08 DF93      		call lcd_graphics_plot_pixel
 2596 0c0a CF93      	.L105:
 2598 0c0e DEB7      	.LM126:
 2599 0c10 2897      		ldd r24,Y+1
 2600 0c12 0FB6      		subi r24,lo8(-(1))
 2601 0c14 F894      		std Y+1,r24
 2602 0c16 DEBF      	.L103:
 2603 0c18 0FBE      		ldd r24,Y+1
 2604 0c1a CDBF      		cpi r24,lo8(7)
 2605               		brsh .+2
 2606               		rjmp .L106
 2608 0c1e 8C83      	.LM127:
 2609 0c20 7F83      		ldd r24,Y+4
 2610 0c22 6E83      		ldd r25,Y+5
 2611 0c24 4887      		adiw r24,1
  67:./lib/graphics.c **** gth) {
  68:./lib/graphics.c **** 	unsigned short i;
  69:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  70:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  71:./lib/graphics.c **** }
  72:./lib/graphics.c **** 
 2612               	4,r24
 2614 0c26 8885      	.LM128:
 2615 0c28 8052      		ldd r24,Y+2
 2616 0c2a 8B83      		subi r24,lo8(-(1))
  73:./lib/graphics.c **** t length) {
  74:./lib/graphics.c **** 	unsigned short i;
 2617               	Y+2,r24
 2618               	.L102:
 2619 0c2c 8B81      		ldd r24,Y+2
 2620 0c2e 8F35      		cpi r24,lo8(5)
 2621 0c30 00F0      		brsh .+2
 2622 0c32 00C0      		rjmp .L107
  75:./lib/graphics.c **** .
  76:./lib/graphics.c ****  */
  77:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
 2623               	
 2624               	/* epilogue start */
 2626 0c36 00C0      	.LM129:
 2627               		adiw r28,8
  78:./lib/graphics.c ****  the line, in pixels.
 2628               	__tmp_reg__,__SREG__
 2629               		cli
 2630 0c38 1982      		out __SP_H__,r29
 2631 0c3a 00C0      		out __SREG__,__tmp_reg__
 2632               		out __SP_L__,r28
  79:./lib/graphics.c **** ne's origin.
  80:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  81:./lib/graphics.c ****  * @param length The length of the line, in pixels.
 2633               	r28
 2634               		pop r29
 2635 0c3c 8B81      		ret
 2642 0c4a 991F      	.Lscope16:
 2647 0c54 90E0      	.global	g_draw_string
 2649 0c58 931F      	g_draw_string:
 2651 0c5c E050      	.LM130:
 2652 0c5e F040      	.LFBB17:
 2653 0c60 8081      		push r29
 2654 0c62 282F      		push r28
 2655 0c64 30E0      		in r28,__SP_L__
 2656 0c66 8981      		in r29,__SP_H__
 2657 0c68 882F      		sbiw r28,8
 2658 0c6a 90E0      		in __tmp_reg__,__SREG__
 2659 0c6c A901      		cli
 2660 0c6e 00C0      		out __SP_H__,r29
 2661 0c70 5595      		out __SREG__,__tmp_reg__
 2662 0c72 4795      		out __SP_L__,r28
 2663 0c74 8A95      	/* prologue: function */
 2664 0c76 02F4      	/* frame size = 8 */
 2665 0c78 CA01      		std Y+4,r25
 2666 0c7a 8170      		std Y+3,r24
 2667 0c7c 9070      		std Y+6,r23
 2668 0c7e 8823      		std Y+5,r22
 2669 0c80 01F0      		std Y+8,r21
  82:./lib/graphics.c **** ne's origin.
 2670               	.LFBB17
 2671               	.LM131:
 2672 0c82 8981      		ldd r24,Y+3
 2673 0c84 282F      		ldd r25,Y+4
 2674 0c86 30E0      		std Y+2,r25
 2675 0c88 8E81      		std Y+1,r24
 2676 0c8a 9F81      		rjmp .L110
 2677 0c8c 280F      	.L112:
 2679 0c90 8C81      	.LM132:
 2680 0c92 9D81      		ldd r30,Y+7
 2681 0c94 B901      		ldd r31,Y+8
 2682 0c96 4FEF      		ld r24,Z
 2683 0c98 0E94 0000 		cpi r24,lo8(10)
 2684 0c9c 00C0      		brne .L111
  83:./lib/graphics.c **** ight, at the specified coordinates and of
  84:./lib/graphics.c ****  * the specified length.
 2686               	,Y+1
 2687               		ldd r25,Y+2
 2688 0c9e 8981      		std Y+4,r25
 2689 0ca0 282F      		std Y+3,r24
 2691 0ca4 8E81      	.LM134:
 2692 0ca6 9F81      		ldd r24,Y+5
 2693 0ca8 280F      		ldd r25,Y+6
 2694 0caa 391F      		adiw r24,8
 2695 0cac 8C81      		std Y+6,r25
 2696 0cae 9D81      		std Y+5,r24
 2698 0cb2 40E0      	.LM135:
 2699 0cb4 0E94 0000 		ldd r24,Y+7
 2700               		ldd r25,Y+8
 2701               		adiw r24,1
 2702               		std Y+8,r25
 2703 0cb8 8981      		std Y+7,r24
 2704 0cba 8F5F      		rjmp .L110
 2705 0cbc 8983      	.L111:
 2707 0cbe 8981      	.LM136:
 2708 0cc0 8730      		ldd r30,Y+7
 2709 0cc2 00F4      		ldd r31,Y+8
 2710 0cc4 00C0      		ld r20,Z
  85:./lib/graphics.c ****  @param x The x coordinante of the line's origin.
  86:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  87:./lib/graphics.c ****  * @param length The length of the line, in pixels.
 2711               	
 2712               		adiw r24,1
 2713 0cc6 8C81      		std Y+8,r25
 2714 0cc8 9D81      		std Y+7,r24
 2715 0cca 0196      		ldd r24,Y+3
 2716 0ccc 9D83      		ldd r25,Y+4
 2717 0cce 8C83      		ldd r18,Y+5
 2718               		ldd r19,Y+6
 2719               		movw r22,r18
 2720 0cd0 8A81      		call g_draw_char
 2722 0cd4 8A83      	.LM137:
 2723               		ldd r24,Y+3
 2724 0cd6 8A81      		ldd r25,Y+4
 2725 0cd8 8530      		adiw r24,6
 2726 0cda 00F4      		std Y+4,r25
 2727 0cdc 00C0      		std Y+3,r24
 2729               	.LM138:
  88:./lib/graphics.c **** ne's origin.
  89:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2730               	r25,Y+4
 2731               		adiw r24,5
 2732 0cde 2896      		cpi r24,161
 2733 0ce0 0FB6      		cpc r25,__zero_reg__
 2734 0ce2 F894      		brlo .L110
 2736 0ce6 0FBE      	.LM139:
 2737 0ce8 CDBF      		ldd r24,Y+1
 2738 0cea CF91      		ldd r25,Y+2
 2739 0cec DF91      		std Y+4,r25
 2740 0cee 0895      		std Y+3,r24
 2742               	.LM140:
 2743               		ldd r24,Y+5
 2744               		ldd r25,Y+6
 2745               		adiw r24,8
 2746               		std Y+6,r25
 2747               		std Y+5,r24
 2748               	.L110:
 2750               	.LM141:
 2751               		ldd r30,Y+7
 2752               		ldd r31,Y+8
 2753               		ld r24,Z
 2754               		tst r24
  90:./lib/graphics.c **** ified length.
  91:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
  92:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
  93:./lib/graphics.c ****  * @param length The length of the line, in pixels.
  94:./lib/graphics.c ****  */
  95:./lib/graphics.c **** void g_draw_horizontal_line(unsigned short x, unsigned short y, unsigned short length) {
  96:./lib/graphics.c **** 	unsigned short i;
  97:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
  98:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
  99:./lib/graphics.c **** }
 100:./lib/graphics.c **** 
 101:./lib/graphics.c **** /**
 102:./lib/graphics.c ****  * Draws a vertical line, top to bottom, at the specified coordinates and of 
 2755               	tart */
 2757               	.LM142:
 2758 0cf0 DF93      		adiw r28,8
 2759 0cf2 CF93      		in __tmp_reg__,__SREG__
 2760 0cf4 CDB7      		cli
 2761 0cf6 DEB7      		out __SP_H__,r29
 2762 0cf8 2897      		out __SREG__,__tmp_reg__
 2763 0cfa 0FB6      		out __SP_L__,r28
 2764 0cfc F894      		pop r28
 2765 0cfe DEBF      		pop r29
 2766 0d00 0FBE      		ret
 2771 0d06 8B83      	.Lscope17:
 2774 0d0c 5887      	.global	lcd_strobe_enable
 103:./lib/graphics.c **** pixel(i, y, PIXEL_ON);
 104:./lib/graphics.c **** }
 105:./lib/graphics.c **** 
 106:./lib/graphics.c **** /**
 2776               	stabs	"lib/LC7981.c",132,0,0,.Ltext3
 2777               	.Ltext3:
 2779 0d12 9C81      	.LM143:
 2780 0d14 9A83      	.LFBB18:
 2781 0d16 8983      		push r29
 2782 0d18 00C0      		push r28
 2783               		in r28,__SP_L__
 107:./lib/graphics.c **** gth) {
 108:./lib/graphics.c **** 	unsigned short i;
 109:./lib/graphics.c **** 	for (i = x; i <= x+length; i++)
 110:./lib/graphics.c **** 		lcd_graphics_plot_pixel(i, y, PIXEL_ON);
 111:./lib/graphics.c **** }
 112:./lib/graphics.c **** 
 2784               	__SP_H__
 2785               	/* prologue: function */
 2786 0d1a EF81      	/* frame size = 0 */
 2788 0d1e 8081      	.LM144:
 2789 0d20 8A30      		ldi r26,lo8(59)
 2790 0d22 01F4      		ldi r27,hi8(59)
 113:./lib/graphics.c **** t length) {
 114:./lib/graphics.c **** 	unsigned short i;
 2791               	0,lo8(59)
 2792               		ldi r31,hi8(59)
 2793 0d24 8981      		ld r24,Z
 2794 0d26 9A81      		ori r24,lo8(64)
 2795 0d28 9C83      		st X,r24
 115:./lib/graphics.c **** .
 116:./lib/graphics.c ****  */
 2797               	:
 2798               	/* #APP */
 2799 0d2c 8D81      	 ;  24 "lib/LC7981.c" 1
 2800 0d2e 9E81      		nop;
 2801 0d30 0896      	 ;  0 "" 2
 2802 0d32 9E83      	 ;  24 "lib/LC7981.c" 1
 2803 0d34 8D83      		nop;
 117:./lib/graphics.c **** origin.
 118:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2804               	" 2
 2805               	 ;  24 "lib/LC7981.c" 1
 2806 0d36 8F81      		nop;
 2807 0d38 9885      	 ;  0 "" 2
 2809 0d3c 9887      	.LM146:
 2810 0d3e 8F83      	/* #NOAPP */
 2811 0d40 00C0      		ldi r26,lo8(59)
 2812               		ldi r27,hi8(59)
 119:./lib/graphics.c **** ified length.
 120:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 121:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2813               	lo8(59)
 2814               		ldi r31,hi8(59)
 2815 0d42 EF81      		ld r24,Z
 2816 0d44 F885      		andi r24,lo8(-65)
 2817 0d46 4081      		st X,r24
 2819 0d4a 9885      	.LM147:
 2820 0d4c 0196      	/* #APP */
 2821 0d4e 9887      	 ;  26 "lib/LC7981.c" 1
 2822 0d50 8F83      		nop;
 2823 0d52 8B81      	 ;  0 "" 2
 2824 0d54 9C81      	 ;  26 "lib/LC7981.c" 1
 2825 0d56 2D81      		nop;
 2826 0d58 3E81      	 ;  0 "" 2
 2827 0d5a B901      	 ;  26 "lib/LC7981.c" 1
 2828 0d5c 0E94 0000 		nop;
 122:./lib/graphics.c **** ified length.
 123:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 124:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2829               	ilogue start */
 2831 0d60 8B81      	.LM148:
 2832 0d62 9C81      	/* #NOAPP */
 2833 0d64 0696      		pop r28
 2834 0d66 9C83      		pop r29
 2835 0d68 8B83      		ret
 125:./lib/graphics.c **** ified length.
 126:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 127:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 128:./lib/graphics.c ****  * @param length The length of the line, in pixels.
 2836               	lcd_strobe_enable, .-lcd_strobe_enable
 2837               	.Lscope18:
 2839 0d6c 9C81      	.global	lcd_wait_busy
 2841 0d70 813A      	lcd_wait_busy:
 2843 0d74 00F0      	.LM149:
 129:./lib/graphics.c **** ne's origin.
 130:./lib/graphics.c ****  * @param y The y coordinante of the line's origin.
 2844               	
 2845               		push r29
 2846 0d76 8981      		push r28
 2847 0d78 9A81      		in r28,__SP_L__
 2848 0d7a 9C83      		in r29,__SP_H__
 2849 0d7c 8B83      		sbiw r28,24
 131:./lib/graphics.c **** ified length.
 132:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 2850               	_tmp_reg__,__SREG__
 2851               		cli
 2852 0d7e 8D81      		out __SP_H__,r29
 2853 0d80 9E81      		out __SREG__,__tmp_reg__
 2854 0d82 0896      		out __SP_L__,r28
 2855 0d84 9E83      	/* prologue: function */
 2856 0d86 8D83      	/* frame size = 24 */
 2858               	.LM150:
 2859               		ldi r24,lo8(0x40400000)
 2860 0d88 EF81      		ldi r25,hi8(0x40400000)
 2861 0d8a F885      		ldi r26,hlo8(0x40400000)
 2862 0d8c 8081      		ldi r27,hhi8(0x40400000)
 2863 0d8e 8823      		std Y+21,r24
 2864 0d90 01F4      		std Y+22,r25
 2865               		std Y+23,r26
 133:./lib/graphics.c **** ight, at the specified coordinates and of
 134:./lib/graphics.c ****  * the specified length.
 135:./lib/graphics.c ****  * @param x The x coordinante of the line's origin.
 2866               	BB12:
 2867               	.LBB13:
 2869 0d94 0FB6      	.Ltext4:
 2871 0d98 DEBF      	.LM151:
 2872 0d9a 0FBE      		ldd r22,Y+21
 2873 0d9c CDBF      		ldd r23,Y+22
 2874 0d9e CF91      		ldd r24,Y+23
 2875 0da0 DF91      		ldd r25,Y+24
 2876 0da2 0895      		ldi r18,lo8(0x40d55555)
 2877               		ldi r19,hi8(0x40d55555)
 2878               		ldi r20,hlo8(0x40d55555)
 2879               		ldi r21,hhi8(0x40d55555)
 2880               		call __mulsf3
 2881               		movw r26,r24
 2882               		movw r24,r22
 2883               		std Y+17,r24
 2884               		std Y+18,r25
 2885               		std Y+19,r26
 2886               		std Y+20,r27
 2888               	.LM152:
   1:lib/LC7981.c  **** /******************************************************************************
   2:lib/LC7981.c  ****  * LC7981/HD61830 Graphics LCD Driver
   3:lib/LC7981.c  ****  *
   4:lib/LC7981.c  ****  * Configured for the Samsung LJ41-00192B 160x80 monochrome graphics lcd.
   5:lib/LC7981.c  ****  *
   6:lib/LC7981.c  ****  * Written by Vanya A. Sergeev - <vsergeev@gmail.com>                         
   7:lib/LC7981.c  ****  *
   8:lib/LC7981.c  ****  * February 16, 2007                                                       
   9:lib/LC7981.c  ****  *
  10:lib/LC7981.c  **** ***************************************************************************/
  11:lib/LC7981.c  **** 
  12:lib/LC7981.c  **** /* lc7981.c: Source code for the LC7981/HD61830 graphics lcd driver.
  13:lib/LC7981.c  ****  * The hardware port defines can be found in lc7981.h. */
  14:lib/LC7981.c  **** 
  15:lib/LC7981.c  **** #include "lib/lc7981.h"
  16:lib/LC7981.c  **** #include "lib/graphics.c"
  17:lib/LC7981.c  **** 
  18:lib/LC7981.c  **** /** 
  19:lib/LC7981.c  ****  * Strobes the Enable control line to trigger the lcd to process the
  20:lib/LC7981.c  ****  * transmitted instruction.
  21:lib/LC7981.c  ****  */
  22:lib/LC7981.c  **** void lcd_strobe_enable(void) {
 2889               	Y+18
 2890               		ldd r24,Y+19
 2891               		ldd r25,Y+20
 2892 0da4 DF93      		ldi r18,lo8(0x3f800000)
 2893 0da6 CF93      		ldi r19,hi8(0x3f800000)
 2894 0da8 CDB7      		ldi r20,hlo8(0x3f800000)
 2895 0daa DEB7      		ldi r21,hhi8(0x3f800000)
 2896               		call __ltsf2
 2897               		tst r24
  23:lib/LC7981.c  **** _asm("nop;"); __asm("nop;"); __asm("nop;");
 2898               	36
 2899               	.L132:
 2901 0dae B0E0      	.LM153:
 2902 0db0 EBE3      		ldi r24,lo8(1)
 2903 0db2 F0E0      		std Y+16,r24
 2904 0db4 8081      		rjmp .L119
 2905 0db6 8064      	.L136:
  24:lib/LC7981.c  **** lcd_enable_low();
 2907               	ldd r22,Y+17
 2908               		ldd r23,Y+18
 2909               		ldd r24,Y+19
 2910               		ldd r25,Y+20
 2911 0dba 0000      		ldi r18,lo8(0x437f0000)
 2912               		ldi r19,hi8(0x437f0000)
 2913               		ldi r20,hlo8(0x437f0000)
 2914 0dbc 0000      		ldi r21,hhi8(0x437f0000)
 2915               		call __gtsf2
 2916               		cp __zero_reg__,r24
 2917 0dbe 0000      		brlt .+2
 2918               		rjmp .L137
  25:lib/LC7981.c  **** __asm("nop;"); __asm("nop;"); __asm("nop;");
 2919               	bn	68,0,156,.LM155-.LFBB19
 2920               	.LM155:
 2921               		ldd r22,Y+21
 2922 0dc0 ABE3      		ldd r23,Y+22
 2923 0dc2 B0E0      		ldd r24,Y+23
 2924 0dc4 EBE3      		ldd r25,Y+24
 2925 0dc6 F0E0      		ldi r18,lo8(0x447a0000)
 2926 0dc8 8081      		ldi r19,hi8(0x447a0000)
 2927 0dca 8F7B      		ldi r20,hlo8(0x447a0000)
 2928 0dcc 8C93      		ldi r21,hhi8(0x447a0000)
  26:lib/LC7981.c  **** 
 2929               	vsf3
 2930               		movw r26,r24
 2931               		movw r24,r22
 2932               		std Y+12,r24
 2933 0dce 0000      		std Y+13,r25
 2934               		std Y+14,r26
 2935               		std Y+15,r27
 2936 0dd0 0000      	.LBB14:
 2937               	.LBB15:
 2939 0dd2 0000      	.LM156:
 2940               		ldd r22,Y+12
 2941               		ldd r23,Y+13
  27:lib/LC7981.c  **** 
 2942               	
 2943               		ldd r25,Y+15
 2944               		ldi r18,lo8(0x459c4000)
 2945 0dd4 CF91      		ldi r19,hi8(0x459c4000)
 2946 0dd6 DF91      		ldi r20,hlo8(0x459c4000)
 2947 0dd8 0895      		ldi r21,hhi8(0x459c4000)
 2948               		call __mulsf3
 2949               		movw r26,r24
 2950               		movw r24,r22
 2951               		std Y+8,r24
 2952               		std Y+9,r25
 2953               		std Y+10,r26
  28:lib/LC7981.c  **** /**
  29:lib/LC7981.c  ****  * Waits for the busy flag to clear, which should take
  30:lib/LC7981.c  ****  * around the maximum time for an instruction to complete.
  31:lib/LC7981.c  ****  * Note, LCD operation is kind of sensitive to this configuration. If the delay
  32:lib/LC7981.c  ****  * is too fast, the LCD will miss some pixels when it is really put through
  33:lib/LC7981.c  ****  * a stress test. This dela time seems to work great.
  34:lib/LC7981.c  ****  */
  35:lib/LC7981.c  **** void lcd_wait_busy(void) {
  36:lib/LC7981.c  **** 	_delay_us(3);
 2954               	27
 2956               	.LM157:
 2957 0dda DF93      		ldd r22,Y+8
 2958 0ddc CF93      		ldd r23,Y+9
 2959 0dde CDB7      		ldd r24,Y+10
 2960 0de0 DEB7      		ldd r25,Y+11
 2961 0de2 6897      		ldi r18,lo8(0x3f800000)
 2962 0de4 0FB6      		ldi r19,hi8(0x3f800000)
 2963 0de6 F894      		ldi r20,hlo8(0x3f800000)
 2964 0de8 DEBF      		ldi r21,hhi8(0x3f800000)
 2965 0dea 0FBE      		call __ltsf2
 2966 0dec CDBF      		tst r24
 2967               		brge .L138
 2968               	.L134:
 2970               	.LM158:
 2971 0dee 80E0      		ldi r24,lo8(1)
 2972 0df0 90E0      		ldi r25,hi8(1)
 2973 0df2 A0E4      		std Y+7,r25
 2974 0df4 B0E4      		std Y+6,r24
 2975 0df6 8D8B      		rjmp .L124
 2976 0df8 9E8B      	.L138:
 2978 0dfc B88F      	.LM159:
 2979               		ldd r22,Y+8
 2980               		ldd r23,Y+9
 2981               		ldd r24,Y+10
 2982               		ldd r25,Y+11
   1:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    All rights reserved.
   5:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
   6:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
   9:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  12:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      distribution.
  16:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  17:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  21:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  33:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5.2.1 2009/02/25 10:14:03 joerg_wunsch Exp $ */
  34:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  35:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  38:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #include <inttypes.h>
  39:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  41:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /** \file */
  42:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \code
  44:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \endcode
  48:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  49:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     used.
  53:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  54:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  63:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     routines linked into the application.
  71:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  72:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  76:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** */
  77:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  78:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  82:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  83:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef F_CPU
  84:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  88:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  89:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  92:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  93:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /**
  94:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
  95:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  96:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
  97:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  98:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 101:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 102:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 103:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 104:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 105:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 106:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 107:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 108:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****  */
 109:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** void
 110:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** _delay_ms(double __ms)
 111:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** {
 112:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	uint16_t __ticks;
 113:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 114:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 115:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 116:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 117:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	{
 118:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 119:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 120:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		while(__ticks)
 121:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		{
 122:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 			// wait 1/10 ms
 123:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 124:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 			__ticks --;
 125:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		}
 126:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		return;
 127:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	}
 128:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else
 129:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 130:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 131:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** }
 132:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 133:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** /**
 134:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
 135:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 136:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 137:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 138:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 139:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 140:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 141:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 142:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 143:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 144:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 145:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****    will not be informed about this case.
 146:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h ****  */
 147:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** void
 148:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** _delay_us(double __us)
 149:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** {
 150:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	uint8_t __ticks;
 151:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 2983               	 r19,hi8(0x477fff00)
 2984               		ldi r20,hlo8(0x477fff00)
 2985 0dfe 6D89      		ldi r21,hhi8(0x477fff00)
 2986 0e00 7E89      		call __gtsf2
 2987 0e02 8F89      		cp __zero_reg__,r24
 2988 0e04 988D      		brge .L139
 2989 0e06 25E5      	.L135:
 2991 0e0a 45ED      	.LM160:
 2992 0e0c 50E4      		ldd r22,Y+12
 2993 0e0e 0E94 0000 		ldd r23,Y+13
 2994 0e12 DC01      		ldd r24,Y+14
 2995 0e14 CB01      		ldd r25,Y+15
 2996 0e16 898B      		ldi r18,lo8(0x41200000)
 2997 0e18 9A8B      		ldi r19,hi8(0x41200000)
 2998 0e1a AB8B      		ldi r20,hlo8(0x41200000)
 2999 0e1c BC8B      		ldi r21,hhi8(0x41200000)
 152:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 3000               	ovw r26,r24
 3001               		movw r24,r22
 3002 0e1e 6989      		movw r22,r24
 3003 0e20 7A89      		movw r24,r26
 3004 0e22 8B89      		call __fixunssfsi
 3005 0e24 9C89      		movw r26,r24
 3006 0e26 20E0      		movw r24,r22
 3007 0e28 30E0      		std Y+7,r25
 3008 0e2a 40E8      		std Y+6,r24
 3009 0e2c 5FE3      		rjmp .L127
 3010 0e2e 0E94 0000 	.L128:
 3011 0e32 8823      		ldi r24,lo8(500)
 3012 0e34 04F4      		ldi r25,hi8(500)
 3013               		std Y+5,r25
 153:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 3014               	LBB16:
 3015               	.LBB17:
 3017 0e38 888B      	.Ltext5:
 3019               	.LM161:
 154:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 255)
 3020               	24,Y+4
 3021               		ldd r25,Y+5
 3022 0e3c 6989      	/* #APP */
 3023 0e3e 7A89      	 ;  105 "d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3024 0e40 8B89      		1: sbiw r24,1
 3025 0e42 9C89      		brne 1b
 3026 0e44 20E0      	 ;  0 "" 2
 3027 0e46 30E0      	/* #NOAPP */
 3028 0e48 4FE7      		std Y+5,r25
 3029 0e4a 53E4      		std Y+4,r24
 3030 0e4c 0E94 0000 	.LBE17:
 3031 0e50 1816      	.LBE16:
 3033 0e54 00C0      	.Ltext6:
 155:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	{
 156:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		_delay_ms(__us / 1000.0);
 3035               	4,Y+6
 3036               		ldd r25,Y+7
 3037 0e56 6D89      		sbiw r24,1
 3038 0e58 7E89      		std Y+7,r25
 3039 0e5a 8F89      		std Y+6,r24
 3040 0e5c 988D      	.L127:
 3042 0e60 30E0      	.LM163:
 3043 0e62 4AE7      		ldd r24,Y+6
 3044 0e64 54E4      		ldd r25,Y+7
 3045 0e66 0E94 0000 		sbiw r24,0
 3046 0e6a DC01      		brne .L128
 3047 0e6c CB01      		rjmp .L131
 3048 0e6e 8C87      	.L139:
 3050 0e72 AE87      	.LM164:
 3051 0e74 BF87      		ldd r22,Y+8
 3052               		ldd r23,Y+9
 3053               		ldd r24,Y+10
 3054               		ldd r25,Y+11
 3055               		call __fixunssfsi
 3056 0e76 6C85      		movw r26,r24
 3057 0e78 7D85      		movw r24,r22
 3058 0e7a 8E85      		std Y+7,r25
 3059 0e7c 9F85      		std Y+6,r24
 3060 0e7e 20E0      	.L124:
 3061 0e80 30E4      		ldd r24,Y+6
 3062 0e82 4CE9      		ldd r25,Y+7
 3063 0e84 55E4      		std Y+3,r25
 3064 0e86 0E94 0000 		std Y+2,r24
 3065 0e8a DC01      	.LBB18:
 3066 0e8c CB01      	.LBB19:
 3068 0e90 9987      	.Ltext7:
 3070 0e94 BB87      	.LM165:
 3071               		ldd r24,Y+2
 3072               		ldd r25,Y+3
 3073 0e96 6885      	/* #APP */
 3074 0e98 7985      	 ;  105 "d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3075 0e9a 8A85      		1: sbiw r24,1
 3076 0e9c 9B85      		brne 1b
 3077 0e9e 20E0      	 ;  0 "" 2
 3078 0ea0 30E0      	/* #NOAPP */
 3079 0ea2 40E8      		std Y+3,r25
 3080 0ea4 5FE3      		std Y+2,r24
 3081 0ea6 0E94 0000 		rjmp .L131
 3082 0eaa 8823      	.L137:
 3083 0eac 04F4      	.LBE19:
 3084               	.LBE18:
 3085               	.LBE15:
 3086               	.LBE14:
 3088 0eb0 90E0      	.Ltext8:
 3090 0eb4 8E83      	.LM166:
 3091 0eb6 00C0      		ldd r22,Y+17
 3092               		ldd r23,Y+18
 3093               		ldd r24,Y+19
 3094               		ldd r25,Y+20
 3095 0eb8 6885      		call __fixunssfsi
 3096 0eba 7985      		movw r26,r24
 3097 0ebc 8A85      		movw r24,r22
 3098 0ebe 9B85      		std Y+16,r24
 3099 0ec0 20E0      	.L119:
 3100 0ec2 3FEF      		ldd r24,Y+16
 3101 0ec4 4FE7      		std Y+1,r24
 3102 0ec6 57E4      	.LBB20:
 3103 0ec8 0E94 0000 	.LBB21:
 3105 0ece 04F4      	.Ltext9:
 3107               	.LM167:
 3108               		ldd r24,Y+1
 3109 0ed0 6C85      	/* #APP */
 3110 0ed2 7D85      	 ;  83 "d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3111 0ed4 8E85      		1: dec r24
 3112 0ed6 9F85      		brne 1b
 3113 0ed8 20E0      	 ;  0 "" 2
 3114 0eda 30E0      	/* #NOAPP */
 3115 0edc 40E2      		std Y+1,r24
 3116 0ede 51E4      	.L131:
 3117 0ee0 0E94 0000 	/* epilogue start */
 3118 0ee4 DC01      	.LBE21:
 3119 0ee6 CB01      	.LBE20:
 3120 0ee8 BC01      	.LBE13:
 3121 0eea CD01      	.LBE12:
 3123 0ef0 DC01      	.Ltext10:
 3125 0ef4 9F83      	.LM168:
 3126 0ef6 8E83      		adiw r28,24
 3127 0ef8 00C0      		in __tmp_reg__,__SREG__
 3128               		cli
 3129 0efa 84EF      		out __SP_H__,r29
 3130 0efc 91E0      		out __SREG__,__tmp_reg__
 3131 0efe 9D83      		out __SP_L__,r28
 3132 0f00 8C83      		pop r28
 3133               		pop r29
 3134               		ret
 3136               	.Lscope19:
   1:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 3137               	bs	"data:p(0,11)",160,0,0,2
 3138               	.global	lcd_write_command
 3140 0f04 9D81      	lcd_write_command:
 3142               	.LM169:
 3143 0f06 0197      	.LFBB20:
 3144 0f08 01F4      		push r29
 3145               		push r28
 3146               		rcall .
 3147 0f0a 9D83      		in r28,__SP_L__
 3148 0f0c 8C83      		in r29,__SP_H__
 3149               	/* prologue: function */
 3150               	/* frame size = 2 */
 3151               		std Y+1,r24
 3152               		std Y+2,r22
 3154               	.LM170:
 3155 0f0e 8E81      		call lcd_wait_busy
 3157 0f12 0197      	.LM171:
 3158 0f14 9F83      		ldi r26,lo8(59)
 3159 0f16 8E83      		ldi r27,hi8(59)
 3160               		ldi r30,lo8(59)
 3161               		ldi r31,hi8(59)
 3162               		ld r24,Z
 3163 0f18 8E81      		andi r24,lo8(-33)
 3164 0f1a 9F81      		st X,r24
 3166 0f1e 01F4      	.LM172:
 3167 0f20 00C0      		ldi r26,lo8(59)
 3168               		ldi r27,hi8(59)
 3169               		ldi r30,lo8(59)
 3170               		ldi r31,hi8(59)
 3171 0f22 6885      		ld r24,Z
 3172 0f24 7985      		ori r24,lo8(-128)
 3173 0f26 8A85      		st X,r24
 3175 0f2a 0E94 0000 	.LM173:
 3176 0f2e DC01      		ldi r30,lo8(53)
 3177 0f30 CB01      		ldi r31,hi8(53)
 3178 0f32 9F83      		ldd r24,Y+1
 3179 0f34 8E83      		andi r24,lo8(15)
 3180               		st Z,r24
 3182 0f38 9F81      	.LM174:
 3183 0f3a 9B83      	/* #APP */
 3184 0f3c 8A83      	 ;  78 "lib/LC7981.c" 1
 3185               		nop;
 3186               	 ;  0 "" 2
 3187               	 ;  78 "lib/LC7981.c" 1
 3188               		nop;
 3189               	 ;  0 "" 2
 3190               	 ;  78 "lib/LC7981.c" 1
 3191 0f3e 8A81      		nop;
 3192 0f40 9B81      	 ;  0 "" 2
 3194               	.LM175:
 3195 0f42 0197      	 ;  79 "lib/LC7981.c" 1
 3196 0f44 01F4      		nop;
 3197               	 ;  0 "" 2
 3198               	 ;  79 "lib/LC7981.c" 1
 3199 0f46 9B83      		nop;
 3200 0f48 8A83      	 ;  0 "" 2
 3201 0f4a 00C0      	 ;  79 "lib/LC7981.c" 1
 3202               		nop;
 3203               	 ;  0 "" 2
 3205               	.LM176:
 3206               	/* #NOAPP */
 3207               		call lcd_strobe_enable
 157:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		return;
 158:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	}
 159:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else
 160:d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 3209               	LC7981.c" 1
 3210               		nop;
 3211 0f4c 6989      	 ;  0 "" 2
 3212 0f4e 7A89      	 ;  81 "lib/LC7981.c" 1
 3213 0f50 8B89      		nop;
 3214 0f52 9C89      	 ;  0 "" 2
 3216 0f58 DC01      	.LM178:
 3217 0f5a CB01      	 ;  82 "lib/LC7981.c" 1
 3218 0f5c 888B      		nop;
 3219               	 ;  0 "" 2
 3220 0f5e 8889      	 ;  82 "lib/LC7981.c" 1
 3221 0f60 8983      		nop;
 3222               	 ;  0 "" 2
 3223               	 ;  82 "lib/LC7981.c" 1
 3224               		nop;
 3225               	 ;  0 "" 2
 3227               	.LM179:
 3228 0f62 8981      	/* #NOAPP */
 3229               		ldi r26,lo8(59)
 3230               		ldi r27,hi8(59)
 3231 0f64 8A95      		ldi r30,lo8(59)
 3232 0f66 01F4      		ldi r31,hi8(59)
 3233               		ld r24,Z
 3234               		andi r24,lo8(-33)
 3235 0f68 8983      		st X,r24
 3237               	.LM180:
 3238               		ldi r26,lo8(59)
 3239               		ldi r27,hi8(59)
 3240               		ldi r30,lo8(59)
 3241               		ldi r31,hi8(59)
 3242               		ld r24,Z
 3243               		andi r24,lo8(127)
  37:lib/LC7981.c  ****  Older implementation of lcd_wait_busy() that checked the busy flag in 
  38:lib/LC7981.c  ****  * hardware. I found that it always hanged after plotting a byte to the screen,
 3244               	FBB20
 3245               	.LM181:
 3246 0f6a 6896      		ldi r30,lo8(53)
 3247 0f6c 0FB6      		ldi r31,hi8(53)
 3248 0f6e F894      		ldd r24,Y+2
 3249 0f70 DEBF      		st Z,r24
 3251 0f74 CDBF      	.LM182:
 3252 0f76 CF91      	/* #APP */
 3253 0f78 DF91      	 ;  88 "lib/LC7981.c" 1
 3254 0f7a 0895      		nop;
 3255               	 ;  0 "" 2
 3256               	 ;  88 "lib/LC7981.c" 1
 3257               		nop;
 3258               	 ;  0 "" 2
 3259               	 ;  88 "lib/LC7981.c" 1
 3260               		nop;
 3261               	 ;  0 "" 2
  39:lib/LC7981.c  ****  so I took up the delay version above.
  40:lib/LC7981.c  ****  *
  41:lib/LC7981.c  **** void lcd_wait_busy(void) {
  42:lib/LC7981.c  **** 	unsigned char counter = 1;
  43:lib/LC7981.c  **** 	unsigned char data;
  44:lib/LC7981.c  **** 	* Set RW and RS high *
  45:lib/LC7981.c  **** 	lcd_rw_high();
  46:lib/LC7981.c  **** 	lcd_rs_high();
  47:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  48:lib/LC7981.c  **** 	* Wait until busy flag on last bit of the data port clears. *
  49:lib/LC7981.c  **** 	do {
  50:lib/LC7981.c  **** 		lcd_enable_high();
  51:lib/LC7981.c  **** 		__asm("nop;"); __asm("nop;"); __asm("nop;");
  52:lib/LC7981.c  **** 		data = LCD_DATA_PORT;
  53:lib/LC7981.c  **** 		__asm("nop;"); __asm("nop;"); __asm("nop;");
  54:lib/LC7981.c  **** 		lcd_enable_low();
  55:lib/LC7981.c  **** 		__asm("nop;"); __asm("nop;"); __asm("nop;");
  56:lib/LC7981.c  **** 	} while (data & 0x80);
  57:lib/LC7981.c  **** }*/
  58:lib/LC7981.c  **** 
  59:lib/LC7981.c  **** /**
  60:lib/LC7981.c  ****  * Writes a raw instruction to the LCD. 
  61:lib/LC7981.c  ****  * @param command The 4-bit instruction code.
  62:lib/LC7981.c  ****  * @param data The 8-bit paramater/data to the specified instruction.
  63:lib/LC7981.c  ****  */
  64:lib/LC7981.c  **** void lcd_write_command(unsigned char command, unsigned char data) {
  65:lib/LC7981.c  **** 	/* Wait for the busy flag to clear */
  66:lib/LC7981.c  **** 	lcd_wait_busy();
  67:lib/LC7981.c  **** 	
  68:lib/LC7981.c  **** 	/* Set RW low, RS high to write the instruction command */
 3263               	/LC7981.c" 1
 3264               		nop;
 3265               	 ;  0 "" 2
 3266 0f7c DF93      	 ;  89 "lib/LC7981.c" 1
 3267 0f7e CF93      		nop;
 3268 0f80 00D0      	 ;  0 "" 2
 3269 0f82 CDB7      	 ;  89 "lib/LC7981.c" 1
 3270 0f84 DEB7      		nop;
 3271               	 ;  0 "" 2
 3273 0f86 8983      	.LM184:
 3274 0f88 6A83      	/* #NOAPP */
  69:lib/LC7981.c  **** 
  70:lib/LC7981.c  **** 	/* Instruction commands are a maximum of 4 bits long, so 
 3275               	robe_enable
 3277 0f8a 0E94 0000 	.LM185:
  71:lib/LC7981.c  ****  * just mask off the rest. */
  72:lib/LC7981.c  **** 	LCD_DATA_PORT = (command&0x0F);
  73:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3278               	#APP */
 3279               	 ;  91 "lib/LC7981.c" 1
 3280 0f8e ABE3      		nop;
 3281 0f90 B0E0      	 ;  0 "" 2
 3282 0f92 EBE3      	 ;  91 "lib/LC7981.c" 1
 3283 0f94 F0E0      		nop;
 3284 0f96 8081      	 ;  0 "" 2
 3285 0f98 8F7D      	 ;  91 "lib/LC7981.c" 1
 3286 0f9a 8C93      		nop;
  74:lib/LC7981.c  **** asm("nop;"); __asm("nop;"); __asm("nop;");
 3287               	2
 3289 0f9c ABE3      	.LM186:
 3290 0f9e B0E0      	 ;  92 "lib/LC7981.c" 1
 3291 0fa0 EBE3      		nop;
 3292 0fa2 F0E0      	 ;  0 "" 2
 3293 0fa4 8081      	 ;  92 "lib/LC7981.c" 1
 3294 0fa6 8068      		nop;
 3295 0fa8 8C93      	 ;  0 "" 2
  75:lib/LC7981.c  **** lcd_strobe_enable();
  76:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  77:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3296               	ib/LC7981.c" 1
 3297               		nop;
 3298 0faa E5E3      	 ;  0 "" 2
 3299 0fac F0E0      	/* epilogue start */
 3301 0fb0 8F70      	.LM187:
 3302 0fb2 8083      	/* #NOAPP */
  78:lib/LC7981.c  **** * Set RW low, RW low to write the instruction data */
 3303               	tmp_reg__
 3304               		pop __tmp_reg__
 3305               		pop r28
 3306               		pop r29
 3307 0fb4 0000      		ret
 3309               	.Lscope20:
 3311               	.global	lcd_graphics_init
 3313 0fb8 0000      	lcd_graphics_init:
  79:lib/LC7981.c  **** lcd_rw_low();
 3315               	B21:
 3316               		push r29
 3317               		push r28
 3318 0fba 0000      		push __tmp_reg__
 3319               		in r28,__SP_L__
 3320               		in r29,__SP_H__
 3321 0fbc 0000      	/* prologue: function */
 3322               	/* frame size = 1 */
 3324 0fbe 0000      	.LM189:
 3325               		ldi r30,lo8(52)
  80:lib/LC7981.c  **** lcd_rs_low();
 3326               	8(52)
 3327               		ldi r24,lo8(-1)
 3328               		st Z,r24
  81:lib/LC7981.c  **** 
 3330               	90:
 3331               		ldi r26,lo8(58)
 3332               		ldi r27,hi8(58)
 3333               		ldi r30,lo8(58)
 3334 0fc4 0000      		ldi r31,hi8(58)
 3335               		ld r24,Z
 3336               		ori r24,lo8(-32)
 3337 0fc6 0000      		st X,r24
 3339               	.LM191:
 3340 0fc8 0000      		ldi r26,lo8(59)
 3341               		ldi r27,hi8(59)
  82:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3342               	(59)
 3343               		ldi r31,hi8(59)
 3344               		ld r24,Z
 3345 0fca 0000      		andi r24,lo8(-33)
 3346               		st X,r24
 3348 0fcc 0000      	.LM192:
 3349               		ldi r26,lo8(59)
 3350               		ldi r27,hi8(59)
 3351 0fce 0000      		ldi r30,lo8(59)
 3352               		ldi r31,hi8(59)
  83:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
  84:lib/LC7981.c  **** 	lcd_rw_low();
  85:lib/LC7981.c  **** 	lcd_rs_low();
 3353               	andi r24,lo8(127)
 3354               		st X,r24
 3356 0fd0 ABE3      	.LM193:
 3357 0fd2 B0E0      		ldi r26,lo8(59)
 3358 0fd4 EBE3      		ldi r27,hi8(59)
 3359 0fd6 F0E0      		ldi r30,lo8(59)
 3360 0fd8 8081      		ldi r31,hi8(59)
 3361 0fda 8F7D      		ld r24,Z
 3362 0fdc 8C93      		andi r24,lo8(-65)
  86:lib/LC7981.c  **** D_DATA_PORT = data;
 3364               	.LM194:
 3365 0fde ABE3      		ldi r24,lo8(50)
 3366 0fe0 B0E0      		std Y+1,r24
 3368 0fe4 F0E0      	.LM195:
 3369 0fe6 8081      		ldi r24,lo8(0)
 3370 0fe8 8F77      		ldd r22,Y+1
 3371 0fea 8C93      		call lcd_write_command
  87:lib/LC7981.c  **** nop;"); __asm("nop;");
 3372               	8,0,118,.LM196-.LFBB21
 3373               	.LM196:
 3374 0fec E5E3      		ldi r24,lo8(7)
 3375 0fee F0E0      		std Y+1,r24
 3377 0ff2 8083      	.LM197:
  88:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 3378               	24,lo8(1)
 3379               		ldd r22,Y+1
 3380               		call lcd_write_command
 3382 0ff4 0000      	.LM198:
 3383               		ldi r24,lo8(19)
 3384               		std Y+1,r24
 3386               	.LM199:
 3387               		ldi r24,lo8(2)
 3388 0ff8 0000      		ldd r22,Y+1
 3389               		call lcd_write_command
  89:lib/LC7981.c  **** lcd_rw_low();
 3390               	,128,.LM200-.LFBB21
 3391               	.LM200:
 3392               		ldi r24,lo8(127)
 3393 0ffa 0000      		std Y+1,r24
 3395               	.LM201:
 3396 0ffc 0000      		ldi r24,lo8(3)
 3397               		ldd r22,Y+1
 3398               		call lcd_write_command
 3400               	.LM202:
  90:lib/LC7981.c  **** lcd_rs_low();
 3401               	zero_reg__
 3403               	.LM203:
 3404 1000 0E94 0000 		ldi r24,lo8(8)
  91:lib/LC7981.c  **** 
 3405               	 r22,Y+1
 3406               		call lcd_write_command
 3408               	.LM204:
 3409 1004 0000      		ldi r24,lo8(9)
 3410               		ldd r22,Y+1
 3411               		call lcd_write_command
 3413               	.LM205:
 3414               		std Y+1,__zero_reg__
 3416               	.LM206:
  92:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3417               	(10)
 3418               		ldd r22,Y+1
 3419               		call lcd_write_command
 3421               	.LM207:
 3422               		ldi r24,lo8(11)
 3423 100c 0000      		ldd r22,Y+1
 3424               		call lcd_write_command
 3425               	/* epilogue start */
 3427               	.LM208:
 3428               		pop __tmp_reg__
  93:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 3429               	p r29
 3430               		ret
 3435 1016 DF91      	.Lscope21:
 3439               	.global	lcd_graphics_move
 3441               	lcd_graphics_move:
  94:lib/LC7981.c  **** lcd_rw_low();
  95:lib/LC7981.c  **** 	lcd_rs_low();
  96:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
  97:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  98:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
  99:lib/LC7981.c  **** 	lcd_strobe_enable();
 3443               	2:
 3444               		push r29
 3445               		push r28
 3446 101a DF93      		rcall .
 3447 101c CF93      		rcall .
 3448 101e 0F92      		rcall .
 3449 1020 CDB7      		in r28,__SP_L__
 3450 1022 DEB7      		in r29,__SP_H__
 3451               	/* prologue: function */
 3452               	/* frame size = 6 */
 100:lib/LC7981.c  **** ("nop;"); __asm("nop;"); __asm("nop;");
 101:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 102:lib/LC7981.c  **** }
 103:lib/LC7981.c  **** 
 3453               	25
 3454               		std Y+3,r24
 3455 1024 E4E3      		std Y+6,r23
 3456 1026 F0E0      		std Y+5,r22
 3458 102a 8083      	.LM210:
 104:lib/LC7981.c  **** "nop;");
 3459               	18,Y+5
 3460               		ldd r19,Y+6
 3461 102c AAE3      		ldi r24,lo8(160)
 3462 102e B0E0      		ldi r25,hi8(160)
 3463 1030 EAE3      		movw r20,r18
 3464 1032 F0E0      		mul r20,r24
 3465 1034 8081      		movw r18,r0
 3466 1036 806E      		mul r20,r25
 3467 1038 8C93      		add r19,r0
 105:lib/LC7981.c  **** 
 106:lib/LC7981.c  **** 	lcd_rs_low();
 107:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 3468               	r24
 3469               		add r19,r0
 3470 103a ABE3      		clr r1
 3471 103c B0E0      		ldd r24,Y+3
 3472 103e EBE3      		ldd r25,Y+4
 3473 1040 F0E0      		add r24,r18
 3474 1042 8081      		adc r25,r19
 3475 1044 8F7D      		lsr r25
 3476 1046 8C93      		ror r24
 108:lib/LC7981.c  **** nop;"); __asm("nop;");
 3477               		ror r24
 3478               		lsr r25
 3479 1048 ABE3      		ror r24
 3480 104a B0E0      		std Y+2,r25
 3481 104c EBE3      		std Y+1,r24
 3483 1050 8081      	.LM211:
 3484 1052 8F77      		ldd r25,Y+1
 3485 1054 8C93      		ldi r24,lo8(10)
 109:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 3486               	r25
 3487               		call lcd_write_command
 3489 1058 B0E0      	.LM212:
 3490 105a EBE3      		ldd r24,Y+1
 3491 105c F0E0      		ldd r25,Y+2
 3492 105e 8081      		mov r24,r25
 3493 1060 8F7B      		clr r25
 3494 1062 8C93      		mov r25,r24
 110:lib/LC7981.c  **** lcd_rw_low();
 111:lib/LC7981.c  **** 	lcd_rs_low();
 112:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 113:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3495               	lo8(11)
 3496               		mov r22,r25
 3497 1064 82E3      		call lcd_write_command
 3498 1066 8983      	/* epilogue start */
 114:lib/LC7981.c  **** sm("nop;"); __asm("nop;"); __asm("nop;");
 3499               	abn	68,0,156,.LM213-.LFBB22
 3500               	.LM213:
 3501 1068 80E0      		adiw r28,6
 3502 106a 6981      		in __tmp_reg__,__SREG__
 3503 106c 0E94 0000 		cli
 115:lib/LC7981.c  **** 
 116:lib/LC7981.c  **** 	lcd_rs_low();
 117:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 118:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3504               	__SP_H__,r29
 3505               		out __SREG__,__tmp_reg__
 3506 1070 87E0      		out __SP_L__,r28
 3507 1072 8983      		pop r28
 119:lib/LC7981.c  **** to write the instruction data */
 3508               	 r29
 3509               		ret
 120:lib/LC7981.c  **** lcd_rw_low();
 121:lib/LC7981.c  **** 	lcd_rs_low();
 122:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 123:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 124:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3513               	bn	224,0,0,.Lscope22-.LFBB22
 3514               	.Lscope22:
 125:lib/LC7981.c  **** strobe_enable();
 3517               	bal	lcd_graphics_draw_byte
 3519 1080 82E0      	lcd_graphics_draw_byte:
 3521 1084 0E94 0000 	.LM214:
 126:lib/LC7981.c  **** TA_PORT = data;
 127:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 128:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3522               	23:
 3523               		push r29
 3524 1088 8FE7      		push r28
 3525 108a 8983      		push __tmp_reg__
 129:lib/LC7981.c  **** 
 3526               	r28,__SP_L__
 3527               		in r29,__SP_H__
 3528 108c 83E0      	/* prologue: function */
 3529 108e 6981      	/* frame size = 1 */
 3530 1090 0E94 0000 		std Y+1,r24
 130:lib/LC7981.c  **** ; __asm("nop;");
 131:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 132:lib/LC7981.c  **** 
 3531               	bn	68,0,163,.LM215-.LFBB23
 3532               	.LM215:
 3533 1094 1982      		ldi r24,lo8(12)
 133:lib/LC7981.c  ****  Set RW low, RW low to write the instruction data */
 3534               	d r22,Y+1
 3535               		call lcd_write_command
 3536 1096 88E0      	/* epilogue start */
 3538 109a 0E94 0000 	.LM216:
 134:lib/LC7981.c  **** lcd_rw_low();
 3539               	__tmp_reg__
 3540               		pop r28
 3541 109e 89E0      		pop r29
 3542 10a0 6981      		ret
 135:lib/LC7981.c  **** lcd_rs_low();
 136:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 137:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3544               	pe23:
 138:lib/LC7981.c  **** to write the instruction data */
 3547               	tabs	"y:p(0,9)",160,0,0,3
 3549 10a8 8AE0      	.global	lcd_graphics_plot_byte
 3551 10ac 0E94 0000 	lcd_graphics_plot_byte:
 139:lib/LC7981.c  **** lcd_rw_low();
 3552               	bn	68,0,172,.LM217-.LFBB24
 3553               	.LM217:
 3554 10b0 8BE0      	.LFBB24:
 3555 10b2 6981      		push r29
 3556 10b4 0E94 0000 		push r28
 3557               		rcall .
 140:lib/LC7981.c  **** lcd_rs_low();
 3558               	 .
 3559               		push __tmp_reg__
 3560 10b8 0F90      		in r28,__SP_L__
 3561 10ba CF91      		in r29,__SP_H__
 3562 10bc DF91      	/* prologue: function */
 3563 10be 0895      	/* frame size = 5 */
 3564               		std Y+2,r25
 3565               		std Y+1,r24
 3566               		std Y+4,r23
 3567               		std Y+3,r22
 3568               		std Y+5,r20
 3570               	.LM218:
 3571               		ldd r24,Y+1
 3572               		ldd r25,Y+2
 3573               		ldd r18,Y+3
 3574               		ldd r19,Y+4
 141:lib/LC7981.c  **** 
 142:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 143:lib/LC7981.c  **** 
 144:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 145:lib/LC7981.c  **** 	lcd_rw_low();
 146:lib/LC7981.c  **** 	lcd_rs_low();
 147:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 3575               	ll lcd_graphics_move
 3577               	.LM219:
 3578 10c0 DF93      		ldd r24,Y+5
 3579 10c2 CF93      		call lcd_graphics_draw_byte
 3580 10c4 00D0      	/* epilogue start */
 3582 10c8 00D0      	.LM220:
 3583 10ca CDB7      		pop __tmp_reg__
 3584 10cc DEB7      		pop __tmp_reg__
 3585               		pop __tmp_reg__
 3586               		pop __tmp_reg__
 3587 10ce 9C83      		pop __tmp_reg__
 3588 10d0 8B83      		pop r28
 3589 10d2 7E83      		pop r29
 3590 10d4 6D83      		ret
 148:lib/LC7981.c  **** ("nop;"); __asm("nop;"); __asm("nop;");
 149:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 150:lib/LC7981.c  **** 	lcd_strobe_enable();
 151:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3591               	ics_plot_byte, .-lcd_graphics_plot_byte
 3592               	.Lscope24:
 3597 10de A901      	.global	lcd_graphics_plot_pixel
 3599 10e2 9001      	lcd_graphics_plot_pixel:
 3601 10e6 300D      	.LM221:
 3602 10e8 589F      	.LFBB25:
 3603 10ea 300D      		push r29
 3604 10ec 1124      		push r28
 3605 10ee 8B81      		rcall .
 3606 10f0 9C81      		rcall .
 3607 10f2 820F      		rcall .
 3608 10f4 931F      		in r28,__SP_L__
 3609 10f6 9695      		in r29,__SP_H__
 3610 10f8 8795      	/* prologue: function */
 3611 10fa 9695      	/* frame size = 6 */
 3612 10fc 8795      		std Y+3,r25
 3613 10fe 9695      		std Y+2,r24
 3614 1100 8795      		std Y+5,r23
 3615 1102 9A83      		std Y+4,r22
 3616 1104 8983      		std Y+6,r20
 152:lib/LC7981.c  **** __asm("nop;");
 153:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 154:lib/LC7981.c  **** 	lcd_strobe_enable();
 3617               	FBB25
 3618               	.LM222:
 3619 1106 9981      		ldd r24,Y+2
 3620 1108 8AE0      		ldd r25,Y+3
 3621 110a 692F      		ldd r18,Y+4
 3622 110c 0E94 0000 		ldd r19,Y+5
 155:lib/LC7981.c  **** TA_PORT = data;
 3623               	r22,r18
 3624               		call lcd_graphics_move
 3626 1112 9A81      	.LM223:
 3627 1114 892F      		ldd r24,Y+2
 3628 1116 9927      		andi r24,lo8(7)
 3629 1118 982F      		std Y+1,r24
 3631 111c 692F      	.LM224:
 3632 111e 0E94 0000 		ldd r24,Y+6
 3633               		cpi r24,lo8(-1)
 156:lib/LC7981.c  **** nop;"); __asm("nop;");
 3634               	
 3636 1122 2696      	.LM225:
 3637 1124 0FB6      		ldi r24,lo8(15)
 3638 1126 F894      		ldd r22,Y+1
 3639 1128 DEBF      		call lcd_write_command
 3640 112a 0FBE      		rjmp .L153
 3641 112c CDBF      	.L151:
 3643 1130 DF91      	.LM226:
 3644 1132 0895      		ldi r24,lo8(14)
 3645               		ldd r22,Y+1
 3646               		call lcd_write_command
 3647               	.L153:
 3648               	/* epilogue start */
 3650               	.LM227:
 3651               		adiw r28,6
 3652               		in __tmp_reg__,__SREG__
 3653               		cli
 3654               		out __SP_H__,r29
 157:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 158:lib/LC7981.c  **** 	lcd_rw_low();
 159:lib/LC7981.c  **** 	lcd_rs_low();
 160:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 161:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 162:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3655               	reg__
 3656               		out __SP_L__,r28
 3657               		pop r28
 3658 1134 DF93      		pop r29
 3659 1136 CF93      		ret
 3664               	.Lscope25:
 163:lib/LC7981.c  **** trobe_enable();
 3666               	_graphics_clear
 3668 1140 8CE0      	lcd_graphics_clear:
 3670 1144 0E94 0000 	.LM228:
 3671               	.LFBB26:
 164:lib/LC7981.c  **** TA_PORT = data;
 3672               	r29
 3673               		push r28
 3674 1148 0F90      		rcall .
 3675 114a CF91      		in r28,__SP_L__
 3676 114c DF91      		in r29,__SP_H__
 3677 114e 0895      	/* prologue: function */
 3678               	/* frame size = 2 */
 3680               	.LM229:
 3681               		ldi r24,lo8(0)
 3682               		ldi r25,hi8(0)
 3683               		ldi r22,lo8(0)
 3684               		ldi r23,hi8(0)
 3685               		call lcd_graphics_move
 165:lib/LC7981.c  **** nop;"); __asm("nop;");
 166:lib/LC7981.c  **** 
 167:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 168:lib/LC7981.c  **** 	lcd_rw_low();
 169:lib/LC7981.c  **** 	lcd_rs_low();
 170:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 171:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 172:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3687               	2,__zero_reg__
 3688               		std Y+1,__zero_reg__
 3689               		rjmp .L155
 3690 1150 DF93      	.L156:
 3692 1154 00D0      	.LM231:
 3693 1156 00D0      		ldi r24,lo8(0)
 3694 1158 0F92      		call lcd_graphics_draw_byte
 3696 115c DEB7      	.LM232:
 3697               		ldd r24,Y+1
 3698               		ldd r25,Y+2
 3699 115e 9A83      		adiw r24,1
 3700 1160 8983      		std Y+2,r25
 3701 1162 7C83      		std Y+1,r24
 3702 1164 6B83      	.L155:
 3703 1166 4D83      		ldd r24,Y+1
 173:lib/LC7981.c  **** obe_enable();
 3704               	 r18,hi8(1600)
 3705               		cpi r24,lo8(1600)
 3706 1168 8981      		cpc r25,r18
 3707 116a 9A81      		brlo .L156
 3708 116c 2B81      	/* epilogue start */
 3710 1170 B901      	.LM233:
 3711 1172 0E94 0000 		pop __tmp_reg__
 174:lib/LC7981.c  **** TA_PORT = data;
 3712               	mp_reg__
 3713               		pop r28
 3714 1176 8D81      		pop r29
 3715 1178 0E94 0000 		ret
 175:lib/LC7981.c  **** nop;"); __asm("nop;");
 3717               	bs	"i:(0,9)",128,0,0,1
 3720 117e 0F90      	.Lscope26:
 3723 1184 0F90      	.global	delay_ms_long
 3725 1188 DF91      	delay_ms_long:
 3727               	.LM234:
 3728               	.LFBB27:
 3729               		push r29
 3730               		push r28
 3731               		in r28,__SP_L__
 3732               		in r29,__SP_H__
 3733               		sbiw r28,16
 3734               		in __tmp_reg__,__SREG__
 3735               		cli
 176:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 177:lib/LC7981.c  **** 	lcd_rw_low();
 178:lib/LC7981.c  **** 	lcd_rs_low();
 179:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 180:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 181:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 182:lib/LC7981.c  **** 	lcd_strobe_enable();
 183:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3736               	out __SREG__,__tmp_reg__
 3737               		out __SP_L__,r28
 3738               	/* prologue: function */
 3739 118c DF93      	/* frame size = 16 */
 3740 118e CF93      		std Y+16,r25
 3741 1190 00D0      		std Y+15,r24
 3742 1192 00D0      		rjmp .L159
 3743 1194 00D0      	.L168:
 3745 1198 DEB7      	.LM235:
 3746               		ldi r24,lo8(0x3f800000)
 3747               		ldi r25,hi8(0x3f800000)
 3748 119a 9B83      		ldi r26,hlo8(0x3f800000)
 3749 119c 8A83      		ldi r27,hhi8(0x3f800000)
 3750 119e 7D83      		std Y+11,r24
 3751 11a0 6C83      		std Y+12,r25
 3752 11a2 4E83      		std Y+13,r26
 184:lib/LC7981.c  **** nop;"); __asm("nop;"); __asm("nop;");
 185:lib/LC7981.c  **** }
 186:lib/LC7981.c  **** 
 3753               	B28:
 3754               	.LBB29:
 3756 11a6 9B81      	.Ltext11:
 3758 11aa 3D81      	.LM236:
 3759 11ac B901      		ldd r22,Y+11
 3760 11ae 0E94 0000 		ldd r23,Y+12
 187:lib/LC7981.c  **** "nop;");
 188:lib/LC7981.c  **** 	lcd_strobe_enable();
 189:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 190:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3761               	,Y+13
 3762               		ldd r25,Y+14
 3763 11b2 8A81      		ldi r18,lo8(0x459c4000)
 3764 11b4 8770      		ldi r19,hi8(0x459c4000)
 3765 11b6 8983      		ldi r20,hlo8(0x459c4000)
 191:lib/LC7981.c  **** _asm("nop;");
 192:lib/LC7981.c  **** 	lcd_strobe_enable();
 3766               	r21,hhi8(0x459c4000)
 3767               		call __mulsf3
 3768 11b8 8E81      		movw r26,r24
 3769 11ba 8F3F      		movw r24,r22
 3770 11bc 01F4      		std Y+7,r24
 193:lib/LC7981.c  **** TA_PORT = data;
 3771               	Y+8,r25
 3772               		std Y+9,r26
 3773 11be 8FE0      		std Y+10,r27
 3775 11c2 0E94 0000 	.LM237:
 3776 11c6 00C0      		ldd r22,Y+7
 3777               		ldd r23,Y+8
 194:lib/LC7981.c  **** nop;"); __asm("nop;");
 195:lib/LC7981.c  **** 
 3778               	4,Y+9
 3779               		ldd r25,Y+10
 3780 11c8 8EE0      		ldi r18,lo8(0x3f800000)
 3781 11ca 6981      		ldi r19,hi8(0x3f800000)
 3782 11cc 0E94 0000 		ldi r20,hlo8(0x3f800000)
 3783               		ldi r21,hhi8(0x3f800000)
 3784               		call __ltsf2
 196:lib/LC7981.c  **** * Set RW low, RW low to write the instruction data */
 3785               	4
 3786               		brge .L172
 3787 11d0 2696      	.L170:
 3789 11d4 F894      	.LM238:
 3790 11d6 DEBF      		ldi r24,lo8(1)
 3791 11d8 0FBE      		ldi r25,hi8(1)
 3792 11da CDBF      		std Y+6,r25
 3793 11dc CF91      		std Y+5,r24
 3794 11de DF91      		rjmp .L162
 3795 11e0 0895      	.L172:
 3797               	.LM239:
 3798               		ldd r22,Y+7
 3799               		ldd r23,Y+8
 3800               		ldd r24,Y+9
 3801               		ldd r25,Y+10
 3802               		ldi r18,lo8(0x477fff00)
 3803               		ldi r19,hi8(0x477fff00)
 3804               		ldi r20,hlo8(0x477fff00)
 197:lib/LC7981.c  **** lcd_rw_low();
 198:lib/LC7981.c  **** 	lcd_rs_low();
 199:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 200:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 201:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3805               	ff00)
 3806               		call __gtsf2
 3807               		cp __zero_reg__,r24
 3808 11e2 DF93      		brge .L173
 3809 11e4 CF93      	.L171:
 3811 11e8 CDB7      	.LM240:
 3812 11ea DEB7      		ldd r22,Y+11
 3813               		ldd r23,Y+12
 3814               		ldd r24,Y+13
 202:lib/LC7981.c  **** strobe_enable();
 203:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 204:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 3815               	+14
 3816               		ldi r18,lo8(0x41200000)
 3817 11ec 80E0      		ldi r19,hi8(0x41200000)
 3818 11ee 90E0      		ldi r20,hlo8(0x41200000)
 3819 11f0 60E0      		ldi r21,hhi8(0x41200000)
 3820 11f2 70E0      		call __mulsf3
 3821 11f4 0E94 0000 		movw r26,r24
 205:lib/LC7981.c  **** _asm("nop;");
 206:lib/LC7981.c  **** 	lcd_strobe_enable();
 3822               	24,r22
 3823               		movw r22,r24
 3824 11f8 1A82      		movw r24,r26
 3825 11fa 1982      		call __fixunssfsi
 3826 11fc 00C0      		movw r26,r24
 3827               		movw r24,r22
 207:lib/LC7981.c  **** TA_PORT = data;
 3828               	+6,r25
 3829               		std Y+5,r24
 3830 11fe 80E0      		rjmp .L165
 3831 1200 0E94 0000 	.L166:
 3832               		ldi r24,lo8(500)
 3833               		ldi r25,hi8(500)
 3834 1204 8981      		std Y+4,r25
 3835 1206 9A81      		std Y+3,r24
 3836 1208 0196      	.LBB30:
 3837 120a 9A83      	.LBB31:
 3839               	.Ltext12:
 3841 1210 9A81      	.LM241:
 3842 1212 26E0      		ldd r24,Y+3
 3843 1214 8034      		ldd r25,Y+4
 3844 1216 9207      	/* #APP */
 3845 1218 00F0      	 ;  105 "d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3846               		1: sbiw r24,1
 208:lib/LC7981.c  **** nop;"); __asm("nop;");
 3847               	
 3848               	/* #NOAPP */
 3849 121a 0F90      		std Y+4,r25
 3850 121c 0F90      		std Y+3,r24
 3851 121e CF91      	.LBE31:
 3852 1220 DF91      	.LBE30:
 3854               	.Ltext13:
 3856               	.LM242:
 3857               		ldd r24,Y+5
 3858               		ldd r25,Y+6
 3859               		sbiw r24,1
 3860               		std Y+6,r25
 3861               		std Y+5,r24
 3862               	.L165:
 209:lib/LC7981.c  **** 	/* Set RW low, RW low to write the instruction data */
 210:lib/LC7981.c  **** 	lcd_rw_low();
 211:lib/LC7981.c  **** 	lcd_rs_low();
 212:lib/LC7981.c  **** 	LCD_DATA_PORT = data;
 213:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 214:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 215:lib/LC7981.c  **** 	lcd_strobe_enable();
 3864               	,Y+5
 3865               		ldd r25,Y+6
 3866               		sbiw r24,0
 3867 1224 DF93      		brne .L166
 3868 1226 CF93      		rjmp .L167
 3869 1228 CDB7      	.L173:
 3871 122c 6097      	.LM244:
 3872 122e 0FB6      		ldd r22,Y+7
 3873 1230 F894      		ldd r23,Y+8
 3874 1232 DEBF      		ldd r24,Y+9
 3875 1234 0FBE      		ldd r25,Y+10
 3876 1236 CDBF      		call __fixunssfsi
 3877               		movw r26,r24
 3878               		movw r24,r22
 3879 1238 988B      		std Y+6,r25
 3880 123a 8F87      		std Y+5,r24
 3881 123c 00C0      	.L162:
 3882               		ldd r24,Y+5
 216:lib/LC7981.c  **** "nop;"); __asm("nop;"); __asm("nop;");
 3883               	+2,r25
 3884               		std Y+1,r24
 3885 123e 80E0      	.LBB32:
 3886 1240 90E0      	.LBB33:
 3888 1244 BFE3      	.Ltext14:
 3890 1248 9C87      	.LM245:
 3891 124a AD87      		ldd r24,Y+1
 3892 124c BE87      		ldd r25,Y+2
 3893               	/* #APP */
 3894               	 ;  105 "d:/semester_03/mct/avr/winavr/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 3895               		1: sbiw r24,1
 3896               		brne 1b
 3897               	 ;  0 "" 2
 3898               	/* #NOAPP */
 3899 124e 6B85      		std Y+2,r25
 3900 1250 7C85      		std Y+1,r24
 3901 1252 8D85      	.L167:
 3902 1254 9E85      	.LBE33:
 3903 1256 20E0      	.LBE32:
 3904 1258 30E4      	.LBE29:
 3905 125a 4CE9      	.LBE28:
 3907 125e 0E94 0000 	.Ltext15:
 3909 1264 CB01      	.LM246:
 3910 1266 8F83      		ldd r24,Y+15
 3911 1268 9887      		ldd r25,Y+16
 3912 126a A987      		sbiw r24,1
 3913 126c BA87      		std Y+16,r25
 3914               		std Y+15,r24
 3915               	.L159:
 3916 126e 6F81      		ldd r24,Y+15
 3917 1270 7885      		ldd r25,Y+16
 3918 1272 8985      		sbiw r24,0
 3919 1274 9A85      		breq .+2
 3920 1276 20E0      		rjmp .L168
 3921 1278 30E0      	/* epilogue start */
 3923 127c 5FE3      	.LM247:
 3924 127e 0E94 0000 		adiw r28,16
 3925 1282 8823      		in __tmp_reg__,__SREG__
 3926 1284 04F4      		cli
 3927               		out __SP_H__,r29
 3928               		out __SREG__,__tmp_reg__
 3929               		out __SP_L__,r28
 3930 1286 81E0      		pop r28
 3931 1288 90E0      		pop r29
 3932 128a 9E83      		ret
 3934 128e 00C0      	.Lscope27:
 3939 1292 7885      	.global	delay_ms
 3941 1296 9A85      	delay_ms:
 3943 129a 3FEF      	.Ltext16:
 3945 129e 57E4      	.LM248:
 3946 12a0 0E94 0000 	.LFBB28:
 3947 12a4 1816      		push r16
 3948 12a6 04F4      		push r17
 3949               		push r29
 3950               		push r28
 3951               		rcall .
 3952 12a8 6B85      		in r28,__SP_L__
 3953 12aa 7C85      		in r29,__SP_H__
 3954 12ac 8D85      	/* prologue: function */
 3955 12ae 9E85      	/* frame size = 2 */
 3956 12b0 20E0      		std Y+2,r25
 3957 12b2 30E0      		std Y+1,r24
 3959 12b6 51E4      	.LM249:
 3960 12b8 0E94 0000 		ldd r24,Y+1
 3961 12bc DC01      		ldd r25,Y+2
 3962 12be CB01      		sbiw r24,0
 3963 12c0 BC01      		brne .+2
 3964 12c2 CD01      		rjmp .L179
 3965 12c4 0E94 0000 		ldd r24,Y+1
 3966 12c8 DC01      		ldd r25,Y+2
 3967 12ca CB01      		ldi r18,hi8(4501)
 3968 12cc 9E83      		cpi r24,lo8(4501)
 3969 12ce 8D83      		cpc r25,r18
 3970 12d0 00C0      		brlo .+2
 3971               		rjmp .L179
 3972 12d2 84EF      	.L176:
 3974 12d6 9C83      	.LM250:
 3975 12d8 8B83      		ldi r30,lo8(78)
 3976               		ldi r31,hi8(78)
 3977               		st Z,__zero_reg__
 3979               	.LM251:
 3980               		ldi r26,lo8(86)
 3981               		ldi r27,hi8(86)
 3982 12da 8B81      		ldi r30,lo8(86)
 3983 12dc 9C81      		ldi r31,hi8(86)
 3984               		ld r24,Z
 3985               		ori r24,lo8(4)
 3986 12de 0197      		st X,r24
 3988               	.LM252:
 3989               		ldi r26,lo8(87)
 3990 12e2 9C83      		ldi r27,hi8(87)
 3991 12e4 8B83      		ldi r30,lo8(87)
 3992               		ldi r31,hi8(87)
 3993               		ld r24,Z
 3994               		andi r24,lo8(-5)
 3995               		st X,r24
 3997               	.LM253:
 3998 12e6 8D81      		ldi r30,lo8(79)
 3999 12e8 9E81      		ldi r31,hi8(79)
 4000 12ea 0197      		st Z,__zero_reg__
 4002 12ee 8D83      	.LM254:
 4003               		ldi r30,lo8(122)
 4004               		ldi r31,hi8(122)
 4005               		st Z,__zero_reg__
 4007 12f2 9E81      	.LM255:
 4008 12f4 0097      		ldi r16,lo8(76)
 4009 12f6 01F4      		ldi r17,hi8(76)
 4010 12f8 00C0      		ldd r24,Y+1
 4011               		ldd r25,Y+2
 4012               		movw r24,r24
 4013               		ldi r26,lo8(0)
 4014 12fa 6F81      		ldi r27,hi8(0)
 4015 12fc 7885      		ldi r18,lo8(144)
 4016 12fe 8985      		ldi r19,hi8(144)
 4017 1300 9A85      		ldi r20,hlo8(144)
 4018 1302 0E94 0000 		ldi r21,hhi8(144)
 4019 1306 DC01      		movw r22,r24
 4020 1308 CB01      		movw r24,r26
 4021 130a 9E83      		call __mulsi3
 4022 130c 8D83      		movw r26,r24
 4023               		movw r24,r22
 4024 130e 8D81      		ldi r18,lo8(10)
 4025 1310 9E81      		ldi r19,hi8(10)
 4026 1312 9A83      		ldi r20,hlo8(10)
 4027 1314 8983      		ldi r21,hhi8(10)
 4028               		movw r22,r24
 4029               		movw r24,r26
 4030               		call __divmodsi4
 4031               		movw r26,r20
 4032               		movw r24,r18
 4033               		com r25
 4034 1316 8981      		neg r24
 4035 1318 9A81      		sbci r25,lo8(-1)
 4036               		movw r30,r16
 4037               		std Z+1,r25
 4038 131a 0197      		st Z,r24
 4040               	.LM256:
 4041               		ldi r30,lo8(78)
 4042 131e 9A83      		ldi r31,hi8(78)
 4043 1320 8983      		ldi r24,lo8(5)
 4044               		st Z,r24
 4045               	.L178:
 4047               	.LM257:
 4048               		ldi r30,lo8(86)
 4049               		ldi r31,hi8(86)
 4050               		ld r24,Z
 4051               		mov r24,r24
 4052               		ldi r25,lo8(0)
 4053 1322 8F85      		andi r24,lo8(4)
 4054 1324 9889      		andi r25,hi8(4)
 4055 1326 0197      		sbiw r24,0
 4056 1328 988B      		breq .L178
 4058               	.LM258:
 4059 132c 8F85      		ldi r30,lo8(78)
 4060 132e 9889      		ldi r31,hi8(78)
 4061 1330 0097      		st Z,__zero_reg__
 4063 1334 00C0      	.LM259:
 4064               		ldi r26,lo8(86)
 217:lib/LC7981.c  **** __asm("nop;");
 218:lib/LC7981.c  **** 	__asm("nop;"); __asm("nop;"); __asm("nop;");
 4065               	reg__
 4066               		pop r28
 4067 1336 6096      		pop r29
 4068 1338 0FB6      		pop r17
 4069 133a F894      		pop r16
 4070 133c DEBF      		ret
 4072 1340 CDBF      	.Lscope28:
 4075 1346 0895      	.global	delay_s
 4077               	delay_s:
 4079               	.LM261:
 4080               	.LFBB29:
 4081               		push r29
 4082               		push r28
 4083               		rcall .
 4084               		in r28,__SP_L__
 4085               		in r29,__SP_H__
 4086               	/* prologue: function */
   1:lib/delay.c   **** #ifndef DELAY_C
   2:lib/delay.c   **** #define DELAY_C
   3:lib/delay.c   **** //#include <avr/io.h>
   4:lib/delay.c   **** 
   5:lib/delay.c   **** /*
   6:lib/delay.c   **** 	With these function you can wait a specific amount of time
   7:lib/delay.c   **** 
   8:lib/delay.c   **** 	Limitations:
   9:lib/delay.c   **** 	Timer 1 is used to measure the waiting time polling mode and
  10:lib/delay.c   **** 	therefor not available to your own program.
  11:lib/delay.c   **** 
  12:lib/delay.c   **** */
  13:lib/delay.c   **** 
  14:lib/delay.c   **** //function waits 1-4500ms and returns
  15:lib/delay.c   **** //its using timer 1 for waiting in polling mode
  16:lib/delay.c   **** //ms: 1-4500
  17:lib/delay.c   **** void delay_ms(unsigned int ms);
  18:lib/delay.c   **** 
  19:lib/delay.c   **** //function waits 1-65535 s and returns
  20:lib/delay.c   **** //its using timer 1 for waiting in polling mode
  21:lib/delay.c   **** //s: 1-65535
  22:lib/delay.c   **** void delay_s(unsigned int s);
  23:lib/delay.c   **** 
  24:lib/delay.c   **** 
  25:lib/delay.c   **** 
  26:lib/delay.c   **** /**********************end of header ************************************/
  27:lib/delay.c   **** 
  28:lib/delay.c   **** 
  29:lib/delay.c   **** void delay_ms(unsigned int ms){
 4087               	std Y+2,r25
 4088               		std Y+1,r24
 4089               		rjmp .L181
 4090 1348 0F93      	.L182:
 4092 134c DF93      	.LM262:
 4093 134e CF93      		ldi r24,lo8(1000)
 4094 1350 00D0      		ldi r25,hi8(1000)
 4095 1352 CDB7      		call delay_ms
 4096 1354 DEB7      		ldd r24,Y+1
 4097               		ldd r25,Y+2
 4098               		sbiw r24,1
 4099 1356 9A83      		std Y+2,r25
 4100 1358 8983      		std Y+1,r24
  30:lib/delay.c   **** 	if((ms==0)||(ms>4500)) return;
 4101               		68,0,48,.LM263-.LFBB29
 4102               	.LM263:
 4103 135a 8981      		ldd r24,Y+1
 4104 135c 9A81      		ldd r25,Y+2
 4105 135e 0097      		sbiw r24,0
 4106 1360 01F4      		brne .L182
 4107 1362 00C0      	/* epilogue start */
 4109 1366 9A81      	.LM264:
 4110 1368 21E1      		pop __tmp_reg__
 4111 136a 8539      		pop __tmp_reg__
 4112 136c 9207      		pop r28
 4113 136e 00F0      		pop r29
 4114 1370 00C0      		ret
  31:lib/delay.c   **** 	TCCR1B=0; //stop a running timer
 4116               	abn	162,0,0,0
  32:lib/delay.c   **** 	TIFR|=4;  //reset the overflow flag
 4121               	al	draw_grad
 4123 1378 A6E5      	draw_grad:
 4125 137c E6E5      	.Ltext17:
 4127 1380 8081      	.LM265:
 4128 1382 8460      	.LFBB30:
 4129 1384 8C93      		push r29
  33:lib/delay.c   **** 	TIMSK&=~4;  //delete the interrupt enable for this timer
 4130               	
 4131               		rcall .
 4132 1386 A7E5      		in r28,__SP_L__
 4133 1388 B0E0      		in r29,__SP_H__
 4134 138a E7E5      	/* prologue: function */
 4135 138c F0E0      	/* frame size = 2 */
 4136 138e 8081      		std Y+1,r24
 4137 1390 8B7F      		std Y+2,r22
  34:lib/delay.c   **** 	TCCR1A=0;
 4139               		ldd r24,Y+1
 4140               		mov r24,r24
 4141 1394 EFE4      		ldi r25,lo8(0)
 4142 1396 F0E0      		adiw r24,1
 4143 1398 1082      		movw r20,r24
  35:lib/delay.c   **** 	TCCR1C=0;
 4144               	r24,Y+2
 4145               		mov r24,r24
 4146 139a EAE7      		ldi r25,lo8(0)
 4147 139c F0E0      		adiw r24,2
 4148 139e 1082      		movw r18,r24
  36:lib/delay.c   **** 	TCNT1=65536-(((long)ms*144)/10);
 4149               	 r24,r20
 4150               		movw r22,r18
 4151 13a0 0CE4      		ldi r20,lo8(-1)
 4152 13a2 10E0      		call lcd_graphics_plot_pixel
 4154 13a6 9A81      	.LM267:
 4155 13a8 CC01      		ldd r24,Y+1
 4156 13aa A0E0      		mov r24,r24
 4157 13ac B0E0      		ldi r25,lo8(0)
 4158 13ae 20E9      		adiw r24,1
 4159 13b0 30E0      		movw r20,r24
 4160 13b2 40E0      		ldd r24,Y+2
 4161 13b4 50E0      		mov r24,r24
 4162 13b6 BC01      		ldi r25,lo8(0)
 4163 13b8 CD01      		adiw r24,3
 4164 13ba 0E94 0000 		movw r18,r24
 4165 13be DC01      		movw r24,r20
 4166 13c0 CB01      		movw r22,r18
 4167 13c2 2AE0      		ldi r20,lo8(-1)
 4168 13c4 30E0      		call lcd_graphics_plot_pixel
 4170 13c8 50E0      	.LM268:
 4171 13ca BC01      		ldd r24,Y+1
 4172 13cc CD01      		mov r24,r24
 4173 13ce 0E94 0000 		ldi r25,lo8(0)
 4174 13d2 DA01      		adiw r24,2
 4175 13d4 C901      		movw r20,r24
 4176 13d6 9095      		ldd r24,Y+2
 4177 13d8 8195      		mov r24,r24
 4178 13da 9F4F      		ldi r25,lo8(0)
 4179 13dc F801      		adiw r24,1
 4180 13de 9183      		movw r18,r24
 4181 13e0 8083      		movw r24,r20
  37:lib/delay.c   **** 	TCCR1B=5; //prescalar 1024
 4182               	all lcd_graphics_plot_pixel
 4184 13e2 EEE4      	.LM269:
 4185 13e4 F0E0      		ldd r24,Y+1
 4186 13e6 85E0      		mov r24,r24
 4187 13e8 8083      		ldi r25,lo8(0)
 4188               		adiw r24,2
  38:lib/delay.c   **** 	while(!(TIFR&4));
 4189               	20,r24
 4190               		ldd r24,Y+2
 4191 13ea E6E5      		mov r24,r24
 4192 13ec F0E0      		ldi r25,lo8(0)
 4193 13ee 8081      		adiw r24,4
 4194 13f0 882F      		movw r18,r24
 4195 13f2 90E0      		movw r24,r20
 4196 13f4 8470      		movw r22,r18
 4197 13f6 9070      		ldi r20,lo8(-1)
 4198 13f8 0097      		call lcd_graphics_plot_pixel
  39:lib/delay.c   **** 	TCCR1B=0;  //stop the timer
 4200               	d r24,Y+1
 4201               		mov r24,r24
 4202 13fc EEE4      		ldi r25,lo8(0)
 4203 13fe F0E0      		adiw r24,3
 4204 1400 1082      		movw r20,r24
  40:lib/delay.c   **** 	TIFR|=4;  //reset the overflow flag
 4205               	r24,Y+2
 4206               		mov r24,r24
 4207 1402 A6E5      		ldi r25,lo8(0)
 4208 1404 B0E0      		adiw r24,1
 4209 1406 E6E5      		movw r18,r24
 4210 1408 F0E0      		movw r24,r20
 4211 140a 8081      		movw r22,r18
 4212 140c 8460      		ldi r20,lo8(-1)
 4213 140e 8C93      		call lcd_graphics_plot_pixel
 4215               	.LM271:
  41:lib/delay.c   **** }
 4216               	1
 4217               		mov r24,r24
 4218 1410 0F90      		ldi r25,lo8(0)
 4219 1412 0F90      		adiw r24,3
 4220 1414 CF91      		movw r20,r24
 4221 1416 DF91      		ldd r24,Y+2
 4222 1418 1F91      		mov r24,r24
 4223 141a 0F91      		ldi r25,lo8(0)
 4224 141c 0895      		adiw r24,4
 4225               		movw r18,r24
 4226               		movw r24,r20
 4227               		movw r22,r18
 4228               		ldi r20,lo8(-1)
 4229               		call lcd_graphics_plot_pixel
 4231               	.LM272:
  42:lib/delay.c   **** 
  43:lib/delay.c   **** 
  44:lib/delay.c   **** //function waits 1-4500ms and returns
  45:lib/delay.c   **** //its using timer 1 for waiting in polling mode
  46:lib/delay.c   **** //ms: delays for 1-4500 ms
  47:lib/delay.c   **** void delay_s(unsigned int s){
 4232               	v r24,r24
 4233               		ldi r25,lo8(0)
 4234               		adiw r24,4
 4235 141e DF93      		movw r20,r24
 4236 1420 CF93      		ldd r24,Y+2
 4237 1422 00D0      		mov r24,r24
 4238 1424 CDB7      		ldi r25,lo8(0)
 4239 1426 DEB7      		adiw r24,2
 4240               		movw r18,r24
 4241               		movw r24,r20
 4242 1428 9A83      		movw r22,r18
 4243 142a 8983      		ldi r20,lo8(-1)
 4244 142c 00C0      		call lcd_graphics_plot_pixel
  48:lib/delay.c   **** 	while(s!=0){
  49:lib/delay.c   **** 		delay_ms(1000);s--;
 4246               	24,Y+1
 4247               		mov r24,r24
 4248 142e 88EE      		ldi r25,lo8(0)
 4249 1430 93E0      		adiw r24,4
 4250 1432 0E94 0000 		movw r20,r24
 4251 1436 8981      		ldd r24,Y+2
 4252 1438 9A81      		mov r24,r24
 4253 143a 0197      		ldi r25,lo8(0)
 4254 143c 9A83      		adiw r24,3
 4255 143e 8983      		movw r18,r24
 4256               		movw r24,r20
 4257               		movw r22,r18
 4258               		ldi r20,lo8(-1)
 4259 1440 8981      		call lcd_graphics_plot_pixel
 4260 1442 9A81      	/* epilogue start */
 4262 1446 01F4      	.LM274:
 4263               		pop __tmp_reg__
  50:lib/delay.c   **** 	}
  51:lib/delay.c   **** }
 4264               	pop r28
 4265               		pop r29
 4266 1448 0F90      		ret
 4268 144c CF91      	.Lscope30:
 4270 1450 0895      	.global	draw_flame
 4272               	draw_flame:
 4274               	.LM275:
 4275               	.LFBB31:
 4276               		push r29
 4277               		push r28
 4278               		rcall .
 4279               		in r28,__SP_L__
 4280               		in r29,__SP_H__
 4281               	/* prologue: function */
 4282               	/* frame size = 2 */
   1:lib/touch_pictures.c **** #ifdef GRAD_ON
   2:lib/touch_pictures.c **** void draw_grad(unsigned char pos_x, unsigned char pos_y)
   3:lib/touch_pictures.c **** {
 4283               	276-.LFBB31
 4284               	.LM276:
 4285               		ldi r24,lo8(1)
 4286 1452 DF93      		std Y+2,r24
 4287 1454 CF93      		rjmp .L187
 4288 1456 00D0      	.L190:
 4290 145a DEB7      	.LM277:
 4291               		ldi r24,lo8(1)
 4292               		std Y+1,r24
 4293 145c 8983      		rjmp .L188
 4294 145e 6A83      	.L189:
   4:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 1, pos_y + 2, PIXEL_ON);
 4295               	,23,.LM278-.LFBB31
 4296               	.LM278:
 4297 1460 8981      		ldd r24,Y+2
 4298 1462 882F      		mov r24,r24
 4299 1464 90E0      		ldi r25,lo8(0)
 4300 1466 0196      		adiw r24,40
 4301 1468 AC01      		movw r20,r24
 4302 146a 8A81      		ldd r24,Y+1
 4303 146c 882F      		mov r24,r24
 4304 146e 90E0      		ldi r25,lo8(0)
 4305 1470 0296      		adiw r24,1
 4306 1472 9C01      		movw r18,r24
 4307 1474 CA01      		movw r24,r20
 4308 1476 B901      		movw r22,r18
 4309 1478 4FEF      		ldi r20,lo8(0)
 4310 147a 0E94 0000 		call lcd_graphics_plot_pixel
   5:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 1, pos_y + 3, PIXEL_ON);
 4311               	.LM279-.LFBB31
 4312               	.LM279:
 4313 147e 8981      		ldd r24,Y+1
 4314 1480 882F      		subi r24,lo8(-(1))
 4315 1482 90E0      		std Y+1,r24
 4316 1484 0196      	.L188:
 4317 1486 AC01      		ldd r24,Y+1
 4318 1488 8A81      		cpi r24,lo8(18)
 4319 148a 882F      		brlo .L189
 4321 148e 0396      	.LM280:
 4322 1490 9C01      		ldd r24,Y+2
 4323 1492 CA01      		subi r24,lo8(-(1))
 4324 1494 B901      		std Y+2,r24
 4325 1496 4FEF      	.L187:
 4326 1498 0E94 0000 		ldd r24,Y+2
   6:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 2, pos_y + 1, PIXEL_ON);
 4327               	
 4328               		brlo .L190
 4330 149e 882F      	.LM281:
 4331 14a0 90E0      		ldi r24,lo8(42)
 4332 14a2 0296      		ldi r25,hi8(42)
 4333 14a4 AC01      		ldi r22,lo8(12)
 4334 14a6 8A81      		ldi r23,hi8(12)
 4335 14a8 882F      		ldi r20,lo8(-1)
 4336 14aa 90E0      		call lcd_graphics_plot_pixel
 4338 14ae 9C01      	.LM282:
 4339 14b0 CA01      		ldi r24,lo8(42)
 4340 14b2 B901      		ldi r25,hi8(42)
 4341 14b4 4FEF      		ldi r22,lo8(13)
 4342 14b6 0E94 0000 		ldi r23,hi8(13)
   7:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 2, pos_y + 4, PIXEL_ON);
 4343               	)
 4344               		call lcd_graphics_plot_pixel
 4346 14bc 882F      	.LM283:
 4347 14be 90E0      		ldi r24,lo8(42)
 4348 14c0 0296      		ldi r25,hi8(42)
 4349 14c2 AC01      		ldi r22,lo8(14)
 4350 14c4 8A81      		ldi r23,hi8(14)
 4351 14c6 882F      		ldi r20,lo8(-1)
 4352 14c8 90E0      		call lcd_graphics_plot_pixel
 4354 14cc 9C01      	.LM284:
 4355 14ce CA01      		ldi r24,lo8(43)
 4356 14d0 B901      		ldi r25,hi8(43)
 4357 14d2 4FEF      		ldi r22,lo8(11)
 4358 14d4 0E94 0000 		ldi r23,hi8(11)
   8:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 3, pos_y + 1, PIXEL_ON);
 4359               	
 4360               		call lcd_graphics_plot_pixel
 4362 14da 882F      	.LM285:
 4363 14dc 90E0      		ldi r24,lo8(43)
 4364 14de 0396      		ldi r25,hi8(43)
 4365 14e0 AC01      		ldi r22,lo8(12)
 4366 14e2 8A81      		ldi r23,hi8(12)
 4367 14e4 882F      		ldi r20,lo8(-1)
 4368 14e6 90E0      		call lcd_graphics_plot_pixel
 4370 14ea 9C01      	.LM286:
 4371 14ec CA01      		ldi r24,lo8(43)
 4372 14ee B901      		ldi r25,hi8(43)
 4373 14f0 4FEF      		ldi r22,lo8(13)
 4374 14f2 0E94 0000 		ldi r23,hi8(13)
   9:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 3, pos_y + 4, PIXEL_ON);
 4375               	)
 4376               		call lcd_graphics_plot_pixel
 4378 14f8 882F      	.LM287:
 4379 14fa 90E0      		ldi r24,lo8(43)
 4380 14fc 0396      		ldi r25,hi8(43)
 4381 14fe AC01      		ldi r22,lo8(14)
 4382 1500 8A81      		ldi r23,hi8(14)
 4383 1502 882F      		ldi r20,lo8(-1)
 4384 1504 90E0      		call lcd_graphics_plot_pixel
 4386 1508 9C01      	.LM288:
 4387 150a CA01      		ldi r24,lo8(43)
 4388 150c B901      		ldi r25,hi8(43)
 4389 150e 4FEF      		ldi r22,lo8(15)
 4390 1510 0E94 0000 		ldi r23,hi8(15)
  10:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 4, pos_y + 2, PIXEL_ON);
 4391               	
 4392               		call lcd_graphics_plot_pixel
 4394 1516 882F      	.LM289:
 4395 1518 90E0      		ldi r24,lo8(43)
 4396 151a 0496      		ldi r25,hi8(43)
 4397 151c AC01      		ldi r22,lo8(16)
 4398 151e 8A81      		ldi r23,hi8(16)
 4399 1520 882F      		ldi r20,lo8(-1)
 4400 1522 90E0      		call lcd_graphics_plot_pixel
 4402 1526 9C01      	.LM290:
 4403 1528 CA01      		ldi r24,lo8(44)
 4404 152a B901      		ldi r25,hi8(44)
 4405 152c 4FEF      		ldi r22,lo8(7)
 4406 152e 0E94 0000 		ldi r23,hi8(7)
  11:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(pos_x + 4, pos_y + 3, PIXEL_ON);
 4407               	)
 4408               		call lcd_graphics_plot_pixel
 4410 1534 882F      	.LM291:
 4411 1536 90E0      		ldi r24,lo8(44)
 4412 1538 0496      		ldi r25,hi8(44)
 4413 153a AC01      		ldi r22,lo8(8)
 4414 153c 8A81      		ldi r23,hi8(8)
 4415 153e 882F      		ldi r20,lo8(-1)
 4416 1540 90E0      		call lcd_graphics_plot_pixel
 4418 1544 9C01      	.LM292:
 4419 1546 CA01      		ldi r24,lo8(44)
 4420 1548 B901      		ldi r25,hi8(44)
 4421 154a 4FEF      		ldi r22,lo8(9)
 4422 154c 0E94 0000 		ldi r23,hi8(9)
 4423               		ldi r20,lo8(-1)
  12:lib/touch_pictures.c **** }
 4424               	s_plot_pixel
 4426 1550 0F90      	.LM293:
 4427 1552 0F90      		ldi r24,lo8(44)
 4428 1554 CF91      		ldi r25,hi8(44)
 4429 1556 DF91      		ldi r22,lo8(10)
 4430 1558 0895      		ldi r23,hi8(10)
 4431               		ldi r20,lo8(-1)
 4432               		call lcd_graphics_plot_pixel
 4434               	.LM294:
 4435               		ldi r24,lo8(44)
 4436               		ldi r25,hi8(44)
  13:lib/touch_pictures.c **** #endif
  14:lib/touch_pictures.c **** #ifdef FLAME_AND_FLAKE_ON
  15:lib/touch_pictures.c **** void draw_flame(void)
  16:lib/touch_pictures.c **** {
 4437               	11)
 4438               		ldi r23,hi8(11)
 4439               		ldi r20,lo8(-1)
 4440 155a DF93      		call lcd_graphics_plot_pixel
 4442 155e 00D0      	.LM295:
 4443 1560 CDB7      		ldi r24,lo8(44)
 4444 1562 DEB7      		ldi r25,hi8(44)
 4445               		ldi r22,lo8(12)
 4446               		ldi r23,hi8(12)
  17:lib/touch_pictures.c **** 	unsigned char x, y;
  18:lib/touch_pictures.c **** 	
  19:lib/touch_pictures.c **** 	for (x = 1; x <= 17; x++)
 4447               	o8(-1)
 4448               		call lcd_graphics_plot_pixel
 4450 1566 8A83      	.LM296:
 4451 1568 00C0      		ldi r24,lo8(44)
 4452               		ldi r25,hi8(44)
  20:lib/touch_pictures.c **** 	{
  21:lib/touch_pictures.c **** 		for (y = 1; y <= 17; y++)
 4453               	22,lo8(13)
 4454               		ldi r23,hi8(13)
 4455 156a 81E0      		ldi r20,lo8(-1)
 4456 156c 8983      		call lcd_graphics_plot_pixel
 4458               	.LM297:
  22:lib/touch_pictures.c **** 		{
  23:lib/touch_pictures.c **** 			lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + x, PIC_POS_FLAME_FLAKE_Y + y, PIXEL_OFF);
 4459               	24,lo8(44)
 4460               		ldi r25,hi8(44)
 4461 1570 8A81      		ldi r22,lo8(14)
 4462 1572 882F      		ldi r23,hi8(14)
 4463 1574 90E0      		ldi r20,lo8(-1)
 4464 1576 8896      		call lcd_graphics_plot_pixel
 4466 157a 8981      	.LM298:
 4467 157c 882F      		ldi r24,lo8(44)
 4468 157e 90E0      		ldi r25,hi8(44)
 4469 1580 0196      		ldi r22,lo8(15)
 4470 1582 9C01      		ldi r23,hi8(15)
 4471 1584 CA01      		ldi r20,lo8(-1)
 4472 1586 B901      		call lcd_graphics_plot_pixel
 4474 158a 0E94 0000 	.LM299:
 4475               		ldi r24,lo8(44)
 4476               		ldi r25,hi8(44)
 4477 158e 8981      		ldi r22,lo8(16)
 4478 1590 8F5F      		ldi r23,hi8(16)
 4479 1592 8983      		ldi r20,lo8(-1)
 4480               		call lcd_graphics_plot_pixel
 4482 1596 8231      	.LM300:
 4483 1598 00F0      		ldi r24,lo8(44)
 4484               		ldi r25,hi8(44)
 4485               		ldi r22,lo8(17)
 4486 159a 8A81      		ldi r23,hi8(17)
 4487 159c 8F5F      		ldi r20,lo8(-1)
 4488 159e 8A83      		call lcd_graphics_plot_pixel
 4490 15a0 8A81      	.LM301:
 4491 15a2 8231      		ldi r24,lo8(45)
 4492 15a4 00F0      		ldi r25,hi8(45)
  24:lib/touch_pictures.c **** 		}
  25:lib/touch_pictures.c **** 	}
  26:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 4493               	di r20,lo8(-1)
 4494               		call lcd_graphics_plot_pixel
 4496 15a8 90E0      	.LM302:
 4497 15aa 6CE0      		ldi r24,lo8(45)
 4498 15ac 70E0      		ldi r25,hi8(45)
 4499 15ae 4FEF      		ldi r22,lo8(10)
 4500 15b0 0E94 0000 		ldi r23,hi8(10)
  27:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 4501               	,lo8(-1)
 4502               		call lcd_graphics_plot_pixel
 4504 15b6 90E0      	.LM303:
 4505 15b8 6DE0      		ldi r24,lo8(45)
 4506 15ba 70E0      		ldi r25,hi8(45)
 4507 15bc 4FEF      		ldi r22,lo8(11)
 4508 15be 0E94 0000 		ldi r23,hi8(11)
  28:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 4509               	,lo8(-1)
 4510               		call lcd_graphics_plot_pixel
 4512 15c4 90E0      	.LM304:
 4513 15c6 6EE0      		ldi r24,lo8(45)
 4514 15c8 70E0      		ldi r25,hi8(45)
 4515 15ca 4FEF      		ldi r22,lo8(12)
 4516 15cc 0E94 0000 		ldi r23,hi8(12)
  29:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 4517               	,lo8(-1)
 4518               		call lcd_graphics_plot_pixel
 4520 15d2 90E0      	.LM305:
 4521 15d4 6BE0      		ldi r24,lo8(45)
 4522 15d6 70E0      		ldi r25,hi8(45)
 4523 15d8 4FEF      		ldi r22,lo8(16)
 4524 15da 0E94 0000 		ldi r23,hi8(16)
  30:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 4525               	,lo8(-1)
 4526               		call lcd_graphics_plot_pixel
 4528 15e0 90E0      	.LM306:
 4529 15e2 6CE0      		ldi r24,lo8(45)
 4530 15e4 70E0      		ldi r25,hi8(45)
 4531 15e6 4FEF      		ldi r22,lo8(17)
 4532 15e8 0E94 0000 		ldi r23,hi8(17)
  31:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 4533               	,lo8(-1)
 4534               		call lcd_graphics_plot_pixel
 4536 15ee 90E0      	.LM307:
 4537 15f0 6DE0      		ldi r24,lo8(45)
 4538 15f2 70E0      		ldi r25,hi8(45)
 4539 15f4 4FEF      		ldi r22,lo8(18)
 4540 15f6 0E94 0000 		ldi r23,hi8(18)
  32:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 4541               	,lo8(-1)
 4542               		call lcd_graphics_plot_pixel
 4544 15fc 90E0      	.LM308:
 4545 15fe 6EE0      		ldi r24,lo8(46)
 4546 1600 70E0      		ldi r25,hi8(46)
 4547 1602 4FEF      		ldi r22,lo8(6)
 4548 1604 0E94 0000 		ldi r23,hi8(6)
  33:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 4549               	,lo8(-1)
 4550               		call lcd_graphics_plot_pixel
 4552 160a 90E0      	.LM309:
 4553 160c 6FE0      		ldi r24,lo8(46)
 4554 160e 70E0      		ldi r25,hi8(46)
 4555 1610 4FEF      		ldi r22,lo8(7)
 4556 1612 0E94 0000 		ldi r23,hi8(7)
  34:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 4557               	,lo8(-1)
 4558               		call lcd_graphics_plot_pixel
 4560 1618 90E0      	.LM310:
 4561 161a 60E1      		ldi r24,lo8(46)
 4562 161c 70E0      		ldi r25,hi8(46)
 4563 161e 4FEF      		ldi r22,lo8(8)
 4564 1620 0E94 0000 		ldi r23,hi8(8)
  35:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 4565               	,lo8(-1)
 4566               		call lcd_graphics_plot_pixel
 4568 1626 90E0      	.LM311:
 4569 1628 67E0      		ldi r24,lo8(46)
 4570 162a 70E0      		ldi r25,hi8(46)
 4571 162c 4FEF      		ldi r22,lo8(9)
 4572 162e 0E94 0000 		ldi r23,hi8(9)
  36:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 4573               	,lo8(-1)
 4574               		call lcd_graphics_plot_pixel
 4576 1634 90E0      	.LM312:
 4577 1636 68E0      		ldi r24,lo8(46)
 4578 1638 70E0      		ldi r25,hi8(46)
 4579 163a 4FEF      		ldi r22,lo8(10)
 4580 163c 0E94 0000 		ldi r23,hi8(10)
  37:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 4581               	,lo8(-1)
 4582               		call lcd_graphics_plot_pixel
 4584 1642 90E0      	.LM313:
 4585 1644 69E0      		ldi r24,lo8(46)
 4586 1646 70E0      		ldi r25,hi8(46)
 4587 1648 4FEF      		ldi r22,lo8(11)
 4588 164a 0E94 0000 		ldi r23,hi8(11)
  38:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 4589               	,lo8(-1)
 4590               		call lcd_graphics_plot_pixel
 4592 1650 90E0      	.LM314:
 4593 1652 6AE0      		ldi r24,lo8(46)
 4594 1654 70E0      		ldi r25,hi8(46)
 4595 1656 4FEF      		ldi r22,lo8(12)
 4596 1658 0E94 0000 		ldi r23,hi8(12)
  39:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 4597               	,lo8(-1)
 4598               		call lcd_graphics_plot_pixel
 4600 165e 90E0      	.LM315:
 4601 1660 6BE0      		ldi r24,lo8(46)
 4602 1662 70E0      		ldi r25,hi8(46)
 4603 1664 4FEF      		ldi r22,lo8(17)
 4604 1666 0E94 0000 		ldi r23,hi8(17)
  40:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 4605               	,lo8(-1)
 4606               		call lcd_graphics_plot_pixel
 4608 166c 90E0      	.LM316:
 4609 166e 6CE0      		ldi r24,lo8(46)
 4610 1670 70E0      		ldi r25,hi8(46)
 4611 1672 4FEF      		ldi r22,lo8(18)
 4612 1674 0E94 0000 		ldi r23,hi8(18)
  41:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 4613               	,lo8(-1)
 4614               		call lcd_graphics_plot_pixel
 4616 167a 90E0      	.LM317:
 4617 167c 6DE0      		ldi r24,lo8(47)
 4618 167e 70E0      		ldi r25,hi8(47)
 4619 1680 4FEF      		ldi r22,lo8(4)
 4620 1682 0E94 0000 		ldi r23,hi8(4)
  42:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 4621               	,lo8(-1)
 4622               		call lcd_graphics_plot_pixel
 4624 1688 90E0      	.LM318:
 4625 168a 6EE0      		ldi r24,lo8(47)
 4626 168c 70E0      		ldi r25,hi8(47)
 4627 168e 4FEF      		ldi r22,lo8(5)
 4628 1690 0E94 0000 		ldi r23,hi8(5)
  43:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 4629               	,lo8(-1)
 4630               		call lcd_graphics_plot_pixel
 4632 1696 90E0      	.LM319:
 4633 1698 6FE0      		ldi r24,lo8(47)
 4634 169a 70E0      		ldi r25,hi8(47)
 4635 169c 4FEF      		ldi r22,lo8(6)
 4636 169e 0E94 0000 		ldi r23,hi8(6)
  44:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 4637               	,lo8(-1)
 4638               		call lcd_graphics_plot_pixel
 4640 16a4 90E0      	.LM320:
 4641 16a6 60E1      		ldi r24,lo8(47)
 4642 16a8 70E0      		ldi r25,hi8(47)
 4643 16aa 4FEF      		ldi r22,lo8(7)
 4644 16ac 0E94 0000 		ldi r23,hi8(7)
  45:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 4645               	,lo8(-1)
 4646               		call lcd_graphics_plot_pixel
 4648 16b2 90E0      	.LM321:
 4649 16b4 61E1      		ldi r24,lo8(47)
 4650 16b6 70E0      		ldi r25,hi8(47)
 4651 16b8 4FEF      		ldi r22,lo8(8)
 4652 16ba 0E94 0000 		ldi r23,hi8(8)
  46:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 4653               	,lo8(-1)
 4654               		call lcd_graphics_plot_pixel
 4656 16c0 90E0      	.LM322:
 4657 16c2 69E0      		ldi r24,lo8(47)
 4658 16c4 70E0      		ldi r25,hi8(47)
 4659 16c6 4FEF      		ldi r22,lo8(9)
 4660 16c8 0E94 0000 		ldi r23,hi8(9)
  47:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 4661               	,lo8(-1)
 4662               		call lcd_graphics_plot_pixel
 4664 16ce 90E0      	.LM323:
 4665 16d0 6AE0      		ldi r24,lo8(47)
 4666 16d2 70E0      		ldi r25,hi8(47)
 4667 16d4 4FEF      		ldi r22,lo8(10)
 4668 16d6 0E94 0000 		ldi r23,hi8(10)
  48:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 4669               	,lo8(-1)
 4670               		call lcd_graphics_plot_pixel
 4672 16dc 90E0      	.LM324:
 4673 16de 6BE0      		ldi r24,lo8(47)
 4674 16e0 70E0      		ldi r25,hi8(47)
 4675 16e2 4FEF      		ldi r22,lo8(11)
 4676 16e4 0E94 0000 		ldi r23,hi8(11)
  49:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 4677               	,lo8(-1)
 4678               		call lcd_graphics_plot_pixel
 4680 16ea 90E0      	.LM325:
 4681 16ec 6CE0      		ldi r24,lo8(47)
 4682 16ee 70E0      		ldi r25,hi8(47)
 4683 16f0 4FEF      		ldi r22,lo8(18)
 4684 16f2 0E94 0000 		ldi r23,hi8(18)
  50:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 4685               	,lo8(-1)
 4686               		call lcd_graphics_plot_pixel
 4688 16f8 90E0      	.LM326:
 4689 16fa 60E1      		ldi r24,lo8(48)
 4690 16fc 70E0      		ldi r25,hi8(48)
 4691 16fe 4FEF      		ldi r22,lo8(7)
 4692 1700 0E94 0000 		ldi r23,hi8(7)
  51:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 4693               	,lo8(-1)
 4694               		call lcd_graphics_plot_pixel
 4696 1706 90E0      	.LM327:
 4697 1708 61E1      		ldi r24,lo8(48)
 4698 170a 70E0      		ldi r25,hi8(48)
 4699 170c 4FEF      		ldi r22,lo8(8)
 4700 170e 0E94 0000 		ldi r23,hi8(8)
  52:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 4701               	,lo8(-1)
 4702               		call lcd_graphics_plot_pixel
 4704 1714 90E0      	.LM328:
 4705 1716 62E1      		ldi r24,lo8(48)
 4706 1718 70E0      		ldi r25,hi8(48)
 4707 171a 4FEF      		ldi r22,lo8(9)
 4708 171c 0E94 0000 		ldi r23,hi8(9)
  53:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 4709               	,lo8(-1)
 4710               		call lcd_graphics_plot_pixel
 4712 1722 90E0      	.LM329:
 4713 1724 66E0      		ldi r24,lo8(48)
 4714 1726 70E0      		ldi r25,hi8(48)
 4715 1728 4FEF      		ldi r22,lo8(10)
 4716 172a 0E94 0000 		ldi r23,hi8(10)
  54:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 4717               	,lo8(-1)
 4718               		call lcd_graphics_plot_pixel
 4720 1730 90E0      	.LM330:
 4721 1732 67E0      		ldi r24,lo8(48)
 4722 1734 70E0      		ldi r25,hi8(48)
 4723 1736 4FEF      		ldi r22,lo8(11)
 4724 1738 0E94 0000 		ldi r23,hi8(11)
  55:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 4725               	,lo8(-1)
 4726               		call lcd_graphics_plot_pixel
 4728 173e 90E0      	.LM331:
 4729 1740 68E0      		ldi r24,lo8(48)
 4730 1742 70E0      		ldi r25,hi8(48)
 4731 1744 4FEF      		ldi r22,lo8(18)
 4732 1746 0E94 0000 		ldi r23,hi8(18)
  56:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 4733               	,lo8(-1)
 4734               		call lcd_graphics_plot_pixel
 4736 174c 90E0      	.LM332:
 4737 174e 69E0      		ldi r24,lo8(49)
 4738 1750 70E0      		ldi r25,hi8(49)
 4739 1752 4FEF      		ldi r22,lo8(5)
 4740 1754 0E94 0000 		ldi r23,hi8(5)
  57:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 4741               	,lo8(-1)
 4742               		call lcd_graphics_plot_pixel
 4744 175a 90E0      	.LM333:
 4745 175c 6AE0      		ldi r24,lo8(49)
 4746 175e 70E0      		ldi r25,hi8(49)
 4747 1760 4FEF      		ldi r22,lo8(6)
 4748 1762 0E94 0000 		ldi r23,hi8(6)
  58:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 4749               	,lo8(-1)
 4750               		call lcd_graphics_plot_pixel
 4752 1768 90E0      	.LM334:
 4753 176a 6BE0      		ldi r24,lo8(49)
 4754 176c 70E0      		ldi r25,hi8(49)
 4755 176e 4FEF      		ldi r22,lo8(7)
 4756 1770 0E94 0000 		ldi r23,hi8(7)
  59:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 4757               	,lo8(-1)
 4758               		call lcd_graphics_plot_pixel
 4760 1776 90E0      	.LM335:
 4761 1778 6CE0      		ldi r24,lo8(49)
 4762 177a 70E0      		ldi r25,hi8(49)
 4763 177c 4FEF      		ldi r22,lo8(8)
 4764 177e 0E94 0000 		ldi r23,hi8(8)
  60:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 4765               	,lo8(-1)
 4766               		call lcd_graphics_plot_pixel
 4768 1784 90E0      	.LM336:
 4769 1786 61E1      		ldi r24,lo8(49)
 4770 1788 70E0      		ldi r25,hi8(49)
 4771 178a 4FEF      		ldi r22,lo8(9)
 4772 178c 0E94 0000 		ldi r23,hi8(9)
  61:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 4773               	,lo8(-1)
 4774               		call lcd_graphics_plot_pixel
 4776 1792 90E0      	.LM337:
 4777 1794 62E1      		ldi r24,lo8(49)
 4778 1796 70E0      		ldi r25,hi8(49)
 4779 1798 4FEF      		ldi r22,lo8(18)
 4780 179a 0E94 0000 		ldi r23,hi8(18)
  62:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 4781               	,lo8(-1)
 4782               		call lcd_graphics_plot_pixel
 4784 17a0 90E0      	.LM338:
 4785 17a2 64E0      		ldi r24,lo8(50)
 4786 17a4 70E0      		ldi r25,hi8(50)
 4787 17a6 4FEF      		ldi r22,lo8(2)
 4788 17a8 0E94 0000 		ldi r23,hi8(2)
  63:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
 4789               	,lo8(-1)
 4790               		call lcd_graphics_plot_pixel
 4792 17ae 90E0      	.LM339:
 4793 17b0 65E0      		ldi r24,lo8(50)
 4794 17b2 70E0      		ldi r25,hi8(50)
 4795 17b4 4FEF      		ldi r22,lo8(3)
 4796 17b6 0E94 0000 		ldi r23,hi8(3)
  64:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 4797               	,lo8(-1)
 4798               		call lcd_graphics_plot_pixel
 4800 17bc 90E0      	.LM340:
 4801 17be 66E0      		ldi r24,lo8(50)
 4802 17c0 70E0      		ldi r25,hi8(50)
 4803 17c2 4FEF      		ldi r22,lo8(4)
 4804 17c4 0E94 0000 		ldi r23,hi8(4)
  65:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 4805               	,lo8(-1)
 4806               		call lcd_graphics_plot_pixel
 4808 17ca 90E0      	.LM341:
 4809 17cc 67E0      		ldi r24,lo8(50)
 4810 17ce 70E0      		ldi r25,hi8(50)
 4811 17d0 4FEF      		ldi r22,lo8(5)
 4812 17d2 0E94 0000 		ldi r23,hi8(5)
  66:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 4813               	,lo8(-1)
 4814               		call lcd_graphics_plot_pixel
 4816 17d8 90E0      	.LM342:
 4817 17da 68E0      		ldi r24,lo8(50)
 4818 17dc 70E0      		ldi r25,hi8(50)
 4819 17de 4FEF      		ldi r22,lo8(6)
 4820 17e0 0E94 0000 		ldi r23,hi8(6)
  67:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 4821               	,lo8(-1)
 4822               		call lcd_graphics_plot_pixel
 4824 17e6 90E0      	.LM343:
 4825 17e8 69E0      		ldi r24,lo8(50)
 4826 17ea 70E0      		ldi r25,hi8(50)
 4827 17ec 4FEF      		ldi r22,lo8(7)
 4828 17ee 0E94 0000 		ldi r23,hi8(7)
  68:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 4829               	,lo8(-1)
 4830               		call lcd_graphics_plot_pixel
 4832 17f4 90E0      	.LM344:
 4833 17f6 6AE0      		ldi r24,lo8(50)
 4834 17f8 70E0      		ldi r25,hi8(50)
 4835 17fa 4FEF      		ldi r22,lo8(8)
 4836 17fc 0E94 0000 		ldi r23,hi8(8)
  69:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 4837               	,lo8(-1)
 4838               		call lcd_graphics_plot_pixel
 4840 1802 90E0      	.LM345:
 4841 1804 6BE0      		ldi r24,lo8(50)
 4842 1806 70E0      		ldi r25,hi8(50)
 4843 1808 4FEF      		ldi r22,lo8(18)
 4844 180a 0E94 0000 		ldi r23,hi8(18)
  70:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 4845               	,lo8(-1)
 4846               		call lcd_graphics_plot_pixel
 4848 1810 90E0      	.LM346:
 4849 1812 62E1      		ldi r24,lo8(51)
 4850 1814 70E0      		ldi r25,hi8(51)
 4851 1816 4FEF      		ldi r22,lo8(4)
 4852 1818 0E94 0000 		ldi r23,hi8(4)
  71:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 4853               	,lo8(-1)
 4854               		call lcd_graphics_plot_pixel
 4856 181e 90E0      	.LM347:
 4857 1820 67E0      		ldi r24,lo8(51)
 4858 1822 70E0      		ldi r25,hi8(51)
 4859 1824 4FEF      		ldi r22,lo8(5)
 4860 1826 0E94 0000 		ldi r23,hi8(5)
  72:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 4861               	,lo8(-1)
 4862               		call lcd_graphics_plot_pixel
 4864 182c 90E0      	.LM348:
 4865 182e 68E0      		ldi r24,lo8(51)
 4866 1830 70E0      		ldi r25,hi8(51)
 4867 1832 4FEF      		ldi r22,lo8(6)
 4868 1834 0E94 0000 		ldi r23,hi8(6)
  73:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 4869               	,lo8(-1)
 4870               		call lcd_graphics_plot_pixel
 4872 183a 90E0      	.LM349:
 4873 183c 69E0      		ldi r24,lo8(51)
 4874 183e 70E0      		ldi r25,hi8(51)
 4875 1840 4FEF      		ldi r22,lo8(7)
 4876 1842 0E94 0000 		ldi r23,hi8(7)
  74:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 4877               	,lo8(-1)
 4878               		call lcd_graphics_plot_pixel
 4880 1848 90E0      	.LM350:
 4881 184a 6AE0      		ldi r24,lo8(51)
 4882 184c 70E0      		ldi r25,hi8(51)
 4883 184e 4FEF      		ldi r22,lo8(8)
 4884 1850 0E94 0000 		ldi r23,hi8(8)
  75:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 4885               	,lo8(-1)
 4886               		call lcd_graphics_plot_pixel
 4888 1856 90E0      	.LM351:
 4889 1858 6BE0      		ldi r24,lo8(51)
 4890 185a 70E0      		ldi r25,hi8(51)
 4891 185c 4FEF      		ldi r22,lo8(9)
 4892 185e 0E94 0000 		ldi r23,hi8(9)
  76:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 4893               	,lo8(-1)
 4894               		call lcd_graphics_plot_pixel
 4896 1864 90E0      	.LM352:
 4897 1866 62E1      		ldi r24,lo8(51)
 4898 1868 70E0      		ldi r25,hi8(51)
 4899 186a 4FEF      		ldi r22,lo8(10)
 4900 186c 0E94 0000 		ldi r23,hi8(10)
  77:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
 4901               	,lo8(-1)
 4902               		call lcd_graphics_plot_pixel
 4904 1872 90E0      	.LM353:
 4905 1874 65E0      		ldi r24,lo8(51)
 4906 1876 70E0      		ldi r25,hi8(51)
 4907 1878 4FEF      		ldi r22,lo8(11)
 4908 187a 0E94 0000 		ldi r23,hi8(11)
  78:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 4909               	,lo8(-1)
 4910               		call lcd_graphics_plot_pixel
 4912 1880 90E0      	.LM354:
 4913 1882 66E0      		ldi r24,lo8(51)
 4914 1884 70E0      		ldi r25,hi8(51)
 4915 1886 4FEF      		ldi r22,lo8(12)
 4916 1888 0E94 0000 		ldi r23,hi8(12)
  79:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 4917               	,lo8(-1)
 4918               		call lcd_graphics_plot_pixel
 4920 188e 90E0      	.LM355:
 4921 1890 67E0      		ldi r24,lo8(51)
 4922 1892 70E0      		ldi r25,hi8(51)
 4923 1894 4FEF      		ldi r22,lo8(13)
 4924 1896 0E94 0000 		ldi r23,hi8(13)
  80:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 4925               	,lo8(-1)
 4926               		call lcd_graphics_plot_pixel
 4928 189c 90E0      	.LM356:
 4929 189e 68E0      		ldi r24,lo8(51)
 4930 18a0 70E0      		ldi r25,hi8(51)
 4931 18a2 4FEF      		ldi r22,lo8(18)
 4932 18a4 0E94 0000 		ldi r23,hi8(18)
  81:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 4933               	,lo8(-1)
 4934               		call lcd_graphics_plot_pixel
 4936 18aa 90E0      	.LM357:
 4937 18ac 69E0      		ldi r24,lo8(52)
 4938 18ae 70E0      		ldi r25,hi8(52)
 4939 18b0 4FEF      		ldi r22,lo8(6)
 4940 18b2 0E94 0000 		ldi r23,hi8(6)
  82:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 4941               	,lo8(-1)
 4942               		call lcd_graphics_plot_pixel
 4944 18b8 90E0      	.LM358:
 4945 18ba 62E1      		ldi r24,lo8(52)
 4946 18bc 70E0      		ldi r25,hi8(52)
 4947 18be 4FEF      		ldi r22,lo8(7)
 4948 18c0 0E94 0000 		ldi r23,hi8(7)
  83:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 1, PIXEL_ON);
 4949               	,lo8(-1)
 4950               		call lcd_graphics_plot_pixel
 4952 18c6 90E0      	.LM359:
 4953 18c8 62E0      		ldi r24,lo8(52)
 4954 18ca 70E0      		ldi r25,hi8(52)
 4955 18cc 4FEF      		ldi r22,lo8(8)
 4956 18ce 0E94 0000 		ldi r23,hi8(8)
  84:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
 4957               	,lo8(-1)
 4958               		call lcd_graphics_plot_pixel
 4960 18d4 90E0      	.LM360:
 4961 18d6 63E0      		ldi r24,lo8(52)
 4962 18d8 70E0      		ldi r25,hi8(52)
 4963 18da 4FEF      		ldi r22,lo8(9)
 4964 18dc 0E94 0000 		ldi r23,hi8(9)
  85:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 4965               	,lo8(-1)
 4966               		call lcd_graphics_plot_pixel
 4968 18e2 90E0      	.LM361:
 4969 18e4 64E0      		ldi r24,lo8(52)
 4970 18e6 70E0      		ldi r25,hi8(52)
 4971 18e8 4FEF      		ldi r22,lo8(10)
 4972 18ea 0E94 0000 		ldi r23,hi8(10)
  86:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
 4973               	,lo8(-1)
 4974               		call lcd_graphics_plot_pixel
 4976 18f0 90E0      	.LM362:
 4977 18f2 65E0      		ldi r24,lo8(52)
 4978 18f4 70E0      		ldi r25,hi8(52)
 4979 18f6 4FEF      		ldi r22,lo8(11)
 4980 18f8 0E94 0000 		ldi r23,hi8(11)
  87:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 4981               	,lo8(-1)
 4982               		call lcd_graphics_plot_pixel
 4984 18fe 90E0      	.LM363:
 4985 1900 66E0      		ldi r24,lo8(52)
 4986 1902 70E0      		ldi r25,hi8(52)
 4987 1904 4FEF      		ldi r22,lo8(17)
 4988 1906 0E94 0000 		ldi r23,hi8(17)
  88:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 4989               	,lo8(-1)
 4990               		call lcd_graphics_plot_pixel
 4992 190c 90E0      	.LM364:
 4993 190e 67E0      		ldi r24,lo8(52)
 4994 1910 70E0      		ldi r25,hi8(52)
 4995 1912 4FEF      		ldi r22,lo8(18)
 4996 1914 0E94 0000 		ldi r23,hi8(18)
  89:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 4997               	,lo8(-1)
 4998               		call lcd_graphics_plot_pixel
 5000 191a 90E0      	.LM365:
 5001 191c 68E0      		ldi r24,lo8(53)
 5002 191e 70E0      		ldi r25,hi8(53)
 5003 1920 4FEF      		ldi r22,lo8(7)
 5004 1922 0E94 0000 		ldi r23,hi8(7)
  90:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 5005               	,lo8(-1)
 5006               		call lcd_graphics_plot_pixel
 5008 1928 90E0      	.LM366:
 5009 192a 62E1      		ldi r24,lo8(53)
 5010 192c 70E0      		ldi r25,hi8(53)
 5011 192e 4FEF      		ldi r22,lo8(8)
 5012 1930 0E94 0000 		ldi r23,hi8(8)
  91:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 5013               	,lo8(-1)
 5014               		call lcd_graphics_plot_pixel
 5016 1936 90E0      	.LM367:
 5017 1938 64E0      		ldi r24,lo8(53)
 5018 193a 70E0      		ldi r25,hi8(53)
 5019 193c 4FEF      		ldi r22,lo8(9)
 5020 193e 0E94 0000 		ldi r23,hi8(9)
  92:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
 5021               	,lo8(-1)
 5022               		call lcd_graphics_plot_pixel
 5024 1944 90E0      	.LM368:
 5025 1946 65E0      		ldi r24,lo8(53)
 5026 1948 70E0      		ldi r25,hi8(53)
 5027 194a 4FEF      		ldi r22,lo8(10)
 5028 194c 0E94 0000 		ldi r23,hi8(10)
  93:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 5029               	,lo8(-1)
 5030               		call lcd_graphics_plot_pixel
 5032 1952 90E0      	.LM369:
 5033 1954 66E0      		ldi r24,lo8(53)
 5034 1956 70E0      		ldi r25,hi8(53)
 5035 1958 4FEF      		ldi r22,lo8(11)
 5036 195a 0E94 0000 		ldi r23,hi8(11)
  94:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 5037               	,lo8(-1)
 5038               		call lcd_graphics_plot_pixel
 5040 1960 90E0      	.LM370:
 5041 1962 67E0      		ldi r24,lo8(53)
 5042 1964 70E0      		ldi r25,hi8(53)
 5043 1966 4FEF      		ldi r22,lo8(12)
 5044 1968 0E94 0000 		ldi r23,hi8(12)
  95:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5045               	,lo8(-1)
 5046               		call lcd_graphics_plot_pixel
 5048 196e 90E0      	.LM371:
 5049 1970 68E0      		ldi r24,lo8(53)
 5050 1972 70E0      		ldi r25,hi8(53)
 5051 1974 4FEF      		ldi r22,lo8(13)
 5052 1976 0E94 0000 		ldi r23,hi8(13)
  96:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5053               	,lo8(-1)
 5054               		call lcd_graphics_plot_pixel
 5056 197c 90E0      	.LM372:
 5057 197e 69E0      		ldi r24,lo8(53)
 5058 1980 70E0      		ldi r25,hi8(53)
 5059 1982 4FEF      		ldi r22,lo8(14)
 5060 1984 0E94 0000 		ldi r23,hi8(14)
  97:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5061               	,lo8(-1)
 5062               		call lcd_graphics_plot_pixel
 5064 198a 90E0      	.LM373:
 5065 198c 6AE0      		ldi r24,lo8(53)
 5066 198e 70E0      		ldi r25,hi8(53)
 5067 1990 4FEF      		ldi r22,lo8(15)
 5068 1992 0E94 0000 		ldi r23,hi8(15)
  98:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5069               	,lo8(-1)
 5070               		call lcd_graphics_plot_pixel
 5072 1998 90E0      	.LM374:
 5073 199a 6BE0      		ldi r24,lo8(53)
 5074 199c 70E0      		ldi r25,hi8(53)
 5075 199e 4FEF      		ldi r22,lo8(16)
 5076 19a0 0E94 0000 		ldi r23,hi8(16)
  99:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5077               	,lo8(-1)
 5078               		call lcd_graphics_plot_pixel
 5080 19a6 90E0      	.LM375:
 5081 19a8 6CE0      		ldi r24,lo8(53)
 5082 19aa 70E0      		ldi r25,hi8(53)
 5083 19ac 4FEF      		ldi r22,lo8(17)
 5084 19ae 0E94 0000 		ldi r23,hi8(17)
 100:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5085               	,lo8(-1)
 5086               		call lcd_graphics_plot_pixel
 5088 19b4 90E0      	.LM376:
 5089 19b6 6DE0      		ldi r24,lo8(54)
 5090 19b8 70E0      		ldi r25,hi8(54)
 5091 19ba 4FEF      		ldi r22,lo8(10)
 5092 19bc 0E94 0000 		ldi r23,hi8(10)
 101:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 5093               	,lo8(-1)
 5094               		call lcd_graphics_plot_pixel
 5096 19c2 90E0      	.LM377:
 5097 19c4 62E1      		ldi r24,lo8(54)
 5098 19c6 70E0      		ldi r25,hi8(54)
 5099 19c8 4FEF      		ldi r22,lo8(11)
 5100 19ca 0E94 0000 		ldi r23,hi8(11)
 102:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 5101               	,lo8(-1)
 5102               		call lcd_graphics_plot_pixel
 5104 19d0 90E0      	.LM378:
 5105 19d2 66E0      		ldi r24,lo8(54)
 5106 19d4 70E0      		ldi r25,hi8(54)
 5107 19d6 4FEF      		ldi r22,lo8(12)
 5108 19d8 0E94 0000 		ldi r23,hi8(12)
 103:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 5109               	,lo8(-1)
 5110               		call lcd_graphics_plot_pixel
 5112 19de 90E0      	.LM379:
 5113 19e0 67E0      		ldi r24,lo8(54)
 5114 19e2 70E0      		ldi r25,hi8(54)
 5115 19e4 4FEF      		ldi r22,lo8(13)
 5116 19e6 0E94 0000 		ldi r23,hi8(13)
 104:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5117               	,lo8(-1)
 5118               		call lcd_graphics_plot_pixel
 5120 19ec 90E0      	.LM380:
 5121 19ee 68E0      		ldi r24,lo8(54)
 5122 19f0 70E0      		ldi r25,hi8(54)
 5123 19f2 4FEF      		ldi r22,lo8(14)
 5124 19f4 0E94 0000 		ldi r23,hi8(14)
 105:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5125               	,lo8(-1)
 5126               		call lcd_graphics_plot_pixel
 5128 19fa 90E0      	.LM381:
 5129 19fc 69E0      		ldi r24,lo8(54)
 5130 19fe 70E0      		ldi r25,hi8(54)
 5131 1a00 4FEF      		ldi r22,lo8(15)
 5132 1a02 0E94 0000 		ldi r23,hi8(15)
 106:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5133               	,lo8(-1)
 5134               		call lcd_graphics_plot_pixel
 5136 1a08 90E0      	.LM382:
 5137 1a0a 6AE0      		ldi r24,lo8(54)
 5138 1a0c 70E0      		ldi r25,hi8(54)
 5139 1a0e 4FEF      		ldi r22,lo8(16)
 5140 1a10 0E94 0000 		ldi r23,hi8(16)
 107:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5141               	,lo8(-1)
 5142               		call lcd_graphics_plot_pixel
 5144 1a16 90E0      	.LM383:
 5145 1a18 6BE0      		ldi r24,lo8(55)
 5146 1a1a 70E0      		ldi r25,hi8(55)
 5147 1a1c 4FEF      		ldi r22,lo8(8)
 5148 1a1e 0E94 0000 		ldi r23,hi8(8)
 108:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 5149               	,lo8(-1)
 5150               		call lcd_graphics_plot_pixel
 5152 1a24 90E0      	.LM384:
 5153 1a26 61E1      		ldi r24,lo8(55)
 5154 1a28 70E0      		ldi r25,hi8(55)
 5155 1a2a 4FEF      		ldi r22,lo8(9)
 5156 1a2c 0E94 0000 		ldi r23,hi8(9)
 109:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 5157               	,lo8(-1)
 5158               		call lcd_graphics_plot_pixel
 5160 1a32 90E0      	.LM385:
 5161 1a34 62E1      		ldi r24,lo8(55)
 5162 1a36 70E0      		ldi r25,hi8(55)
 5163 1a38 4FEF      		ldi r22,lo8(10)
 5164 1a3a 0E94 0000 		ldi r23,hi8(10)
 110:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 5165               	,lo8(-1)
 5166               		call lcd_graphics_plot_pixel
 5168 1a40 90E0      	.LM386:
 5169 1a42 67E0      		ldi r24,lo8(55)
 5170 1a44 70E0      		ldi r25,hi8(55)
 5171 1a46 4FEF      		ldi r22,lo8(11)
 5172 1a48 0E94 0000 		ldi r23,hi8(11)
 111:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5173               	,lo8(-1)
 5174               		call lcd_graphics_plot_pixel
 5176 1a4e 90E0      	.LM387:
 5177 1a50 68E0      		ldi r24,lo8(55)
 5178 1a52 70E0      		ldi r25,hi8(55)
 5179 1a54 4FEF      		ldi r22,lo8(12)
 5180 1a56 0E94 0000 		ldi r23,hi8(12)
 112:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5181               	,lo8(-1)
 5182               		call lcd_graphics_plot_pixel
 5184 1a5c 90E0      	.LM388:
 5185 1a5e 69E0      		ldi r24,lo8(55)
 5186 1a60 70E0      		ldi r25,hi8(55)
 5187 1a62 4FEF      		ldi r22,lo8(13)
 5188 1a64 0E94 0000 		ldi r23,hi8(13)
 113:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5189               	,lo8(-1)
 5190               		call lcd_graphics_plot_pixel
 5192 1a6a 90E0      	.LM389:
 5193 1a6c 6AE0      		ldi r24,lo8(55)
 5194 1a6e 70E0      		ldi r25,hi8(55)
 5195 1a70 4FEF      		ldi r22,lo8(14)
 5196 1a72 0E94 0000 		ldi r23,hi8(14)
 114:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5197               	,lo8(-1)
 5198               		call lcd_graphics_plot_pixel
 5200 1a78 90E0      	.LM390:
 5201 1a7a 6BE0      		ldi r24,lo8(55)
 5202 1a7c 70E0      		ldi r25,hi8(55)
 5203 1a7e 4FEF      		ldi r22,lo8(15)
 5204 1a80 0E94 0000 		ldi r23,hi8(15)
 115:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5205               	,lo8(-1)
 5206               		call lcd_graphics_plot_pixel
 5208 1a86 90E0      	.LM391:
 5209 1a88 6CE0      		ldi r24,lo8(56)
 5210 1a8a 70E0      		ldi r25,hi8(56)
 5211 1a8c 4FEF      		ldi r22,lo8(12)
 5212 1a8e 0E94 0000 		ldi r23,hi8(12)
 116:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5213               	,lo8(-1)
 5214               		call lcd_graphics_plot_pixel
 5216 1a94 90E0      	.LM392:
 5217 1a96 6DE0      		ldi r24,lo8(56)
 5218 1a98 70E0      		ldi r25,hi8(56)
 5219 1a9a 4FEF      		ldi r22,lo8(13)
 5220 1a9c 0E94 0000 		ldi r23,hi8(13)
 117:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5221               	,lo8(-1)
 5222               		call lcd_graphics_plot_pixel
 5224 1aa2 90E0      	.LM393:
 5225 1aa4 6EE0      		ldi r24,lo8(56)
 5226 1aa6 70E0      		ldi r25,hi8(56)
 5227 1aa8 4FEF      		ldi r22,lo8(14)
 5228 1aaa 0E94 0000 		ldi r23,hi8(14)
 118:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 5229               	,lo8(-1)
 5230               		call lcd_graphics_plot_pixel
 5231 1aae 85E3      	/* epilogue start */
 5233 1ab2 6FE0      	.LM394:
 5234 1ab4 70E0      		pop __tmp_reg__
 5235 1ab6 4FEF      		pop __tmp_reg__
 5236 1ab8 0E94 0000 		pop r28
 119:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 5237               	
 5238               		ret
 5244 1ac6 0E94 0000 	.Lscope31:
 120:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 5245               		"draw_flake:F(0,15)",36,0,0,draw_flake
 5246               	.global	draw_flake
 5248 1acc 90E0      	draw_flake:
 5250 1ad0 70E0      	.LM395:
 5251 1ad2 4FEF      	.LFBB32:
 5252 1ad4 0E94 0000 		push r29
 121:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5253               	8
 5254               		rcall .
 5255 1ad8 86E3      		in r28,__SP_L__
 5256 1ada 90E0      		in r29,__SP_H__
 5257 1adc 6AE0      	/* prologue: function */
 5258 1ade 70E0      	/* frame size = 2 */
 5260 1ae2 0E94 0000 	.LM396:
 122:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5261               	,lo8(1)
 5262               		std Y+2,r24
 5263 1ae6 86E3      		rjmp .L193
 5264 1ae8 90E0      	.L196:
 5266 1aec 70E0      	.LM397:
 5267 1aee 4FEF      		ldi r24,lo8(1)
 5268 1af0 0E94 0000 		std Y+1,r24
 123:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5269               	194
 5270               	.L195:
 5272 1af6 90E0      	.LM398:
 5273 1af8 6CE0      		ldd r24,Y+2
 5274 1afa 70E0      		mov r24,r24
 5275 1afc 4FEF      		ldi r25,lo8(0)
 5276 1afe 0E94 0000 		adiw r24,40
 124:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5277               	0,r24
 5278               		ldd r24,Y+1
 5279 1b02 86E3      		mov r24,r24
 5280 1b04 90E0      		ldi r25,lo8(0)
 5281 1b06 6DE0      		adiw r24,1
 5282 1b08 70E0      		movw r18,r24
 5283 1b0a 4FEF      		movw r24,r20
 5284 1b0c 0E94 0000 		movw r22,r18
 125:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5285               	,lo8(0)
 5286               		call lcd_graphics_plot_pixel
 5288 1b12 90E0      	.LM399:
 5289 1b14 6EE0      		ldd r24,Y+1
 5290 1b16 70E0      		subi r24,lo8(-(1))
 5291 1b18 4FEF      		std Y+1,r24
 5292 1b1a 0E94 0000 	.L194:
 126:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 5293               	,Y+1
 5294               		cpi r24,lo8(18)
 5295 1b1e 86E3      		brlo .L195
 5297 1b22 6FE0      	.LM400:
 5298 1b24 70E0      		ldd r24,Y+2
 5299 1b26 4FEF      		subi r24,lo8(-(1))
 5300 1b28 0E94 0000 		std Y+2,r24
 127:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 5301               	ldd r24,Y+2
 5302               		cpi r24,lo8(18)
 5303 1b2c 86E3      		brlo .L196
 5305 1b30 60E1      	.LM401:
 5306 1b32 70E0      		ldi r24,lo8(41)
 5307 1b34 4FEF      		ldi r25,hi8(41)
 5308 1b36 0E94 0000 		ldi r22,lo8(10)
 128:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5309               	,hi8(10)
 5310               		ldi r20,lo8(-1)
 5311 1b3a 87E3      		call lcd_graphics_plot_pixel
 5313 1b3e 68E0      	.LM402:
 5314 1b40 70E0      		ldi r24,lo8(42)
 5315 1b42 4FEF      		ldi r25,hi8(42)
 5316 1b44 0E94 0000 		ldi r22,lo8(6)
 129:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5317               	,hi8(6)
 5318               		ldi r20,lo8(-1)
 5319 1b48 87E3      		call lcd_graphics_plot_pixel
 5321 1b4c 69E0      	.LM403:
 5322 1b4e 70E0      		ldi r24,lo8(42)
 5323 1b50 4FEF      		ldi r25,hi8(42)
 5324 1b52 0E94 0000 		ldi r22,lo8(8)
 130:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5325               	,hi8(8)
 5326               		ldi r20,lo8(-1)
 5327 1b56 87E3      		call lcd_graphics_plot_pixel
 5329 1b5a 6AE0      	.LM404:
 5330 1b5c 70E0      		ldi r24,lo8(42)
 5331 1b5e 4FEF      		ldi r25,hi8(42)
 5332 1b60 0E94 0000 		ldi r22,lo8(10)
 131:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5333               	,hi8(10)
 5334               		ldi r20,lo8(-1)
 5335 1b64 87E3      		call lcd_graphics_plot_pixel
 5337 1b68 6BE0      	.LM405:
 5338 1b6a 70E0      		ldi r24,lo8(42)
 5339 1b6c 4FEF      		ldi r25,hi8(42)
 5340 1b6e 0E94 0000 		ldi r22,lo8(12)
 132:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5341               	,hi8(12)
 5342               		ldi r20,lo8(-1)
 5343 1b72 87E3      		call lcd_graphics_plot_pixel
 5345 1b76 6CE0      	.LM406:
 5346 1b78 70E0      		ldi r24,lo8(42)
 5347 1b7a 4FEF      		ldi r25,hi8(42)
 5348 1b7c 0E94 0000 		ldi r22,lo8(14)
 133:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5349               	,hi8(14)
 5350               		ldi r20,lo8(-1)
 5351 1b80 87E3      		call lcd_graphics_plot_pixel
 5353 1b84 6DE0      	.LM407:
 5354 1b86 70E0      		ldi r24,lo8(43)
 5355 1b88 4FEF      		ldi r25,hi8(43)
 5356 1b8a 0E94 0000 		ldi r22,lo8(4)
 134:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5357               	,hi8(4)
 5358               		ldi r20,lo8(-1)
 5359 1b8e 87E3      		call lcd_graphics_plot_pixel
 5361 1b92 6EE0      	.LM408:
 5362 1b94 70E0      		ldi r24,lo8(43)
 5363 1b96 4FEF      		ldi r25,hi8(43)
 5364 1b98 0E94 0000 		ldi r22,lo8(6)
 135:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 5365               	,hi8(6)
 5366               		ldi r20,lo8(-1)
 5367 1b9c 87E3      		call lcd_graphics_plot_pixel
 5369 1ba0 6FE0      	.LM409:
 5370 1ba2 70E0      		ldi r24,lo8(43)
 5371 1ba4 4FEF      		ldi r25,hi8(43)
 5372 1ba6 0E94 0000 		ldi r22,lo8(9)
 136:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5373               	,hi8(9)
 5374               		ldi r20,lo8(-1)
 5375 1baa 88E3      		call lcd_graphics_plot_pixel
 5377 1bae 6CE0      	.LM410:
 5378 1bb0 70E0      		ldi r24,lo8(43)
 5379 1bb2 4FEF      		ldi r25,hi8(43)
 5380 1bb4 0E94 0000 		ldi r22,lo8(10)
 137:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5381               	,hi8(10)
 5382               		ldi r20,lo8(-1)
 5383 1bb8 88E3      		call lcd_graphics_plot_pixel
 5385 1bbc 6DE0      	.LM411:
 5386 1bbe 70E0      		ldi r24,lo8(43)
 5387 1bc0 4FEF      		ldi r25,hi8(43)
 5388 1bc2 0E94 0000 		ldi r22,lo8(11)
 138:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5389               	,hi8(11)
 5390               		ldi r20,lo8(-1)
 5391 1bc6 88E3      		call lcd_graphics_plot_pixel
 5393 1bca 6EE0      	.LM412:
 5394 1bcc 70E0      		ldi r24,lo8(43)
 5395 1bce 4FEF      		ldi r25,hi8(43)
 5396 1bd0 0E94 0000 		ldi r22,lo8(14)
 5397               		ldi r23,hi8(14)
 139:lib/touch_pictures.c **** }
 5398               	lo8(-1)
 5399               		call lcd_graphics_plot_pixel
 5401 1bd6 0F90      	.LM413:
 5402 1bd8 CF91      		ldi r24,lo8(43)
 5403 1bda DF91      		ldi r25,hi8(43)
 5404 1bdc 0895      		ldi r22,lo8(16)
 5405               		ldi r23,hi8(16)
 5406               		ldi r20,lo8(-1)
 5407               		call lcd_graphics_plot_pixel
 5409               	.LM414:
 5410               		ldi r24,lo8(44)
 5411               		ldi r25,hi8(44)
 5412               		ldi r22,lo8(5)
 5413               		ldi r23,hi8(5)
 5414               		ldi r20,lo8(-1)
 140:lib/touch_pictures.c **** 
 141:lib/touch_pictures.c **** void draw_flake(void)
 142:lib/touch_pictures.c **** {
 5415               	s_plot_pixel
 5417               	.LM415:
 5418 1bde DF93      		ldi r24,lo8(44)
 5419 1be0 CF93      		ldi r25,hi8(44)
 5420 1be2 00D0      		ldi r22,lo8(10)
 5421 1be4 CDB7      		ldi r23,hi8(10)
 5422 1be6 DEB7      		ldi r20,lo8(-1)
 5423               		call lcd_graphics_plot_pixel
 143:lib/touch_pictures.c **** 	unsigned char x, y;
 144:lib/touch_pictures.c **** 	
 145:lib/touch_pictures.c **** 	for (x = 1; x <= 17; x++)
 5425               	di r24,lo8(44)
 5426               		ldi r25,hi8(44)
 5427 1be8 81E0      		ldi r22,lo8(15)
 5428 1bea 8A83      		ldi r23,hi8(15)
 5429 1bec 00C0      		ldi r20,lo8(-1)
 5430               		call lcd_graphics_plot_pixel
 146:lib/touch_pictures.c **** 	{
 147:lib/touch_pictures.c **** 		for (y = 1; y <= 17; y++)
 5431               	n	68,0,168,.LM417-.LFBB32
 5432               	.LM417:
 5433 1bee 81E0      		ldi r24,lo8(45)
 5434 1bf0 8983      		ldi r25,hi8(45)
 5435 1bf2 00C0      		ldi r22,lo8(3)
 5436               		ldi r23,hi8(3)
 148:lib/touch_pictures.c **** 		{
 149:lib/touch_pictures.c **** 			lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + x, PIC_POS_FLAME_FLAKE_Y + y, PIXEL_OFF);
 5437               	20,lo8(-1)
 5438               		call lcd_graphics_plot_pixel
 5440 1bf6 882F      	.LM418:
 5441 1bf8 90E0      		ldi r24,lo8(45)
 5442 1bfa 8896      		ldi r25,hi8(45)
 5443 1bfc AC01      		ldi r22,lo8(4)
 5444 1bfe 8981      		ldi r23,hi8(4)
 5445 1c00 882F      		ldi r20,lo8(-1)
 5446 1c02 90E0      		call lcd_graphics_plot_pixel
 5448 1c06 9C01      	.LM419:
 5449 1c08 CA01      		ldi r24,lo8(45)
 5450 1c0a B901      		ldi r25,hi8(45)
 5451 1c0c 40E0      		ldi r22,lo8(6)
 5452 1c0e 0E94 0000 		ldi r23,hi8(6)
 5453               		ldi r20,lo8(-1)
 5454               		call lcd_graphics_plot_pixel
 5456 1c14 8F5F      	.LM420:
 5457 1c16 8983      		ldi r24,lo8(45)
 5458               		ldi r25,hi8(45)
 5459 1c18 8981      		ldi r22,lo8(10)
 5460 1c1a 8231      		ldi r23,hi8(10)
 5461 1c1c 00F0      		ldi r20,lo8(-1)
 5462               		call lcd_graphics_plot_pixel
 5464 1c1e 8A81      	.LM421:
 5465 1c20 8F5F      		ldi r24,lo8(45)
 5466 1c22 8A83      		ldi r25,hi8(45)
 5467               		ldi r22,lo8(14)
 5468 1c24 8A81      		ldi r23,hi8(14)
 5469 1c26 8231      		ldi r20,lo8(-1)
 5470 1c28 00F0      		call lcd_graphics_plot_pixel
 150:lib/touch_pictures.c **** 		}
 151:lib/touch_pictures.c **** 	}
 152:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 1, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5471               	M422:
 5472               		ldi r24,lo8(45)
 5473 1c2a 89E2      		ldi r25,hi8(45)
 5474 1c2c 90E0      		ldi r22,lo8(16)
 5475 1c2e 6AE0      		ldi r23,hi8(16)
 5476 1c30 70E0      		ldi r20,lo8(-1)
 5477 1c32 4FEF      		call lcd_graphics_plot_pixel
 153:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 5479               		ldi r24,lo8(45)
 5480               		ldi r25,hi8(45)
 5481 1c38 8AE2      		ldi r22,lo8(17)
 5482 1c3a 90E0      		ldi r23,hi8(17)
 5483 1c3c 66E0      		ldi r20,lo8(-1)
 5484 1c3e 70E0      		call lcd_graphics_plot_pixel
 5486 1c42 0E94 0000 	.LM424:
 154:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5487               	,lo8(46)
 5488               		ldi r25,hi8(46)
 5489 1c46 8AE2      		ldi r22,lo8(7)
 5490 1c48 90E0      		ldi r23,hi8(7)
 5491 1c4a 68E0      		ldi r20,lo8(-1)
 5492 1c4c 70E0      		call lcd_graphics_plot_pixel
 5494 1c50 0E94 0000 	.LM425:
 155:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5495               	,lo8(46)
 5496               		ldi r25,hi8(46)
 5497 1c54 8AE2      		ldi r22,lo8(10)
 5498 1c56 90E0      		ldi r23,hi8(10)
 5499 1c58 6AE0      		ldi r20,lo8(-1)
 5500 1c5a 70E0      		call lcd_graphics_plot_pixel
 5502 1c5e 0E94 0000 	.LM426:
 156:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5503               	,lo8(46)
 5504               		ldi r25,hi8(46)
 5505 1c62 8AE2      		ldi r22,lo8(13)
 5506 1c64 90E0      		ldi r23,hi8(13)
 5507 1c66 6CE0      		ldi r20,lo8(-1)
 5508 1c68 70E0      		call lcd_graphics_plot_pixel
 5510 1c6c 0E94 0000 	.LM427:
 157:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 2, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5511               	,lo8(47)
 5512               		ldi r25,hi8(47)
 5513 1c70 8AE2      		ldi r22,lo8(3)
 5514 1c72 90E0      		ldi r23,hi8(3)
 5515 1c74 6EE0      		ldi r20,lo8(-1)
 5516 1c76 70E0      		call lcd_graphics_plot_pixel
 5518 1c7a 0E94 0000 	.LM428:
 158:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 5519               	,lo8(47)
 5520               		ldi r25,hi8(47)
 5521 1c7e 8BE2      		ldi r22,lo8(8)
 5522 1c80 90E0      		ldi r23,hi8(8)
 5523 1c82 64E0      		ldi r20,lo8(-1)
 5524 1c84 70E0      		call lcd_graphics_plot_pixel
 5526 1c88 0E94 0000 	.LM429:
 159:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 5527               	,lo8(47)
 5528               		ldi r25,hi8(47)
 5529 1c8c 8BE2      		ldi r22,lo8(10)
 5530 1c8e 90E0      		ldi r23,hi8(10)
 5531 1c90 66E0      		ldi r20,lo8(-1)
 5532 1c92 70E0      		call lcd_graphics_plot_pixel
 5534 1c96 0E94 0000 	.LM430:
 160:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5535               	,lo8(47)
 5536               		ldi r25,hi8(47)
 5537 1c9a 8BE2      		ldi r22,lo8(12)
 5538 1c9c 90E0      		ldi r23,hi8(12)
 5539 1c9e 69E0      		ldi r20,lo8(-1)
 5540 1ca0 70E0      		call lcd_graphics_plot_pixel
 5542 1ca4 0E94 0000 	.LM431:
 161:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5543               	,lo8(47)
 5544               		ldi r25,hi8(47)
 5545 1ca8 8BE2      		ldi r22,lo8(17)
 5546 1caa 90E0      		ldi r23,hi8(17)
 5547 1cac 6AE0      		ldi r20,lo8(-1)
 5548 1cae 70E0      		call lcd_graphics_plot_pixel
 5550 1cb2 0E94 0000 	.LM432:
 162:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5551               	,lo8(48)
 5552               		ldi r25,hi8(48)
 5553 1cb6 8BE2      		ldi r22,lo8(4)
 5554 1cb8 90E0      		ldi r23,hi8(4)
 5555 1cba 6BE0      		ldi r20,lo8(-1)
 5556 1cbc 70E0      		call lcd_graphics_plot_pixel
 5558 1cc0 0E94 0000 	.LM433:
 163:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5559               	,lo8(48)
 5560               		ldi r25,hi8(48)
 5561 1cc4 8BE2      		ldi r22,lo8(9)
 5562 1cc6 90E0      		ldi r23,hi8(9)
 5563 1cc8 6EE0      		ldi r20,lo8(-1)
 5564 1cca 70E0      		call lcd_graphics_plot_pixel
 5566 1cce 0E94 0000 	.LM434:
 164:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 3, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 5567               	,lo8(48)
 5568               		ldi r25,hi8(48)
 5569 1cd2 8BE2      		ldi r22,lo8(10)
 5570 1cd4 90E0      		ldi r23,hi8(10)
 5571 1cd6 60E1      		ldi r20,lo8(-1)
 5572 1cd8 70E0      		call lcd_graphics_plot_pixel
 5574 1cdc 0E94 0000 	.LM435:
 165:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
 5575               	,lo8(48)
 5576               		ldi r25,hi8(48)
 5577 1ce0 8CE2      		ldi r22,lo8(11)
 5578 1ce2 90E0      		ldi r23,hi8(11)
 5579 1ce4 65E0      		ldi r20,lo8(-1)
 5580 1ce6 70E0      		call lcd_graphics_plot_pixel
 5582 1cea 0E94 0000 	.LM436:
 166:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5583               	,lo8(48)
 5584               		ldi r25,hi8(48)
 5585 1cee 8CE2      		ldi r22,lo8(16)
 5586 1cf0 90E0      		ldi r23,hi8(16)
 5587 1cf2 6AE0      		ldi r20,lo8(-1)
 5588 1cf4 70E0      		call lcd_graphics_plot_pixel
 5590 1cf8 0E94 0000 	.LM437:
 167:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 4, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 5591               	,lo8(49)
 5592               		ldi r25,hi8(49)
 5593 1cfc 8CE2      		ldi r22,lo8(2)
 5594 1cfe 90E0      		ldi r23,hi8(2)
 5595 1d00 6FE0      		ldi r20,lo8(-1)
 5596 1d02 70E0      		call lcd_graphics_plot_pixel
 5598 1d06 0E94 0000 	.LM438:
 168:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
 5599               	,lo8(49)
 5600               		ldi r25,hi8(49)
 5601 1d0a 8DE2      		ldi r22,lo8(3)
 5602 1d0c 90E0      		ldi r23,hi8(3)
 5603 1d0e 63E0      		ldi r20,lo8(-1)
 5604 1d10 70E0      		call lcd_graphics_plot_pixel
 5606 1d14 0E94 0000 	.LM439:
 169:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 5607               	,lo8(49)
 5608               		ldi r25,hi8(49)
 5609 1d18 8DE2      		ldi r22,lo8(4)
 5610 1d1a 90E0      		ldi r23,hi8(4)
 5611 1d1c 64E0      		ldi r20,lo8(-1)
 5612 1d1e 70E0      		call lcd_graphics_plot_pixel
 5614 1d22 0E94 0000 	.LM440:
 170:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 5615               	,lo8(49)
 5616               		ldi r25,hi8(49)
 5617 1d26 8DE2      		ldi r22,lo8(5)
 5618 1d28 90E0      		ldi r23,hi8(5)
 5619 1d2a 66E0      		ldi r20,lo8(-1)
 5620 1d2c 70E0      		call lcd_graphics_plot_pixel
 5622 1d30 0E94 0000 	.LM441:
 171:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5623               	,lo8(49)
 5624               		ldi r25,hi8(49)
 5625 1d34 8DE2      		ldi r22,lo8(6)
 5626 1d36 90E0      		ldi r23,hi8(6)
 5627 1d38 6AE0      		ldi r20,lo8(-1)
 5628 1d3a 70E0      		call lcd_graphics_plot_pixel
 5630 1d3e 0E94 0000 	.LM442:
 172:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5631               	,lo8(49)
 5632               		ldi r25,hi8(49)
 5633 1d42 8DE2      		ldi r22,lo8(7)
 5634 1d44 90E0      		ldi r23,hi8(7)
 5635 1d46 6EE0      		ldi r20,lo8(-1)
 5636 1d48 70E0      		call lcd_graphics_plot_pixel
 5638 1d4c 0E94 0000 	.LM443:
 173:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 5639               	,lo8(49)
 5640               		ldi r25,hi8(49)
 5641 1d50 8DE2      		ldi r22,lo8(8)
 5642 1d52 90E0      		ldi r23,hi8(8)
 5643 1d54 60E1      		ldi r20,lo8(-1)
 5644 1d56 70E0      		call lcd_graphics_plot_pixel
 5646 1d5a 0E94 0000 	.LM444:
 174:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 5, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 5647               	,lo8(49)
 5648               		ldi r25,hi8(49)
 5649 1d5e 8DE2      		ldi r22,lo8(9)
 5650 1d60 90E0      		ldi r23,hi8(9)
 5651 1d62 61E1      		ldi r20,lo8(-1)
 5652 1d64 70E0      		call lcd_graphics_plot_pixel
 5654 1d68 0E94 0000 	.LM445:
 175:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 5655               	,lo8(49)
 5656               		ldi r25,hi8(49)
 5657 1d6c 8EE2      		ldi r22,lo8(10)
 5658 1d6e 90E0      		ldi r23,hi8(10)
 5659 1d70 67E0      		ldi r20,lo8(-1)
 5660 1d72 70E0      		call lcd_graphics_plot_pixel
 5662 1d76 0E94 0000 	.LM446:
 176:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5663               	,lo8(49)
 5664               		ldi r25,hi8(49)
 5665 1d7a 8EE2      		ldi r22,lo8(11)
 5666 1d7c 90E0      		ldi r23,hi8(11)
 5667 1d7e 6AE0      		ldi r20,lo8(-1)
 5668 1d80 70E0      		call lcd_graphics_plot_pixel
 5670 1d84 0E94 0000 	.LM447:
 177:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 6, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5671               	,lo8(49)
 5672               		ldi r25,hi8(49)
 5673 1d88 8EE2      		ldi r22,lo8(12)
 5674 1d8a 90E0      		ldi r23,hi8(12)
 5675 1d8c 6DE0      		ldi r20,lo8(-1)
 5676 1d8e 70E0      		call lcd_graphics_plot_pixel
 5678 1d92 0E94 0000 	.LM448:
 178:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
 5679               	,lo8(49)
 5680               		ldi r25,hi8(49)
 5681 1d96 8FE2      		ldi r22,lo8(13)
 5682 1d98 90E0      		ldi r23,hi8(13)
 5683 1d9a 63E0      		ldi r20,lo8(-1)
 5684 1d9c 70E0      		call lcd_graphics_plot_pixel
 5686 1da0 0E94 0000 	.LM449:
 179:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5687               	,lo8(49)
 5688               		ldi r25,hi8(49)
 5689 1da4 8FE2      		ldi r22,lo8(14)
 5690 1da6 90E0      		ldi r23,hi8(14)
 5691 1da8 68E0      		ldi r20,lo8(-1)
 5692 1daa 70E0      		call lcd_graphics_plot_pixel
 5694 1dae 0E94 0000 	.LM450:
 180:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5695               	,lo8(49)
 5696               		ldi r25,hi8(49)
 5697 1db2 8FE2      		ldi r22,lo8(15)
 5698 1db4 90E0      		ldi r23,hi8(15)
 5699 1db6 6AE0      		ldi r20,lo8(-1)
 5700 1db8 70E0      		call lcd_graphics_plot_pixel
 5702 1dbc 0E94 0000 	.LM451:
 181:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5703               	,lo8(49)
 5704               		ldi r25,hi8(49)
 5705 1dc0 8FE2      		ldi r22,lo8(16)
 5706 1dc2 90E0      		ldi r23,hi8(16)
 5707 1dc4 6CE0      		ldi r20,lo8(-1)
 5708 1dc6 70E0      		call lcd_graphics_plot_pixel
 5710 1dca 0E94 0000 	.LM452:
 182:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 7, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 5711               	,lo8(49)
 5712               		ldi r25,hi8(49)
 5713 1dce 8FE2      		ldi r22,lo8(17)
 5714 1dd0 90E0      		ldi r23,hi8(17)
 5715 1dd2 61E1      		ldi r20,lo8(-1)
 5716 1dd4 70E0      		call lcd_graphics_plot_pixel
 5718 1dd8 0E94 0000 	.LM453:
 183:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 5719               	,lo8(49)
 5720               		ldi r25,hi8(49)
 5721 1ddc 80E3      		ldi r22,lo8(18)
 5722 1dde 90E0      		ldi r23,hi8(18)
 5723 1de0 64E0      		ldi r20,lo8(-1)
 5724 1de2 70E0      		call lcd_graphics_plot_pixel
 5726 1de6 0E94 0000 	.LM454:
 184:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5727               	,lo8(50)
 5728               		ldi r25,hi8(50)
 5729 1dea 80E3      		ldi r22,lo8(4)
 5730 1dec 90E0      		ldi r23,hi8(4)
 5731 1dee 69E0      		ldi r20,lo8(-1)
 5732 1df0 70E0      		call lcd_graphics_plot_pixel
 5734 1df4 0E94 0000 	.LM455:
 185:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5735               	,lo8(50)
 5736               		ldi r25,hi8(50)
 5737 1df8 80E3      		ldi r22,lo8(9)
 5738 1dfa 90E0      		ldi r23,hi8(9)
 5739 1dfc 6AE0      		ldi r20,lo8(-1)
 5740 1dfe 70E0      		call lcd_graphics_plot_pixel
 5742 1e02 0E94 0000 	.LM456:
 186:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5743               	,lo8(50)
 5744               		ldi r25,hi8(50)
 5745 1e06 80E3      		ldi r22,lo8(10)
 5746 1e08 90E0      		ldi r23,hi8(10)
 5747 1e0a 6BE0      		ldi r20,lo8(-1)
 5748 1e0c 70E0      		call lcd_graphics_plot_pixel
 5750 1e10 0E94 0000 	.LM457:
 187:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 8, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 5751               	,lo8(50)
 5752               		ldi r25,hi8(50)
 5753 1e14 80E3      		ldi r22,lo8(11)
 5754 1e16 90E0      		ldi r23,hi8(11)
 5755 1e18 60E1      		ldi r20,lo8(-1)
 5756 1e1a 70E0      		call lcd_graphics_plot_pixel
 5758 1e1e 0E94 0000 	.LM458:
 188:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 1, PIXEL_ON);
 5759               	,lo8(50)
 5760               		ldi r25,hi8(50)
 5761 1e22 81E3      		ldi r22,lo8(16)
 5762 1e24 90E0      		ldi r23,hi8(16)
 5763 1e26 62E0      		ldi r20,lo8(-1)
 5764 1e28 70E0      		call lcd_graphics_plot_pixel
 5766 1e2c 0E94 0000 	.LM459:
 189:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
 5767               	,lo8(51)
 5768               		ldi r25,hi8(51)
 5769 1e30 81E3      		ldi r22,lo8(3)
 5770 1e32 90E0      		ldi r23,hi8(3)
 5771 1e34 63E0      		ldi r20,lo8(-1)
 5772 1e36 70E0      		call lcd_graphics_plot_pixel
 5774 1e3a 0E94 0000 	.LM460:
 190:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 5775               	,lo8(51)
 5776               		ldi r25,hi8(51)
 5777 1e3e 81E3      		ldi r22,lo8(8)
 5778 1e40 90E0      		ldi r23,hi8(8)
 5779 1e42 64E0      		ldi r20,lo8(-1)
 5780 1e44 70E0      		call lcd_graphics_plot_pixel
 5782 1e48 0E94 0000 	.LM461:
 191:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
 5783               	,lo8(51)
 5784               		ldi r25,hi8(51)
 5785 1e4c 81E3      		ldi r22,lo8(10)
 5786 1e4e 90E0      		ldi r23,hi8(10)
 5787 1e50 65E0      		ldi r20,lo8(-1)
 5788 1e52 70E0      		call lcd_graphics_plot_pixel
 5790 1e56 0E94 0000 	.LM462:
 192:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 5791               	,lo8(51)
 5792               		ldi r25,hi8(51)
 5793 1e5a 81E3      		ldi r22,lo8(12)
 5794 1e5c 90E0      		ldi r23,hi8(12)
 5795 1e5e 66E0      		ldi r20,lo8(-1)
 5796 1e60 70E0      		call lcd_graphics_plot_pixel
 5798 1e64 0E94 0000 	.LM463:
 193:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 5799               	,lo8(51)
 5800               		ldi r25,hi8(51)
 5801 1e68 81E3      		ldi r22,lo8(17)
 5802 1e6a 90E0      		ldi r23,hi8(17)
 5803 1e6c 67E0      		ldi r20,lo8(-1)
 5804 1e6e 70E0      		call lcd_graphics_plot_pixel
 5806 1e72 0E94 0000 	.LM464:
 194:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5807               	,lo8(52)
 5808               		ldi r25,hi8(52)
 5809 1e76 81E3      		ldi r22,lo8(7)
 5810 1e78 90E0      		ldi r23,hi8(7)
 5811 1e7a 68E0      		ldi r20,lo8(-1)
 5812 1e7c 70E0      		call lcd_graphics_plot_pixel
 5814 1e80 0E94 0000 	.LM465:
 195:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5815               	,lo8(52)
 5816               		ldi r25,hi8(52)
 5817 1e84 81E3      		ldi r22,lo8(10)
 5818 1e86 90E0      		ldi r23,hi8(10)
 5819 1e88 69E0      		ldi r20,lo8(-1)
 5820 1e8a 70E0      		call lcd_graphics_plot_pixel
 5822 1e8e 0E94 0000 	.LM466:
 196:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5823               	,lo8(52)
 5824               		ldi r25,hi8(52)
 5825 1e92 81E3      		ldi r22,lo8(13)
 5826 1e94 90E0      		ldi r23,hi8(13)
 5827 1e96 6AE0      		ldi r20,lo8(-1)
 5828 1e98 70E0      		call lcd_graphics_plot_pixel
 5830 1e9c 0E94 0000 	.LM467:
 197:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5831               	,lo8(53)
 5832               		ldi r25,hi8(53)
 5833 1ea0 81E3      		ldi r22,lo8(3)
 5834 1ea2 90E0      		ldi r23,hi8(3)
 5835 1ea4 6BE0      		ldi r20,lo8(-1)
 5836 1ea6 70E0      		call lcd_graphics_plot_pixel
 5838 1eaa 0E94 0000 	.LM468:
 198:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5839               	,lo8(53)
 5840               		ldi r25,hi8(53)
 5841 1eae 81E3      		ldi r22,lo8(4)
 5842 1eb0 90E0      		ldi r23,hi8(4)
 5843 1eb2 6CE0      		ldi r20,lo8(-1)
 5844 1eb4 70E0      		call lcd_graphics_plot_pixel
 5846 1eb8 0E94 0000 	.LM469:
 199:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5847               	,lo8(53)
 5848               		ldi r25,hi8(53)
 5849 1ebc 81E3      		ldi r22,lo8(6)
 5850 1ebe 90E0      		ldi r23,hi8(6)
 5851 1ec0 6DE0      		ldi r20,lo8(-1)
 5852 1ec2 70E0      		call lcd_graphics_plot_pixel
 5854 1ec6 0E94 0000 	.LM470:
 200:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 5855               	,lo8(53)
 5856               		ldi r25,hi8(53)
 5857 1eca 81E3      		ldi r22,lo8(10)
 5858 1ecc 90E0      		ldi r23,hi8(10)
 5859 1ece 6EE0      		ldi r20,lo8(-1)
 5860 1ed0 70E0      		call lcd_graphics_plot_pixel
 5862 1ed4 0E94 0000 	.LM471:
 201:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 5863               	,lo8(53)
 5864               		ldi r25,hi8(53)
 5865 1ed8 81E3      		ldi r22,lo8(14)
 5866 1eda 90E0      		ldi r23,hi8(14)
 5867 1edc 6FE0      		ldi r20,lo8(-1)
 5868 1ede 70E0      		call lcd_graphics_plot_pixel
 5870 1ee2 0E94 0000 	.LM472:
 202:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 5871               	,lo8(53)
 5872               		ldi r25,hi8(53)
 5873 1ee6 81E3      		ldi r22,lo8(16)
 5874 1ee8 90E0      		ldi r23,hi8(16)
 5875 1eea 60E1      		ldi r20,lo8(-1)
 5876 1eec 70E0      		call lcd_graphics_plot_pixel
 5878 1ef0 0E94 0000 	.LM473:
 203:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 5879               	,lo8(53)
 5880               		ldi r25,hi8(53)
 5881 1ef4 81E3      		ldi r22,lo8(17)
 5882 1ef6 90E0      		ldi r23,hi8(17)
 5883 1ef8 61E1      		ldi r20,lo8(-1)
 5884 1efa 70E0      		call lcd_graphics_plot_pixel
 5886 1efe 0E94 0000 	.LM474:
 204:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 9, PIC_POS_FLAME_FLAKE_Y + 17, PIXEL_ON);
 5887               	,lo8(54)
 5888               		ldi r25,hi8(54)
 5889 1f02 81E3      		ldi r22,lo8(5)
 5890 1f04 90E0      		ldi r23,hi8(5)
 5891 1f06 62E1      		ldi r20,lo8(-1)
 5892 1f08 70E0      		call lcd_graphics_plot_pixel
 5894 1f0c 0E94 0000 	.LM475:
 205:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 5895               	,lo8(54)
 5896               		ldi r25,hi8(54)
 5897 1f10 82E3      		ldi r22,lo8(10)
 5898 1f12 90E0      		ldi r23,hi8(10)
 5899 1f14 64E0      		ldi r20,lo8(-1)
 5900 1f16 70E0      		call lcd_graphics_plot_pixel
 5902 1f1a 0E94 0000 	.LM476:
 206:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 5903               	,lo8(54)
 5904               		ldi r25,hi8(54)
 5905 1f1e 82E3      		ldi r22,lo8(15)
 5906 1f20 90E0      		ldi r23,hi8(15)
 5907 1f22 69E0      		ldi r20,lo8(-1)
 5908 1f24 70E0      		call lcd_graphics_plot_pixel
 5910 1f28 0E94 0000 	.LM477:
 207:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5911               	,lo8(55)
 5912               		ldi r25,hi8(55)
 5913 1f2c 82E3      		ldi r22,lo8(4)
 5914 1f2e 90E0      		ldi r23,hi8(4)
 5915 1f30 6AE0      		ldi r20,lo8(-1)
 5916 1f32 70E0      		call lcd_graphics_plot_pixel
 5918 1f36 0E94 0000 	.LM478:
 208:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 5919               	,lo8(55)
 5920               		ldi r25,hi8(55)
 5921 1f3a 82E3      		ldi r22,lo8(6)
 5922 1f3c 90E0      		ldi r23,hi8(6)
 5923 1f3e 6BE0      		ldi r20,lo8(-1)
 5924 1f40 70E0      		call lcd_graphics_plot_pixel
 5926 1f44 0E94 0000 	.LM479:
 209:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 10, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 5927               	,lo8(55)
 5928               		ldi r25,hi8(55)
 5929 1f48 82E3      		ldi r22,lo8(9)
 5930 1f4a 90E0      		ldi r23,hi8(9)
 5931 1f4c 60E1      		ldi r20,lo8(-1)
 5932 1f4e 70E0      		call lcd_graphics_plot_pixel
 5934 1f52 0E94 0000 	.LM480:
 210:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
 5935               	,lo8(55)
 5936               		ldi r25,hi8(55)
 5937 1f56 83E3      		ldi r22,lo8(10)
 5938 1f58 90E0      		ldi r23,hi8(10)
 5939 1f5a 63E0      		ldi r20,lo8(-1)
 5940 1f5c 70E0      		call lcd_graphics_plot_pixel
 5942 1f60 0E94 0000 	.LM481:
 211:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 5943               	,lo8(55)
 5944               		ldi r25,hi8(55)
 5945 1f64 83E3      		ldi r22,lo8(11)
 5946 1f66 90E0      		ldi r23,hi8(11)
 5947 1f68 68E0      		ldi r20,lo8(-1)
 5948 1f6a 70E0      		call lcd_graphics_plot_pixel
 5950 1f6e 0E94 0000 	.LM482:
 212:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5951               	,lo8(55)
 5952               		ldi r25,hi8(55)
 5953 1f72 83E3      		ldi r22,lo8(14)
 5954 1f74 90E0      		ldi r23,hi8(14)
 5955 1f76 6AE0      		ldi r20,lo8(-1)
 5956 1f78 70E0      		call lcd_graphics_plot_pixel
 5958 1f7c 0E94 0000 	.LM483:
 213:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 5959               	,lo8(55)
 5960               		ldi r25,hi8(55)
 5961 1f80 83E3      		ldi r22,lo8(16)
 5962 1f82 90E0      		ldi r23,hi8(16)
 5963 1f84 6CE0      		ldi r20,lo8(-1)
 5964 1f86 70E0      		call lcd_graphics_plot_pixel
 5966 1f8a 0E94 0000 	.LM484:
 214:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 11, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 5967               	,lo8(56)
 5968               		ldi r25,hi8(56)
 5969 1f8e 83E3      		ldi r22,lo8(6)
 5970 1f90 90E0      		ldi r23,hi8(6)
 5971 1f92 61E1      		ldi r20,lo8(-1)
 5972 1f94 70E0      		call lcd_graphics_plot_pixel
 5974 1f98 0E94 0000 	.LM485:
 215:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 6, PIXEL_ON);
 5975               	,lo8(56)
 5976               		ldi r25,hi8(56)
 5977 1f9c 84E3      		ldi r22,lo8(8)
 5978 1f9e 90E0      		ldi r23,hi8(8)
 5979 1fa0 67E0      		ldi r20,lo8(-1)
 5980 1fa2 70E0      		call lcd_graphics_plot_pixel
 5982 1fa6 0E94 0000 	.LM486:
 216:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 5983               	,lo8(56)
 5984               		ldi r25,hi8(56)
 5985 1faa 84E3      		ldi r22,lo8(10)
 5986 1fac 90E0      		ldi r23,hi8(10)
 5987 1fae 6AE0      		ldi r20,lo8(-1)
 5988 1fb0 70E0      		call lcd_graphics_plot_pixel
 5990 1fb4 0E94 0000 	.LM487:
 217:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 12, PIC_POS_FLAME_FLAKE_Y + 12, PIXEL_ON);
 5991               	,lo8(56)
 5992               		ldi r25,hi8(56)
 5993 1fb8 84E3      		ldi r22,lo8(12)
 5994 1fba 90E0      		ldi r23,hi8(12)
 5995 1fbc 6DE0      		ldi r20,lo8(-1)
 5996 1fbe 70E0      		call lcd_graphics_plot_pixel
 5998 1fc2 0E94 0000 	.LM488:
 218:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 2, PIXEL_ON);
 5999               	,lo8(56)
 6000               		ldi r25,hi8(56)
 6001 1fc6 85E3      		ldi r22,lo8(14)
 6002 1fc8 90E0      		ldi r23,hi8(14)
 6003 1fca 63E0      		ldi r20,lo8(-1)
 6004 1fcc 70E0      		call lcd_graphics_plot_pixel
 6006 1fd0 0E94 0000 	.LM489:
 219:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 6007               	,lo8(57)
 6008               		ldi r25,hi8(57)
 6009 1fd4 85E3      		ldi r22,lo8(10)
 6010 1fd6 90E0      		ldi r23,hi8(10)
 6011 1fd8 64E0      		ldi r20,lo8(-1)
 6012 1fda 70E0      		call lcd_graphics_plot_pixel
 6013 1fdc 4FEF      	/* epilogue start */
 220:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 6015               		pop __tmp_reg__
 6016               		pop __tmp_reg__
 6017 1fe2 85E3      		pop r28
 6018 1fe4 90E0      		pop r29
 6019 1fe6 66E0      		ret
 221:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 6023               	192,0,0,.LFBB32-.LFBB32
 6025 1ff0 85E3      	.Lscope32:
 6027 1ff4 6AE0      	.global	val_ad_bcd
 6028 1ff6 70E0      		.data
 222:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 6031               	cd:
 6032               		.string	"00"
 6033 1ffe 85E3      	.global	val_min_bcd
 6036 2004 70E0      	val_min_bcd:
 6037 2006 4FEF      		.string	"00"
 6038 2008 0E94 0000 	.global	val_max_bcd
 223:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 6039               	al_max_bcd, @object
 6041 200c 85E3      	val_max_bcd:
 6042 200e 90E0      		.string	"00"
 6043 2010 60E1      	.global	val_refr_bcd
 6046 2016 0E94 0000 	val_refr_bcd:
 224:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 13, PIC_POS_FLAME_FLAKE_Y + 16, PIXEL_ON);
 6047               		"0000ms"
 6048               	.global	val_ad
 6049 201a 85E3      	.global	val_ad
 6050 201c 90E0      		.section .bss
 6053 2022 4FEF      	val_ad:
 6054 2024 0E94 0000 		.skip 2,0
 225:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 4, PIXEL_ON);
 6055               	val_min
 6056               	.global	val_min
 6059 202c 65E0      	val_min:
 6060 202e 70E0      		.skip 2,0
 6061 2030 4FEF      	.global	val_max
 6062 2032 0E94 0000 	.global	val_max
 226:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 6063               	al_max, @object
 6065 2036 86E3      	val_max:
 6066 2038 90E0      		.skip 2,0
 6067 203a 6AE0      	.global	val_refr
 6068 203c 70E0      	.global	val_refr
 227:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 14, PIC_POS_FLAME_FLAKE_Y + 14, PIXEL_ON);
 6071               	:
 6072               		.skip 2,0
 6073 2044 86E3      	.global	buffer_touch_ad_x
 6074 2046 90E0      	.global	buffer_touch_ad_x
 6077 204c 4FEF      	buffer_touch_ad_x:
 6078 204e 0E94 0000 		.skip 2,0
 228:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 3, PIXEL_ON);
 6079               	buffer_touch_ad_y
 6080               	.global	buffer_touch_ad_y
 6083 2056 64E0      	buffer_touch_ad_y:
 6084 2058 70E0      		.skip 1,0
 6085 205a 4FEF      	.global	selected_mode
 6086 205c 0E94 0000 	.global	selected_mode
 229:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 6087               	elected_mode, @object
 6089 2060 87E3      	selected_mode:
 6090 2062 90E0      		.skip 1,0
 6091 2064 66E0      	.global	bar_1_height
 6092 2066 70E0      	.global	bar_1_height
 230:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 8, PIXEL_ON);
 6095               	ight:
 6096               		.skip 1,0
 6097 206e 87E3      	.global	val_min_bar
 6098 2070 90E0      	.global	val_min_bar
 6101 2076 4FEF      	val_min_bar:
 6102 2078 0E94 0000 		.skip 1,0
 231:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 6103               	bar_2_height
 6104               	.global	bar_2_height
 6107 2080 6AE0      	bar_2_height:
 6108 2082 70E0      		.skip 1,0
 6109 2084 4FEF      	.global	val_max_bar
 6110 2086 0E94 0000 	.global	val_max_bar
 232:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 10, PIXEL_ON);
 6111               	al_max_bar, @object
 6113 208a 87E3      	val_max_bar:
 6114 208c 90E0      		.skip 1,0
 6115 208e 6BE0      	.global	bar_3_height
 6116 2090 70E0      	.global	bar_3_height
 233:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 6119               	ight:
 6120               		.skip 1,0
 6121 2098 87E3      	.global	val_refr_bar
 6122 209a 90E0      	.global	val_refr_bar
 6125 20a0 4FEF      	val_refr_bar:
 6126 20a2 0E94 0000 		.skip 1,0
 234:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 15, PIC_POS_FLAME_FLAKE_Y + 15, PIXEL_ON);
 6127               	button_pressed
 6128               	.global	button_pressed
 6131 20aa 60E1      	button_pressed:
 6132 20ac 70E0      		.skip 1,0
 6133 20ae 4FEF      	.global	num_pad_pressed
 6134 20b0 0E94 0000 	.global	num_pad_pressed
 235:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 5, PIXEL_ON);
 6135               	um_pad_pressed, @object
 6137 20b4 88E3      	num_pad_pressed:
 6138 20b6 90E0      		.skip 12,0
 6139 20b8 66E0      	.global	num_input_min_temp
 6140 20ba 70E0      		.data
 236:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 7, PIXEL_ON);
 6143               	t_min_temp:
 6144               		.string	"00"
 6145 20c2 88E3      	.global	num_input_max_temp
 6148 20c8 70E0      	num_input_max_temp:
 6149 20ca 4FEF      		.string	"00"
 6150 20cc 0E94 0000 	.global	num_input_refr_time
 237:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 6151               	um_input_refr_time, @object
 6153 20d0 88E3      	num_input_refr_time:
 6154 20d2 90E0      		.string	"0000ms"
 6155 20d4 6AE0      	.global	num_pad_value_control
 6156 20d6 70E0      	.global	num_pad_value_control
 6157 20d8 4FEF      		.section .bss
 238:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 11, PIXEL_ON);
 6159               	um_pad_value_control, 1
 6160               	num_pad_value_control:
 6161 20de 88E3      		.skip 1,0
 6162 20e0 90E0      	.global	num_pad_input_recognised
 6163 20e2 6CE0      	.global	num_pad_input_recognised
 6166 20e8 0E94 0000 	num_pad_input_recognised:
 239:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 16, PIC_POS_FLAME_FLAKE_Y + 13, PIXEL_ON);
 6167               	,0
 6168               	.global	num_pad_cursor_pos
 6169 20ec 88E3      	.global	num_pad_cursor_pos
 6172 20f2 70E0      	num_pad_cursor_pos:
 6173 20f4 4FEF      		.skip 1,0
 6174 20f6 0E94 0000 	.global	i_count
 240:lib/touch_pictures.c ****     lcd_graphics_plot_pixel(PIC_POS_FLAME_FLAKE_X + 17, PIC_POS_FLAME_FLAKE_Y + 9, PIXEL_ON);
 6175               	i_count
 6178 20fc 90E0      	i_count:
 6179 20fe 6AE0      		.skip 1,0
 6180 2100 70E0      		.text
 6182 2104 0E94 0000 	.global	__vector_21
 241:lib/touch_pictures.c **** }
 6184               	21:
 6186 2108 0F90      	.Ltext18:
 6188 210c CF91      	.LM491:
 6189 210e DF91      	.LFBB33:
 6190 2110 0895      		push __zero_reg__
 6191               		push r0
 6192               		in r0,__SREG__
 6193               		push r0
 6194               		lds r0,91
 6195               		push r0
 6196               		clr __zero_reg__
 6197               		push r18
 6198               		push r19
 6199               		push r24
 6200               		push r25
 6201               		push r30
 6202               		push r31
 6203 01e0 3030 00   		push r29
 6204               		push r28
 6205               		in r28,__SP_L__
 6206               		in r29,__SP_H__
 6207               	/* prologue: Signal */
 6208 01e3 3030 00   	/* frame size = 0 */
 6210               	.LM492:
 6211               		ldi r30,lo8(36)
 6212               		ldi r31,hi8(36)
 6213 01e6 3030 00   		ld r24,Z
 6214               		mov r24,r24
 6215               		ldi r25,lo8(0)
 6216               		sts (val_ad)+1,r25
 6217               		sts val_ad,r24
 6219               	.LM493:
 6220               		ldi r30,lo8(37)
 6221               		ldi r31,hi8(37)
 6222               		ld r24,Z
 6223               		mov r24,r24
 6224               		ldi r25,lo8(0)
 6225 0000 0000      		mov r25,r24
 6226               		clr r24
 6227               		movw r18,r24
 6228               		lds r24,val_ad
 6229               		lds r25,(val_ad)+1
 6230               		or r24,r18
 6231 0002 0000      		or r25,r19
 6232               		sts (val_ad)+1,r25
 6233               		sts val_ad,r24
 6234               	/* epilogue start */
 6236               	.LM494:
 6237 0004 0000      		pop r28
 6238               		pop r29
 6239               		pop r31
 6240               		pop r30
 6241               		pop r25
 6242               		pop r24
 6243 0006 0000      		pop r19
 6244               		pop r18
 6245               		pop r0
 6246               		sts 91,r0
 6247               		pop r0
 6248               		out __SREG__,r0
 6249 0008 0000      		pop r0
 6250               		pop __zero_reg__
 6251               		reti
 6253               	.Lscope33:
 6255 000a 00        	.global	main
 6257               	main:
 6259               	.LM495:
 6260               	.LFBB34:
 6261 000b 00        		push r29
 6262               		push r28
 6263               		rcall .
 6264               		rcall .
 6265               		in r28,__SP_L__
 6266               		in r29,__SP_H__
 6267 000c 00        	/* prologue: function */
 6268               	/* frame size = 4 */
 6270               	.LM496:
 6271               		std Y+3,__zero_reg__
 6273 000d 00        	.LM497:
 6274               		std Y+2,__zero_reg__
 6276               	.LM498:
 6277               		std Y+1,__zero_reg__
 6279 000e 00        	.LM499:
 6280               		call lcd_graphics_init
 6282               	.LM500:
 6283               		call lcd_graphics_clear
 6285 000f 00        	.LM501:
 6286               		ldi r24,lo8(97)
 6287               		ldi r22,lo8(0)
 6288               		call init_out_pin
 6290               	.LM502:
 6291 0010 00        		ldi r24,lo8(100)
 6292               		ldi r22,lo8(0)
 6293               		call init_out_pin
 6295               	.LM503:
 6296               		ldi r24,lo8(100)
 6297 0011 00        		ldi r22,lo8(0)
 6298               		call reset_pin
 6300               	.LM504:
 6301               		call call_input_mode_screen
 6303 0012 00        	.LM505:
 6304               		lds r24,selected_mode
 6305               		cpi r24,lo8(1)
 6306               		brne .L201
 6308               	.LM506:
 6309 0013 0000 0000 		call call_num_pad_mode
 6309      0000 0000 
 6309      0000 0000 
 6310               	.L201:
 6312               	.LM507:
 6313               		lds r24,selected_mode
 6314               		cpi r24,lo8(2)
 6315 01f0 3030 00   		brne .L202
 6317               	.LM508:
 6318               		call call_slider_mode
 6319               	.L202:
 6321               	.LM509:
 6322               		call draw_layout
 6324               	.LM510:
 6325 01f6 3030 3030 	/* #APP */
 6325      6D73 00
 6326               	 ;  105 "main.c" 1
 6327               		sei
 6328               	 ;  0 "" 2
 6330               	.LM511:
 6331               	/* #NOAPP */
 6332 001f 00        		ldi r30,lo8(39)
 6333               		ldi r31,hi8(39)
 6334               		ldi r24,lo8(64)
 6335               		st Z,r24
 6337               	.LM512:
 6338 0020 00        		ldi r30,lo8(38)
 6339               		ldi r31,hi8(38)
 6340               		ldi r24,lo8(-98)
 6341               		st Z,r24
 6343               	.LM513:
 6344 0021 00        		ldi r26,lo8(38)
 6345               		ldi r27,hi8(38)
 6346               		ldi r30,lo8(38)
 6347               		ldi r31,hi8(38)
 6348               		ld r24,Z
 6349               		ori r24,lo8(96)
 6350 0022 00        		st X,r24
 6352               	.LM514:
 6353               		std Y+4,__zero_reg__
 6355               	.LM515:
 6356               		std Y+3,__zero_reg__
   1:main.c        **** #define PIC_POS_FLAME_FLAKE_X 40
   2:main.c        **** #define PIC_POS_FLAME_FLAKE_Y 1
   3:main.c        **** #define AD_PIN 0								//connect to ad0
   4:main.c        **** 
   5:main.c        **** #define FLAME_AND_FLAKE_ON
   6:main.c        **** #define GRAD_ON
   7:main.c        **** //#define COVER_ON
   8:main.c        **** #define SHOW_AD_VALUE
   9:main.c        **** 
  10:main.c        **** #include "lib/io_fct.c"							//library for input/output functions
  11:main.c        **** #include "lib/LC7981.c"							//library for gfx LCD functions
  12:main.c        **** #include "lib/delay.c"							//library for delay function
  13:main.c        **** #include <avr/signal.h>							//library for interrupt functions
  14:main.c        **** #include <avr/interrupt.h>						//library for interrupt functions
  15:main.c        **** #include <math.h>								//library for mathematic functions
  16:main.c        **** #include "lib/touch_pictures.c"					//library for cover picture function
  17:main.c        **** 
  18:main.c        **** void clr_diagram(void);						//clear diagram array
  19:main.c        **** void draw_diagram(void);						//draw the graph on the display
  20:main.c        **** void draw_line(unsigned char x_start, unsigned char y_start, unsigned char x_end, unsigned char y_e
  21:main.c        **** unsigned char get_touch_y(void);				//returns y coordinate of touch point in pixel
  22:main.c        **** unsigned int get_touch_x(unsigned int y);	//returns x coordinate of touch point in pixel
  23:main.c        **** void call_input_mode_screen(void);				//calls the input mode selection screen	
  24:main.c        **** void call_num_pad_mode(void);					//calls the num pad mode for input	
  25:main.c        **** void call_slider_mode(void);					//calls the slider mode for input	
  26:main.c        **** void draw_layout(void);						//draws the layout of the controller screen
  27:main.c        **** 
  28:main.c        **** unsigned char diagram[10][60];				//array for meassured points
  29:main.c        **** unsigned char val_ad_bcd[3] = "00";			//ad value string
  30:main.c        **** unsigned char val_min_bcd[3] = "00";		//min value string
  31:main.c        **** unsigned char val_max_bcd[3] = "00";		//max value string
  32:main.c        **** unsigned char val_refr_bcd[7] = "0000ms";		//refresh time string
  33:main.c        **** 
  34:main.c        **** unsigned int val_ad = 0;						//ad value decimal
  35:main.c        **** unsigned int val_min = 0;						//min value decimal
  36:main.c        **** unsigned int val_max = 0;						//max value decimal
  37:main.c        **** unsigned int val_refr = 0;						//refresh time decimal
  38:main.c        **** //============= 	VAR generell		================
  39:main.c        **** unsigned int buffer_touch_ad_x = 0;			//buffer for ad values x
  40:main.c        **** unsigned char buffer_touch_ad_y = 0;			//buffer for ad values y
  41:main.c        **** unsigned char selected_mode = 0;				//input mode - 2 slider, 1 num pad
  42:main.c        **** //============= 	VAR Slider Input	================	
  43:main.c        **** unsigned char bar_1_height = 0;				//height bar 1 - min value	
  44:main.c        **** unsigned char val_min_bar = 0;				//min value
  45:main.c        **** unsigned char bar_2_height = 0;				//height bar 2 - max value
  46:main.c        **** unsigned char val_max_bar = 0;				//max value
  47:main.c        **** unsigned char bar_3_height = 0;				//height bar 3 - refresh time
  48:main.c        **** unsigned char val_refr_bar = 0;				//refresh time
  49:main.c        **** unsigned char button_pressed = 0;				//button pressed - 1 yes, 0 no - also used for num pad
  50:main.c        **** //============= 	VAR Num Pad Input	================
  51:main.c        **** unsigned char num_pad_pressed[12] = {0,0,0,0,0,0,0,0,0,0,0,0};	//num pad buttons control
  52:main.c        **** unsigned char num_input_min_temp[3] = "00";	//input string min value
  53:main.c        **** unsigned char num_input_max_temp[3] = "00";	//input string max value
  54:main.c        **** unsigned char num_input_refr_time[7] = "0000ms";	//input string refresh time
  55:main.c        **** unsigned char num_pad_value_control = 0;		//input for diff. values - 0 min, 1 max, 2, refr time, 3 
  56:main.c        **** unsigned char num_pad_input_recognised = 0;	//help var for num pad input detection
  57:main.c        **** unsigned char num_pad_cursor_pos = 0;			//cursor position for input
  58:main.c        **** unsigned char i_count = 0;					//help var for num pad input detection
  59:main.c        **** 
  60:main.c        **** //unsigned int touch_ad_x = 0;
  61:main.c        **** //unsigned int touch_ad_y = 0;
  62:main.c        **** //unsigned char touch_bcd_x[6] = "x0000";
  63:main.c        **** //unsigned char touch_bcd_y[6] = "y0000";
  64:main.c        **** 
  65:main.c        **** SIGNAL (SIG_ADC)								//a/d converter in interrupt mode
  66:main.c        **** {
 6358               	Y+4
 6359               		cpi r24,lo8(80)
 6360               		brlo .+2
 6361 2112 1F92      		rjmp .L203
 6363 2116 0FB6      	.LM519:
 6364 2118 0F92      		ldd r24,Y+4
 6365 211a 0090 5B00 		mov r25,r24
 6366 211e 0F92      		lsr r25
 6367 2120 1124      		lsr r25
 6368 2122 2F93      		lsr r25
 6369 2124 3F93      		mov r22,r25
 6370 2126 8F93      		ldi r23,lo8(0)
 6371 2128 9F93      		ldd r24,Y+3
 6372 212a EF93      		mov r26,r24
 6373 212c FF93      		ldi r27,lo8(0)
 6374 212e DF93      		mov r20,r25
 6375 2130 CF93      		ldi r21,lo8(0)
 6376 2132 CDB7      		ldd r24,Y+3
 6377 2134 DEB7      		mov r18,r24
 6378               		ldi r19,lo8(0)
 6379               		ldi r24,lo8(60)
  67:main.c        **** 	val_ad = ADCL;
 6380               	 r30,r24
 6381               		mul r20,r30
 6382 2136 E4E2      		movw r24,r0
 6383 2138 F0E0      		mul r20,r31
 6384 213a 8081      		add r25,r0
 6385 213c 882F      		mul r21,r30
 6386 213e 90E0      		add r25,r0
 6387 2140 9093 0000 		clr r1
 6388 2144 8093 0000 		add r24,r18
  68:main.c        **** 	val_ad |= (ADCH<<8);
 6389               	r19
 6390               		movw r30,r24
 6391 2148 E5E2      		subi r30,lo8(-(diagram))
 6392 214a F0E0      		sbci r31,hi8(-(diagram))
 6393 214c 8081      		ld r24,Z
 6394 214e 882F      		mov r20,r24
 6395 2150 90E0      		ldd r24,Y+4
 6396 2152 982F      		mov r24,r24
 6397 2154 8827      		ldi r25,lo8(0)
 6398 2156 9C01      		com r24
 6399 2158 8091 0000 		com r25
 6400 215c 9091 0000 		movw r18,r24
 6401 2160 822B      		andi r18,lo8(7)
 6402 2162 932B      		andi r19,hi8(7)
 6403 2164 9093 0000 		ldi r24,lo8(1)
 6404 2168 8093 0000 		ldi r25,hi8(1)
 6405               		rjmp 2f
  69:main.c        **** }
 6406               	25
 6407               	2:	dec r18
 6408 216c CF91      		brpl 1b
 6409 216e DF91      		or r24,r20
 6410 2170 FF91      		mov r18,r24
 6411 2172 EF91      		ldi r24,lo8(60)
 6412 2174 9F91      		ldi r25,hi8(60)
 6413 2176 8F91      		movw r20,r24
 6414 2178 3F91      		mul r22,r20
 6415 217a 2F91      		movw r24,r0
 6416 217c 0F90      		mul r22,r21
 6417 217e 0092 5B00 		add r25,r0
 6418 2182 0F90      		mul r23,r20
 6419 2184 0FBE      		add r25,r0
 6420 2186 0F90      		clr r1
 6421 2188 1F90      		add r24,r26
 6422 218a 1895      		adc r25,r27
 6423               		movw r30,r24
 6424               		subi r30,lo8(-(diagram))
 6425               		sbci r31,hi8(-(diagram))
 6426               		st Z,r18
 6428               	.LM520:
  70:main.c        **** 
  71:main.c        **** int main(void)									//main program
  72:main.c        **** {
 6429               	5,(val_ad)+1
 6430               		movw r24,r24
 6431               		ldi r26,lo8(0)
 6432 218c DF93      		ldi r27,hi8(0)
 6433 218e CF93      		movw r22,r24
 6434 2190 00D0      		movw r24,r26
 6435 2192 00D0      		call __floatunsisf
 6436 2194 CDB7      		movw r26,r24
 6437 2196 DEB7      		movw r24,r22
 6438               		movw r22,r24
 6439               		movw r24,r26
  73:main.c        **** //============= 	VAR generell		================
  74:main.c        **** 	unsigned char x_pix, y_pix = 0;			//x & y position of meassured point
 6440               	8(0x3ba0280a)
 6441               		ldi r19,hi8(0x3ba0280a)
 6442 2198 1B82      		ldi r20,hlo8(0x3ba0280a)
  75:main.c        **** //============= 	Flake and Flame		================
  76:main.c        **** #ifdef FLAME_AND_FLAKE_ON
  77:main.c        **** 	unsigned char flake_drawn = 0;
 6443               	i r21,hhi8(0x3ba0280a)
 6444               		call __mulsf3
 6445 219a 1A82      		movw r26,r24
  78:main.c        **** 	unsigned char flame_drawn = 0;
 6446               	vw r24,r22
 6447               		movw r22,r24
 6448 219c 1982      		movw r24,r26
  79:main.c        **** #endif
  80:main.c        **** //============= 		Init LCD		================	
  81:main.c        **** 	lcd_graphics_init();						//init LCD
 6449               	i r18,lo8(0x413ccccd)
 6450               		ldi r19,hi8(0x413ccccd)
 6451 219e 0E94 0000 		ldi r20,hlo8(0x413ccccd)
  82:main.c        **** 	lcd_graphics_clear();						//clear LCD
 6452               	i r21,hhi8(0x413ccccd)
 6453               		call __mulsf3
 6454 21a2 0E94 0000 		movw r26,r24
  83:main.c        **** 	init_out_pin('a', 0);						//porta - pin0 as output for touchscreen
 6455               	vw r24,r22
 6456               		movw r22,r24
 6457 21a6 81E6      		movw r24,r26
 6458 21a8 60E0      		call round
 6459 21aa 0E94 0000 		movw r26,r24
  84:main.c        **** 	init_out_pin('d', 0);
 6460               	 r24,r22
 6461               		movw r22,r24
 6462 21ae 84E6      		movw r24,r26
 6463 21b0 60E0      		call __fixunssfsi
 6464 21b2 0E94 0000 		movw r26,r24
  85:main.c        **** 	reset_pin('d', 0);
 6465               	 r24,r22
 6466               		std Y+3,r24
 6468 21b8 60E0      	.LM521:
 6469 21ba 0E94 0000 		ldd r24,Y+4
  86:main.c        **** #ifdef COVER_ON
  87:main.c        **** //============= 		Cover Picture	================
  88:main.c        **** 	draw_pic();									//draw cover picture and wait for touch input
  89:main.c        **** 	while (!((buffer_touch_ad_x >= 1) && (buffer_touch_ad_x <= 160)))
  90:main.c        **** 	{
  91:main.c        **** 		buffer_touch_ad_y = get_touch_y();
  92:main.c        **** 		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
  93:main.c        **** 	}
  94:main.c        **** 	lcd_graphics_clear();
  95:main.c        **** #endif
  96:main.c        **** //=============	Input Mode Selection	================	
  97:main.c        **** 	call_input_mode_screen();
 6470               	 r24,lo8(-(1))
 6471               		std Y+4,r24
 6472 21be 0E94 0000 	.L203:
  98:main.c        **** 	if (selected_mode == 1)
 6473               	tabn	68,0,123,.LM522-.LFBB34
 6474               	.LM522:
 6475 21c2 8091 0000 		ldd r24,Y+4
 6476 21c6 8130      		cpi r24,lo8(80)
 6477 21c8 01F4      		brne .L204
  99:main.c        **** 		call_num_pad_mode();
 6478               	bn	68,0,125,.LM523-.LFBB34
 6479               	.LM523:
 6480 21ca 0E94 0000 		call draw_diagram
 6481               	.L204:
 100:main.c        **** 	if (selected_mode == 2)
 6482               	abn	68,0,127,.LM524-.LFBB34
 6483               	.LM524:
 6484 21ce 8091 0000 		lds r18,val_ad
 6485 21d2 8230      		lds r19,(val_ad)+1
 6486 21d4 01F4      		lds r24,val_min
 101:main.c        **** 		call_slider_mode();
 6487               	r25,(val_min)+1
 6488               		cp r24,r18
 6489 21d6 0E94 0000 		cpc r25,r19
 6490               		brlo .L205
 102:main.c        **** //============= 	Controller Screen	================
 103:main.c        **** 	draw_layout();
 6491               	abn	68,0,129,.LM525-.LFBB34
 6492               	.LM525:
 6493 21da 0E94 0000 		ldi r24,lo8(100)
 104:main.c        **** //============= 	Init a/d converter	================
 105:main.c        **** 	sei();
 6494               	i r22,lo8(0)
 6495               		call set_pin
 6497               	.LM526:
 6498 21de 7894      		ldd r24,Y+1
 6499               		tst r24
 106:main.c        **** 	ADMUX = 0x40|AD_PIN;						//connect to AD_PIN
 6500               	.L205
 6502               	.LM527:
 6503 21e0 E7E2      		call draw_flame
 6505 21e4 80E4      	.LM528:
 6506 21e6 8083      		ldi r24,lo8(1)
 107:main.c        **** 	ADCSRA = 0x9e;								//enable ad converter
 6507               	1,r24
 6509 21e8 E6E2      	.LM529:
 6510 21ea F0E0      		std Y+2,__zero_reg__
 6511 21ec 8EE9      	.L205:
 108:main.c        **** 	ADCSRA |= 0x60;								//start converter
 6513               	:
 6514               		lds r18,val_ad
 6515 21f0 A6E2      		lds r19,(val_ad)+1
 6516 21f2 B0E0      		lds r24,val_max
 6517 21f4 E6E2      		lds r25,(val_max)+1
 6518 21f6 F0E0      		cp r18,r24
 6519 21f8 8081      		cpc r19,r25
 6520 21fa 8066      		brlo .L206
 109:main.c        **** //============= 		Program			================
 110:main.c        **** 	x_pix = 0;									//pixel x position
 6522               	ldi r24,lo8(100)
 6523               		ldi r22,lo8(0)
 6524 21fe 1C82      		call reset_pin
 111:main.c        **** 	y_pix = 0;									//pixel y positio
 6525               	tabn	68,0,143,.LM532-.LFBB34
 6526               	.LM532:
 6527 2200 1B82      		ldd r24,Y+2
 112:main.c        **** 	clr_diagram();								//clear data array
 6528               	t r24
 6529               		brne .L206
 113:main.c        **** 	init_out_pin('a', 0);						//touch control pin
 6531               	533:
 6532               		call draw_flake
 6534 2208 60E0      	.LM534:
 6535 220a 0E94 0000 		ldi r24,lo8(1)
 6536               		std Y+2,r24
 114:main.c        **** 	//set_pin('d', 0);
 115:main.c        **** 	while(1)
 116:main.c        **** 	{
 117:main.c        **** 		if (x_pix <= 79)
 6537               	n	68,0,147,.LM535-.LFBB34
 6538               	.LM535:
 6539 220e 8C81      		std Y+1,__zero_reg__
 6540 2210 8035      	.L206:
 6542 2214 00C0      	.LM536:
 118:main.c        **** 		{
 119:main.c        **** 			diagram[x_pix/8][y_pix] |= (1 << ((-1*(x_pix%8))+7));
 6543               	24,val_ad
 6544               		lds r25,(val_ad)+1
 6545 2216 8C81      		movw r24,r24
 6546 2218 982F      		ldi r26,lo8(0)
 6547 221a 9695      		ldi r27,hi8(0)
 6548 221c 9695      		movw r22,r24
 6549 221e 9695      		movw r24,r26
 6550 2220 692F      		call __floatunsisf
 6551 2222 70E0      		movw r26,r24
 6552 2224 8B81      		movw r24,r22
 6553 2226 A82F      		movw r22,r24
 6554 2228 B0E0      		movw r24,r26
 6555 222a 492F      		ldi r18,lo8(0x3dc63172)
 6556 222c 50E0      		ldi r19,hi8(0x3dc63172)
 6557 222e 8B81      		ldi r20,hlo8(0x3dc63172)
 6558 2230 282F      		ldi r21,hhi8(0x3dc63172)
 6559 2232 30E0      		call __mulsf3
 6560 2234 8CE3      		movw r26,r24
 6561 2236 90E0      		movw r24,r22
 6562 2238 FC01      		movw r22,r24
 6563 223a 4E9F      		movw r24,r26
 6564 223c C001      		call round
 6565 223e 4F9F      		movw r26,r24
 6566 2240 900D      		movw r24,r22
 6567 2242 5E9F      		movw r22,r24
 6568 2244 900D      		movw r24,r26
 6569 2246 1124      		ldi r18,lo8(0x41200000)
 6570 2248 820F      		ldi r19,hi8(0x41200000)
 6571 224a 931F      		ldi r20,hlo8(0x41200000)
 6572 224c FC01      		ldi r21,hhi8(0x41200000)
 6573 224e E050      		call __divsf3
 6574 2250 F040      		movw r26,r24
 6575 2252 8081      		movw r24,r22
 6576 2254 482F      		movw r22,r24
 6577 2256 8C81      		movw r24,r26
 6578 2258 882F      		ldi r18,lo8(0x42400000)
 6579 225a 90E0      		ldi r19,hi8(0x42400000)
 6580 225c 8095      		ldi r20,hlo8(0x42400000)
 6581 225e 9095      		ldi r21,hhi8(0x42400000)
 6582 2260 9C01      		call __addsf3
 6583 2262 2770      		movw r26,r24
 6584 2264 3070      		movw r24,r22
 6585 2266 81E0      		movw r22,r24
 6586 2268 90E0      		movw r24,r26
 6587 226a 00C0      		call __fixunssfsi
 6588 226c 880F      		movw r26,r24
 6589 226e 991F      		movw r24,r22
 6590 2270 2A95      		sts val_ad_bcd,r24
 6592 2274 842B      	.LM537:
 6593 2276 282F      		lds r24,val_ad
 6594 2278 8CE3      		lds r25,(val_ad)+1
 6595 227a 90E0      		movw r24,r24
 6596 227c AC01      		ldi r26,lo8(0)
 6597 227e 649F      		ldi r27,hi8(0)
 6598 2280 C001      		movw r22,r24
 6599 2282 659F      		movw r24,r26
 6600 2284 900D      		call __floatunsisf
 6601 2286 749F      		movw r26,r24
 6602 2288 900D      		movw r24,r22
 6603 228a 1124      		movw r22,r24
 6604 228c 8A0F      		movw r24,r26
 6605 228e 9B1F      		ldi r18,lo8(0x3dc63172)
 6606 2290 FC01      		ldi r19,hi8(0x3dc63172)
 6607 2292 E050      		ldi r20,hlo8(0x3dc63172)
 6608 2294 F040      		ldi r21,hhi8(0x3dc63172)
 6609 2296 2083      		call __mulsf3
 120:main.c        **** 			y_pix = round(0.0048875855*val_ad*11.8);
 6610               	
 6611               		movw r26,r24
 6612 2298 8091 0000 		movw r24,r22
 6613 229c 9091 0000 		movw r22,r24
 6614 22a0 CC01      		movw r24,r26
 6615 22a2 A0E0      		call __fixsfsi
 6616 22a4 B0E0      		movw r26,r24
 6617 22a6 BC01      		movw r24,r22
 6618 22a8 CD01      		ldi r18,lo8(10)
 6619 22aa 0E94 0000 		ldi r19,hi8(10)
 6620 22ae DC01      		movw r22,r18
 6621 22b0 CB01      		call __divmodhi4
 6622 22b2 BC01      		subi r24,lo8(-(48))
 6623 22b4 CD01      		sts val_ad_bcd+1,r24
 6625 22b8 38E2      	.LM538:
 6626 22ba 40EA      		ldi r18,lo8(val_ad_bcd)
 6627 22bc 5BE3      		ldi r19,hi8(val_ad_bcd)
 6628 22be 0E94 0000 		ldi r24,lo8(13)
 6629 22c2 DC01      		ldi r25,hi8(13)
 6630 22c4 CB01      		ldi r22,lo8(14)
 6631 22c6 BC01      		ldi r23,hi8(14)
 6632 22c8 CD01      		movw r20,r18
 6633 22ca 2DEC      		call g_draw_string
 6635 22ce 4CE3      	.LM539:
 6636 22d0 51E4      		lds r24,val_refr
 6637 22d2 0E94 0000 		lds r25,(val_refr)+1
 6638 22d6 DC01      		call delay_ms
 6639 22d8 CB01      		rjmp .L207
 6647 22ea 0E94 0000 	.Lscope34:
 6648 22ee DC01      		.data
 6649 22f0 CB01      	.LC0:
 6650 22f2 8B83      		.string	"Please select a mode:"
 121:main.c        **** 			x_pix++;
 6651               	:
 6652               		.string	"Slider Input Mode"
 6653 22f4 8C81      		.text
 6655 22f8 8C83      	.global	call_input_mode_screen
 122:main.c        **** 		}
 123:main.c        **** 		if (x_pix == 80)
 6657               	nput_mode_screen:
 6659 22fa 8C81      	.LM540:
 6660 22fc 8035      	.LFBB35:
 6661 22fe 01F4      		push r29
 124:main.c        **** 		{
 125:main.c        **** 			draw_diagram();
 6662               	 r28
 6663               		in r28,__SP_L__
 6664 2300 0E94 0000 		in r29,__SP_H__
 6665               	/* prologue: function */
 126:main.c        **** 		}
 127:main.c        **** 		if (val_ad <= val_min)
 6666               	rame size = 0 */
 6668 2304 2091 0000 	.LM541:
 6669 2308 3091 0000 		ldi r24,lo8(0)
 6670 230c 8091 0000 		ldi r25,hi8(0)
 6671 2310 9091 0000 		ldi r22,lo8(0)
 6672 2314 8217      		ldi r23,hi8(0)
 6673 2316 9307      		ldi r20,lo8(160)
 6674 2318 00F0      		ldi r21,hi8(160)
 128:main.c        **** 		{
 129:main.c        **** 			set_pin('d', 0);
 6675               	lo8(80)
 6676               		ldi r19,hi8(80)
 6677 231a 84E6      		call g_draw_rectangle
 6679 231e 0E94 0000 	.LM542:
 130:main.c        **** #ifdef FLAME_AND_FLAKE_ON
 131:main.c        **** 			if (!(flame_drawn))
 6680               	r18,lo8(.LC0)
 6681               		ldi r19,hi8(.LC0)
 6682 2322 8981      		ldi r24,lo8(17)
 6683 2324 8823      		ldi r25,hi8(17)
 6684 2326 01F4      		ldi r22,lo8(11)
 132:main.c        **** 			{
 133:main.c        **** 				draw_flame();
 6685               	r23,hi8(11)
 6686               		movw r20,r18
 6687 2328 0E94 0000 		call g_draw_string
 134:main.c        **** 				flame_drawn = 1;
 6688               	tabn	68,0,169,.LM543-.LFBB35
 6689               	.LM543:
 6690 232c 81E0      		ldi r24,lo8(5)
 6691 232e 8983      		ldi r25,hi8(5)
 135:main.c        **** 				flake_drawn = 0;
 6692               	 r22,lo8(30)
 6693               		ldi r23,hi8(30)
 6694 2330 1A82      		ldi r20,lo8(150)
 6695               		ldi r21,hi8(150)
 136:main.c        **** 			}
 137:main.c        **** #endif
 138:main.c        **** 		}
 139:main.c        **** 		if ((val_ad >= val_max))
 6696               	 r18,lo8(20)
 6697               		ldi r19,hi8(20)
 6698 2332 2091 0000 		call g_draw_rectangle
 6700 233a 8091 0000 	.LM544:
 6701 233e 9091 0000 		ldi r18,lo8(.LC1)
 6702 2342 2817      		ldi r19,hi8(.LC1)
 6703 2344 3907      		ldi r24,lo8(27)
 6704 2346 00F0      		ldi r25,hi8(27)
 140:main.c        **** 		{
 141:main.c        **** 			reset_pin('d', 0);
 6705               	lo8(36)
 6706               		ldi r23,hi8(36)
 6707 2348 84E6      		movw r20,r18
 6708 234a 60E0      		call g_draw_string
 142:main.c        **** #ifdef FLAME_AND_FLAKE_ON
 143:main.c        **** 			if (!(flake_drawn))
 6710               	5:
 6711               		ldi r24,lo8(5)
 6712 2350 8A81      		ldi r25,hi8(5)
 6713 2352 8823      		ldi r22,lo8(55)
 6714 2354 01F4      		ldi r23,hi8(55)
 144:main.c        **** 			{
 145:main.c        **** 				draw_flake();
 6715               	r20,lo8(150)
 6716               		ldi r21,hi8(150)
 6717 2356 0E94 0000 		ldi r18,lo8(20)
 146:main.c        **** 				flake_drawn = 1;
 6718               	i r19,hi8(20)
 6719               		call g_draw_rectangle
 6721 235c 8A83      	.LM546:
 147:main.c        **** 				flame_drawn = 0;
 6722               	 r18,lo8(.LC2)
 6723               		ldi r19,hi8(.LC2)
 6724 235e 1982      		ldi r24,lo8(30)
 6725               		ldi r25,hi8(30)
 148:main.c        **** 			}
 149:main.c        **** #endif
 150:main.c        **** 		}
 151:main.c        **** #ifdef SHOW_AD_VALUE
 152:main.c        **** 		val_ad_bcd[0] = ((round(val_ad * 0.096774)) / 10) + 48;
 6726               	 r22,lo8(61)
 6727               		ldi r23,hi8(61)
 6728 2360 8091 0000 		movw r20,r18
 6729 2364 9091 0000 		call g_draw_string
 6731 236a A0E0      	.LM547:
 6732 236c B0E0      		ldi r24,lo8(1000)
 6733 236e BC01      		ldi r25,hi8(1000)
 6734 2370 CD01      		call delay_ms
 6736 2376 DC01      	.LM548:
 6737 2378 CB01      		sts (buffer_touch_ad_x)+1,__zero_reg__
 6738 237a BC01      		sts buffer_touch_ad_x,__zero_reg__
 6740 237e 22E7      	.LM549:
 6741 2380 31E3      		sts buffer_touch_ad_y,__zero_reg__
 6743 2384 5DE3      	.LM550:
 6744 2386 0E94 0000 		sts button_pressed,__zero_reg__
 6745 238a DC01      		rjmp .L210
 6746 238c CB01      	.L215:
 6748 2390 CD01      	.LM551:
 6749 2392 0E94 0000 		call get_touch_y
 6750 2396 DC01      		sts buffer_touch_ad_y,r24
 6752 239a BC01      	.LM552:
 6753 239c CD01      		lds r24,buffer_touch_ad_y
 6754 239e 20E0      		mov r24,r24
 6755 23a0 30E0      		ldi r25,lo8(0)
 6756 23a2 40E2      		call get_touch_x
 6757 23a4 51E4      		sts (buffer_touch_ad_x)+1,r25
 6758 23a6 0E94 0000 		sts buffer_touch_ad_x,r24
 6760 23ac CB01      	.LM553:
 6761 23ae BC01      		lds r24,buffer_touch_ad_x
 6762 23b0 CD01      		lds r25,(buffer_touch_ad_x)+1
 6763 23b2 20E0      		cpi r24,161
 6764 23b4 30E0      		cpc r25,__zero_reg__
 6765 23b6 40E4      		brlo .L211
 6767 23ba 0E94 0000 	.LM554:
 6768 23be DC01      		ldi r24,lo8(160)
 6769 23c0 CB01      		ldi r25,hi8(160)
 6770 23c2 BC01      		sts (buffer_touch_ad_x)+1,r25
 6771 23c4 CD01      		sts buffer_touch_ad_x,r24
 6772 23c6 0E94 0000 	.L211:
 6774 23cc CB01      	.LM555:
 6775 23ce 8093 0000 		lds r24,buffer_touch_ad_x
 153:main.c        **** 		val_ad_bcd[1] = ((int)(round(val_ad * 0.096774))%10) + 48;
 6776               	L212
 6778 23d2 8091 0000 	.LM556:
 6779 23d6 9091 0000 		sts buffer_touch_ad_y,__zero_reg__
 6780 23da CC01      	.L212:
 6782 23de B0E0      	.LM557:
 6783 23e0 BC01      		lds r24,buffer_touch_ad_y
 6784 23e2 CD01      		cpi r24,lo8(30)
 6785 23e4 0E94 0000 		brlo .L213
 6786 23e8 DC01      		lds r24,buffer_touch_ad_y
 6787 23ea CB01      		cpi r24,lo8(51)
 6788 23ec BC01      		brsh .L213
 6789 23ee CD01      		lds r24,buffer_touch_ad_x
 6790 23f0 22E7      		lds r25,(buffer_touch_ad_x)+1
 6791 23f2 31E3      		cpi r24,2
 6792 23f4 46EC      		cpc r25,__zero_reg__
 6793 23f6 5DE3      		brlo .L213
 6794 23f8 0E94 0000 		lds r24,buffer_touch_ad_x
 6795 23fc DC01      		lds r25,(buffer_touch_ad_x)+1
 6796 23fe CB01      		cpi r24,153
 6797 2400 BC01      		cpc r25,__zero_reg__
 6798 2402 CD01      		brsh .L213
 6800 2408 DC01      	.LM558:
 6801 240a CB01      		ldi r24,lo8(1)
 6802 240c BC01      		sts selected_mode,r24
 6804 2410 0E94 0000 	.LM559:
 6805 2414 DC01      		lds r24,button_pressed
 6806 2416 CB01      		subi r24,lo8(-(1))
 6807 2418 2AE0      		sts button_pressed,r24
 6808 241a 30E0      		rjmp .L210
 6809 241c B901      	.L213:
 6811 2422 805D      	.LM560:
 6812 2424 8093 0000 		lds r24,buffer_touch_ad_y
 154:main.c        **** 		g_draw_string(13, 14, val_ad_bcd);
 6813               	,buffer_touch_ad_y
 6814               		cpi r24,lo8(81)
 6815 2428 20E0      		brsh .L214
 6816 242a 30E0      		lds r24,buffer_touch_ad_x
 6817 242c 8DE0      		lds r25,(buffer_touch_ad_x)+1
 6818 242e 90E0      		cpi r24,2
 6819 2430 6EE0      		cpc r25,__zero_reg__
 6820 2432 70E0      		brlo .L214
 6821 2434 A901      		lds r24,buffer_touch_ad_x
 6822 2436 0E94 0000 		lds r25,(buffer_touch_ad_x)+1
 155:main.c        **** #endif
 156:main.c        **** 		delay_ms(val_refr);
 6823               	53
 6824               		cpc r25,__zero_reg__
 6825 243a 8091 0000 		brsh .L214
 6827 2442 0E94 0000 	.LM561:
 6828 2446 00C0      		ldi r24,lo8(2)
 6829               		sts selected_mode,r24
 6831               	.LM562:
 6832               		lds r24,button_pressed
 6833               		subi r24,lo8(-(1))
 6834               		sts button_pressed,r24
 6835               		rjmp .L210
 6836               	.L214:
 6838               	.LM563:
 6839 01fd 506C 6561 		sts button_pressed,__zero_reg__
 6839      7365 2073 
 6839      656C 6563 
 6839      7420 6120 
 6839      6D6F 6465 
 6840               	.L210:
 6842               	.LM564:
 6843 0226 536C 6964 		lds r24,button_pressed
 6843      6572 2049 
 6843      6E70 7574 
 6843      204D 6F64 
 6843      6500 
 6844               		cpi r24,lo8(4)
 6845               		brsh .+2
 6846               		rjmp .L215
 6847               	/* epilogue start */
 157:main.c        **** 	} 
 158:main.c        **** }	
 159:main.c        **** 
 160:main.c        **** void call_input_mode_screen(void)
 161:main.c        **** {
 6849               		ret
 6851               	.Lscope35:
 6852 2448 DF93      		.data
 6853 244a CF93      	.LC3:
 6854 244c CDB7      		.string	"1"
 6855 244e DEB7      	.LC4:
 6856               		.string	"2"
 6857               	.LC5:
 162:main.c        **** //======================================================		
 163:main.c        **** //============= 		Input Mode		================
 164:main.c        **** //======================================================
 165:main.c        **** 	g_draw_rectangle(0, 0, 160, 80);				//frame
 6858               	"3"
 6859               	.LC6:
 6860 2450 80E0      		.string	"4"
 6861 2452 90E0      	.LC7:
 6862 2454 60E0      		.string	"5"
 6863 2456 70E0      	.LC8:
 6864 2458 40EA      		.string	"6"
 6865 245a 50E0      	.LC9:
 6866 245c 20E5      		.string	"7"
 6867 245e 30E0      	.LC10:
 6868 2460 0E94 0000 		.string	"8"
 166:main.c        **** 	
 167:main.c        **** 	g_draw_string(17, 11, "Please select a mode:");
 6869               	ring	"9"
 6870               	.LC12:
 6871 2464 20E0      		.string	"0"
 6872 2466 30E0      	.LC13:
 6873 2468 81E1      		.string	"Ok"
 6874 246a 90E0      	.LC14:
 6875 246c 6BE0      		.string	"<-"
 6876 246e 70E0      	.LC15:
 6877 2470 A901      		.string	"Enter min. Temp: "
 6878 2472 0E94 0000 	.LC16:
 168:main.c        **** //============= 		num pad mode	================	
 169:main.c        **** 	g_draw_rectangle(5, 30, 150, 20);				//frame
 6879               	C"
 6880               	.LC17:
 6881 2476 85E0      		.string	"Enter max. Temp: "
 6882 2478 90E0      	.LC18:
 6883 247a 6EE1      		.string	"Enter ref. Time: "
 6884 247c 70E0      	.LC19:
 6885 247e 46E9      		.string	"Error: Min > Max Temp!  "
 6886 2480 50E0      	.LC20:
 6887 2482 24E1      		.string	"Error: Ref Time > 1000! "
 6888 2484 30E0      	.LC21:
 6889 2486 0E94 0000 		.string	"      "
 170:main.c        **** 	g_draw_string(27, 36, "Num Pad Input Mode");
 6890               	abs	"call_num_pad_mode:F(0,15)",36,0,0,call_num_pad_mode
 6891               	.global	call_num_pad_mode
 6893 248c 30E0      	call_num_pad_mode:
 6895 2490 90E0      	.LM566:
 6896 2492 64E2      	.LFBB36:
 6897 2494 70E0      		push r29
 6898 2496 A901      		push r28
 6899 2498 0E94 0000 		rcall .
 171:main.c        **** //============= 		num pad mode	================
 172:main.c        **** 	g_draw_rectangle(5, 55, 150, 20);				//frame
 6900               	push __tmp_reg__
 6901               		in r28,__SP_L__
 6902 249c 85E0      		in r29,__SP_H__
 6903 249e 90E0      	/* prologue: function */
 6904 24a0 67E3      	/* frame size = 5 */
 6906 24a4 46E9      	.LM567:
 6907 24a6 50E0      		call lcd_graphics_clear
 6909 24aa 30E0      	.LM568:
 6910 24ac 0E94 0000 		ldi r24,lo8(0)
 173:main.c        **** 	g_draw_string(30, 61, "Slider Input Mode");	
 6911               	8(0)
 6912               		ldi r22,lo8(0)
 6913 24b0 20E0      		ldi r23,hi8(0)
 6914 24b2 30E0      		ldi r20,lo8(160)
 6915 24b4 8EE1      		ldi r21,hi8(160)
 6916 24b6 90E0      		ldi r18,lo8(80)
 6917 24b8 6DE3      		ldi r19,hi8(80)
 6918 24ba 70E0      		call g_draw_rectangle
 6920 24be 0E94 0000 	.LM569:
 174:main.c        **** 	
 175:main.c        **** 	delay_ms(1000);									//wait for touch refresh
 6921               	o8(0)
 6922               		ldi r25,hi8(0)
 6923 24c2 88EE      		ldi r22,lo8(0)
 6924 24c4 93E0      		ldi r23,hi8(0)
 6925 24c6 0E94 0000 		ldi r20,lo8(160)
 176:main.c        **** 	buffer_touch_ad_x = 0;
 6926               	r21,hi8(160)
 6927               		ldi r18,lo8(23)
 6928 24ca 1092 0000 		ldi r19,hi8(23)
 6929 24ce 1092 0000 		call g_draw_rectangle
 177:main.c        **** 	buffer_touch_ad_y = 0;
 6930               	abn	68,0,220,.LM570-.LFBB36
 6931               	.LM570:
 6932 24d2 1092 0000 		ldi r24,lo8(0)
 178:main.c        **** 	button_pressed = 0;
 6933               	i r25,hi8(0)
 6934               		ldi r22,lo8(22)
 6935 24d6 1092 0000 		ldi r23,hi8(22)
 6936 24da 00C0      		ldi r20,lo8(30)
 6937               		ldi r21,hi8(30)
 179:main.c        **** 	
 180:main.c        **** 	while (button_pressed <= 3)
 181:main.c        **** 	{
 182:main.c        **** 		buffer_touch_ad_y = get_touch_y();
 6938               	r18,lo8(20)
 6939               		ldi r19,hi8(20)
 6940 24dc 0E94 0000 		call g_draw_rectangle
 183:main.c        **** 		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
 6942               	71:
 6943               		ldi r18,lo8(.LC3)
 6944 24e4 8091 0000 		ldi r19,hi8(.LC3)
 6945 24e8 882F      		ldi r24,lo8(12)
 6946 24ea 90E0      		ldi r25,hi8(12)
 6947 24ec 0E94 0000 		ldi r22,lo8(28)
 6948 24f0 9093 0000 		ldi r23,hi8(28)
 6949 24f4 8093 0000 		movw r20,r18
 184:main.c        **** 
 185:main.c        **** 		if (buffer_touch_ad_x > 160)
 6950               	draw_string
 6952 24f8 8091 0000 	.LM572:
 6953 24fc 9091 0000 		ldi r24,lo8(0)
 6954 2500 813A      		ldi r25,hi8(0)
 6955 2502 9105      		ldi r22,lo8(41)
 6956 2504 00F0      		ldi r23,hi8(41)
 186:main.c        **** 			buffer_touch_ad_x = 160;
 6957               	0,lo8(30)
 6958               		ldi r21,hi8(30)
 6959 2506 80EA      		ldi r18,lo8(20)
 6960 2508 90E0      		ldi r19,hi8(20)
 6961 250a 9093 0000 		call g_draw_rectangle
 6963               	.LM573:
 187:main.c        **** 		
 188:main.c        **** 		if (buffer_touch_ad_x == 0)
 6964               	8,lo8(.LC4)
 6965               		ldi r19,hi8(.LC4)
 6966 2512 8091 0000 		ldi r24,lo8(12)
 6967 2516 9091 0000 		ldi r25,hi8(12)
 6968 251a 0097      		ldi r22,lo8(48)
 6969 251c 01F4      		ldi r23,hi8(48)
 189:main.c        **** 			buffer_touch_ad_y = 0;
 6970               	r20,r18
 6971               		call g_draw_string
 6973               	.LM574:
 190:main.c        **** 			
 191:main.c        **** 		if ((buffer_touch_ad_y >= 30) && (buffer_touch_ad_y <= 50) && (buffer_touch_ad_x >= 2) && (buffer
 6974               	 r24,lo8(0)
 6975               		ldi r25,hi8(0)
 6976 2522 8091 0000 		ldi r22,lo8(60)
 6977 2526 8E31      		ldi r23,hi8(60)
 6978 2528 00F0      		ldi r20,lo8(30)
 6979 252a 8091 0000 		ldi r21,hi8(30)
 6980 252e 8333      		ldi r18,lo8(20)
 6981 2530 00F4      		ldi r19,hi8(20)
 6982 2532 8091 0000 		call g_draw_rectangle
 6984 253a 8230      	.LM575:
 6985 253c 9105      		ldi r18,lo8(.LC5)
 6986 253e 00F0      		ldi r19,hi8(.LC5)
 6987 2540 8091 0000 		ldi r24,lo8(12)
 6988 2544 9091 0000 		ldi r25,hi8(12)
 6989 2548 8939      		ldi r22,lo8(67)
 6990 254a 9105      		ldi r23,hi8(67)
 6991 254c 00F4      		movw r20,r18
 192:main.c        **** 		{
 193:main.c        **** 			selected_mode = 1;
 6992               	g
 6994 254e 81E0      	.LM576:
 6995 2550 8093 0000 		ldi r24,lo8(43)
 194:main.c        **** 			button_pressed++;
 6996               	 r25,hi8(43)
 6997               		ldi r22,lo8(22)
 6998 2554 8091 0000 		ldi r23,hi8(22)
 6999 2558 8F5F      		ldi r20,lo8(30)
 7000 255a 8093 0000 		ldi r21,hi8(30)
 7001 255e 00C0      		ldi r18,lo8(20)
 7002               		ldi r19,hi8(20)
 195:main.c        **** 		}
 196:main.c        **** 		else 
 197:main.c        **** 		{
 198:main.c        **** 			if ((buffer_touch_ad_y >= 55) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 2) && (buffe
 7003               	_draw_rectangle
 7005 2560 8091 0000 	.LM577:
 7006 2564 8733      		ldi r18,lo8(.LC6)
 7007 2566 00F0      		ldi r19,hi8(.LC6)
 7008 2568 8091 0000 		ldi r24,lo8(55)
 7009 256c 8135      		ldi r25,hi8(55)
 7010 256e 00F4      		ldi r22,lo8(28)
 7011 2570 8091 0000 		ldi r23,hi8(28)
 7012 2574 9091 0000 		movw r20,r18
 7013 2578 8230      		call g_draw_string
 7015 257c 00F0      	.LM578:
 7016 257e 8091 0000 		ldi r24,lo8(43)
 7017 2582 9091 0000 		ldi r25,hi8(43)
 7018 2586 8939      		ldi r22,lo8(41)
 7019 2588 9105      		ldi r23,hi8(41)
 7020 258a 00F4      		ldi r20,lo8(30)
 199:main.c        **** 			{
 200:main.c        **** 				selected_mode = 2;
 7021               	ldi r18,lo8(20)
 7022               		ldi r19,hi8(20)
 7023 258c 82E0      		call g_draw_rectangle
 201:main.c        **** 				button_pressed++;
 7025               	79:
 7026               		ldi r18,lo8(.LC7)
 7027 2592 8091 0000 		ldi r19,hi8(.LC7)
 7028 2596 8F5F      		ldi r24,lo8(55)
 7029 2598 8093 0000 		ldi r25,hi8(55)
 7030 259c 00C0      		ldi r22,lo8(48)
 7031               		ldi r23,hi8(48)
 202:main.c        **** 			}
 203:main.c        **** 			else
 204:main.c        **** 				button_pressed = 0;
 7032               	20,r18
 7033               		call g_draw_string
 7035               	.LM580:
 7036               		ldi r24,lo8(43)
 7037               		ldi r25,hi8(43)
 7038 25a2 8091 0000 		ldi r22,lo8(60)
 7039 25a6 8430      		ldi r23,hi8(60)
 7040 25a8 00F4      		ldi r20,lo8(30)
 7041 25aa 00C0      		ldi r21,hi8(30)
 7042               		ldi r18,lo8(20)
 205:main.c        **** 		}
 206:main.c        **** 	}
 207:main.c        **** }
 7043               	8(20)
 7044               		call g_draw_rectangle
 7046 25ae DF91      	.LM581:
 7047 25b0 0895      		ldi r18,lo8(.LC8)
 7048               		ldi r19,hi8(.LC8)
 7049               		ldi r24,lo8(55)
 7050               		ldi r25,hi8(55)
 7051               		ldi r22,lo8(67)
 7052 0238 3100      		ldi r23,hi8(67)
 7053               		movw r20,r18
 7054 023a 3200      		call g_draw_string
 7056 023c 3300      	.LM582:
 7057               		ldi r24,lo8(86)
 7058 023e 3400      		ldi r25,hi8(86)
 7059               		ldi r22,lo8(22)
 7060 0240 3500      		ldi r23,hi8(22)
 7061               		ldi r20,lo8(30)
 7062 0242 3600      		ldi r21,hi8(30)
 7063               		ldi r18,lo8(20)
 7064 0244 3700      		ldi r19,hi8(20)
 7065               		call g_draw_rectangle
 7067               	.LM583:
 7068 0248 3900      		ldi r18,lo8(.LC9)
 7069               		ldi r19,hi8(.LC9)
 7070 024a 3000      		ldi r24,lo8(98)
 7071               		ldi r25,hi8(98)
 7072 024c 4F6B 00   		ldi r22,lo8(28)
 7073               		ldi r23,hi8(28)
 7074 024f 3C2D 00   		movw r20,r18
 7075               		call g_draw_string
 7077               	.LM584:
 7078 0264 4300      		ldi r24,lo8(86)
 7079               		ldi r25,hi8(86)
 7080 0266 456E 7465 		ldi r22,lo8(41)
 7080      7220 6D61 
 7080      782E 2054 
 7080      656D 703A 
 7080      2000 
 7081               		ldi r23,hi8(41)
 7082 0278 456E 7465 		ldi r20,lo8(30)
 7082      7220 7265 
 7082      662E 2054 
 7082      696D 653A 
 7082      2000 
 7083               		ldi r21,hi8(30)
 7084 028a 4572 726F 		ldi r18,lo8(20)
 7084      723A 204D 
 7084      696E 203E 
 7084      204D 6178 
 7084      2054 656D 
 7085               		ldi r19,hi8(20)
 7086 02a3 4572 726F 		call g_draw_rectangle
 7086      723A 2052 
 7086      6566 2054 
 7086      696D 6520 
 7086      3E20 3130 
 7088 02bc 2020 2020 	.LM585:
 7088      2020 00
 7089               		ldi r18,lo8(.LC10)
 7090               		ldi r19,hi8(.LC10)
 7091               		ldi r24,lo8(98)
 7092               		ldi r25,hi8(98)
 7093               		ldi r22,lo8(48)
 208:main.c        **** 
 209:main.c        **** void call_num_pad_mode(void)
 210:main.c        **** {
 7095               	.LM586:
 7096               		ldi r24,lo8(86)
 7097 25b2 DF93      		ldi r25,hi8(86)
 7098 25b4 CF93      		ldi r22,lo8(60)
 7099 25b6 00D0      		ldi r23,hi8(60)
 7100 25b8 00D0      		ldi r20,lo8(30)
 7101 25ba 0F92      		ldi r21,hi8(30)
 7102 25bc CDB7      		ldi r18,lo8(20)
 7103 25be DEB7      		ldi r19,hi8(20)
 7104               		call g_draw_rectangle
 211:main.c        **** //======================================================		
 212:main.c        **** //============= 		Num Pad mode	================
 213:main.c        **** //======================================================
 214:main.c        **** 	unsigned char i;
 215:main.c        **** 
 216:main.c        **** 	lcd_graphics_clear();	
 7106               	 r18,lo8(.LC11)
 7107               		ldi r19,hi8(.LC11)
 7108 25c0 0E94 0000 		ldi r24,lo8(98)
 217:main.c        **** 	g_draw_rectangle(0, 0, 160, 80);
 7109               	i r25,hi8(98)
 7110               		ldi r22,lo8(67)
 7111 25c4 80E0      		ldi r23,hi8(67)
 7112 25c6 90E0      		movw r20,r18
 7113 25c8 60E0      		call g_draw_string
 7115 25cc 40EA      	.LM588:
 7116 25ce 50E0      		ldi r24,lo8(130)
 7117 25d0 20E5      		ldi r25,hi8(130)
 7118 25d2 30E0      		ldi r22,lo8(22)
 7119 25d4 0E94 0000 		ldi r23,hi8(22)
 218:main.c        **** 	g_draw_rectangle(0, 0, 160, 23);
 7120               	8(30)
 7121               		ldi r21,hi8(30)
 7122 25d8 80E0      		ldi r18,lo8(20)
 7123 25da 90E0      		ldi r19,hi8(20)
 7124 25dc 60E0      		call g_draw_rectangle
 7126 25e0 40EA      	.LM589:
 7127 25e2 50E0      		ldi r18,lo8(.LC12)
 7128 25e4 27E1      		ldi r19,hi8(.LC12)
 7129 25e6 30E0      		ldi r24,lo8(142)
 7130 25e8 0E94 0000 		ldi r25,hi8(142)
 219:main.c        **** 	
 220:main.c        **** 	g_draw_rectangle(0, 22, 30, 20);
 7131               	8(28)
 7132               		ldi r23,hi8(28)
 7133 25ec 80E0      		movw r20,r18
 7134 25ee 90E0      		call g_draw_string
 7136 25f2 70E0      	.LM590:
 7137 25f4 4EE1      		ldi r24,lo8(130)
 7138 25f6 50E0      		ldi r25,hi8(130)
 7139 25f8 24E1      		ldi r22,lo8(41)
 7140 25fa 30E0      		ldi r23,hi8(41)
 7141 25fc 0E94 0000 		ldi r20,lo8(30)
 221:main.c        **** 	g_draw_string(12, 28, "1");
 7142               	8(30)
 7143               		ldi r18,lo8(20)
 7144 2600 20E0      		ldi r19,hi8(20)
 7145 2602 30E0      		call g_draw_rectangle
 7147 2606 90E0      	.LM591:
 7148 2608 6CE1      		ldi r18,lo8(.LC13)
 7149 260a 70E0      		ldi r19,hi8(.LC13)
 7150 260c A901      		ldi r24,lo8(139)
 7151 260e 0E94 0000 		ldi r25,hi8(139)
 222:main.c        **** 	g_draw_rectangle(0, 41, 30, 20);
 7152               	o8(48)
 7153               		ldi r23,hi8(48)
 7154 2612 80E0      		movw r20,r18
 7155 2614 90E0      		call g_draw_string
 7157 2618 70E0      	.LM592:
 7158 261a 4EE1      		ldi r24,lo8(130)
 7159 261c 50E0      		ldi r25,hi8(130)
 7160 261e 24E1      		ldi r22,lo8(60)
 7161 2620 30E0      		ldi r23,hi8(60)
 7162 2622 0E94 0000 		ldi r20,lo8(30)
 223:main.c        **** 	g_draw_string(12, 48, "2");
 7163               	8(30)
 7164               		ldi r18,lo8(20)
 7165 2626 20E0      		ldi r19,hi8(20)
 7166 2628 30E0      		call g_draw_rectangle
 7168 262c 90E0      	.LM593:
 7169 262e 60E3      		ldi r18,lo8(.LC14)
 7170 2630 70E0      		ldi r19,hi8(.LC14)
 7171 2632 A901      		ldi r24,lo8(139)
 7172 2634 0E94 0000 		ldi r25,hi8(139)
 224:main.c        **** 	g_draw_rectangle(0, 60, 30, 20);
 7173               	o8(67)
 7174               		ldi r23,hi8(67)
 7175 2638 80E0      		movw r20,r18
 7176 263a 90E0      		call g_draw_string
 7178 263e 70E0      	.LM594:
 7179 2640 4EE1      		sts num_pad_cursor_pos,__zero_reg__
 7180 2642 50E0      		rjmp .L218
 7181 2644 24E1      	.L270:
 7183 2648 0E94 0000 	.LM595:
 225:main.c        **** 	g_draw_string(12, 67, "3");
 7184               	ouch_y
 7185               		sts buffer_touch_ad_y,r24
 7187 264e 30E0      	.LM596:
 7188 2650 8CE0      		lds r24,buffer_touch_ad_y
 7189 2652 90E0      		mov r24,r24
 7190 2654 63E4      		ldi r25,lo8(0)
 7191 2656 70E0      		call get_touch_x
 7192 2658 A901      		sts (buffer_touch_ad_x)+1,r25
 7193 265a 0E94 0000 		sts buffer_touch_ad_x,r24
 226:main.c        **** 	
 227:main.c        **** 	g_draw_rectangle(43, 22, 30, 20);
 7194               	,0,255,.LM597-.LFBB36
 7195               	.LM597:
 7196 265e 8BE2      		lds r24,buffer_touch_ad_x
 7197 2660 90E0      		lds r25,(buffer_touch_ad_x)+1
 7198 2662 66E1      		cpi r24,161
 7199 2664 70E0      		cpc r25,__zero_reg__
 7200 2666 4EE1      		brlo .L219
 7202 266a 24E1      	.LM598:
 7203 266c 30E0      		ldi r24,lo8(160)
 7204 266e 0E94 0000 		ldi r25,hi8(160)
 228:main.c        **** 	g_draw_string(55, 28, "4");
 7205               	r_touch_ad_x)+1,r25
 7206               		sts buffer_touch_ad_x,r24
 7207 2672 20E0      	.L219:
 7209 2676 87E3      	.LM599:
 7210 2678 90E0      		lds r24,buffer_touch_ad_x
 7211 267a 6CE1      		lds r25,(buffer_touch_ad_x)+1
 7212 267c 70E0      		sbiw r24,0
 7213 267e A901      		brne .L220
 229:main.c        **** 	g_draw_rectangle(43, 41, 30, 20);
 7215               	ts buffer_touch_ad_y,__zero_reg__
 7216               	.L220:
 7218 2686 90E0      	.LM601:
 7219 2688 69E2      		lds r24,buffer_touch_ad_y
 7220 268a 70E0      		cpi r24,lo8(20)
 7221 268c 4EE1      		brlo .L221
 7222 268e 50E0      		lds r24,buffer_touch_ad_y
 7223 2690 24E1      		cpi r24,lo8(41)
 7224 2692 30E0      		brsh .L221
 7225 2694 0E94 0000 		lds r24,buffer_touch_ad_x
 230:main.c        **** 	g_draw_string(55, 48, "5");
 7226               	uffer_touch_ad_x)+1
 7227               		cpi r24,30
 7228 2698 20E0      		cpc r25,__zero_reg__
 7229 269a 30E0      		brlo .L221
 7230 269c 87E3      		lds r24,buffer_touch_ad_x
 7231 269e 90E0      		lds r25,(buffer_touch_ad_x)+1
 7232 26a0 60E3      		cpi r24,51
 7233 26a2 70E0      		cpc r25,__zero_reg__
 7234 26a4 A901      		brsh .L221
 231:main.c        **** 	g_draw_rectangle(43, 60, 30, 20);
 7236               	ds r24,num_pad_pressed+1
 7237               		subi r24,lo8(-(1))
 7238 26aa 8BE2      		sts num_pad_pressed+1,r24
 7239 26ac 90E0      		rjmp .L222
 7240 26ae 6CE3      	.L221:
 7242 26b2 4EE1      	.LM603:
 7243 26b4 50E0      		sts num_pad_pressed+1,__zero_reg__
 7244 26b6 24E1      	.L222:
 7246 26ba 0E94 0000 	.LM604:
 232:main.c        **** 	g_draw_string(55, 67, "6");
 7247               	ffer_touch_ad_y
 7248               		cpi r24,lo8(41)
 7249 26be 20E0      		brlo .L223
 7250 26c0 30E0      		lds r24,buffer_touch_ad_y
 7251 26c2 87E3      		cpi r24,lo8(62)
 7252 26c4 90E0      		brsh .L223
 7253 26c6 63E4      		lds r24,buffer_touch_ad_x
 7254 26c8 70E0      		lds r25,(buffer_touch_ad_x)+1
 7255 26ca A901      		cpi r24,30
 7256 26cc 0E94 0000 		cpc r25,__zero_reg__
 233:main.c        **** 	
 234:main.c        **** 	g_draw_rectangle(86, 22, 30, 20);
 7257               	3
 7258               		lds r24,buffer_touch_ad_x
 7259 26d0 86E5      		lds r25,(buffer_touch_ad_x)+1
 7260 26d2 90E0      		cpi r24,51
 7261 26d4 66E1      		cpc r25,__zero_reg__
 7262 26d6 70E0      		brsh .L223
 7264 26da 50E0      	.LM605:
 7265 26dc 24E1      		lds r24,num_pad_pressed+2
 7266 26de 30E0      		subi r24,lo8(-(1))
 7267 26e0 0E94 0000 		sts num_pad_pressed+2,r24
 235:main.c        **** 	g_draw_string(98, 28, "7");
 7268               	
 7269               	.L223:
 7271 26e6 30E0      	.LM606:
 7272 26e8 82E6      		sts num_pad_pressed+2,__zero_reg__
 7273 26ea 90E0      	.L224:
 7275 26ee 70E0      	.LM607:
 7276 26f0 A901      		lds r24,buffer_touch_ad_y
 7277 26f2 0E94 0000 		cpi r24,lo8(62)
 236:main.c        **** 	g_draw_rectangle(86, 41, 30, 20);
 7278               	25
 7279               		lds r24,buffer_touch_ad_y
 7280 26f6 86E5      		cpi r24,lo8(81)
 7281 26f8 90E0      		brsh .L225
 7282 26fa 69E2      		lds r24,buffer_touch_ad_x
 7283 26fc 70E0      		lds r25,(buffer_touch_ad_x)+1
 7284 26fe 4EE1      		cpi r24,30
 7285 2700 50E0      		cpc r25,__zero_reg__
 7286 2702 24E1      		brlo .L225
 7287 2704 30E0      		lds r24,buffer_touch_ad_x
 7288 2706 0E94 0000 		lds r25,(buffer_touch_ad_x)+1
 237:main.c        **** 	g_draw_string(98, 48, "8");
 7289               	
 7290               		cpc r25,__zero_reg__
 7291 270a 20E0      		brsh .L225
 7293 270e 82E6      	.LM608:
 7294 2710 90E0      		lds r24,num_pad_pressed+3
 7295 2712 60E3      		subi r24,lo8(-(1))
 7296 2714 70E0      		sts num_pad_pressed+3,r24
 7297 2716 A901      		rjmp .L226
 7298 2718 0E94 0000 	.L225:
 238:main.c        **** 	g_draw_rectangle(86, 60, 30, 20);
 7299               	8,0,275,.LM609-.LFBB36
 7300               	.LM609:
 7301 271c 86E5      		sts num_pad_pressed+3,__zero_reg__
 7302 271e 90E0      	.L226:
 7304 2722 70E0      	.LM610:
 7305 2724 4EE1      		lds r24,buffer_touch_ad_y
 7306 2726 50E0      		cpi r24,lo8(20)
 7307 2728 24E1      		brlo .L227
 7308 272a 30E0      		lds r24,buffer_touch_ad_y
 7309 272c 0E94 0000 		cpi r24,lo8(41)
 239:main.c        **** 	g_draw_string(98, 67, "9");
 7310               	
 7311               		lds r24,buffer_touch_ad_x
 7312 2730 20E0      		lds r25,(buffer_touch_ad_x)+1
 7313 2732 30E0      		cpi r24,60
 7314 2734 82E6      		cpc r25,__zero_reg__
 7315 2736 90E0      		brlo .L227
 7316 2738 63E4      		lds r24,buffer_touch_ad_x
 7317 273a 70E0      		lds r25,(buffer_touch_ad_x)+1
 7318 273c A901      		cpi r24,81
 7319 273e 0E94 0000 		cpc r25,__zero_reg__
 240:main.c        **** 
 241:main.c        **** 	g_draw_rectangle(130, 22, 30, 20);
 7320               	27
 7322 2742 82E8      	.LM611:
 7323 2744 90E0      		lds r24,num_pad_pressed+4
 7324 2746 66E1      		subi r24,lo8(-(1))
 7325 2748 70E0      		sts num_pad_pressed+4,r24
 7326 274a 4EE1      		rjmp .L228
 7327 274c 50E0      	.L227:
 7329 2750 30E0      	.LM612:
 7330 2752 0E94 0000 		sts num_pad_pressed+4,__zero_reg__
 242:main.c        **** 	g_draw_string(142, 28, "0");
 7331               	abn	68,0,282,.LM613-.LFBB36
 7332               	.LM613:
 7333 2756 20E0      		lds r24,buffer_touch_ad_y
 7334 2758 30E0      		cpi r24,lo8(41)
 7335 275a 8EE8      		brlo .L229
 7336 275c 90E0      		lds r24,buffer_touch_ad_y
 7337 275e 6CE1      		cpi r24,lo8(62)
 7338 2760 70E0      		brsh .L229
 7339 2762 A901      		lds r24,buffer_touch_ad_x
 7340 2764 0E94 0000 		lds r25,(buffer_touch_ad_x)+1
 243:main.c        **** 	g_draw_rectangle(130, 41, 30, 20);
 7341               	0
 7342               		cpc r25,__zero_reg__
 7343 2768 82E8      		brlo .L229
 7344 276a 90E0      		lds r24,buffer_touch_ad_x
 7345 276c 69E2      		lds r25,(buffer_touch_ad_x)+1
 7346 276e 70E0      		cpi r24,81
 7347 2770 4EE1      		cpc r25,__zero_reg__
 7348 2772 50E0      		brsh .L229
 7350 2776 30E0      	.LM614:
 7351 2778 0E94 0000 		lds r24,num_pad_pressed+5
 244:main.c        **** 	g_draw_string(139, 48, "Ok");
 7352               	o8(-(1))
 7353               		sts num_pad_pressed+5,r24
 7354 277c 20E0      		rjmp .L230
 7355 277e 30E0      	.L229:
 7357 2782 90E0      	.LM615:
 7358 2784 60E3      		sts num_pad_pressed+5,__zero_reg__
 7359 2786 70E0      	.L230:
 7361 278a 0E94 0000 	.LM616:
 245:main.c        **** 	g_draw_rectangle(130, 60, 30, 20);
 7362               	uffer_touch_ad_y
 7363               		cpi r24,lo8(62)
 7364 278e 82E8      		brlo .L231
 7365 2790 90E0      		lds r24,buffer_touch_ad_y
 7366 2792 6CE3      		cpi r24,lo8(81)
 7367 2794 70E0      		brsh .L231
 7368 2796 4EE1      		lds r24,buffer_touch_ad_x
 7369 2798 50E0      		lds r25,(buffer_touch_ad_x)+1
 7370 279a 24E1      		cpi r24,80
 7371 279c 30E0      		cpc r25,__zero_reg__
 7372 279e 0E94 0000 		brlo .L231
 246:main.c        **** 	g_draw_string(139, 67, "<-");
 7373               	ffer_touch_ad_x
 7374               		lds r25,(buffer_touch_ad_x)+1
 7375 27a2 20E0      		cpi r24,101
 7376 27a4 30E0      		cpc r25,__zero_reg__
 7377 27a6 8BE8      		brsh .L231
 7379 27aa 63E4      	.LM617:
 7380 27ac 70E0      		lds r24,num_pad_pressed+6
 7381 27ae A901      		subi r24,lo8(-(1))
 7382 27b0 0E94 0000 		sts num_pad_pressed+6,r24
 247:main.c        **** 	
 248:main.c        **** 	num_pad_cursor_pos = 0;
 7383               	2
 7384               	.L231:
 7386 27b8 00C0      	.LM618:
 7387               		sts num_pad_pressed+6,__zero_reg__
 249:main.c        **** 	
 250:main.c        **** 	while(num_pad_value_control != 4)
 251:main.c        **** 	{
 252:main.c        **** 		buffer_touch_ad_y = get_touch_y();
 7388               	:
 7390 27ba 0E94 0000 	.LM619:
 7391 27be 8093 0000 		lds r24,buffer_touch_ad_y
 253:main.c        **** 		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
 7392               	 r24,lo8(20)
 7393               		brlo .L233
 7394 27c2 8091 0000 		lds r24,buffer_touch_ad_y
 7395 27c6 882F      		cpi r24,lo8(41)
 7396 27c8 90E0      		brsh .L233
 7397 27ca 0E94 0000 		lds r24,buffer_touch_ad_x
 7398 27ce 9093 0000 		lds r25,(buffer_touch_ad_x)+1
 7399 27d2 8093 0000 		cpi r24,90
 254:main.c        **** 		
 255:main.c        **** 		if (buffer_touch_ad_x > 160)
 7400               	,__zero_reg__
 7401               		brlo .L233
 7402 27d6 8091 0000 		lds r24,buffer_touch_ad_x
 7403 27da 9091 0000 		lds r25,(buffer_touch_ad_x)+1
 7404 27de 813A      		cpi r24,131
 7405 27e0 9105      		cpc r25,__zero_reg__
 7406 27e2 00F0      		brsh .L233
 256:main.c        **** 			buffer_touch_ad_x = 160;
 7407               		68,0,294,.LM620-.LFBB36
 7408               	.LM620:
 7409 27e4 80EA      		lds r24,num_pad_pressed+7
 7410 27e6 90E0      		subi r24,lo8(-(1))
 7411 27e8 9093 0000 		sts num_pad_pressed+7,r24
 7412 27ec 8093 0000 		rjmp .L234
 7413               	.L233:
 257:main.c        **** 		
 258:main.c        **** 		if (buffer_touch_ad_x == 0)
 7414               		68,0,296,.LM621-.LFBB36
 7415               	.LM621:
 7416 27f0 8091 0000 		sts num_pad_pressed+7,__zero_reg__
 7417 27f4 9091 0000 	.L234:
 7419 27fa 01F4      	.LM622:
 259:main.c        **** 			buffer_touch_ad_y = 0;
 7420               	24,buffer_touch_ad_y
 7421               		cpi r24,lo8(41)
 7422 27fc 1092 0000 		brlo .L235
 7423               		lds r24,buffer_touch_ad_y
 260:main.c        **** 			
 261:main.c        **** 		
 262:main.c        **** 		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 30) && (buffe
 7424               	 r24,lo8(62)
 7425               		brsh .L235
 7426 2800 8091 0000 		lds r24,buffer_touch_ad_x
 7427 2804 8431      		lds r25,(buffer_touch_ad_x)+1
 7428 2806 00F0      		cpi r24,90
 7429 2808 8091 0000 		cpc r25,__zero_reg__
 7430 280c 8932      		brlo .L235
 7431 280e 00F4      		lds r24,buffer_touch_ad_x
 7432 2810 8091 0000 		lds r25,(buffer_touch_ad_x)+1
 7433 2814 9091 0000 		cpi r24,131
 7434 2818 8E31      		cpc r25,__zero_reg__
 7435 281a 9105      		brsh .L235
 7437 281e 8091 0000 	.LM623:
 7438 2822 9091 0000 		lds r24,num_pad_pressed+8
 7439 2826 8333      		subi r24,lo8(-(1))
 7440 2828 9105      		sts num_pad_pressed+8,r24
 7441 282a 00F4      		rjmp .L236
 263:main.c        **** 			num_pad_pressed[1]++;
 7442               	0,301,.LM624-.LFBB36
 7443               	.LM624:
 7444 282c 8091 0000 		sts num_pad_pressed+8,__zero_reg__
 7445 2830 8F5F      	.L236:
 7447 2836 00C0      	.LM625:
 7448               		lds r24,buffer_touch_ad_y
 264:main.c        **** 		else
 265:main.c        **** 			num_pad_pressed[1] = 0;
 7449               	4,lo8(62)
 7450               		brlo .L237
 7451 2838 1092 0000 		lds r24,buffer_touch_ad_y
 7452               		cpi r24,lo8(81)
 266:main.c        **** 			//g_draw_string(100, 2, "1");
 267:main.c        **** 		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 30) && (buffe
 7453               	h .L237
 7454               		lds r24,buffer_touch_ad_x
 7455 283c 8091 0000 		lds r25,(buffer_touch_ad_x)+1
 7456 2840 8932      		cpi r24,110
 7457 2842 00F0      		cpc r25,__zero_reg__
 7458 2844 8091 0000 		brlo .L237
 7459 2848 8E33      		lds r24,buffer_touch_ad_x
 7460 284a 00F4      		lds r25,(buffer_touch_ad_x)+1
 7461 284c 8091 0000 		cpi r24,131
 7462 2850 9091 0000 		cpc r25,__zero_reg__
 7463 2854 8E31      		brsh .L237
 7465 2858 00F0      	.LM626:
 7466 285a 8091 0000 		lds r24,num_pad_pressed+9
 7467 285e 9091 0000 		subi r24,lo8(-(1))
 7468 2862 8333      		sts num_pad_pressed+9,r24
 7469 2864 9105      		rjmp .L238
 7470 2866 00F4      	.L237:
 268:main.c        **** 			num_pad_pressed[2]++;
 7471               	LM627-.LFBB36
 7472               	.LM627:
 7473 2868 8091 0000 		sts num_pad_pressed+9,__zero_reg__
 7474 286c 8F5F      	.L238:
 7476 2872 00C0      	.LM628:
 7477               		lds r24,buffer_touch_ad_y
 269:main.c        **** 		else
 270:main.c        **** 			num_pad_pressed[2] = 0;
 7478               	4,lo8(20)
 7479               		brlo .L239
 7480 2874 1092 0000 		lds r24,buffer_touch_ad_y
 7481               		cpi r24,lo8(41)
 271:main.c        **** 			//g_draw_string(100, 2, "2");
 272:main.c        **** 		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 30) && (buffe
 7482               	h .L239
 7483               		lds r24,buffer_touch_ad_x
 7484 2878 8091 0000 		lds r25,(buffer_touch_ad_x)+1
 7485 287c 8E33      		cpi r24,140
 7486 287e 00F0      		cpc r25,__zero_reg__
 7487 2880 8091 0000 		brlo .L239
 7488 2884 8135      		lds r24,buffer_touch_ad_x
 7489 2886 00F4      		lds r25,(buffer_touch_ad_x)+1
 7490 2888 8091 0000 		cpi r24,161
 7491 288c 9091 0000 		cpc r25,__zero_reg__
 7492 2890 8E31      		brsh .L239
 7494 2894 00F0      	.LM629:
 7495 2896 8091 0000 		lds r24,num_pad_pressed
 7496 289a 9091 0000 		subi r24,lo8(-(1))
 7497 289e 8D33      		sts num_pad_pressed,r24
 7498 28a0 9105      		rjmp .L240
 7499 28a2 00F4      	.L239:
 273:main.c        **** 			num_pad_pressed[3]++;
 7500               	LM630-.LFBB36
 7501               	.LM630:
 7502 28a4 8091 0000 		sts num_pad_pressed,__zero_reg__
 7503 28a8 8F5F      	.L240:
 7505 28ae 00C0      	.LM631:
 7506               		lds r24,buffer_touch_ad_y
 274:main.c        **** 		else
 275:main.c        **** 			num_pad_pressed[3] = 0;
 7507               	4,lo8(41)
 7508               		brlo .L241
 7509 28b0 1092 0000 		lds r24,buffer_touch_ad_y
 7510               		cpi r24,lo8(62)
 276:main.c        **** 			//g_draw_string(100, 2, "3");
 277:main.c        **** 		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 60) && (buffe
 7511               	h .L241
 7512               		lds r24,buffer_touch_ad_x
 7513 28b4 8091 0000 		lds r25,(buffer_touch_ad_x)+1
 7514 28b8 8431      		cpi r24,140
 7515 28ba 00F0      		cpc r25,__zero_reg__
 7516 28bc 8091 0000 		brlo .L241
 7517 28c0 8932      		lds r24,buffer_touch_ad_x
 7518 28c2 00F4      		lds r25,(buffer_touch_ad_x)+1
 7519 28c4 8091 0000 		cpi r24,161
 7520 28c8 9091 0000 		cpc r25,__zero_reg__
 7521 28cc 8C33      		brsh .L241
 7523 28d0 00F0      	.LM632:
 7524 28d2 8091 0000 		lds r24,num_pad_pressed+10
 7525 28d6 9091 0000 		subi r24,lo8(-(1))
 7526 28da 8135      		sts num_pad_pressed+10,r24
 7527 28dc 9105      		rjmp .L242
 7528 28de 00F4      	.L241:
 278:main.c        **** 			num_pad_pressed[4]++;
 7529               	LM633-.LFBB36
 7530               	.LM633:
 7531 28e0 8091 0000 		sts num_pad_pressed+10,__zero_reg__
 7532 28e4 8F5F      	.L242:
 7534 28ea 00C0      	.LM634:
 7535               		lds r24,buffer_touch_ad_y
 279:main.c        **** 		else
 280:main.c        **** 			num_pad_pressed[4] = 0;
 7536               	4,lo8(62)
 7537               		brlo .L243
 7538 28ec 1092 0000 		lds r24,buffer_touch_ad_y
 7539               		cpi r24,lo8(81)
 281:main.c        **** 			//g_draw_string(100, 2, "4");
 282:main.c        **** 		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 60) && (buffe
 7540               	h .L243
 7541               		lds r24,buffer_touch_ad_x
 7542 28f0 8091 0000 		lds r25,(buffer_touch_ad_x)+1
 7543 28f4 8932      		cpi r24,140
 7544 28f6 00F0      		cpc r25,__zero_reg__
 7545 28f8 8091 0000 		brlo .L243
 7546 28fc 8E33      		lds r24,buffer_touch_ad_x
 7547 28fe 00F4      		lds r25,(buffer_touch_ad_x)+1
 7548 2900 8091 0000 		cpi r24,161
 7549 2904 9091 0000 		cpc r25,__zero_reg__
 7550 2908 8C33      		brsh .L243
 7552 290c 00F0      	.LM635:
 7553 290e 8091 0000 		lds r24,num_pad_pressed+11
 7554 2912 9091 0000 		subi r24,lo8(-(1))
 7555 2916 8135      		sts num_pad_pressed+11,r24
 7556 2918 9105      		rjmp .L244
 7557 291a 00F4      	.L243:
 283:main.c        **** 			num_pad_pressed[5]++;
 7558               	LM636-.LFBB36
 7559               	.LM636:
 7560 291c 8091 0000 		sts num_pad_pressed+11,__zero_reg__
 7561 2920 8F5F      	.L244:
 7563 2926 00C0      	.LM637:
 7564               		lds r24,num_pad_value_control
 284:main.c        **** 		else
 285:main.c        **** 			num_pad_pressed[5] = 0;
 7565               	8,r24
 7566               		ldi r19,lo8(0)
 7567 2928 1092 0000 		std Y+5,r19
 7568               		std Y+4,r18
 286:main.c        **** 			//g_draw_string(100, 2, "5");
 287:main.c        **** 		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 80) && (buffe
 7569               	 r20,Y+4
 7570               		ldd r21,Y+5
 7571 292c 8091 0000 		cpi r20,1
 7572 2930 8E33      		cpc r21,__zero_reg__
 7573 2932 00F0      		breq .L247
 7574 2934 8091 0000 		ldd r24,Y+4
 7575 2938 8135      		ldd r25,Y+5
 7576 293a 00F4      		cpi r24,2
 7577 293c 8091 0000 		cpc r25,__zero_reg__
 7578 2940 9091 0000 		brge .L250
 7579 2944 8035      		ldd r18,Y+4
 7580 2946 9105      		ldd r19,Y+5
 7581 2948 00F0      		cp r18,__zero_reg__
 7582 294a 8091 0000 		cpc r19,__zero_reg__
 7583 294e 9091 0000 		breq .L246
 7584 2952 8536      		rjmp .L245
 7585 2954 9105      	.L250:
 7586 2956 00F4      		ldd r20,Y+4
 288:main.c        **** 			num_pad_pressed[6]++;
 7587               	r20,2
 7588               		cpc r21,__zero_reg__
 7589 2958 8091 0000 		brne .+2
 7590 295c 8F5F      		rjmp .L248
 7591 295e 8093 0000 		ldd r24,Y+4
 7592 2962 00C0      		ldd r25,Y+5
 7593               		cpi r24,3
 289:main.c        **** 		else
 290:main.c        **** 			num_pad_pressed[6] = 0;
 7594               	5,__zero_reg__
 7595               		brne .+2
 7596 2964 1092 0000 		rjmp .L249
 7597               		rjmp .L245
 291:main.c        **** 			//g_draw_string(100, 2, "6");
 292:main.c        **** 			
 293:main.c        **** 		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 90) && (buffe
 7598               	6:
 7600 2968 8091 0000 	.LM638:
 7601 296c 8431      		ldi r18,lo8(.LC15)
 7602 296e 00F0      		ldi r19,hi8(.LC15)
 7603 2970 8091 0000 		ldi r24,lo8(5)
 7604 2974 8932      		ldi r25,hi8(5)
 7605 2976 00F4      		ldi r22,lo8(7)
 7606 2978 8091 0000 		ldi r23,hi8(7)
 7607 297c 9091 0000 		movw r20,r18
 7608 2980 8A35      		call g_draw_string
 7610 2984 00F0      	.LM639:
 7611 2986 8091 0000 		ldi r18,lo8(num_input_min_temp)
 7612 298a 9091 0000 		ldi r19,hi8(num_input_min_temp)
 7613 298e 8338      		ldi r24,lo8(107)
 7614 2990 9105      		ldi r25,hi8(107)
 7615 2992 00F4      		ldi r22,lo8(7)
 294:main.c        **** 			num_pad_pressed[7]++;
 7616               	ovw r20,r18
 7617               		call g_draw_string
 7619 2998 8F5F      	.LM640:
 7620 299a 8093 0000 		ldi r18,lo8(.LC16)
 7621 299e 00C0      		ldi r19,hi8(.LC16)
 7622               		ldi r24,lo8(125)
 295:main.c        **** 		else
 296:main.c        **** 			num_pad_pressed[7] = 0;
 7623               	5,hi8(125)
 7624               		ldi r22,lo8(7)
 7625 29a0 1092 0000 		ldi r23,hi8(7)
 7626               		movw r20,r18
 297:main.c        **** 			//g_draw_string(100, 2, "7");
 298:main.c        **** 		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 90) && (buffe
 7627               	l g_draw_string
 7629 29a4 8091 0000 	.LM641:
 7630 29a8 8932      		ldi r24,lo8(119)
 7631 29aa 00F0      		ldi r22,lo8(6)
 7632 29ac 8091 0000 		call draw_grad
 7633 29b0 8E33      		rjmp .L245
 7634 29b2 00F4      	.L247:
 7636 29b8 9091 0000 	.LM642:
 7637 29bc 8A35      		ldi r18,lo8(.LC17)
 7638 29be 9105      		ldi r19,hi8(.LC17)
 7639 29c0 00F0      		ldi r24,lo8(5)
 7640 29c2 8091 0000 		ldi r25,hi8(5)
 7641 29c6 9091 0000 		ldi r22,lo8(7)
 7642 29ca 8338      		ldi r23,hi8(7)
 7643 29cc 9105      		movw r20,r18
 7644 29ce 00F4      		call g_draw_string
 299:main.c        **** 			num_pad_pressed[8]++;
 7645               	LM643-.LFBB36
 7646               	.LM643:
 7647 29d0 8091 0000 		ldi r18,lo8(num_input_max_temp)
 7648 29d4 8F5F      		ldi r19,hi8(num_input_max_temp)
 7649 29d6 8093 0000 		ldi r24,lo8(107)
 7650 29da 00C0      		ldi r25,hi8(107)
 7651               		ldi r22,lo8(7)
 300:main.c        **** 		else
 301:main.c        **** 			num_pad_pressed[8] = 0;
 7652               	3,hi8(7)
 7653               		movw r20,r18
 7654 29dc 1092 0000 		call g_draw_string
 302:main.c        **** 			//g_draw_string(100, 2, "8");
 303:main.c        **** 		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 110) && (buff
 7656               	44:
 7657               		ldi r18,lo8(.LC16)
 7658 29e0 8091 0000 		ldi r19,hi8(.LC16)
 7659 29e4 8E33      		ldi r24,lo8(125)
 7660 29e6 00F0      		ldi r25,hi8(125)
 7661 29e8 8091 0000 		ldi r22,lo8(7)
 7662 29ec 8135      		ldi r23,hi8(7)
 7663 29ee 00F4      		movw r20,r18
 7664 29f0 8091 0000 		call g_draw_string
 7666 29f8 8E36      	.LM645:
 7667 29fa 9105      		ldi r24,lo8(119)
 7668 29fc 00F0      		ldi r22,lo8(6)
 7669 29fe 8091 0000 		call draw_grad
 7670 2a02 9091 0000 		rjmp .L245
 7671 2a06 8338      	.L248:
 7673 2a0a 00F4      	.LM646:
 304:main.c        **** 			num_pad_pressed[9]++;
 7674               	)
 7675               		ldi r19,hi8(.LC18)
 7676 2a0c 8091 0000 		ldi r24,lo8(5)
 7677 2a10 8F5F      		ldi r25,hi8(5)
 7678 2a12 8093 0000 		ldi r22,lo8(7)
 7679 2a16 00C0      		ldi r23,hi8(7)
 7680               		movw r20,r18
 305:main.c        **** 		else
 306:main.c        **** 			num_pad_pressed[9] = 0;
 7681               	_draw_string
 7683 2a18 1092 0000 	.LM647:
 7684               		ldi r18,lo8(num_input_refr_time)
 307:main.c        **** 			//g_draw_string(100, 2, "9");
 308:main.c        **** 			
 309:main.c        **** 		if ((buffer_touch_ad_y >= 20) && (buffer_touch_ad_y <= 40) && (buffer_touch_ad_x >= 140) && (buff
 7685               	 r19,hi8(num_input_refr_time)
 7686               		ldi r24,lo8(107)
 7687 2a1c 8091 0000 		ldi r25,hi8(107)
 7688 2a20 8431      		ldi r22,lo8(7)
 7689 2a22 00F0      		ldi r23,hi8(7)
 7690 2a24 8091 0000 		movw r20,r18
 7691 2a28 8932      		call g_draw_string
 7692 2a2a 00F4      		rjmp .L245
 7693 2a2c 8091 0000 	.L249:
 7695 2a34 8C38      	.LM648:
 7696 2a36 9105      		lds r24,num_input_min_temp
 7697 2a38 00F0      		mov r24,r24
 7698 2a3a 8091 0000 		ldi r25,lo8(0)
 7699 2a3e 9091 0000 		movw r18,r24
 7700 2a42 813A      		lsl r18
 7701 2a44 9105      		rol r19
 7702 2a46 00F4      		movw r24,r18
 310:main.c        **** 			num_pad_pressed[0]++;
 7703               		lsl r24
 7704               		rol r25
 7705 2a48 8091 0000 		add r24,r18
 7706 2a4c 8F5F      		adc r25,r19
 7707 2a4e 8093 0000 		subi r24,lo8(-(-480))
 7708 2a52 00C0      		sbci r25,hi8(-(-480))
 7709               		sts (val_min)+1,r25
 311:main.c        **** 		else
 312:main.c        **** 			num_pad_pressed[0] = 0;
 7710               	l_min,r24
 7712 2a54 1092 0000 	.LM649:
 7713               		lds r24,num_input_min_temp+1
 313:main.c        **** 			//g_draw_string(100, 2, "0");
 314:main.c        **** 		if ((buffer_touch_ad_y >= 41) && (buffer_touch_ad_y <= 61) && (buffer_touch_ad_x >= 140) && (buff
 7714               	 r18,r24
 7715               		ldi r19,lo8(0)
 7716 2a58 8091 0000 		lds r24,val_min
 7717 2a5c 8932      		lds r25,(val_min)+1
 7718 2a5e 00F0      		add r24,r18
 7719 2a60 8091 0000 		adc r25,r19
 7720 2a64 8E33      		sbiw r24,48
 7721 2a66 00F4      		sts (val_min)+1,r25
 7722 2a68 8091 0000 		sts val_min,r24
 7724 2a70 8C38      	.LM650:
 7725 2a72 9105      		lds r24,num_input_max_temp
 7726 2a74 00F0      		mov r24,r24
 7727 2a76 8091 0000 		ldi r25,lo8(0)
 7728 2a7a 9091 0000 		movw r18,r24
 7729 2a7e 813A      		lsl r18
 7730 2a80 9105      		rol r19
 7731 2a82 00F4      		movw r24,r18
 315:main.c        **** 			num_pad_pressed[10]++;
 7732               		lsl r24
 7733               		rol r25
 7734 2a84 8091 0000 		add r24,r18
 7735 2a88 8F5F      		adc r25,r19
 7736 2a8a 8093 0000 		subi r24,lo8(-(-480))
 7737 2a8e 00C0      		sbci r25,hi8(-(-480))
 7738               		sts (val_max)+1,r25
 316:main.c        **** 		else
 317:main.c        **** 			num_pad_pressed[10] = 0;
 7739               	l_max,r24
 7741 2a90 1092 0000 	.LM651:
 7742               		lds r24,num_input_max_temp+1
 318:main.c        **** 			//g_draw_string(100, 2, "r");
 319:main.c        **** 		if ((buffer_touch_ad_y >= 62) && (buffer_touch_ad_y <= 80) && (buffer_touch_ad_x >= 140) && (buff
 7743               	 r18,r24
 7744               		ldi r19,lo8(0)
 7745 2a94 8091 0000 		lds r24,val_max
 7746 2a98 8E33      		lds r25,(val_max)+1
 7747 2a9a 00F0      		add r24,r18
 7748 2a9c 8091 0000 		adc r25,r19
 7749 2aa0 8135      		sbiw r24,48
 7750 2aa2 00F4      		sts (val_max)+1,r25
 7751 2aa4 8091 0000 		sts val_max,r24
 7753 2aac 8C38      	.LM652:
 7754 2aae 9105      		lds r18,val_max
 7755 2ab0 00F0      		lds r19,(val_max)+1
 7756 2ab2 8091 0000 		lds r24,val_min
 7757 2ab6 9091 0000 		lds r25,(val_min)+1
 7758 2aba 813A      		cp r18,r24
 7759 2abc 9105      		cpc r19,r25
 7760 2abe 00F4      		brsh .L251
 320:main.c        **** 			num_pad_pressed[11]++;
 7761               	LM653-.LFBB36
 7762               	.LM653:
 7763 2ac0 8091 0000 		ldi r18,lo8(.LC19)
 7764 2ac4 8F5F      		ldi r19,hi8(.LC19)
 7765 2ac6 8093 0000 		ldi r24,lo8(5)
 7766 2aca 00C0      		ldi r25,hi8(5)
 7767               		ldi r22,lo8(7)
 321:main.c        **** 		else
 322:main.c        **** 			num_pad_pressed[11] = 0;
 7768               	3,hi8(7)
 7769               		movw r20,r18
 7770 2acc 1092 0000 		call g_draw_string
 323:main.c        **** 			//g_draw_string(100, 2, "b");
 324:main.c        **** 		
 325:main.c        **** 		
 326:main.c        **** 		switch (num_pad_value_control)
 7772               	54:
 7773               		ldi r24,lo8(3000)
 7774 2ad0 8091 0000 		ldi r25,hi8(3000)
 7775 2ad4 282F      		call delay_ms
 7777 2ad8 3D83      	.LM655:
 7778 2ada 2C83      		sts num_pad_value_control,__zero_reg__
 7779 2adc 4C81      		rjmp .L245
 7780 2ade 5D81      	.L251:
 7782 2ae2 5105      	.LM656:
 7783 2ae4 01F0      		lds r24,num_input_refr_time
 7784 2ae6 8C81      		mov r24,r24
 7785 2ae8 9D81      		ldi r25,lo8(0)
 7786 2aea 8230      		movw r18,r24
 7787 2aec 9105      		subi r18,lo8(-(-48))
 7788 2aee 04F4      		sbci r19,hi8(-(-48))
 7789 2af0 2C81      		ldi r24,lo8(1000)
 7790 2af2 3D81      		ldi r25,hi8(1000)
 7791 2af4 2115      		movw r20,r24
 7792 2af6 3105      		mul r18,r20
 7793 2af8 01F0      		movw r24,r0
 7794 2afa 00C0      		mul r18,r21
 7795               		add r25,r0
 7796 2afc 4C81      		mul r19,r20
 7797 2afe 5D81      		add r25,r0
 7798 2b00 4230      		clr r1
 7799 2b02 5105      		sts (val_refr)+1,r25
 7800 2b04 01F4      		sts val_refr,r24
 7802 2b08 8C81      	.LM657:
 7803 2b0a 9D81      		lds r24,num_input_refr_time+1
 7804 2b0c 8330      		mov r18,r24
 7805 2b0e 9105      		ldi r19,lo8(0)
 7806 2b10 01F4      		ldi r24,lo8(100)
 7807 2b12 00C0      		ldi r25,hi8(100)
 7808 2b14 00C0      		movw r20,r24
 7809               		mul r18,r20
 327:main.c        **** 		{
 328:main.c        **** 			case 0:
 329:main.c        **** 				g_draw_string(5, 7, "Enter min. Temp: ");
 7810               		mul r19,r20
 7811               		add r25,r0
 7812 2b16 20E0      		clr r1
 7813 2b18 30E0      		movw r18,r24
 7814 2b1a 85E0      		lds r24,val_refr
 7815 2b1c 90E0      		lds r25,(val_refr)+1
 7816 2b1e 67E0      		add r24,r18
 7817 2b20 70E0      		adc r25,r19
 7818 2b22 A901      		subi r24,lo8(-(-4800))
 7819 2b24 0E94 0000 		sbci r25,hi8(-(-4800))
 330:main.c        **** 				g_draw_string(107, 7, num_input_min_temp);
 7820               	refr)+1,r25
 7821               		sts val_refr,r24
 7823 2b2a 30E0      	.LM658:
 7824 2b2c 8BE6      		lds r24,num_input_refr_time+2
 7825 2b2e 90E0      		mov r24,r24
 7826 2b30 67E0      		ldi r25,lo8(0)
 7827 2b32 70E0      		movw r18,r24
 7828 2b34 A901      		lsl r18
 7829 2b36 0E94 0000 		rol r19
 331:main.c        **** 				g_draw_string(125, 7, "C");
 7830               	r18
 7831               		lsl r24
 7832 2b3a 20E0      		rol r25
 7833 2b3c 30E0      		lsl r24
 7834 2b3e 8DE7      		rol r25
 7835 2b40 90E0      		add r24,r18
 7836 2b42 67E0      		adc r25,r19
 7837 2b44 70E0      		movw r18,r24
 7838 2b46 A901      		lds r24,val_refr
 7839 2b48 0E94 0000 		lds r25,(val_refr)+1
 332:main.c        **** #ifdef GRAD_ON
 333:main.c        **** 				draw_grad(119, 6);
 7840               	18
 7841               		adc r25,r19
 7842 2b4c 87E7      		subi r24,lo8(-(-480))
 7843 2b4e 66E0      		sbci r25,hi8(-(-480))
 7844 2b50 0E94 0000 		sts (val_refr)+1,r25
 7845 2b54 00C0      		sts val_refr,r24
 334:main.c        **** #endif
 335:main.c        **** 				break;
 336:main.c        **** 			case 1:
 337:main.c        **** 				g_draw_string(5, 7, "Enter max. Temp: ");
 7847               	
 7848               		lds r24,num_input_refr_time+3
 7849 2b56 20E0      		mov r18,r24
 7850 2b58 30E0      		ldi r19,lo8(0)
 7851 2b5a 85E0      		lds r24,val_refr
 7852 2b5c 90E0      		lds r25,(val_refr)+1
 7853 2b5e 67E0      		add r24,r18
 7854 2b60 70E0      		adc r25,r19
 7855 2b62 A901      		sbiw r24,48
 7856 2b64 0E94 0000 		sts (val_refr)+1,r25
 338:main.c        **** 				g_draw_string(107, 7, num_input_max_temp);
 7857               	refr,r24
 7859 2b68 20E0      	.LM660:
 7860 2b6a 30E0      		lds r24,val_refr
 7861 2b6c 8BE6      		lds r25,(val_refr)+1
 7862 2b6e 90E0      		ldi r21,hi8(1001)
 7863 2b70 67E0      		cpi r24,lo8(1001)
 7864 2b72 70E0      		cpc r25,r21
 7865 2b74 A901      		brlo .L252
 339:main.c        **** 				g_draw_string(125, 7, "C");
 7867               	di r18,lo8(.LC20)
 7868               		ldi r19,hi8(.LC20)
 7869 2b7a 20E0      		ldi r24,lo8(5)
 7870 2b7c 30E0      		ldi r25,hi8(5)
 7871 2b7e 8DE7      		ldi r22,lo8(7)
 7872 2b80 90E0      		ldi r23,hi8(7)
 7873 2b82 67E0      		movw r20,r18
 7874 2b84 70E0      		call g_draw_string
 7876 2b88 0E94 0000 	.LM662:
 340:main.c        **** #ifdef GRAD_ON
 341:main.c        **** 				draw_grad(119, 6);
 7877               	o8(3000)
 7878               		ldi r25,hi8(3000)
 7879 2b8c 87E7      		call delay_ms
 7881 2b90 0E94 0000 	.LM663:
 7882 2b94 00C0      		ldi r24,lo8(2)
 7883               		sts num_pad_value_control,r24
 342:main.c        **** #endif
 343:main.c        **** 				break;
 344:main.c        **** 			case 2:
 345:main.c        **** 				g_draw_string(5, 7, "Enter ref. Time: ");
 7884               	L245
 7885               	.L252:
 7887 2b98 30E0      	.LM664:
 7888 2b9a 85E0      		lds r24,val_min
 7889 2b9c 90E0      		lds r25,(val_min)+1
 7890 2b9e 67E0      		adiw r24,1
 7891 2ba0 70E0      		lsr r25
 7892 2ba2 A901      		ror r24
 7893 2ba4 0E94 0000 		sts bar_1_height,r24
 346:main.c        **** 				g_draw_string(107, 7, num_input_refr_time);
 7894               	,0,376,.LM665-.LFBB36
 7895               	.LM665:
 7896 2ba8 20E0      		lds r24,val_max
 7897 2baa 30E0      		lds r25,(val_max)+1
 7898 2bac 8BE6      		adiw r24,1
 7899 2bae 90E0      		lsr r25
 7900 2bb0 67E0      		ror r24
 7901 2bb2 70E0      		sts bar_2_height,r24
 7903 2bb6 0E94 0000 	.LM666:
 7904 2bba 00C0      		ldi r24,lo8(4)
 7905               		sts num_pad_value_control,r24
 347:main.c        **** 				break;
 348:main.c        **** 			case 3:
 349:main.c        **** 				val_min = (num_input_min_temp[0] - 48)*10;
 7906               	,378,.LM667-.LFBB36
 7907               	.LM667:
 7908 2bbc 8091 0000 		lds r24,val_min
 7909 2bc0 882F      		lds r25,(val_min)+1
 7910 2bc2 90E0      		movw r24,r24
 7911 2bc4 9C01      		ldi r26,lo8(0)
 7912 2bc6 220F      		ldi r27,hi8(0)
 7913 2bc8 331F      		movw r22,r24
 7914 2bca C901      		movw r24,r26
 7915 2bcc 880F      		call __floatunsisf
 7916 2bce 991F      		movw r26,r24
 7917 2bd0 880F      		movw r24,r22
 7918 2bd2 991F      		movw r22,r24
 7919 2bd4 820F      		movw r24,r26
 7920 2bd6 931F      		ldi r18,lo8(0x3dc63172)
 7921 2bd8 805E      		ldi r19,hi8(0x3dc63172)
 7922 2bda 9140      		ldi r20,hlo8(0x3dc63172)
 7923 2bdc 9093 0000 		ldi r21,hhi8(0x3dc63172)
 7924 2be0 8093 0000 		call __divsf3
 350:main.c        **** 				val_min += (num_input_min_temp[1] - 48)*1;
 7925               	 r24,r22
 7926               		movw r22,r24
 7927 2be4 8091 0000 		movw r24,r26
 7928 2be8 282F      		call round
 7929 2bea 30E0      		movw r26,r24
 7930 2bec 8091 0000 		movw r24,r22
 7931 2bf0 9091 0000 		movw r22,r24
 7932 2bf4 820F      		movw r24,r26
 7933 2bf6 931F      		call __fixunssfsi
 7934 2bf8 C097      		movw r26,r24
 7935 2bfa 9093 0000 		movw r24,r22
 7936 2bfe 8093 0000 		sts (val_min)+1,r25
 351:main.c        **** 
 352:main.c        **** 				val_max = (num_input_max_temp[0] - 48)*10;
 7937               	,r24
 7939 2c02 8091 0000 	.LM668:
 7940 2c06 882F      		lds r24,val_max
 7941 2c08 90E0      		lds r25,(val_max)+1
 7942 2c0a 9C01      		movw r24,r24
 7943 2c0c 220F      		ldi r26,lo8(0)
 7944 2c0e 331F      		ldi r27,hi8(0)
 7945 2c10 C901      		movw r22,r24
 7946 2c12 880F      		movw r24,r26
 7947 2c14 991F      		call __floatunsisf
 7948 2c16 880F      		movw r26,r24
 7949 2c18 991F      		movw r24,r22
 7950 2c1a 820F      		movw r22,r24
 7951 2c1c 931F      		movw r24,r26
 7952 2c1e 805E      		ldi r18,lo8(0x3dc63172)
 7953 2c20 9140      		ldi r19,hi8(0x3dc63172)
 7954 2c22 9093 0000 		ldi r20,hlo8(0x3dc63172)
 7955 2c26 8093 0000 		ldi r21,hhi8(0x3dc63172)
 353:main.c        **** 				val_max += (num_input_max_temp[1] - 48)*1;
 7956               	w r26,r24
 7957               		movw r24,r22
 7958 2c2a 8091 0000 		movw r22,r24
 7959 2c2e 282F      		movw r24,r26
 7960 2c30 30E0      		call round
 7961 2c32 8091 0000 		movw r26,r24
 7962 2c36 9091 0000 		movw r24,r22
 7963 2c3a 820F      		movw r22,r24
 7964 2c3c 931F      		movw r24,r26
 7965 2c3e C097      		call __fixunssfsi
 7966 2c40 9093 0000 		movw r26,r24
 7967 2c44 8093 0000 		movw r24,r22
 354:main.c        **** 				
 355:main.c        **** 				if (val_max < val_min)
 7968               	x)+1,r25
 7969               		sts val_max,r24
 7971 2c4c 3091 0000 	.LM669:
 7972 2c50 8091 0000 		std Y+1,__zero_reg__
 7973 2c54 9091 0000 		rjmp .L253
 7974 2c58 2817      	.L254:
 7976 2c5c 00F4      	.LM670:
 356:main.c        **** 				{
 357:main.c        **** 					g_draw_string(5, 7, "Error: Min > Max Temp!  ");
 7977               	Y+1
 7978               		mov r18,r24
 7979 2c5e 20E0      		ldi r19,lo8(0)
 7980 2c60 30E0      		ldd r24,Y+1
 7981 2c62 85E0      		mov r24,r24
 7982 2c64 90E0      		ldi r25,lo8(0)
 7983 2c66 67E0      		movw r30,r24
 7984 2c68 70E0      		subi r30,lo8(-(num_input_refr_time))
 7985 2c6a A901      		sbci r31,hi8(-(num_input_refr_time))
 7986 2c6c 0E94 0000 		ld r24,Z
 358:main.c        **** 					delay_ms(3000);
 7987               	r18
 7988               		subi r30,lo8(-(val_refr_bcd))
 7989 2c70 88EB      		sbci r31,hi8(-(val_refr_bcd))
 7990 2c72 9BE0      		st Z,r24
 359:main.c        **** 					num_pad_value_control = 0;					
 7992               	1:
 7993               		ldd r24,Y+1
 7994 2c78 1092 0000 		mov r18,r24
 7995 2c7c 00C0      		ldi r19,lo8(0)
 7996               		ldd r24,Y+1
 360:main.c        **** 				}
 361:main.c        **** 				else
 362:main.c        **** 				{
 363:main.c        **** 					val_refr = (num_input_refr_time[0] - 48)*1000;
 7997               	r24,r24
 7998               		ldi r25,lo8(0)
 7999 2c7e 8091 0000 		movw r30,r24
 8000 2c82 882F      		subi r30,lo8(-(num_input_min_temp))
 8001 2c84 90E0      		sbci r31,hi8(-(num_input_min_temp))
 8002 2c86 9C01      		ld r24,Z
 8003 2c88 2053      		movw r30,r18
 8004 2c8a 3040      		subi r30,lo8(-(val_min_bcd))
 8005 2c8c 88EE      		sbci r31,hi8(-(val_min_bcd))
 8006 2c8e 93E0      		st Z,r24
 8008 2c92 249F      	.LM672:
 8009 2c94 C001      		ldd r24,Y+1
 8010 2c96 259F      		mov r18,r24
 8011 2c98 900D      		ldi r19,lo8(0)
 8012 2c9a 349F      		ldd r24,Y+1
 8013 2c9c 900D      		mov r24,r24
 8014 2c9e 1124      		ldi r25,lo8(0)
 8015 2ca0 9093 0000 		movw r30,r24
 8016 2ca4 8093 0000 		subi r30,lo8(-(num_input_max_temp))
 364:main.c        **** 					val_refr += (num_input_refr_time[1] - 48)*100;
 8017               	input_max_temp))
 8018               		ld r24,Z
 8019 2ca8 8091 0000 		movw r30,r18
 8020 2cac 282F      		subi r30,lo8(-(val_max_bcd))
 8021 2cae 30E0      		sbci r31,hi8(-(val_max_bcd))
 8022 2cb0 84E6      		st Z,r24
 8024 2cb4 AC01      	.LM673:
 8025 2cb6 249F      		ldd r24,Y+1
 8026 2cb8 C001      		subi r24,lo8(-(1))
 8027 2cba 259F      		std Y+1,r24
 8028 2cbc 900D      	.L253:
 8029 2cbe 349F      		ldd r24,Y+1
 8030 2cc0 900D      		cpi r24,lo8(4)
 8031 2cc2 1124      		brlo .L254
 8032 2cc4 9C01      	.L245:
 8034 2cca 9091 0000 	.LM674:
 8035 2cce 820F      		sts i_count,__zero_reg__
 8037 2cd2 805C      	.LM675:
 8038 2cd4 9241      		std Y+1,__zero_reg__
 8039 2cd6 9093 0000 		rjmp .L255
 8040 2cda 8093 0000 	.L266:
 365:main.c        **** 					val_refr += (num_input_refr_time[2] - 48)*10;
 8041               	.LFBB36
 8042               	.LM676:
 8043 2cde 8091 0000 		ldd r24,Y+1
 8044 2ce2 882F      		mov r24,r24
 8045 2ce4 90E0      		ldi r25,lo8(0)
 8046 2ce6 9C01      		movw r30,r24
 8047 2ce8 220F      		subi r30,lo8(-(num_pad_pressed))
 8048 2cea 331F      		sbci r31,hi8(-(num_pad_pressed))
 8049 2cec C901      		ld r24,Z
 8050 2cee 880F      		cpi r24,lo8(2)
 8051 2cf0 991F      		brlo .L256
 8053 2cf4 991F      	.LM677:
 8054 2cf6 820F      		lds r24,i_count
 8055 2cf8 931F      		subi r24,lo8(-(1))
 8056 2cfa 9C01      		sts i_count,r24
 8057 2cfc 8091 0000 	.L256:
 8059 2d04 820F      	.LM678:
 8060 2d06 931F      		ldd r24,Y+1
 8061 2d08 805E      		mov r24,r24
 8062 2d0a 9140      		ldi r25,lo8(0)
 8063 2d0c 9093 0000 		movw r30,r24
 8064 2d10 8093 0000 		subi r30,lo8(-(num_pad_pressed))
 366:main.c        **** 					val_refr += (num_input_refr_time[3] - 48)*1;
 8065               	pressed))
 8066               		ld r24,Z
 8067 2d14 8091 0000 		cpi r24,lo8(2)
 8068 2d18 282F      		brsh .+2
 8069 2d1a 30E0      		rjmp .L257
 8070 2d1c 8091 0000 		lds r24,num_pad_input_recognised
 8071 2d20 9091 0000 		tst r24
 8072 2d24 820F      		breq .+2
 8073 2d26 931F      		rjmp .L257
 8075 2d2a 9093 0000 	.LM679:
 8076 2d2e 8093 0000 		ldi r24,lo8(1)
 367:main.c        **** 					if (val_refr > 1000)
 8077               	_input_recognised,r24
 8079 2d32 8091 0000 	.LM680:
 8080 2d36 9091 0000 		ldd r24,Y+1
 8081 2d3a 53E0      		cpi r24,lo8(10)
 8082 2d3c 893E      		brne .L258
 8084 2d40 00F0      	.LM681:
 368:main.c        **** 					{
 369:main.c        **** 						g_draw_string(5, 7, "Error: Ref Time > 1000! ");
 8085               	,num_pad_value_control
 8086               		subi r24,lo8(-(1))
 8087 2d42 20E0      		sts num_pad_value_control,r24
 8089 2d46 85E0      	.LM682:
 8090 2d48 90E0      		sts num_pad_cursor_pos,__zero_reg__
 8091 2d4a 67E0      		rjmp .L257
 8092 2d4c 70E0      	.L258:
 8094 2d50 0E94 0000 	.LM683:
 370:main.c        **** 						delay_ms(3000);
 8095               	+1
 8096               		cpi r24,lo8(11)
 8097 2d54 88EB      		brne .L259
 8099 2d58 0E94 0000 	.LM684:
 371:main.c        **** 						num_pad_value_control = 2;
 8100               	r24,num_pad_value_control
 8101               		tst r24
 8102 2d5c 82E0      		breq .L260
 8104 2d62 00C0      	.LM685:
 8105               		lds r24,num_pad_value_control
 372:main.c        **** 					}
 373:main.c        **** 					else
 374:main.c        **** 					{
 375:main.c        **** 						bar_1_height = (val_min + 1) / 2;
 8106               	r24,lo8(-(-1))
 8107               		sts num_pad_value_control,r24
 8109 2d68 9091 0000 	.LM686:
 8110 2d6c 0196      		ldi r18,lo8(.LC21)
 8111 2d6e 9695      		ldi r19,hi8(.LC21)
 8112 2d70 8795      		ldi r24,lo8(107)
 8113 2d72 8093 0000 		ldi r25,hi8(107)
 376:main.c        **** 						bar_2_height = (val_max + 1) / 2;
 8114               	,lo8(7)
 8115               		ldi r23,hi8(7)
 8116 2d76 8091 0000 		movw r20,r18
 8117 2d7a 9091 0000 		call g_draw_string
 8118 2d7e 0196      	.L260:
 8120 2d82 8795      	.LM687:
 8121 2d84 8093 0000 		sts num_pad_cursor_pos,__zero_reg__
 377:main.c        **** 						num_pad_value_control = 4;
 8122               	257
 8123               	.L259:
 8125 2d8a 8093 0000 	.LM688:
 378:main.c        **** 						val_min = round((double)val_min / 0.096774);
 8126               	 r24,num_pad_value_control
 8127               		mov r18,r24
 8128 2d8e 8091 0000 		ldi r19,lo8(0)
 8129 2d92 9091 0000 		std Y+3,r19
 8130 2d96 CC01      		std Y+2,r18
 8131 2d98 A0E0      		ldd r20,Y+2
 8132 2d9a B0E0      		ldd r21,Y+3
 8133 2d9c BC01      		cpi r20,1
 8134 2d9e CD01      		cpc r21,__zero_reg__
 8135 2da0 0E94 0000 		breq .L262
 8136 2da4 DC01      		ldd r24,Y+2
 8137 2da6 CB01      		ldd r25,Y+3
 8138 2da8 BC01      		cpi r24,2
 8139 2daa CD01      		cpc r25,__zero_reg__
 8140 2dac 22E7      		breq .L263
 8141 2dae 31E3      		ldd r18,Y+2
 8142 2db0 46EC      		ldd r19,Y+3
 8143 2db2 5DE3      		cp r18,__zero_reg__
 8144 2db4 0E94 0000 		cpc r19,__zero_reg__
 8145 2db8 DC01      		breq .+2
 8146 2dba CB01      		rjmp .L257
 8147 2dbc BC01      	.L261:
 8149 2dc0 0E94 0000 	.LM689:
 8150 2dc4 DC01      		lds r24,num_pad_cursor_pos
 8151 2dc6 CB01      		mov r18,r24
 8152 2dc8 BC01      		ldi r19,lo8(0)
 8153 2dca CD01      		ldd r24,Y+1
 8154 2dcc 0E94 0000 		subi r24,lo8(-(48))
 8155 2dd0 DC01      		movw r30,r18
 8156 2dd2 CB01      		subi r30,lo8(-(num_input_min_temp))
 8157 2dd4 9093 0000 		sbci r31,hi8(-(num_input_min_temp))
 8158 2dd8 8093 0000 		st Z,r24
 379:main.c        **** 						val_max = round((double)val_max / 0.096774);
 8159               	LM690:
 8160               		lds r24,num_pad_cursor_pos
 8161 2ddc 8091 0000 		subi r24,lo8(-(1))
 8162 2de0 9091 0000 		sts num_pad_cursor_pos,r24
 8164 2de6 A0E0      	.LM691:
 8165 2de8 B0E0      		lds r24,num_pad_cursor_pos
 8166 2dea BC01      		cpi r24,lo8(2)
 8167 2dec CD01      		brne .L257
 8169 2df2 DC01      	.LM692:
 8170 2df4 CB01      		sts num_pad_cursor_pos,__zero_reg__
 8171 2df6 BC01      		rjmp .L257
 8172 2df8 CD01      	.L262:
 8174 2dfc 31E3      	.LM693:
 8175 2dfe 46EC      		lds r24,num_pad_cursor_pos
 8176 2e00 5DE3      		mov r18,r24
 8177 2e02 0E94 0000 		ldi r19,lo8(0)
 8178 2e06 DC01      		ldd r24,Y+1
 8179 2e08 CB01      		subi r24,lo8(-(48))
 8180 2e0a BC01      		movw r30,r18
 8181 2e0c CD01      		subi r30,lo8(-(num_input_max_temp))
 8182 2e0e 0E94 0000 		sbci r31,hi8(-(num_input_max_temp))
 8183 2e12 DC01      		st Z,r24
 8185 2e16 BC01      	.LM694:
 8186 2e18 CD01      		lds r24,num_pad_cursor_pos
 8187 2e1a 0E94 0000 		subi r24,lo8(-(1))
 8188 2e1e DC01      		sts num_pad_cursor_pos,r24
 8190 2e22 9093 0000 	.LM695:
 8191 2e26 8093 0000 		lds r24,num_pad_cursor_pos
 380:main.c        **** 						for (i = 0; i <= 3; i++)
 8192               	bn	68,0,429,.LM696-.LFBB36
 8193               	.LM696:
 8194 2e2a 1982      		sts num_pad_cursor_pos,__zero_reg__
 8195 2e2c 00C0      		rjmp .L257
 8196               	.L263:
 381:main.c        **** 						{
 382:main.c        **** 							val_refr_bcd[i] = num_input_refr_time[i];
 8197               	bn	68,0,432,.LM697-.LFBB36
 8198               	.LM697:
 8199 2e2e 8981      		lds r24,num_pad_cursor_pos
 8200 2e30 282F      		mov r18,r24
 8201 2e32 30E0      		ldi r19,lo8(0)
 8202 2e34 8981      		ldd r24,Y+1
 8203 2e36 882F      		subi r24,lo8(-(48))
 8204 2e38 90E0      		movw r30,r18
 8205 2e3a FC01      		subi r30,lo8(-(num_input_refr_time))
 8206 2e3c E050      		sbci r31,hi8(-(num_input_refr_time))
 8207 2e3e F040      		st Z,r24
 8209 2e42 F901      	.LM698:
 8210 2e44 E050      		lds r24,num_pad_cursor_pos
 8211 2e46 F040      		subi r24,lo8(-(1))
 8212 2e48 8083      		sts num_pad_cursor_pos,r24
 383:main.c        **** 							val_min_bcd[i] = num_input_min_temp[i];
 8213               	,.LM699-.LFBB36
 8214               	.LM699:
 8215 2e4a 8981      		lds r24,num_pad_cursor_pos
 8216 2e4c 282F      		cpi r24,lo8(4)
 8217 2e4e 30E0      		brne .L257
 8219 2e52 882F      	.LM700:
 8220 2e54 90E0      		sts num_pad_cursor_pos,__zero_reg__
 8221 2e56 FC01      	.L257:
 8223 2e5a F040      	.LM701:
 8224 2e5c 8081      		ldd r24,Y+1
 8225 2e5e F901      		subi r24,lo8(-(1))
 8226 2e60 E050      		std Y+1,r24
 8227 2e62 F040      	.L255:
 8228 2e64 8083      		ldd r24,Y+1
 384:main.c        **** 							val_max_bcd[i] = num_input_max_temp[i];
 8229               	
 8230               		brsh .+2
 8231 2e66 8981      		rjmp .L266
 8233 2e6a 30E0      	.LM702:
 8234 2e6c 8981      		lds r24,i_count
 8235 2e6e 882F      		tst r24
 8236 2e70 90E0      		brne .L267
 8238 2e74 E050      	.LM703:
 8239 2e76 F040      		sts num_pad_input_recognised,__zero_reg__
 8240 2e78 8081      	.L267:
 8242 2e7c E050      	.LM704:
 8243 2e7e F040      		std Y+1,__zero_reg__
 8244 2e80 8083      		rjmp .L268
 8245               	.L269:
 8247 2e82 8981      	.LM705:
 8248 2e84 8F5F      		ldd r24,Y+1
 8249 2e86 8983      		mov r24,r24
 8250               		ldi r25,lo8(0)
 8251 2e88 8981      		subi r24,lo8(-(105))
 8252 2e8a 8430      		sbci r25,hi8(-(105))
 8253 2e8c 00F0      		ldi r22,lo8(16)
 8254               		ldi r23,hi8(16)
 385:main.c        **** 						}
 386:main.c        **** 					}	
 387:main.c        **** 				}
 388:main.c        **** 				break;
 389:main.c        **** 		}
 390:main.c        **** 		
 391:main.c        **** 		i_count = 0;
 8255               	_graphics_plot_pixel
 8257 2e8e 1092 0000 	.LM706:
 392:main.c        **** 		for (i = 0; i <= 11; i++)
 8258               	d r24,Y+1
 8259               		subi r24,lo8(-(1))
 8260 2e92 1982      		std Y+1,r24
 8261 2e94 00C0      	.L268:
 8262               		ldd r24,Y+1
 393:main.c        **** 		{
 394:main.c        **** 			if (num_pad_pressed[i] >= 2)
 8263               	r24,lo8(41)
 8264               		brlo .L269
 8266 2e98 882F      	.LM707:
 8267 2e9a 90E0      		lds r24,num_pad_cursor_pos
 8268 2e9c FC01      		mov r18,r24
 8269 2e9e E050      		ldi r19,lo8(0)
 8270 2ea0 F040      		movw r24,r18
 8271 2ea2 8081      		lsl r24
 8272 2ea4 8230      		rol r25
 8273 2ea6 00F0      		add r24,r18
 395:main.c        **** 			{
 396:main.c        **** 				i_count++;
 8274               	9
 8275               		lsl r24
 8276 2ea8 8091 0000 		rol r25
 8277 2eac 8F5F      		subi r24,lo8(-(107))
 8278 2eae 8093 0000 		sbci r25,hi8(-(107))
 8279               		ldi r22,lo8(16)
 397:main.c        **** 			}
 398:main.c        **** 			if ((num_pad_pressed[i] >= 2) && !(num_pad_input_recognised))
 8280               	23,hi8(16)
 8281               		ldi r20,lo8(5)
 8282 2eb2 8981      		ldi r21,hi8(5)
 8283 2eb4 882F      		call g_draw_horizontal_line
 8284 2eb6 90E0      	.L218:
 8286 2eba E050      	.LM708:
 8287 2ebc F040      		lds r24,num_pad_value_control
 8288 2ebe 8081      		cpi r24,lo8(4)
 8289 2ec0 8230      		breq .+2
 8290 2ec2 00F4      		rjmp .L270
 8291 2ec4 00C0      	/* epilogue start */
 8293 2eca 8823      	.LM709:
 8294 2ecc 01F0      		pop __tmp_reg__
 8295 2ece 00C0      		pop __tmp_reg__
 399:main.c        **** 			{
 400:main.c        **** 				num_pad_input_recognised = 1;
 8296               	
 8297               		pop __tmp_reg__
 8298 2ed0 81E0      		pop __tmp_reg__
 8299 2ed2 8093 0000 		pop r28
 401:main.c        **** 				if (i == 10)
 8300               	p r29
 8301               		ret
 402:main.c        **** 				{
 403:main.c        **** 					num_pad_value_control++;
 8305               	bn	224,0,0,.Lscope36-.LFBB36
 8306               	.Lscope36:
 8307 2edc 8091 0000 		.data
 8308 2ee0 8F5F      	.LC22:
 8309 2ee2 8093 0000 		.string	"Min"
 404:main.c        **** 					num_pad_cursor_pos = 0;
 8310               	:
 8311               		.string	"Max"
 8312 2ee6 1092 0000 	.LC24:
 8313 2eea 00C0      		.string	"T_refr"
 8314               	.LC25:
 405:main.c        **** 				}
 406:main.c        **** 				else if (i == 11)
 8315               	ing	"Error:   "
 8316               	.LC26:
 8317 2eec 8981      		.string	"Val_min  "
 8318 2eee 8B30      	.LC27:
 8319 2ef0 01F4      		.string	">        "
 407:main.c        **** 				{
 408:main.c        **** 					if (num_pad_value_control != 0)
 8320               	:
 8321               		.string	"Val_max! "
 8322 2ef2 8091 0000 	.LC29:
 8323 2ef6 8823      		.string	"         "
 8324 2ef8 01F0      		.text
 409:main.c        **** 					{
 410:main.c        **** 						num_pad_value_control--;
 8325               	bs	"call_slider_mode:F(0,15)",36,0,0,call_slider_mode
 8326               	.global	call_slider_mode
 8328 2efe 8150      	call_slider_mode:
 411:main.c        **** 						g_draw_string(107, 7, "      ");
 8330               	0:
 8331               	.LFBB37:
 8332 2f04 20E0      		push r29
 8333 2f06 30E0      		push r28
 8334 2f08 8BE6      		push __tmp_reg__
 8335 2f0a 90E0      		in r28,__SP_L__
 8336 2f0c 67E0      		in r29,__SP_H__
 8337 2f0e 70E0      	/* prologue: function */
 8338 2f10 A901      	/* frame size = 1 */
 8340               	.LM711:
 412:main.c        **** 					}
 413:main.c        **** 					num_pad_cursor_pos = 0;
 8341               	raphics_clear
 8343 2f16 1092 0000 	.LM712:
 8344 2f1a 00C0      		ldi r24,lo8(0)
 8345               		ldi r25,hi8(0)
 414:main.c        **** 				}
 415:main.c        **** 				else 
 416:main.c        **** 				{
 417:main.c        **** 					switch (num_pad_value_control)
 8346               	r22,lo8(0)
 8347               		ldi r23,hi8(0)
 8348 2f1c 8091 0000 		ldi r20,lo8(160)
 8349 2f20 282F      		ldi r21,hi8(160)
 8350 2f22 30E0      		ldi r18,lo8(80)
 8351 2f24 3B83      		ldi r19,hi8(80)
 8352 2f26 2A83      		call g_draw_rectangle
 8354 2f2a 5B81      	.LM713:
 8355 2f2c 4130      		ldi r18,lo8(.LC22)
 8356 2f2e 5105      		ldi r19,hi8(.LC22)
 8357 2f30 01F0      		ldi r24,lo8(7)
 8358 2f32 8A81      		ldi r25,hi8(7)
 8359 2f34 9B81      		ldi r22,lo8(70)
 8360 2f36 8230      		ldi r23,hi8(70)
 8361 2f38 9105      		movw r20,r18
 8362 2f3a 01F0      		call g_draw_string
 8364 2f3e 3B81      	.LM714:
 8365 2f40 2115      		ldi r24,lo8(10)
 8366 2f42 3105      		ldi r25,hi8(10)
 8367 2f44 01F0      		ldi r22,lo8(15)
 8368 2f46 00C0      		ldi r23,hi8(15)
 8369               		ldi r20,lo8(9)
 418:main.c        **** 					{
 419:main.c        **** 						case 0:
 420:main.c        **** 							num_input_min_temp[num_pad_cursor_pos] = i+48;
 8370               	,lo8(52)
 8371               		ldi r19,hi8(52)
 8372 2f48 8091 0000 		call g_draw_rectangle
 8374 2f4e 30E0      	.LM715:
 8375 2f50 8981      		ldi r18,lo8(.LC23)
 8376 2f52 805D      		ldi r19,hi8(.LC23)
 8377 2f54 F901      		ldi r24,lo8(52)
 8378 2f56 E050      		ldi r25,hi8(52)
 8379 2f58 F040      		ldi r22,lo8(70)
 8380 2f5a 8083      		ldi r23,hi8(70)
 421:main.c        **** 							num_pad_cursor_pos++;
 8381               	18
 8382               		call g_draw_string
 8384 2f60 8F5F      	.LM716:
 8385 2f62 8093 0000 		ldi r24,lo8(55)
 422:main.c        **** 							if (num_pad_cursor_pos == 2)
 8386               	r25,hi8(55)
 8387               		ldi r22,lo8(15)
 8388 2f66 8091 0000 		ldi r23,hi8(15)
 8389 2f6a 8230      		ldi r20,lo8(9)
 8390 2f6c 01F4      		ldi r21,hi8(9)
 423:main.c        **** 								num_pad_cursor_pos = 0;
 8391               	r18,lo8(52)
 8392               		ldi r19,hi8(52)
 8393 2f6e 1092 0000 		call g_draw_rectangle
 8395               	.LM717:
 424:main.c        **** 							break;
 425:main.c        **** 						case 1:
 426:main.c        **** 							num_input_max_temp[num_pad_cursor_pos] = i+48;
 8396               	r18,lo8(.LC24)
 8397               		ldi r19,hi8(.LC24)
 8398 2f74 8091 0000 		ldi r24,lo8(90)
 8399 2f78 282F      		ldi r25,hi8(90)
 8400 2f7a 30E0      		ldi r22,lo8(70)
 8401 2f7c 8981      		ldi r23,hi8(70)
 8402 2f7e 805D      		movw r20,r18
 8403 2f80 F901      		call g_draw_string
 8405 2f84 F040      	.LM718:
 8406 2f86 8083      		ldi r24,lo8(100)
 427:main.c        **** 							num_pad_cursor_pos++;
 8407               	8(100)
 8408               		ldi r22,lo8(15)
 8409 2f88 8091 0000 		ldi r23,hi8(15)
 8410 2f8c 8F5F      		ldi r20,lo8(9)
 8411 2f8e 8093 0000 		ldi r21,hi8(9)
 428:main.c        **** 							if (num_pad_cursor_pos == 2)
 8412               	r18,lo8(52)
 8413               		ldi r19,hi8(52)
 8414 2f92 8091 0000 		call g_draw_rectangle
 8416 2f98 01F4      	.LM719:
 429:main.c        **** 								num_pad_cursor_pos = 0;
 8417               	r24,lo8(132)
 8418               		ldi r25,hi8(132)
 8419 2f9a 1092 0000 		ldi r22,lo8(63)
 8420 2f9e 00C0      		ldi r23,hi8(63)
 8421               		ldi r20,lo8(25)
 430:main.c        **** 							break;
 431:main.c        **** 						case 2:
 432:main.c        **** 							num_input_refr_time[num_pad_cursor_pos] = i+48;
 8422               	r21,hi8(25)
 8423               		ldi r18,lo8(15)
 8424 2fa0 8091 0000 		ldi r19,hi8(15)
 8425 2fa4 282F      		call g_draw_rectangle
 8427 2fa8 8981      	.LM720:
 8428 2faa 805D      		ldi r18,lo8(.LC13)
 8429 2fac F901      		ldi r19,hi8(.LC13)
 8430 2fae E050      		ldi r24,lo8(139)
 8431 2fb0 F040      		ldi r25,hi8(139)
 8432 2fb2 8083      		ldi r22,lo8(67)
 433:main.c        **** 							num_pad_cursor_pos++;
 8433               	8(67)
 8434               		movw r20,r18
 8435 2fb4 8091 0000 		call g_draw_string
 8437 2fba 8093 0000 	.LM721:
 434:main.c        **** 							if (num_pad_cursor_pos == 4)
 8438               	button_pressed,__zero_reg__
 8439               		rjmp .L273
 8440 2fbe 8091 0000 	.L304:
 8442 2fc4 01F4      	.LM722:
 435:main.c        **** 								num_pad_cursor_pos = 0;
 8443               	 get_touch_y
 8444               		sts buffer_touch_ad_y,r24
 8446               	.LM723:
 8447               		lds r24,buffer_touch_ad_y
 8448               		mov r24,r24
 8449 2fca 8981      		ldi r25,lo8(0)
 8450 2fcc 8F5F      		call get_touch_x
 8451 2fce 8983      		sts (buffer_touch_ad_x)+1,r25
 8452               		sts buffer_touch_ad_x,r24
 8454 2fd2 8C30      	.LM724:
 8455 2fd4 00F4      		lds r24,buffer_touch_ad_x
 8456 2fd6 00C0      		lds r25,(buffer_touch_ad_x)+1
 436:main.c        **** 							break;
 437:main.c        **** 					}
 438:main.c        **** 				}
 439:main.c        **** 			}
 440:main.c        **** 		}
 441:main.c        **** 		
 442:main.c        **** 		if (i_count == 0)
 8457               	cpc r25,__zero_reg__
 8458               		brlo .L274
 8460 2fdc 8823      	.LM725:
 8461 2fde 01F4      		ldi r24,lo8(160)
 443:main.c        **** 			num_pad_input_recognised = 0;
 8462               	r25,hi8(160)
 8463               		sts (buffer_touch_ad_x)+1,r25
 8464 2fe0 1092 0000 		sts buffer_touch_ad_x,r24
 8465               	.L274:
 444:main.c        **** 			
 445:main.c        **** 		for (i = 0; i <= 40; i++)
 8466               	abn	68,0,481,.LM726-.LFBB37
 8467               	.LM726:
 8468 2fe4 1982      		lds r24,buffer_touch_ad_x
 8469 2fe6 00C0      		lds r25,(buffer_touch_ad_x)+1
 8470               		sbiw r24,0
 446:main.c        **** 		{
 447:main.c        **** 			lcd_graphics_plot_pixel(105+i, 16, PIXEL_OFF);
 8471               	 .L275
 8473 2fe8 8981      	.LM727:
 8474 2fea 882F      		sts buffer_touch_ad_y,__zero_reg__
 8475 2fec 90E0      	.L275:
 8477 2ff0 9F4F      	.LM728:
 8478 2ff2 60E1      		lds r24,buffer_touch_ad_x
 8479 2ff4 70E0      		lds r25,(buffer_touch_ad_x)+1
 8480 2ff6 40E0      		cpi r24,20
 8481 2ff8 0E94 0000 		cpc r25,__zero_reg__
 8482               		brsh .+2
 8483               		rjmp .L276
 8484 2ffc 8981      		lds r24,buffer_touch_ad_x
 8485 2ffe 8F5F      		lds r25,(buffer_touch_ad_x)+1
 8486 3000 8983      		cpi r24,51
 8487               		cpc r25,__zero_reg__
 8488 3002 8981      		brlo .+2
 8489 3004 8932      		rjmp .L276
 448:main.c        **** 		}
 449:main.c        **** 		g_draw_horizontal_line(107 + (num_pad_cursor_pos*6), 16, 5);
 8491               	fer_touch_ad_y
 8492               		cpi r24,lo8(17)
 8493 3008 8091 0000 		brsh .+2
 8494 300c 282F      		rjmp .L276
 8495 300e 30E0      		lds r24,buffer_touch_ad_y
 8496 3010 C901      		cpi r24,lo8(68)
 8497 3012 880F      		brlo .+2
 8498 3014 991F      		rjmp .L276
 8500 3018 931F      	.LM730:
 8501 301a 880F      		lds r24,buffer_touch_ad_y
 8502 301c 991F      		cpi r24,lo8(17)
 8503 301e 8559      		brsh .L277
 8504 3020 9F4F      		lds r24,buffer_touch_ad_y
 8505 3022 60E1      		cpi r24,lo8(11)
 8506 3024 70E0      		brlo .L277
 8508 3028 50E0      	.LM731:
 8509 302a 0E94 0000 		ldi r24,lo8(17)
 8510               		sts buffer_touch_ad_y,r24
 8511               	.L277:
 8513 302e 8091 0000 	.LM732:
 8514 3032 8430      		lds r24,buffer_touch_ad_y
 8515 3034 01F0      		cpi r24,lo8(68)
 8516 3036 00C0      		brlo .L278
 8517               		lds r24,buffer_touch_ad_y
 450:main.c        **** 	}
 451:main.c        **** }
 8518               	8
 8520 3038 0F90      	.LM733:
 8521 303a 0F90      		ldi r24,lo8(67)
 8522 303c 0F90      		sts buffer_touch_ad_y,r24
 8523 303e 0F90      	.L278:
 8525 3042 CF91      	.LM734:
 8526 3044 DF91      		lds r25,buffer_touch_ad_y
 8527 3046 0895      		ldi r24,lo8(67)
 8528               		sub r24,r25
 8529               		sts bar_1_height,r24
 8531               	.LM735:
 8532               		ldi r24,lo8(17)
 8533               		std Y+1,r24
 8534               		rjmp .L279
 8535 02c3 4D69 6E00 	.L280:
 8537 02c7 4D61 7800 	.LM736:
 8538               		ldd r24,Y+1
 8539 02cb 545F 7265 		mov r18,r24
 8539      6672 00
 8540               		ldi r19,lo8(0)
 8541 02d2 4572 726F 		ldi r24,lo8(12)
 8541      723A 2020 
 8541      2000 
 8542               		ldi r25,hi8(12)
 8543 02dc 5661 6C5F 		movw r22,r18
 8543      6D69 6E20 
 8543      2000 
 8544               		ldi r20,lo8(0)
 8545 02e6 3E20 2020 		call lcd_graphics_plot_pixel
 8545      2020 2020 
 8545      2000 
 8547 02f0 5661 6C5F 	.LM737:
 8547      6D61 7821 
 8547      2000 
 8548               		ldd r24,Y+1
 8549 02fa 2020 2020 		mov r18,r24
 8549      2020 2020 
 8549      2000 
 8550               		ldi r19,lo8(0)
 8551               		ldi r24,lo8(13)
 8552               		ldi r25,hi8(13)
 8553               		movw r22,r18
 8554               		ldi r20,lo8(0)
 452:main.c        **** 
 453:main.c        **** void call_slider_mode(void)
 454:main.c        **** {
 8555               		68,0,497,.LM738-.LFBB37
 8556               	.LM738:
 8557               		ldd r24,Y+1
 8558 3048 DF93      		mov r18,r24
 8559 304a CF93      		ldi r19,lo8(0)
 8560 304c 0F92      		ldi r24,lo8(14)
 8561 304e CDB7      		ldi r25,hi8(14)
 8562 3050 DEB7      		movw r22,r18
 8563               		ldi r20,lo8(0)
 8564               		call lcd_graphics_plot_pixel
 455:main.c        **** //======================================================		
 456:main.c        **** //============= 		Slider mode		================
 457:main.c        **** //======================================================
 458:main.c        **** 	unsigned char i;
 459:main.c        **** 
 460:main.c        **** 	lcd_graphics_clear();
 8565               	,0,498,.LM739-.LFBB37
 8566               	.LM739:
 8567 3052 0E94 0000 		ldd r24,Y+1
 461:main.c        **** 	g_draw_rectangle(0, 0, 160, 80);
 8568               	v r18,r24
 8569               		ldi r19,lo8(0)
 8570 3056 80E0      		ldi r24,lo8(15)
 8571 3058 90E0      		ldi r25,hi8(15)
 8572 305a 60E0      		movw r22,r18
 8573 305c 70E0      		ldi r20,lo8(0)
 8574 305e 40EA      		call lcd_graphics_plot_pixel
 8576 3062 20E5      	.LM740:
 8577 3064 30E0      		ldd r24,Y+1
 8578 3066 0E94 0000 		mov r18,r24
 462:main.c        **** 	g_draw_string(7, 70, "Min");
 8579               	8(0)
 8580               		ldi r24,lo8(16)
 8581 306a 20E0      		ldi r25,hi8(16)
 8582 306c 30E0      		movw r22,r18
 8583 306e 87E0      		ldi r20,lo8(0)
 8584 3070 90E0      		call lcd_graphics_plot_pixel
 8586 3074 70E0      	.LM741:
 8587 3076 A901      		ldd r24,Y+1
 8588 3078 0E94 0000 		subi r24,lo8(-(1))
 463:main.c        **** 	g_draw_rectangle(10, 15, 9, 52);
 8589               	24
 8590               	.L279:
 8591 307c 8AE0      		ldd r24,Y+1
 8592 307e 90E0      		mov r18,r24
 8593 3080 6FE0      		ldi r19,lo8(0)
 8594 3082 70E0      		lds r24,buffer_touch_ad_y
 8595 3084 49E0      		mov r24,r24
 8596 3086 50E0      		ldi r25,lo8(0)
 8597 3088 24E3      		sbiw r24,1
 8598 308a 30E0      		cp r18,r24
 8599 308c 0E94 0000 		cpc r19,r25
 464:main.c        **** 	g_draw_string(52, 70, "Max");
 8600               	
 8602 3090 20E0      	.LM742:
 8603 3092 30E0      		ldi r24,lo8(12)
 8604 3094 84E3      		std Y+1,r24
 8605 3096 90E0      		rjmp .L281
 8606 3098 66E4      	.L282:
 8608 309c A901      	.LM743:
 8609 309e 0E94 0000 		ldd r24,Y+1
 465:main.c        **** 	g_draw_rectangle(55, 15, 9, 52);
 8610               	r24
 8611               		ldi r23,lo8(0)
 8612 30a2 87E3      		lds r24,buffer_touch_ad_y
 8613 30a4 90E0      		mov r20,r24
 8614 30a6 6FE0      		ldi r21,lo8(0)
 8615 30a8 70E0      		lds r24,bar_1_height
 8616 30aa 49E0      		mov r18,r24
 8617 30ac 50E0      		ldi r19,lo8(0)
 8618 30ae 24E3      		movw r24,r22
 8619 30b0 30E0      		movw r22,r20
 8620 30b2 0E94 0000 		movw r20,r18
 466:main.c        **** 	g_draw_string(90, 70, "T_refr");
 8621               	w_vertical_line
 8623 30b6 20E0      	.LM744:
 8624 30b8 30E0      		ldd r24,Y+1
 8625 30ba 8AE5      		subi r24,lo8(-(1))
 8626 30bc 90E0      		std Y+1,r24
 8627 30be 66E4      	.L281:
 8628 30c0 70E0      		ldd r24,Y+1
 8629 30c2 A901      		cpi r24,lo8(17)
 8630 30c4 0E94 0000 		brlo .L282
 467:main.c        **** 	g_draw_rectangle(100, 15, 9, 52);
 8631               	,0,505,.LM745-.LFBB37
 8632               	.LM745:
 8633 30c8 84E6      		lds r24,bar_1_height
 8634 30ca 90E0      		mov r24,r24
 8635 30cc 6FE0      		ldi r25,lo8(0)
 8636 30ce 70E0      		ldi r26,lo8(0)
 8637 30d0 49E0      		ldi r27,hi8(0)
 8638 30d2 50E0      		movw r22,r24
 8639 30d4 24E3      		movw r24,r26
 8640 30d6 30E0      		call __floatunsisf
 8641 30d8 0E94 0000 		movw r26,r24
 468:main.c        **** 	g_draw_rectangle(132, 63, 25, 15);
 8642               	22
 8643               		movw r22,r24
 8644 30dc 84E8      		movw r24,r26
 8645 30de 90E0      		ldi r18,lo8(0x3d48320c)
 8646 30e0 6FE3      		ldi r19,hi8(0x3d48320c)
 8647 30e2 70E0      		ldi r20,hlo8(0x3d48320c)
 8648 30e4 49E1      		ldi r21,hhi8(0x3d48320c)
 8649 30e6 50E0      		call __divsf3
 8650 30e8 2FE0      		movw r26,r24
 8651 30ea 30E0      		movw r24,r22
 8652 30ec 0E94 0000 		movw r22,r24
 469:main.c        **** 	g_draw_string(139, 67, "Ok");
 8653               	26
 8654               		call round
 8655 30f0 20E0      		movw r26,r24
 8656 30f2 30E0      		movw r24,r22
 8657 30f4 8BE8      		movw r22,r24
 8658 30f6 90E0      		movw r24,r26
 8659 30f8 63E4      		call __fixunssfsi
 8660 30fa 70E0      		movw r26,r24
 8661 30fc A901      		movw r24,r22
 8662 30fe 0E94 0000 		sts (val_min)+1,r25
 470:main.c        **** 	
 471:main.c        **** 	button_pressed = 0;
 8663               	in,r24
 8665 3102 1092 0000 	.LM746:
 8666 3106 00C0      		lds r24,bar_1_height
 8667               		tst r24
 472:main.c        **** 	
 473:main.c        **** 	while((button_pressed <= 3))
 474:main.c        **** 	{
 475:main.c        **** 		buffer_touch_ad_y = get_touch_y();
 8668               	 .L283
 8670 3108 0E94 0000 	.LM747:
 8671 310c 8093 0000 		lds r24,bar_1_height
 476:main.c        **** 		buffer_touch_ad_x = get_touch_x(buffer_touch_ad_y);
 8672               	 r24,r24
 8673               		ldi r25,lo8(0)
 8674 3110 8091 0000 		lsl r24
 8675 3114 882F      		rol r25
 8676 3116 90E0      		subi r24,lo8(-(-1))
 8677 3118 0E94 0000 		sts val_min_bar,r24
 8678 311c 9093 0000 		rjmp .L284
 8679 3120 8093 0000 	.L283:
 477:main.c        **** 		
 478:main.c        **** 		if (buffer_touch_ad_x > 160)
 8680               	68,0,509,.LM748-.LFBB37
 8681               	.LM748:
 8682 3124 8091 0000 		sts val_min_bar,__zero_reg__
 8683 3128 9091 0000 	.L284:
 8685 312e 9105      	.LM749:
 8686 3130 00F0      		lds r24,val_min_bar
 479:main.c        **** 			buffer_touch_ad_x = 160;
 8687               	5,lo8(10)
 8688               		mov r22,r25
 8689 3132 80EA      		call __udivmodqi4
 8690 3134 90E0      		subi r24,lo8(-(48))
 8691 3136 9093 0000 		sts val_min_bcd,r24
 8693               	.LM750:
 480:main.c        **** 		
 481:main.c        **** 		if (buffer_touch_ad_x == 0)
 8694               	4,val_min_bar
 8695               		ldi r25,lo8(10)
 8696 313e 8091 0000 		mov r22,r25
 8697 3142 9091 0000 		call __udivmodqi4
 8698 3146 0097      		mov r24,r25
 8699 3148 01F4      		sts val_min_bar,r24
 482:main.c        **** 			buffer_touch_ad_y = 0;
 8700               	n	68,0,512,.LM751-.LFBB37
 8701               	.LM751:
 8702 314a 1092 0000 		lds r24,val_min_bar
 8703               		subi r24,lo8(-(48))
 483:main.c        **** //============= 		Bar 1 			================
 484:main.c        **** 		if ((buffer_touch_ad_x >= 20) && (buffer_touch_ad_x <= 50))
 8704               	 val_min_bcd+1,r24
 8705               	.L276:
 8707 3152 9091 0000 	.LM752:
 8708 3156 8431      		lds r24,buffer_touch_ad_x
 8709 3158 9105      		lds r25,(buffer_touch_ad_x)+1
 8710 315a 00F4      		cpi r24,73
 8711 315c 00C0      		cpc r25,__zero_reg__
 8712 315e 8091 0000 		brsh .+2
 8713 3162 9091 0000 		rjmp .L285
 8714 3166 8333      		lds r24,buffer_touch_ad_x
 8715 3168 9105      		lds r25,(buffer_touch_ad_x)+1
 8716 316a 00F0      		cpi r24,88
 8717 316c 00C0      		cpc r25,__zero_reg__
 485:main.c        **** 		{
 486:main.c        **** 			if ((buffer_touch_ad_y >= 17) && (buffer_touch_ad_y <= 67))
 8718               	p .L285
 8720 316e 8091 0000 	.LM753:
 8721 3172 8131      		lds r24,buffer_touch_ad_y
 8722 3174 00F4      		cpi r24,lo8(17)
 8723 3176 00C0      		brsh .+2
 8724 3178 8091 0000 		rjmp .L285
 8725 317c 8434      		lds r24,buffer_touch_ad_y
 8726 317e 00F0      		cpi r24,lo8(68)
 8727 3180 00C0      		brlo .+2
 487:main.c        **** 			{
 488:main.c        **** 				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
 8728               	5
 8730 3182 8091 0000 	.LM754:
 8731 3186 8131      		lds r24,buffer_touch_ad_y
 8732 3188 00F4      		cpi r24,lo8(17)
 8733 318a 8091 0000 		brsh .L286
 8734 318e 8B30      		lds r24,buffer_touch_ad_y
 8735 3190 00F0      		cpi r24,lo8(11)
 489:main.c        **** 					buffer_touch_ad_y = 17;
 8736               	286
 8738 3192 81E1      	.LM755:
 8739 3194 8093 0000 		ldi r24,lo8(17)
 8740               		sts buffer_touch_ad_y,r24
 490:main.c        **** 				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
 8741               	:
 8743 3198 8091 0000 	.LM756:
 8744 319c 8434      		lds r24,buffer_touch_ad_y
 8745 319e 00F0      		cpi r24,lo8(68)
 8746 31a0 8091 0000 		brlo .L287
 8747 31a4 8A34      		lds r24,buffer_touch_ad_y
 8748 31a6 00F4      		cpi r24,lo8(74)
 491:main.c        **** 					buffer_touch_ad_y = 67;				
 8749               	287
 8751 31a8 83E4      	.LM757:
 8752 31aa 8093 0000 		ldi r24,lo8(67)
 8753               		sts buffer_touch_ad_y,r24
 492:main.c        **** 				bar_1_height = 50-(buffer_touch_ad_y-17);
 8754               	:
 8756 31ae 9091 0000 	.LM758:
 8757 31b2 83E4      		lds r25,buffer_touch_ad_y
 8758 31b4 891B      		ldi r24,lo8(67)
 8759 31b6 8093 0000 		sub r24,r25
 493:main.c        **** 				for (i = 17; i < buffer_touch_ad_y-1; i++)
 8760               	ar_2_height,r24
 8762 31ba 81E1      	.LM759:
 8763 31bc 8983      		ldi r24,lo8(17)
 8764 31be 00C0      		std Y+1,r24
 8765               		rjmp .L288
 494:main.c        **** 				{
 495:main.c        **** 					lcd_graphics_plot_pixel(12, i, PIXEL_OFF);
 8766               	
 8768 31c0 8981      	.LM760:
 8769 31c2 282F      		ldd r24,Y+1
 8770 31c4 30E0      		mov r18,r24
 8771 31c6 8CE0      		ldi r19,lo8(0)
 8772 31c8 90E0      		ldi r24,lo8(57)
 8773 31ca B901      		ldi r25,hi8(57)
 8774 31cc 40E0      		movw r22,r18
 8775 31ce 0E94 0000 		ldi r20,lo8(0)
 496:main.c        **** 					lcd_graphics_plot_pixel(13, i, PIXEL_OFF);
 8776               	_graphics_plot_pixel
 8778 31d2 8981      	.LM761:
 8779 31d4 282F      		ldd r24,Y+1
 8780 31d6 30E0      		mov r18,r24
 8781 31d8 8DE0      		ldi r19,lo8(0)
 8782 31da 90E0      		ldi r24,lo8(58)
 8783 31dc B901      		ldi r25,hi8(58)
 8784 31de 40E0      		movw r22,r18
 8785 31e0 0E94 0000 		ldi r20,lo8(0)
 497:main.c        **** 					lcd_graphics_plot_pixel(14, i, PIXEL_OFF);
 8786               	graphics_plot_pixel
 8788 31e4 8981      	.LM762:
 8789 31e6 282F      		ldd r24,Y+1
 8790 31e8 30E0      		mov r18,r24
 8791 31ea 8EE0      		ldi r19,lo8(0)
 8792 31ec 90E0      		ldi r24,lo8(59)
 8793 31ee B901      		ldi r25,hi8(59)
 8794 31f0 40E0      		movw r22,r18
 8795 31f2 0E94 0000 		ldi r20,lo8(0)
 498:main.c        **** 					lcd_graphics_plot_pixel(15, i, PIXEL_OFF);
 8796               	graphics_plot_pixel
 8798 31f6 8981      	.LM763:
 8799 31f8 282F      		ldd r24,Y+1
 8800 31fa 30E0      		mov r18,r24
 8801 31fc 8FE0      		ldi r19,lo8(0)
 8802 31fe 90E0      		ldi r24,lo8(60)
 8803 3200 B901      		ldi r25,hi8(60)
 8804 3202 40E0      		movw r22,r18
 8805 3204 0E94 0000 		ldi r20,lo8(0)
 499:main.c        **** 					lcd_graphics_plot_pixel(16, i, PIXEL_OFF);
 8806               	graphics_plot_pixel
 8808 3208 8981      	.LM764:
 8809 320a 282F      		ldd r24,Y+1
 8810 320c 30E0      		mov r18,r24
 8811 320e 80E1      		ldi r19,lo8(0)
 8812 3210 90E0      		ldi r24,lo8(61)
 8813 3212 B901      		ldi r25,hi8(61)
 8814 3214 40E0      		movw r22,r18
 8815 3216 0E94 0000 		ldi r20,lo8(0)
 8816               		call lcd_graphics_plot_pixel
 8818 321a 8981      	.LM765:
 8819 321c 8F5F      		ldd r24,Y+1
 8820 321e 8983      		subi r24,lo8(-(1))
 8821               		std Y+1,r24
 8822 3220 8981      	.L288:
 8823 3222 282F      		ldd r24,Y+1
 8824 3224 30E0      		mov r18,r24
 8825 3226 8091 0000 		ldi r19,lo8(0)
 8826 322a 882F      		lds r24,buffer_touch_ad_y
 8827 322c 90E0      		mov r24,r24
 8828 322e 0197      		ldi r25,lo8(0)
 8829 3230 2817      		sbiw r24,1
 8830 3232 3907      		cp r18,r24
 8831 3234 04F0      		cpc r19,r25
 500:main.c        **** 				}
 501:main.c        **** 				for (i = 12; i <= 16; i++)
 8832               	33,.LM766-.LFBB37
 8833               	.LM766:
 8834 3236 8CE0      		ldi r24,lo8(57)
 8835 3238 8983      		std Y+1,r24
 8836 323a 00C0      		rjmp .L290
 8837               	.L291:
 502:main.c        **** 				{
 503:main.c        **** 					g_draw_vertical_line(i, buffer_touch_ad_y, bar_1_height);
 8838               	n	68,0,535,.LM767-.LFBB37
 8839               	.LM767:
 8840 323c 8981      		ldd r24,Y+1
 8841 323e 682F      		mov r22,r24
 8842 3240 70E0      		ldi r23,lo8(0)
 8843 3242 8091 0000 		lds r24,buffer_touch_ad_y
 8844 3246 482F      		mov r20,r24
 8845 3248 50E0      		ldi r21,lo8(0)
 8846 324a 8091 0000 		lds r24,bar_2_height
 8847 324e 282F      		mov r18,r24
 8848 3250 30E0      		ldi r19,lo8(0)
 8849 3252 CB01      		movw r24,r22
 8850 3254 BA01      		movw r22,r20
 8851 3256 A901      		movw r20,r18
 8852 3258 0E94 0000 		call g_draw_vertical_line
 8854               	.LM768:
 8855 325c 8981      		ldd r24,Y+1
 8856 325e 8F5F      		subi r24,lo8(-(1))
 8857 3260 8983      		std Y+1,r24
 8858               	.L290:
 8859 3262 8981      		ldd r24,Y+1
 8860 3264 8131      		cpi r24,lo8(62)
 8861 3266 00F0      		brlo .L291
 504:main.c        **** 				}
 505:main.c        **** 				val_min = round((double)bar_1_height/0.048875855);
 8862               	.LFBB37
 8863               	.LM769:
 8864 3268 8091 0000 		lds r24,bar_2_height
 8865 326c 882F      		mov r24,r24
 8866 326e 90E0      		ldi r25,lo8(0)
 8867 3270 A0E0      		ldi r26,lo8(0)
 8868 3272 B0E0      		ldi r27,hi8(0)
 8869 3274 BC01      		movw r22,r24
 8870 3276 CD01      		movw r24,r26
 8871 3278 0E94 0000 		call __floatunsisf
 8872 327c DC01      		movw r26,r24
 8873 327e CB01      		movw r24,r22
 8874 3280 BC01      		movw r22,r24
 8875 3282 CD01      		movw r24,r26
 8876 3284 2CE0      		ldi r18,lo8(0x3d48320c)
 8877 3286 32E3      		ldi r19,hi8(0x3d48320c)
 8878 3288 48E4      		ldi r20,hlo8(0x3d48320c)
 8879 328a 5DE3      		ldi r21,hhi8(0x3d48320c)
 8880 328c 0E94 0000 		call __divsf3
 8881 3290 DC01      		movw r26,r24
 8882 3292 CB01      		movw r24,r22
 8883 3294 BC01      		movw r22,r24
 8884 3296 CD01      		movw r24,r26
 8885 3298 0E94 0000 		call round
 8886 329c DC01      		movw r26,r24
 8887 329e CB01      		movw r24,r22
 8888 32a0 BC01      		movw r22,r24
 8889 32a2 CD01      		movw r24,r26
 8890 32a4 0E94 0000 		call __fixunssfsi
 8891 32a8 DC01      		movw r26,r24
 8892 32aa CB01      		movw r24,r22
 8893 32ac 9093 0000 		sts (val_max)+1,r25
 8894 32b0 8093 0000 		sts val_max,r24
 506:main.c        **** 				if (bar_1_height != 0)
 8895               	LM770:
 8896               		lds r24,bar_2_height
 8897 32b4 8091 0000 		tst r24
 8898 32b8 8823      		breq .L292
 507:main.c        **** 					val_min_bar = (bar_1_height*2) - 1;
 8900               	1:
 8901               		lds r24,bar_2_height
 8902 32bc 8091 0000 		mov r24,r24
 8903 32c0 882F      		ldi r25,lo8(0)
 8904 32c2 90E0      		lsl r24
 8905 32c4 880F      		rol r25
 8906 32c6 991F      		subi r24,lo8(-(-1))
 8907 32c8 8150      		sts val_max_bar,r24
 8908 32ca 8093 0000 		rjmp .L293
 8909 32ce 00C0      	.L292:
 508:main.c        **** 				else
 509:main.c        **** 					val_min_bar = 0;
 8911               	s val_max_bar,__zero_reg__
 8912               	.L293:
 8914               	.LM773:
 510:main.c        **** 				val_min_bcd[0] = (val_min_bar/10)+48;
 8915               	 r24,val_max_bar
 8916               		ldi r25,lo8(10)
 8917 32d4 8091 0000 		mov r22,r25
 8918 32d8 9AE0      		call __udivmodqi4
 8919 32da 692F      		subi r24,lo8(-(48))
 8920 32dc 0E94 0000 		sts val_max_bcd,r24
 8922 32e2 8093 0000 	.LM774:
 511:main.c        **** 				val_min_bar %= 10;
 8923               	,val_max_bar
 8924               		ldi r25,lo8(10)
 8925 32e6 8091 0000 		mov r22,r25
 8926 32ea 9AE0      		call __udivmodqi4
 8927 32ec 692F      		mov r24,r25
 8928 32ee 0E94 0000 		sts val_max_bar,r24
 8930 32f4 8093 0000 	.LM775:
 512:main.c        **** 				val_min_bcd[1] = val_min_bar+48;
 8931               	,val_max_bar
 8932               		subi r24,lo8(-(48))
 8933 32f8 8091 0000 		sts val_max_bcd+1,r24
 8934 32fc 805D      	.L285:
 8936               	.LM776:
 513:main.c        **** 			}
 514:main.c        **** 		}
 515:main.c        **** //============= 		Bar 2 			================
 516:main.c        **** 		if ((buffer_touch_ad_x >= 73) && (buffer_touch_ad_x <= 87))
 8937               	24,buffer_touch_ad_x
 8938               		lds r25,(buffer_touch_ad_x)+1
 8939 3302 8091 0000 		cpi r24,118
 8940 3306 9091 0000 		cpc r25,__zero_reg__
 8941 330a 8934      		brsh .+2
 8942 330c 9105      		rjmp .L294
 8943 330e 00F4      		lds r24,buffer_touch_ad_x
 8944 3310 00C0      		lds r25,(buffer_touch_ad_x)+1
 8945 3312 8091 0000 		cpi r24,133
 8946 3316 9091 0000 		cpc r25,__zero_reg__
 8947 331a 8835      		brlo .+2
 8948 331c 9105      		rjmp .L294
 8950 3320 00C0      	.LM777:
 517:main.c        **** 		{
 518:main.c        **** 			if ((buffer_touch_ad_y >= 17) && (buffer_touch_ad_y <= 67))
 8951               	r_touch_ad_y
 8952               		cpi r24,lo8(17)
 8953 3322 8091 0000 		brsh .+2
 8954 3326 8131      		rjmp .L294
 8955 3328 00F4      		lds r24,buffer_touch_ad_y
 8956 332a 00C0      		cpi r24,lo8(68)
 8957 332c 8091 0000 		brlo .+2
 8958 3330 8434      		rjmp .L294
 8960 3334 00C0      	.LM778:
 519:main.c        **** 			{
 520:main.c        **** 				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
 8961               	uffer_touch_ad_y
 8962               		cpi r24,lo8(17)
 8963 3336 8091 0000 		brsh .L295
 8964 333a 8131      		lds r24,buffer_touch_ad_y
 8965 333c 00F4      		cpi r24,lo8(11)
 8966 333e 8091 0000 		brlo .L295
 8968 3344 00F0      	.LM779:
 521:main.c        **** 					buffer_touch_ad_y = 17;
 8969               	,lo8(17)
 8970               		sts buffer_touch_ad_y,r24
 8971 3346 81E1      	.L295:
 8973               	.LM780:
 522:main.c        **** 				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
 8974               	r24,buffer_touch_ad_y
 8975               		cpi r24,lo8(68)
 8976 334c 8091 0000 		brlo .L296
 8977 3350 8434      		lds r24,buffer_touch_ad_y
 8978 3352 00F0      		cpi r24,lo8(74)
 8979 3354 8091 0000 		brsh .L296
 8981 335a 00F4      	.LM781:
 523:main.c        **** 					buffer_touch_ad_y = 67;				
 8982               	,lo8(67)
 8983               		sts buffer_touch_ad_y,r24
 8984 335c 83E4      	.L296:
 8986               	.LM782:
 524:main.c        **** 				bar_2_height = 50-(buffer_touch_ad_y-17);
 8987               	r25,buffer_touch_ad_y
 8988               		ldi r24,lo8(67)
 8989 3362 9091 0000 		sub r24,r25
 8990 3366 83E4      		sts bar_3_height,r24
 8992 336a 8093 0000 	.LM783:
 525:main.c        **** 				for (i = 17; i < buffer_touch_ad_y-1; i++)
 8993               	24,lo8(17)
 8994               		std Y+1,r24
 8995 336e 81E1      		rjmp .L297
 8996 3370 8983      	.L298:
 8998               	.LM784:
 526:main.c        **** 				{
 527:main.c        **** 					lcd_graphics_plot_pixel(57, i, PIXEL_OFF);
 8999               	24,Y+1
 9000               		mov r18,r24
 9001 3374 8981      		ldi r19,lo8(0)
 9002 3376 282F      		ldi r24,lo8(102)
 9003 3378 30E0      		ldi r25,hi8(102)
 9004 337a 89E3      		movw r22,r18
 9005 337c 90E0      		ldi r20,lo8(0)
 9006 337e B901      		call lcd_graphics_plot_pixel
 9008 3382 0E94 0000 	.LM785:
 528:main.c        **** 					lcd_graphics_plot_pixel(58, i, PIXEL_OFF);
 9009               	+1
 9010               		mov r18,r24
 9011 3386 8981      		ldi r19,lo8(0)
 9012 3388 282F      		ldi r24,lo8(103)
 9013 338a 30E0      		ldi r25,hi8(103)
 9014 338c 8AE3      		movw r22,r18
 9015 338e 90E0      		ldi r20,lo8(0)
 9016 3390 B901      		call lcd_graphics_plot_pixel
 9018 3394 0E94 0000 	.LM786:
 529:main.c        **** 					lcd_graphics_plot_pixel(59, i, PIXEL_OFF);
 9019               	+1
 9020               		mov r18,r24
 9021 3398 8981      		ldi r19,lo8(0)
 9022 339a 282F      		ldi r24,lo8(104)
 9023 339c 30E0      		ldi r25,hi8(104)
 9024 339e 8BE3      		movw r22,r18
 9025 33a0 90E0      		ldi r20,lo8(0)
 9026 33a2 B901      		call lcd_graphics_plot_pixel
 9028 33a6 0E94 0000 	.LM787:
 530:main.c        **** 					lcd_graphics_plot_pixel(60, i, PIXEL_OFF);
 9029               	+1
 9030               		mov r18,r24
 9031 33aa 8981      		ldi r19,lo8(0)
 9032 33ac 282F      		ldi r24,lo8(105)
 9033 33ae 30E0      		ldi r25,hi8(105)
 9034 33b0 8CE3      		movw r22,r18
 9035 33b2 90E0      		ldi r20,lo8(0)
 9036 33b4 B901      		call lcd_graphics_plot_pixel
 9038 33b8 0E94 0000 	.LM788:
 531:main.c        **** 					lcd_graphics_plot_pixel(61, i, PIXEL_OFF);
 9039               	+1
 9040               		mov r18,r24
 9041 33bc 8981      		ldi r19,lo8(0)
 9042 33be 282F      		ldi r24,lo8(106)
 9043 33c0 30E0      		ldi r25,hi8(106)
 9044 33c2 8DE3      		movw r22,r18
 9045 33c4 90E0      		ldi r20,lo8(0)
 9046 33c6 B901      		call lcd_graphics_plot_pixel
 9048 33ca 0E94 0000 	.LM789:
 9049               		ldd r24,Y+1
 9050               		subi r24,lo8(-(1))
 9051 33ce 8981      		std Y+1,r24
 9052 33d0 8F5F      	.L297:
 9053 33d2 8983      		ldd r24,Y+1
 9054               		mov r18,r24
 9055 33d4 8981      		ldi r19,lo8(0)
 9056 33d6 282F      		lds r24,buffer_touch_ad_y
 9057 33d8 30E0      		mov r24,r24
 9058 33da 8091 0000 		ldi r25,lo8(0)
 9059 33de 882F      		sbiw r24,1
 9060 33e0 90E0      		cp r18,r24
 9061 33e2 0197      		cpc r19,r25
 9062 33e4 2817      		brlt .L298
 9064 33e8 04F0      	.LM790:
 532:main.c        **** 				}
 533:main.c        **** 				for (i = 57; i <= 61; i++)
 9065               	,r24
 9066               		rjmp .L299
 9067 33ea 89E3      	.L300:
 9069 33ee 00C0      	.LM791:
 9070               		ldd r24,Y+1
 534:main.c        **** 				{
 535:main.c        **** 					g_draw_vertical_line(i, buffer_touch_ad_y, bar_2_height);
 9071               	22,r24
 9072               		ldi r23,lo8(0)
 9073 33f0 8981      		lds r24,buffer_touch_ad_y
 9074 33f2 682F      		mov r20,r24
 9075 33f4 70E0      		ldi r21,lo8(0)
 9076 33f6 8091 0000 		lds r24,bar_3_height
 9077 33fa 482F      		mov r18,r24
 9078 33fc 50E0      		ldi r19,lo8(0)
 9079 33fe 8091 0000 		movw r24,r22
 9080 3402 282F      		movw r22,r20
 9081 3404 30E0      		movw r20,r18
 9082 3406 CB01      		call g_draw_vertical_line
 9084 340a A901      	.LM792:
 9085 340c 0E94 0000 		ldd r24,Y+1
 9086               		subi r24,lo8(-(1))
 9087               		std Y+1,r24
 9088 3410 8981      	.L299:
 9089 3412 8F5F      		ldd r24,Y+1
 9090 3414 8983      		cpi r24,lo8(107)
 9091               		brlo .L300
 9093 3418 8E33      	.LM793:
 9094 341a 00F0      		lds r24,bar_3_height
 536:main.c        **** 				}
 537:main.c        **** 				val_max = round((double)bar_2_height/0.048875855);
 9095               	8(0)
 9096               		sts (val_refr)+1,r25
 9097 341c 8091 0000 		sts val_refr,r24
 9099 3422 90E0      	.LM794:
 9100 3424 A0E0      		lds r24,bar_3_height
 9101 3426 B0E0      		sts val_refr_bar,r24
 9103 342a CD01      	.LM795:
 9104 342c 0E94 0000 		lds r24,val_refr_bar
 9105 3430 DC01      		ldi r25,lo8(10)
 9106 3432 CB01      		mov r22,r25
 9107 3434 BC01      		call __udivmodqi4
 9108 3436 CD01      		subi r24,lo8(-(48))
 9109 3438 2CE0      		sts val_refr_bcd+2,r24
 9111 343c 48E4      	.LM796:
 9112 343e 5DE3      		lds r24,val_refr_bar
 9113 3440 0E94 0000 		ldi r25,lo8(10)
 9114 3444 DC01      		mov r22,r25
 9115 3446 CB01      		call __udivmodqi4
 9116 3448 BC01      		mov r24,r25
 9117 344a CD01      		sts val_refr_bar,r24
 9119 3450 DC01      	.LM797:
 9120 3452 CB01      		lds r24,val_refr_bar
 9121 3454 BC01      		subi r24,lo8(-(48))
 9122 3456 CD01      		sts val_refr_bcd+3,r24
 9123 3458 0E94 0000 	.L294:
 9125 345e CB01      	.LM798:
 9126 3460 9093 0000 		lds r24,buffer_touch_ad_x
 9127 3464 8093 0000 		lds r25,(buffer_touch_ad_x)+1
 538:main.c        **** 				if (bar_2_height != 0)
 9128               	_
 9129               		brlo .L301
 9130 3468 8091 0000 		lds r24,buffer_touch_ad_x
 9131 346c 8823      		lds r25,(buffer_touch_ad_x)+1
 9132 346e 01F0      		cpi r24,161
 539:main.c        **** 					val_max_bar = (bar_2_height*2) - 1;
 9133               	r25,__zero_reg__
 9134               		brsh .L301
 9135 3470 8091 0000 		lds r24,buffer_touch_ad_y
 9136 3474 882F      		cpi r24,lo8(63)
 9137 3476 90E0      		brlo .L301
 9138 3478 880F      		lds r24,buffer_touch_ad_y
 9139 347a 991F      		cpi r24,lo8(81)
 9140 347c 8150      		brsh .L301
 9142 3482 00C0      	.LM799:
 9143               		lds r24,button_pressed
 540:main.c        **** 				else
 541:main.c        **** 					val_max_bar = 0;
 9144               	o8(-(1))
 9145               		sts button_pressed,r24
 9146 3484 1092 0000 		rjmp .L302
 9147               	.L301:
 542:main.c        **** 				val_max_bcd[0] = (val_max_bar/10)+48;
 9148               	abn	68,0,583,.LM800-.LFBB37
 9149               	.LM800:
 9150 3488 8091 0000 		sts button_pressed,__zero_reg__
 9151 348c 9AE0      	.L302:
 9153 3490 0E94 0000 	.LM801:
 9154 3494 805D      		lds r24,button_pressed
 9155 3496 8093 0000 		cpi r24,lo8(2)
 543:main.c        **** 				val_max_bar %= 10;
 9156               	2
 9157               		rjmp .L303
 9158 349a 8091 0000 		lds r18,val_min
 9159 349e 9AE0      		lds r19,(val_min)+1
 9160 34a0 692F      		lds r24,val_max
 9161 34a2 0E94 0000 		lds r25,(val_max)+1
 9162 34a6 892F      		cp r24,r18
 9163 34a8 8093 0000 		cpc r25,r19
 544:main.c        **** 				val_max_bcd[1] = val_max_bar+48;
 9164               	2
 9165               		rjmp .L303
 9167 34b0 805D      	.LM802:
 9168 34b2 8093 0000 		ldi r18,lo8(.LC25)
 9169               		ldi r19,hi8(.LC25)
 545:main.c        **** 			}
 546:main.c        **** 		}
 547:main.c        **** //============= 		Bar 3 			================
 548:main.c        **** 		if ((buffer_touch_ad_x >= 118) && (buffer_touch_ad_x <= 132))
 9170               	24,lo8(112)
 9171               		ldi r25,hi8(112)
 9172 34b6 8091 0000 		ldi r22,lo8(20)
 9173 34ba 9091 0000 		ldi r23,hi8(20)
 9174 34be 8637      		movw r20,r18
 9175 34c0 9105      		call g_draw_string
 9177 34c4 00C0      	.LM803:
 9178 34c6 8091 0000 		ldi r18,lo8(.LC26)
 9179 34ca 9091 0000 		ldi r19,hi8(.LC26)
 9180 34ce 8538      		ldi r24,lo8(112)
 9181 34d0 9105      		ldi r25,hi8(112)
 9182 34d2 00F0      		ldi r22,lo8(30)
 9183 34d4 00C0      		ldi r23,hi8(30)
 549:main.c        **** 		{
 550:main.c        **** 			if ((buffer_touch_ad_y >= 17) && (buffer_touch_ad_y <= 67))
 9184               		call g_draw_string
 9186 34d6 8091 0000 	.LM804:
 9187 34da 8131      		ldi r18,lo8(.LC27)
 9188 34dc 00F4      		ldi r19,hi8(.LC27)
 9189 34de 00C0      		ldi r24,lo8(112)
 9190 34e0 8091 0000 		ldi r25,hi8(112)
 9191 34e4 8434      		ldi r22,lo8(40)
 9192 34e6 00F0      		ldi r23,hi8(40)
 9193 34e8 00C0      		movw r20,r18
 551:main.c        **** 			{
 552:main.c        **** 				if ((buffer_touch_ad_y < 17) && (buffer_touch_ad_y > 10))
 9194               	aw_string
 9196 34ea 8091 0000 	.LM805:
 9197 34ee 8131      		ldi r18,lo8(.LC28)
 9198 34f0 00F4      		ldi r19,hi8(.LC28)
 9199 34f2 8091 0000 		ldi r24,lo8(112)
 9200 34f6 8B30      		ldi r25,hi8(112)
 9201 34f8 00F0      		ldi r22,lo8(50)
 553:main.c        **** 					buffer_touch_ad_y = 17;
 9202               	,hi8(50)
 9203               		movw r20,r18
 9204 34fa 81E1      		call g_draw_string
 9206               	.LM806:
 554:main.c        **** 				if ((buffer_touch_ad_y > 67) && (buffer_touch_ad_y < 74))
 9207               	r24,lo8(2000)
 9208               		ldi r25,hi8(2000)
 9209 3500 8091 0000 		call delay_ms
 9211 3506 00F0      	.LM807:
 9212 3508 8091 0000 		ldi r18,lo8(.LC29)
 9213 350c 8A34      		ldi r19,hi8(.LC29)
 9214 350e 00F4      		ldi r24,lo8(112)
 555:main.c        **** 					buffer_touch_ad_y = 67;				
 9215               	,hi8(112)
 9216               		ldi r22,lo8(20)
 9217 3510 83E4      		ldi r23,hi8(20)
 9218 3512 8093 0000 		movw r20,r18
 9219               		call g_draw_string
 556:main.c        **** 				bar_3_height = 50-(buffer_touch_ad_y-17);
 9220               	bn	68,0,593,.LM808-.LFBB37
 9221               	.LM808:
 9222 3516 9091 0000 		ldi r18,lo8(.LC29)
 9223 351a 83E4      		ldi r19,hi8(.LC29)
 9224 351c 891B      		ldi r24,lo8(112)
 9225 351e 8093 0000 		ldi r25,hi8(112)
 557:main.c        **** 				for (i = 17; i < buffer_touch_ad_y-1; i++)
 9226               	22,lo8(30)
 9227               		ldi r23,hi8(30)
 9228 3522 81E1      		movw r20,r18
 9229 3524 8983      		call g_draw_string
 9231               	.LM809:
 558:main.c        **** 				{
 559:main.c        **** 					lcd_graphics_plot_pixel(102, i, PIXEL_OFF);
 9232               	18,lo8(.LC29)
 9233               		ldi r19,hi8(.LC29)
 9234 3528 8981      		ldi r24,lo8(112)
 9235 352a 282F      		ldi r25,hi8(112)
 9236 352c 30E0      		ldi r22,lo8(40)
 9237 352e 86E6      		ldi r23,hi8(40)
 9238 3530 90E0      		movw r20,r18
 9239 3532 B901      		call g_draw_string
 9241 3536 0E94 0000 	.LM810:
 560:main.c        **** 					lcd_graphics_plot_pixel(103, i, PIXEL_OFF);
 9242               	o8(.LC29)
 9243               		ldi r19,hi8(.LC29)
 9244 353a 8981      		ldi r24,lo8(112)
 9245 353c 282F      		ldi r25,hi8(112)
 9246 353e 30E0      		ldi r22,lo8(50)
 9247 3540 87E6      		ldi r23,hi8(50)
 9248 3542 90E0      		movw r20,r18
 9249 3544 B901      		call g_draw_string
 9251 3548 0E94 0000 	.LM811:
 561:main.c        **** 					lcd_graphics_plot_pixel(104, i, PIXEL_OFF);
 9252               	n_pressed,__zero_reg__
 9253               	.L303:
 9255 354e 282F      	.LM812:
 9256 3550 30E0      		ldi r18,lo8(val_min_bcd)
 9257 3552 88E6      		ldi r19,hi8(val_min_bcd)
 9258 3554 90E0      		ldi r24,lo8(5)
 9259 3556 B901      		ldi r25,hi8(5)
 9260 3558 40E0      		ldi r22,lo8(4)
 9261 355a 0E94 0000 		ldi r23,hi8(4)
 562:main.c        **** 					lcd_graphics_plot_pixel(105, i, PIXEL_OFF);
 9262               	r18
 9263               		call g_draw_string
 9265 3560 282F      	.LM813:
 9266 3562 30E0      		ldi r18,lo8(.LC16)
 9267 3564 89E6      		ldi r19,hi8(.LC16)
 9268 3566 90E0      		ldi r24,lo8(23)
 9269 3568 B901      		ldi r25,hi8(23)
 9270 356a 40E0      		ldi r22,lo8(4)
 9271 356c 0E94 0000 		ldi r23,hi8(4)
 563:main.c        **** 					lcd_graphics_plot_pixel(106, i, PIXEL_OFF);
 9272               	r18
 9273               		call g_draw_string
 9275 3572 282F      	.LM814:
 9276 3574 30E0      		ldi r18,lo8(val_max_bcd)
 9277 3576 8AE6      		ldi r19,hi8(val_max_bcd)
 9278 3578 90E0      		ldi r24,lo8(50)
 9279 357a B901      		ldi r25,hi8(50)
 9280 357c 40E0      		ldi r22,lo8(4)
 9281 357e 0E94 0000 		ldi r23,hi8(4)
 9282               		movw r20,r18
 9283               		call g_draw_string
 9285 3584 8F5F      	.LM815:
 9286 3586 8983      		ldi r18,lo8(.LC16)
 9287               		ldi r19,hi8(.LC16)
 9288 3588 8981      		ldi r24,lo8(68)
 9289 358a 282F      		ldi r25,hi8(68)
 9290 358c 30E0      		ldi r22,lo8(4)
 9291 358e 8091 0000 		ldi r23,hi8(4)
 9292 3592 882F      		movw r20,r18
 9293 3594 90E0      		call g_draw_string
 9295 3598 2817      	.LM816:
 9296 359a 3907      		ldi r18,lo8(val_refr_bcd)
 9297 359c 04F0      		ldi r19,hi8(val_refr_bcd)
 564:main.c        **** 				}
 565:main.c        **** 				for (i = 102; i <= 106; i++)
 9298               	hi8(95)
 9299               		ldi r22,lo8(4)
 9300 359e 86E6      		ldi r23,hi8(4)
 9301 35a0 8983      		movw r20,r18
 9302 35a2 00C0      		call g_draw_string
 566:main.c        **** 				{
 567:main.c        **** 					g_draw_vertical_line(i, buffer_touch_ad_y, bar_3_height);
 9304               	:
 9305               		ldi r24,lo8(17)
 9306 35a4 8981      		ldi r22,lo8(2)
 9307 35a6 682F      		call draw_grad
 9309 35aa 8091 0000 	.LM818:
 9310 35ae 482F      		ldi r24,lo8(62)
 9311 35b0 50E0      		ldi r22,lo8(2)
 9312 35b2 8091 0000 		call draw_grad
 9313 35b6 282F      	.L273:
 9315 35ba CB01      	.LM819:
 9316 35bc BA01      		lds r24,button_pressed
 9317 35be A901      		cpi r24,lo8(4)
 9318 35c0 0E94 0000 		brsh .+2
 9319               		rjmp .L304
 9320               	/* epilogue start */
 9322 35c6 8F5F      	.LM820:
 9323 35c8 8983      		pop __tmp_reg__
 9324               		pop r28
 9325 35ca 8981      		pop r29
 9326 35cc 8B36      		ret
 568:main.c        **** 				}
 569:main.c        **** 				val_refr = bar_3_height;
 9328               	,0,1
 9331 35d4 882F      	.Lscope37:
 9332 35d6 90E0      		.data
 9333 35d8 9093 0000 	.LC30:
 9334 35dc 8093 0000 		.string	"A/D:"
 570:main.c        **** 				val_refr_bar = bar_3_height;
 9335               		.string	"Min:"
 9336               	.LC32:
 9337 35e0 8091 0000 		.string	"Max:"
 9338 35e4 8093 0000 	.LC33:
 571:main.c        **** 				val_refr_bcd[2] = (val_refr_bar/10)+48;
 9339               	ring	"T_refr:"
 9340               	.LC34:
 9341 35e8 8091 0000 		.string	"t"
 9342 35ec 9AE0      	.LC35:
 9343 35ee 692F      		.string	"99"
 9344 35f0 0E94 0000 		.text
 9346 35f6 8093 0000 	.global	draw_layout
 572:main.c        **** 				val_refr_bar %= 10;
 9347               	raw_layout, @function
 9348               	draw_layout:
 9350 35fe 9AE0      	.LM821:
 9351 3600 692F      	.LFBB38:
 9352 3602 0E94 0000 		push r16
 9353 3606 892F      		push r17
 9354 3608 8093 0000 		push r29
 573:main.c        **** 				val_refr_bcd[3] = val_refr_bar+48;
 9355               	8
 9356               		push __tmp_reg__
 9357 360c 8091 0000 		in r28,__SP_L__
 9358 3610 805D      		in r29,__SP_H__
 9359 3612 8093 0000 	/* prologue: function */
 9360               	/* frame size = 1 */
 574:main.c        **** 			}
 575:main.c        **** 		}
 576:main.c        **** //============= 		Button 			================
 577:main.c        **** 		if ((buffer_touch_ad_x >= 152) && (buffer_touch_ad_x <= 160) && (buffer_touch_ad_y >= 63) && (buf
 9361               	n	68,0,639,.LM822-.LFBB38
 9362               	.LM822:
 9363 3616 8091 0000 		call lcd_graphics_clear
 9365 361e 8839      	.LM823:
 9366 3620 9105      		ldi r24,lo8(0)
 9367 3622 00F0      		ldi r25,hi8(0)
 9368 3624 8091 0000 		ldi r22,lo8(0)
 9369 3628 9091 0000 		ldi r23,hi8(0)
 9370 362c 813A      		ldi r20,lo8(160)
 9371 362e 9105      		ldi r21,hi8(160)
 9372 3630 00F4      		ldi r18,lo8(80)
 9373 3632 8091 0000 		ldi r19,hi8(80)
 9374 3636 8F33      		call g_draw_rectangle
 9376 363a 8091 0000 	.LM824:
 9377 363e 8135      		ldi r24,lo8(0)
 9378 3640 00F4      		ldi r25,hi8(0)
 578:main.c        **** 		{
 579:main.c        **** 			button_pressed++;
 9379               	di r23,hi8(0)
 9380               		ldi r20,lo8(60)
 9381 3642 8091 0000 		ldi r21,hi8(60)
 9382 3646 8F5F      		ldi r18,lo8(80)
 9383 3648 8093 0000 		ldi r19,hi8(80)
 9384 364c 00C0      		call g_draw_rectangle
 580:main.c        **** 		}
 581:main.c        **** 		else
 582:main.c        **** 		{
 583:main.c        **** 			button_pressed = 0;
 9386               	
 9387               		ldi r18,lo8(.LC30)
 9388 364e 1092 0000 		ldi r19,hi8(.LC30)
 9389               		ldi r24,lo8(5)
 584:main.c        **** 		}
 585:main.c        **** 		if ((button_pressed == 2) && (val_min > val_max))
 9390               	i r25,hi8(5)
 9391               		ldi r22,lo8(5)
 9392 3652 8091 0000 		ldi r23,hi8(5)
 9393 3656 8230      		movw r20,r18
 9394 3658 01F0      		call g_draw_string
 9396 365c 2091 0000 	.LM826:
 9397 3660 3091 0000 		ldi r18,lo8(val_ad_bcd)
 9398 3664 8091 0000 		ldi r19,hi8(val_ad_bcd)
 9399 3668 9091 0000 		ldi r24,lo8(13)
 9400 366c 8217      		ldi r25,hi8(13)
 9401 366e 9307      		ldi r22,lo8(14)
 9402 3670 00F0      		ldi r23,hi8(14)
 9403 3672 00C0      		movw r20,r18
 586:main.c        **** 		{
 587:main.c        **** 			g_draw_string(112, 20, "Error:   ");
 9404               	tring
 9406 3674 20E0      	.LM827:
 9407 3676 30E0      		ldi r18,lo8(.LC16)
 9408 3678 80E7      		ldi r19,hi8(.LC16)
 9409 367a 90E0      		ldi r24,lo8(31)
 9410 367c 64E1      		ldi r25,hi8(31)
 9411 367e 70E0      		ldi r22,lo8(14)
 9412 3680 A901      		ldi r23,hi8(14)
 9413 3682 0E94 0000 		movw r20,r18
 588:main.c        **** 			g_draw_string(112, 30, "Val_min  ");
 9414               	aw_string
 9416 3686 20E0      	.LM828:
 9417 3688 30E0      		ldi r18,lo8(.LC31)
 9418 368a 80E7      		ldi r19,hi8(.LC31)
 9419 368c 90E0      		ldi r24,lo8(5)
 9420 368e 6EE1      		ldi r25,hi8(5)
 9421 3690 70E0      		ldi r22,lo8(23)
 9422 3692 A901      		ldi r23,hi8(23)
 9423 3694 0E94 0000 		movw r20,r18
 589:main.c        **** 			g_draw_string(112, 40, ">        ");
 9424               	aw_string
 9426 3698 20E0      	.LM829:
 9427 369a 30E0      		ldi r18,lo8(val_min_bcd)
 9428 369c 80E7      		ldi r19,hi8(val_min_bcd)
 9429 369e 90E0      		ldi r24,lo8(13)
 9430 36a0 68E2      		ldi r25,hi8(13)
 9431 36a2 70E0      		ldi r22,lo8(32)
 9432 36a4 A901      		ldi r23,hi8(32)
 9433 36a6 0E94 0000 		movw r20,r18
 590:main.c        **** 			g_draw_string(112, 50, "Val_max! ");
 9434               	aw_string
 9436 36aa 20E0      	.LM830:
 9437 36ac 30E0      		ldi r18,lo8(.LC16)
 9438 36ae 80E7      		ldi r19,hi8(.LC16)
 9439 36b0 90E0      		ldi r24,lo8(31)
 9440 36b2 62E3      		ldi r25,hi8(31)
 9441 36b4 70E0      		ldi r22,lo8(32)
 9442 36b6 A901      		ldi r23,hi8(32)
 9443 36b8 0E94 0000 		movw r20,r18
 591:main.c        **** 			delay_ms(2000);
 9444               	aw_string
 9446 36bc 80ED      	.LM831:
 9447 36be 97E0      		ldi r18,lo8(.LC32)
 9448 36c0 0E94 0000 		ldi r19,hi8(.LC32)
 592:main.c        **** 			g_draw_string(112, 20, "         ");
 9449               	r24,lo8(5)
 9450               		ldi r25,hi8(5)
 9451 36c4 20E0      		ldi r22,lo8(41)
 9452 36c6 30E0      		ldi r23,hi8(41)
 9453 36c8 80E7      		movw r20,r18
 9454 36ca 90E0      		call g_draw_string
 9456 36ce 70E0      	.LM832:
 9457 36d0 A901      		ldi r18,lo8(val_max_bcd)
 9458 36d2 0E94 0000 		ldi r19,hi8(val_max_bcd)
 593:main.c        **** 			g_draw_string(112, 30, "         ");
 9459               	o8(13)
 9460               		ldi r25,hi8(13)
 9461 36d6 20E0      		ldi r22,lo8(50)
 9462 36d8 30E0      		ldi r23,hi8(50)
 9463 36da 80E7      		movw r20,r18
 9464 36dc 90E0      		call g_draw_string
 9466 36e0 70E0      	.LM833:
 9467 36e2 A901      		ldi r18,lo8(.LC16)
 9468 36e4 0E94 0000 		ldi r19,hi8(.LC16)
 594:main.c        **** 			g_draw_string(112, 40, "         ");
 9469               	o8(31)
 9470               		ldi r25,hi8(31)
 9471 36e8 20E0      		ldi r22,lo8(50)
 9472 36ea 30E0      		ldi r23,hi8(50)
 9473 36ec 80E7      		movw r20,r18
 9474 36ee 90E0      		call g_draw_string
 9476 36f2 70E0      	.LM834:
 9477 36f4 A901      		ldi r18,lo8(.LC33)
 9478 36f6 0E94 0000 		ldi r19,hi8(.LC33)
 595:main.c        **** 			g_draw_string(112, 50, "         ");
 9479               	o8(5)
 9480               		ldi r25,hi8(5)
 9481 36fa 20E0      		ldi r22,lo8(59)
 9482 36fc 30E0      		ldi r23,hi8(59)
 9483 36fe 80E7      		movw r20,r18
 9484 3700 90E0      		call g_draw_string
 9486 3704 70E0      	.LM835:
 9487 3706 A901      		ldi r18,lo8(val_refr_bcd)
 9488 3708 0E94 0000 		ldi r19,hi8(val_refr_bcd)
 596:main.c        **** 			button_pressed = 0;
 9489               	o8(13)
 9490               		ldi r25,hi8(13)
 9491 370c 1092 0000 		ldi r22,lo8(68)
 9492               		ldi r23,hi8(68)
 597:main.c        **** 		}
 598:main.c        **** //======================================================
 599:main.c        **** 		g_draw_string(5, 4, val_min_bcd);
 9493               	w r20,r18
 9494               		call g_draw_string
 9496 3712 30E0      	.LM836:
 9497 3714 85E0      		ldi r24,lo8(74)
 9498 3716 90E0      		ldi r25,hi8(74)
 9499 3718 64E0      		ldi r22,lo8(75)
 9500 371a 70E0      		ldi r23,hi8(75)
 9501 371c A901      		ldi r20,lo8(80)
 9502 371e 0E94 0000 		ldi r21,hi8(80)
 600:main.c        **** 		g_draw_string(23, 4, "C");
 9503               	aw_horizontal_line
 9505 3722 20E0      	.LM837:
 9506 3724 30E0      		ldi r24,lo8(74)
 9507 3726 87E1      		ldi r25,hi8(74)
 9508 3728 90E0      		ldi r22,lo8(5)
 9509 372a 64E0      		ldi r23,hi8(5)
 9510 372c 70E0      		ldi r20,lo8(70)
 9511 372e A901      		ldi r21,hi8(70)
 9512 3730 0E94 0000 		call g_draw_vertical_line
 601:main.c        **** 		g_draw_string(50, 4, val_max_bcd);
 9513               	,0,655,.LM838-.LFBB38
 9514               	.LM838:
 9515 3734 20E0      		ldi r18,lo8(.LC34)
 9516 3736 30E0      		ldi r19,hi8(.LC34)
 9517 3738 82E3      		ldi r24,lo8(151)
 9518 373a 90E0      		ldi r25,hi8(151)
 9519 373c 64E0      		ldi r22,lo8(65)
 9520 373e 70E0      		ldi r23,hi8(65)
 9521 3740 A901      		movw r20,r18
 9522 3742 0E94 0000 		call g_draw_string
 602:main.c        **** 		g_draw_string(68, 4, "C");
 9523               	,0,656,.LM839-.LFBB38
 9524               	.LM839:
 9525 3746 20E0      		ldi r18,lo8(.LC16)
 9526 3748 30E0      		ldi r19,hi8(.LC16)
 9527 374a 84E4      		ldi r24,lo8(67)
 9528 374c 90E0      		ldi r25,hi8(67)
 9529 374e 64E0      		ldi r22,lo8(2)
 9530 3750 70E0      		ldi r23,hi8(2)
 9531 3752 A901      		movw r20,r18
 9532 3754 0E94 0000 		call g_draw_string
 603:main.c        **** 		g_draw_string(95, 4, val_refr_bcd);
 9533               	,0,658,.LM840-.LFBB38
 9534               	.LM840:
 9535 3758 20E0      		ldi r24,lo8(61)
 9536 375a 30E0      		ldi r22,lo8(0)
 9537 375c 8FE5      		call draw_grad
 9539 3760 64E0      	.LM841:
 9540 3762 70E0      		ldi r24,lo8(25)
 9541 3764 A901      		ldi r22,lo8(12)
 9542 3766 0E94 0000 		call draw_grad
 604:main.c        **** #ifdef GRAD_ON
 605:main.c        **** 		draw_grad(17, 2);
 9543               	,0,660,.LM842-.LFBB38
 9544               	.LM842:
 9545 376a 81E1      		ldi r24,lo8(25)
 9546 376c 62E0      		ldi r22,lo8(30)
 9547 376e 0E94 0000 		call draw_grad
 606:main.c        **** 		draw_grad(62, 2);
 9548               	bn	68,0,661,.LM843-.LFBB38
 9549               	.LM843:
 9550 3772 8EE3      		ldi r24,lo8(25)
 9551 3774 62E0      		ldi r22,lo8(48)
 9552 3776 0E94 0000 		call draw_grad
 9554               	.LM844:
 9555               		ldi r24,lo8(39)
 9556 377a 8091 0000 		ldi r25,hi8(39)
 9557 377e 8430      		ldi r22,lo8(0)
 9558 3780 00F4      		ldi r23,hi8(0)
 9559 3782 00C0      		ldi r20,lo8(21)
 9560               		ldi r21,hi8(21)
 607:main.c        **** #endif
 608:main.c        **** 		
 609:main.c        **** 		/*touch_bcd_y[1] = (buffer_touch_ad_y/1000)+48;
 610:main.c        **** 		buffer_touch_ad_y %= 1000;
 611:main.c        **** 		touch_bcd_y[2] = (buffer_touch_ad_y/100)+48;
 612:main.c        **** 		buffer_touch_ad_y %= 100;
 613:main.c        **** 		touch_bcd_y[3] = (buffer_touch_ad_y/10)+48;
 614:main.c        **** 		buffer_touch_ad_y %= 10;
 615:main.c        **** 		touch_bcd_y[4] = buffer_touch_ad_y+48;
 616:main.c        **** 		
 617:main.c        **** 		touch_bcd_x[1] = (buffer_touch_ad_x/1000)+48;
 618:main.c        **** 		buffer_touch_ad_x %= 1000;
 619:main.c        **** 		touch_bcd_x[2] = (buffer_touch_ad_x/100)+48;
 620:main.c        **** 		buffer_touch_ad_x %= 100;
 621:main.c        **** 		touch_bcd_x[3] = (buffer_touch_ad_x/10)+48;
 622:main.c        **** 		buffer_touch_ad_x %= 10;
 623:main.c        **** 		touch_bcd_x[4] = buffer_touch_ad_x+48;
 624:main.c        **** 		
 625:main.c        **** 		g_draw_string(128, 2, touch_bcd_x);
 626:main.c        **** 		g_draw_string(128, 12, touch_bcd_y);
 627:main.c        **** 		if (button_pressed)
 628:main.c        **** 			g_draw_string(128, 22, "b 1");
 629:main.c        **** 		else
 630:main.c        **** 			g_draw_string(128, 22, "b 0");*/
 631:main.c        **** 	}
 632:main.c        **** }
 9561               	21)
 9562               		ldi r19,hi8(21)
 9563 3784 0F90      		call g_draw_rectangle
 9565 3788 DF91      	.LM845:
 9566 378a 0895      		ldi r24,lo8(152)
 9567               		ldi r25,hi8(152)
 9568               		ldi r22,lo8(74)
 9569               		ldi r23,hi8(74)
 9570               		ldi r20,lo8(-1)
 9571               		call lcd_graphics_plot_pixel
 9573               	.LM846:
 9574 0304 412F 443A 		ldi r24,lo8(152)
 9574      00
 9575               		ldi r25,hi8(152)
 9576 0309 4D69 6E3A 		ldi r22,lo8(76)
 9576      00
 9577               		ldi r23,hi8(76)
 9578 030e 4D61 783A 		ldi r20,lo8(-1)
 9578      00
 9579               		call lcd_graphics_plot_pixel
 9581               	.LM847:
 9582 031b 7400      		ldi r24,lo8(73)
 9583               		ldi r25,hi8(73)
 9584 031d 3939 00   		ldi r22,lo8(7)
 9585               		ldi r23,hi8(7)
 9586               		ldi r20,lo8(-1)
 9587               		call lcd_graphics_plot_pixel
 9589               	.LM848:
 633:main.c        **** 
 634:main.c        **** void draw_layout(void)
 635:main.c        **** {
 9590               	(75)
 9591               		ldi r22,lo8(7)
 9592               		ldi r23,hi8(7)
 9593 378c 0F93      		ldi r20,lo8(-1)
 9594 378e 1F93      		call lcd_graphics_plot_pixel
 9596 3792 CF93      	.LM849:
 9597 3794 0F92      		ldi r24,lo8(73)
 9598 3796 CDB7      		ldi r25,hi8(73)
 9599 3798 DEB7      		ldi r22,lo8(15)
 9600               		ldi r23,hi8(15)
 9601               		ldi r20,lo8(2)
 636:main.c        **** //============= 		Layout 			================
 637:main.c        **** 	unsigned char i;
 638:main.c        **** 
 639:main.c        **** 	lcd_graphics_clear();
 9602               	(2)
 9603               		call g_draw_horizontal_line
 640:main.c        **** 	g_draw_rectangle(0, 0, 160, 80);
 9605               	850:
 9606               		ldi r18,lo8(.LC35)
 9607 379e 80E0      		ldi r19,hi8(.LC35)
 9608 37a0 90E0      		ldi r24,lo8(61)
 9609 37a2 60E0      		ldi r25,hi8(61)
 9610 37a4 70E0      		ldi r22,lo8(12)
 9611 37a6 40EA      		ldi r23,hi8(12)
 9612 37a8 50E0      		movw r20,r18
 9613 37aa 20E5      		call g_draw_string
 9615 37ae 0E94 0000 	.LM851:
 641:main.c        **** 	g_draw_rectangle(0, 0, 60, 80);
 9616               	8(73)
 9617               		std Y+1,r24
 9618 37b2 80E0      		rjmp .L307
 9619 37b4 90E0      	.L309:
 9621 37b8 70E0      	.LM852:
 9622 37ba 4CE3      		ldd r24,Y+1
 9623 37bc 50E0      		ldi r25,lo8(3)
 9624 37be 20E5      		mov r22,r25
 9625 37c0 30E0      		call __udivmodqi4
 9626 37c2 0E94 0000 		mov r24,r25
 642:main.c        **** 	g_draw_string(5, 5, "A/D:");
 9627               	req .+2
 9628               		rjmp .L308
 9630 37c8 30E0      	.LM853:
 9631 37ca 85E0      		ldd r24,Y+1
 9632 37cc 90E0      		mov r16,r24
 9633 37ce 65E0      		ldi r17,lo8(0)
 9634 37d0 70E0      		lds r24,bar_2_height
 9635 37d2 A901      		mov r18,r24
 9636 37d4 0E94 0000 		ldi r19,lo8(0)
 643:main.c        **** 	g_draw_string(13, 14, val_ad_bcd);
 9637               	o8(118)
 9638               		ldi r25,hi8(118)
 9639 37d8 20E0      		movw r20,r24
 9640 37da 30E0      		mul r18,r20
 9641 37dc 8DE0      		movw r24,r0
 9642 37de 90E0      		mul r18,r21
 9643 37e0 6EE0      		add r25,r0
 9644 37e2 70E0      		mul r19,r20
 9645 37e4 A901      		add r25,r0
 9646 37e6 0E94 0000 		clr r1
 644:main.c        **** 	g_draw_string(31, 14, "C");
 9647               	o8(100)
 9648               		ldi r19,hi8(100)
 9649 37ea 20E0      		movw r22,r18
 9650 37ec 30E0      		call __divmodhi4
 9651 37ee 8FE1      		movw r24,r22
 9652 37f0 90E0      		movw r18,r24
 9653 37f2 6EE0      		ldi r24,lo8(60)
 9654 37f4 70E0      		ldi r25,hi8(60)
 9655 37f6 A901      		sub r24,r18
 9656 37f8 0E94 0000 		sbc r25,r19
 645:main.c        **** 	g_draw_string(5, 23, "Min:");
 9657               	sbrc r25,7
 9658               		com r26
 9659 37fc 20E0      		mov r27,r26
 9660 37fe 30E0      		movw r22,r24
 9661 3800 85E0      		movw r24,r26
 9662 3802 90E0      		call __floatsisf
 9663 3804 67E1      		movw r26,r24
 9664 3806 70E0      		movw r24,r22
 9665 3808 A901      		movw r22,r24
 9666 380a 0E94 0000 		movw r24,r26
 646:main.c        **** 	g_draw_string(13, 32, val_min_bcd);
 9667               	d
 9668               		movw r26,r24
 9669 380e 20E0      		movw r24,r22
 9670 3810 30E0      		movw r22,r24
 9671 3812 8DE0      		movw r24,r26
 9672 3814 90E0      		ldi r18,lo8(0x41600000)
 9673 3816 60E2      		ldi r19,hi8(0x41600000)
 9674 3818 70E0      		ldi r20,hlo8(0x41600000)
 9675 381a A901      		ldi r21,hhi8(0x41600000)
 9676 381c 0E94 0000 		call __addsf3
 647:main.c        **** 	g_draw_string(31, 32, "C");
 9677               	r24
 9678               		movw r24,r22
 9679 3820 20E0      		movw r22,r24
 9680 3822 30E0      		movw r24,r26
 9681 3824 8FE1      		call __fixunssfsi
 9682 3826 90E0      		movw r26,r24
 9683 3828 60E2      		movw r24,r22
 9684 382a 70E0      		movw r18,r24
 9685 382c A901      		movw r24,r16
 9686 382e 0E94 0000 		movw r22,r18
 648:main.c        **** 	g_draw_string(5, 41, "Max:");
 9687               	o8(-1)
 9688               		call lcd_graphics_plot_pixel
 9690 3834 30E0      	.LM854:
 9691 3836 85E0      		ldd r24,Y+1
 9692 3838 90E0      		mov r16,r24
 9693 383a 69E2      		ldi r17,lo8(0)
 9694 383c 70E0      		lds r24,bar_1_height
 9695 383e A901      		mov r18,r24
 9696 3840 0E94 0000 		ldi r19,lo8(0)
 649:main.c        **** 	g_draw_string(13, 50, val_max_bcd);
 9697               	o8(118)
 9698               		ldi r25,hi8(118)
 9699 3844 20E0      		movw r20,r24
 9700 3846 30E0      		mul r18,r20
 9701 3848 8DE0      		movw r24,r0
 9702 384a 90E0      		mul r18,r21
 9703 384c 62E3      		add r25,r0
 9704 384e 70E0      		mul r19,r20
 9705 3850 A901      		add r25,r0
 9706 3852 0E94 0000 		clr r1
 650:main.c        **** 	g_draw_string(31, 50, "C");
 9707               	o8(100)
 9708               		ldi r19,hi8(100)
 9709 3856 20E0      		movw r22,r18
 9710 3858 30E0      		call __divmodhi4
 9711 385a 8FE1      		movw r24,r22
 9712 385c 90E0      		movw r18,r24
 9713 385e 62E3      		ldi r24,lo8(60)
 9714 3860 70E0      		ldi r25,hi8(60)
 9715 3862 A901      		sub r24,r18
 9716 3864 0E94 0000 		sbc r25,r19
 651:main.c        **** 	g_draw_string(5, 59, "T_refr:");
 9717               	sbrc r25,7
 9718               		com r26
 9719 3868 20E0      		mov r27,r26
 9720 386a 30E0      		movw r22,r24
 9721 386c 85E0      		movw r24,r26
 9722 386e 90E0      		call __floatsisf
 9723 3870 6BE3      		movw r26,r24
 9724 3872 70E0      		movw r24,r22
 9725 3874 A901      		movw r22,r24
 9726 3876 0E94 0000 		movw r24,r26
 652:main.c        **** 	g_draw_string(13, 68, val_refr_bcd);
 9727               	d
 9728               		movw r26,r24
 9729 387a 20E0      		movw r24,r22
 9730 387c 30E0      		movw r22,r24
 9731 387e 8DE0      		movw r24,r26
 9732 3880 90E0      		ldi r18,lo8(0x41600000)
 9733 3882 64E4      		ldi r19,hi8(0x41600000)
 9734 3884 70E0      		ldi r20,hlo8(0x41600000)
 9735 3886 A901      		ldi r21,hhi8(0x41600000)
 9736 3888 0E94 0000 		call __addsf3
 653:main.c        **** 	g_draw_horizontal_line(74, 75, 80);
 9737               	r24
 9738               		movw r24,r22
 9739 388c 8AE4      		movw r22,r24
 9740 388e 90E0      		movw r24,r26
 9741 3890 6BE4      		call __fixunssfsi
 9742 3892 70E0      		movw r26,r24
 9743 3894 40E5      		movw r24,r22
 9744 3896 50E0      		movw r18,r24
 9745 3898 0E94 0000 		movw r24,r16
 654:main.c        **** 	g_draw_vertical_line(74, 5, 70);
 9746               	,r18
 9747               		ldi r20,lo8(-1)
 9748 389c 8AE4      		call lcd_graphics_plot_pixel
 9749 389e 90E0      	.L308:
 9751 38a2 70E0      	.LM855:
 9752 38a4 46E4      		ldd r24,Y+1
 9753 38a6 50E0      		subi r24,lo8(-(1))
 9754 38a8 0E94 0000 		std Y+1,r24
 655:main.c        **** 	g_draw_string(151, 65, "t");
 9755               	dd r24,Y+1
 9756               		cpi r24,lo8(-101)
 9757 38ac 20E0      		brsh .+2
 9758 38ae 30E0      		rjmp .L309
 9759 38b0 87E9      	/* epilogue start */
 9761 38b4 61E4      	.LM856:
 9762 38b6 70E0      		pop __tmp_reg__
 9763 38b8 A901      		pop r28
 9764 38ba 0E94 0000 		pop r29
 656:main.c        **** 	g_draw_string(67, 2, "C");
 9765               	pop r16
 9766               		ret
 9771 38c6 62E0      	.Lscope38:
 9774 38cc 0E94 0000 	.global	get_touch_x
 657:main.c        **** #ifdef GRAD_ON
 658:main.c        **** 	draw_grad(61, 0);
 9775               	_touch_x, @function
 9776               	get_touch_x:
 9778 38d2 60E0      	.LM857:
 9779 38d4 0E94 0000 	.LFBB39:
 659:main.c        **** 	draw_grad(25, 12);
 9780               	 r14
 9781               		push r15
 9782 38d8 89E1      		push r16
 9783 38da 6CE0      		push r17
 9784 38dc 0E94 0000 		push r29
 660:main.c        **** 	draw_grad(25, 30);
 9785               	 r28
 9786               		in r28,__SP_L__
 9787 38e0 89E1      		in r29,__SP_H__
 9788 38e2 6EE1      		sbiw r28,10
 9789 38e4 0E94 0000 		in __tmp_reg__,__SREG__
 661:main.c        **** 	draw_grad(25, 48);
 9790               		out __SP_H__,r29
 9791               		out __SREG__,__tmp_reg__
 9792 38e8 89E1      		out __SP_L__,r28
 9793 38ea 60E3      	/* prologue: function */
 9794 38ec 0E94 0000 	/* frame size = 10 */
 662:main.c        **** #endif
 663:main.c        **** #ifdef FLAME_AND_FLAKE_ON
 664:main.c        **** 	g_draw_rectangle(PIC_POS_FLAME_FLAKE_X - 1, PIC_POS_FLAME_FLAKE_Y - 1, 21, 21);
 9795               	Y+8,r25
 9796               		std Y+7,r24
 9798 38f2 90E0      	.LM858:
 9799 38f4 60E0      		ldi r24,lo8(102)
 9800 38f6 70E0      		ldi r22,lo8(2)
 9801 38f8 45E1      		call init_in_pin
 9803 38fc 25E1      	.LM859:
 9804 38fe 30E0      		ldi r24,lo8(102)
 9805 3900 0E94 0000 		ldi r22,lo8(1)
 665:main.c        **** #endif
 666:main.c        **** //============= 		Arrow X			================
 667:main.c        **** 	lcd_graphics_plot_pixel(152, 74, PIXEL_ON);
 9806               	out_pin
 9808 3904 88E9      	.LM860:
 9809 3906 90E0      		ldi r24,lo8(102)
 9810 3908 6AE4      		ldi r22,lo8(1)
 9811 390a 70E0      		call set_pin
 9813 390e 0E94 0000 	.LM861:
 668:main.c        **** 	lcd_graphics_plot_pixel(152, 76, PIXEL_ON);
 9814               	,lo8(97)
 9815               		ldi r22,lo8(0)
 9816 3912 88E9      		call reset_pin
 9818 3916 6CE4      	.LM862:
 9819 3918 70E0      		ldi r24,lo8(10)
 9820 391a 4FEF      		ldi r25,hi8(10)
 9821 391c 0E94 0000 		call delay_ms
 669:main.c        **** //============= 		Arrow Y			================	
 670:main.c        **** 	lcd_graphics_plot_pixel(73, 7, PIXEL_ON);
 9822               	68,0,699,.LM863-.LFBB39
 9823               	.LM863:
 9824 3920 89E4      		ldi r30,lo8(39)
 9825 3922 90E0      		ldi r31,hi8(39)
 9826 3924 67E0      		ldi r24,lo8(66)
 9827 3926 70E0      		st Z,r24
 9829 392a 0E94 0000 	.LM864:
 671:main.c        **** 	lcd_graphics_plot_pixel(75, 7, PIXEL_ON);
 9830               	,lo8(38)
 9831               		ldi r31,hi8(38)
 9832 392e 8BE4      		ldi r24,lo8(-105)
 9833 3930 90E0      		st Z,r24
 9835 3934 70E0      	.LM865:
 9836 3936 4FEF      		ldi r26,lo8(38)
 9837 3938 0E94 0000 		ldi r27,hi8(38)
 672:main.c        **** //============= 		5V Level		================	
 673:main.c        **** 	g_draw_horizontal_line(73, 15, 2);
 9838               	,lo8(38)
 9839               		ldi r31,hi8(38)
 9840 393c 89E4      		ld r24,Z
 9841 393e 90E0      		ori r24,lo8(64)
 9842 3940 6FE0      		st X,r24
 9843 3942 70E0      	.L312:
 9845 3946 50E0      	.LM866:
 9846 3948 0E94 0000 		ldi r30,lo8(38)
 674:main.c        **** 	g_draw_string(61, 12, "99");
 9847               	hi8(38)
 9848               		ld r24,Z
 9849 394c 20E0      		mov r24,r24
 9850 394e 30E0      		ldi r25,lo8(0)
 9851 3950 8DE3      		andi r24,lo8(16)
 9852 3952 90E0      		andi r25,hi8(16)
 9853 3954 6CE0      		sbiw r24,0
 9854 3956 70E0      		breq .L312
 9856 395a 0E94 0000 	.LM867:
 675:main.c        **** //============= 		Min/Max Level	================
 676:main.c        **** 	for (i = 73; i <= 154; i++)
 9857               	o8(38)
 9858               		ldi r27,hi8(38)
 9859 395e 89E4      		ldi r30,lo8(38)
 9860 3960 8983      		ldi r31,hi8(38)
 9861 3962 00C0      		ld r24,Z
 9862               		ori r24,lo8(16)
 677:main.c        **** 	{
 678:main.c        **** 		if (!(i%3))
 9863               	r24
 9865 3964 8981      	.LM868:
 9866 3966 93E0      		ldi r30,lo8(36)
 9867 3968 692F      		ldi r31,hi8(36)
 9868 396a 0E94 0000 		ld r24,Z
 9869 396e 892F      		mov r18,r24
 9870 3970 8823      		ldi r19,lo8(0)
 9871 3972 01F0      		ldi r30,lo8(37)
 9872 3974 00C0      		ldi r31,hi8(37)
 679:main.c        **** 		{
 680:main.c        **** 			lcd_graphics_plot_pixel(i, 14+round(60 - bar_2_height * 118 / 100), PIXEL_ON);
 9873               		mov r24,r24
 9874               		ldi r25,lo8(0)
 9875 3976 8981      		mov r25,r24
 9876 3978 082F      		clr r24
 9877 397a 10E0      		or r24,r18
 9878 397c 8091 0000 		or r25,r19
 9879 3980 282F      		std Y+6,r25
 9880 3982 30E0      		std Y+5,r24
 9882 3986 90E0      	.LM869:
 9883 3988 AC01      		ldd r24,Y+5
 9884 398a 249F      		ldd r25,Y+6
 9885 398c C001      		sbiw r24,0
 9886 398e 259F      		brne .L313
 9888 3992 349F      	.LM870:
 9889 3994 900D      		std Y+10,__zero_reg__
 9890 3996 1124      		std Y+9,__zero_reg__
 9891 3998 24E6      		rjmp .L314
 9892 399a 30E0      	.L313:
 9894 399e 0E94 0000 	.LM871:
 9895 39a2 CB01      		ldd r24,Y+7
 9896 39a4 9C01      		ldd r25,Y+8
 9897 39a6 8CE3      		movw r24,r24
 9898 39a8 90E0      		ldi r26,lo8(0)
 9899 39aa 821B      		ldi r27,hi8(0)
 9900 39ac 930B      		movw r22,r24
 9901 39ae AA27      		movw r24,r26
 9902 39b0 97FD      		call __floatunsisf
 9903 39b2 A095      		movw r26,r24
 9904 39b4 BA2F      		movw r24,r22
 9905 39b6 BC01      		movw r22,r24
 9906 39b8 CD01      		movw r24,r26
 9907 39ba 0E94 0000 		ldi r18,lo8(0xc040cccd)
 9908 39be DC01      		ldi r19,hi8(0xc040cccd)
 9909 39c0 CB01      		ldi r20,hlo8(0xc040cccd)
 9910 39c2 BC01      		ldi r21,hhi8(0xc040cccd)
 9911 39c4 CD01      		call __mulsf3
 9912 39c6 0E94 0000 		movw r26,r24
 9913 39ca DC01      		movw r24,r22
 9914 39cc CB01      		movw r22,r24
 9915 39ce BC01      		movw r24,r26
 9916 39d0 CD01      		ldi r18,lo8(0x43d58000)
 9917 39d2 20E0      		ldi r19,hi8(0x43d58000)
 9918 39d4 30E0      		ldi r20,hlo8(0x43d58000)
 9919 39d6 40E6      		ldi r21,hhi8(0x43d58000)
 9920 39d8 51E4      		call __addsf3
 9921 39da 0E94 0000 		movw r26,r24
 9922 39de DC01      		movw r24,r22
 9923 39e0 CB01      		movw r22,r24
 9924 39e2 BC01      		movw r24,r26
 9925 39e4 CD01      		call round
 9926 39e6 0E94 0000 		movw r26,r24
 9927 39ea DC01      		movw r24,r22
 9928 39ec CB01      		movw r22,r24
 9929 39ee 9C01      		movw r24,r26
 9930 39f0 C801      		call __fixunssfsi
 9931 39f2 B901      		movw r26,r24
 9932 39f4 4FEF      		movw r24,r22
 9933 39f6 0E94 0000 		std Y+4,r25
 681:main.c        **** 			lcd_graphics_plot_pixel(i, 14+round(60 - bar_1_height * 118 / 100), PIXEL_ON);
 9934               	,Y+7
 9935               		ldd r25,Y+8
 9936 39fa 8981      		movw r24,r24
 9937 39fc 082F      		ldi r26,lo8(0)
 9938 39fe 10E0      		ldi r27,hi8(0)
 9939 3a00 8091 0000 		movw r22,r24
 9940 3a04 282F      		movw r24,r26
 9941 3a06 30E0      		call __floatunsisf
 9942 3a08 86E7      		movw r26,r24
 9943 3a0a 90E0      		movw r24,r22
 9944 3a0c AC01      		movw r22,r24
 9945 3a0e 249F      		movw r24,r26
 9946 3a10 C001      		ldi r18,lo8(0xc0180000)
 9947 3a12 259F      		ldi r19,hi8(0xc0180000)
 9948 3a14 900D      		ldi r20,hlo8(0xc0180000)
 9949 3a16 349F      		ldi r21,hhi8(0xc0180000)
 9950 3a18 900D      		call __mulsf3
 9951 3a1a 1124      		movw r26,r24
 9952 3a1c 24E6      		movw r24,r22
 9953 3a1e 30E0      		movw r22,r24
 9954 3a20 B901      		movw r24,r26
 9955 3a22 0E94 0000 		ldi r18,lo8(0x43960000)
 9956 3a26 CB01      		ldi r19,hi8(0x43960000)
 9957 3a28 9C01      		ldi r20,hlo8(0x43960000)
 9958 3a2a 8CE3      		ldi r21,hhi8(0x43960000)
 9959 3a2c 90E0      		call __addsf3
 9960 3a2e 821B      		movw r26,r24
 9961 3a30 930B      		movw r24,r22
 9962 3a32 AA27      		movw r22,r24
 9963 3a34 97FD      		movw r24,r26
 9964 3a36 A095      		call round
 9965 3a38 BA2F      		movw r26,r24
 9966 3a3a BC01      		movw r24,r22
 9967 3a3c CD01      		movw r22,r24
 9968 3a3e 0E94 0000 		movw r24,r26
 9969 3a42 DC01      		call __fixunssfsi
 9970 3a44 CB01      		movw r26,r24
 9971 3a46 BC01      		movw r24,r22
 9972 3a48 CD01      		std Y+2,r25
 9973 3a4a 0E94 0000 		std Y+1,r24
 9975 3a50 CB01      	.LM873:
 9976 3a52 BC01      		ldd r18,Y+5
 9977 3a54 CD01      		ldd r19,Y+6
 9978 3a56 20E0      		ldd r24,Y+1
 9979 3a58 30E0      		ldd r25,Y+2
 9980 3a5a 40E6      		movw r20,r18
 9981 3a5c 51E4      		sub r20,r24
 9982 3a5e 0E94 0000 		sbc r21,r25
 9983 3a62 DC01      		movw r24,r20
 9984 3a64 CB01      		movw r24,r24
 9985 3a66 BC01      		ldi r26,lo8(0)
 9986 3a68 CD01      		ldi r27,hi8(0)
 9987 3a6a 0E94 0000 		movw r22,r24
 9988 3a6e DC01      		movw r24,r26
 9989 3a70 CB01      		call __floatunsisf
 9990 3a72 9C01      		movw r26,r24
 9991 3a74 C801      		movw r24,r22
 9992 3a76 B901      		movw r22,r24
 9993 3a78 4FEF      		movw r24,r26
 9994 3a7a 0E94 0000 		ldi r18,lo8(0xc3200000)
 9995               		ldi r19,hi8(0xc3200000)
 9996               		ldi r20,hlo8(0xc3200000)
 9997               		ldi r21,hhi8(0xc3200000)
 9998 3a7e 8981      		call __mulsf3
 9999 3a80 8F5F      		movw r26,r24
 10000 3a82 8983      		movw r24,r22
 10001               		movw r14,r24
 10002 3a84 8981      		movw r16,r26
 10003 3a86 8B39      		ldd r18,Y+3
 10004 3a88 00F4      		ldd r19,Y+4
 10005 3a8a 00C0      		ldd r24,Y+1
 10006               		ldd r25,Y+2
 682:main.c        **** 		}
 683:main.c        **** 	}
 684:main.c        **** //============= 		/Layout			================
 685:main.c        **** }
 10007               	r26,lo8(0)
 10008               		ldi r27,hi8(0)
 10009 3a8c 0F90      		movw r22,r24
 10010 3a8e CF91      		movw r24,r26
 10011 3a90 DF91      		call __floatunsisf
 10012 3a92 1F91      		movw r18,r22
 10013 3a94 0F91      		movw r20,r24
 10014 3a96 0895      		movw r24,r16
 10015               		movw r22,r14
 10016               		call __divsf3
 10017               		movw r26,r24
 10018               		movw r24,r22
 10019               		movw r22,r24
 10020               		movw r24,r26
 10021               		ldi r18,lo8(0x43200000)
 10022               		ldi r19,hi8(0x43200000)
 10023               		ldi r20,hlo8(0x43200000)
 10024               		ldi r21,hhi8(0x43200000)
 686:main.c        **** 
 687:main.c        **** unsigned int get_touch_x(unsigned int y)
 688:main.c        **** {
 10025               	vw r26,r24
 10026               		movw r24,r22
 10027               		movw r22,r24
 10028 3a98 EF92      		movw r24,r26
 10029 3a9a FF92      		call round
 10030 3a9c 0F93      		movw r26,r24
 10031 3a9e 1F93      		movw r24,r22
 10032 3aa0 DF93      		movw r22,r24
 10033 3aa2 CF93      		movw r24,r26
 10034 3aa4 CDB7      		call __fixunssfsi
 10035 3aa6 DEB7      		movw r26,r24
 10036 3aa8 2A97      		movw r24,r22
 10037 3aaa 0FB6      		std Y+10,r25
 10038 3aac F894      		std Y+9,r24
 10039 3aae DEBF      	.L314:
 10040 3ab0 0FBE      		ldd r24,Y+9
 10041 3ab2 CDBF      		ldd r25,Y+10
 10042               	/* epilogue start */
 10044 3ab4 9887      	.LM874:
 10045 3ab6 8F83      		adiw r28,10
 689:main.c        **** 	unsigned int x;
 690:main.c        **** 	unsigned int x_left;
 691:main.c        **** 	unsigned int x_right;
 692:main.c        **** 	
 693:main.c        **** 	init_in_pin('f', 2);	
 10046               	G__
 10047               		cli
 10048 3ab8 86E6      		out __SP_H__,r29
 10049 3aba 62E0      		out __SREG__,__tmp_reg__
 10050 3abc 0E94 0000 		out __SP_L__,r28
 694:main.c        **** 	init_out_pin('f', 1);
 10051               	r28
 10052               		pop r29
 10053 3ac0 86E6      		pop r17
 10054 3ac2 61E0      		pop r16
 10055 3ac4 0E94 0000 		pop r15
 695:main.c        **** 	set_pin('f', 1);
 10056               	r14
 10057               		ret
 696:main.c        **** 	reset_pin('a', 0);
 10061               	bs	"x_right:(0,4)",128,0,0,1
 10064 3ad2 60E0      	.Lscope39:
 697:main.c        **** 	delay_ms(10);
 10066               	al	get_touch_y
 10068 3ad8 8AE0      	get_touch_y:
 10070 3adc 0E94 0000 	.LM875:
 698:main.c        **** 
 699:main.c        **** 	ADMUX = 0x42;				//connect to AD_2
 10071               	40:
 10072               		push r29
 10073 3ae0 E7E2      		push r28
 10074 3ae2 F0E0      		in r28,__SP_L__
 10075 3ae4 82E4      		in r29,__SP_H__
 10076 3ae6 8083      	/* prologue: function */
 700:main.c        **** 	ADCSRA = 0x97;				//enable ad converter
 10077               	me size = 0 */
 10079 3ae8 E6E2      	.LM876:
 10080 3aea F0E0      		ldi r24,lo8(102)
 10081 3aec 87E9      		ldi r22,lo8(1)
 10082 3aee 8083      		call init_in_pin
 701:main.c        **** 	ADCSRA |= 0x40;				//start converter
 10083               	n	68,0,716,.LM877-.LFBB40
 10084               	.LM877:
 10085 3af0 A6E2      		ldi r24,lo8(102)
 10086 3af2 B0E0      		ldi r22,lo8(2)
 10087 3af4 E6E2      		call init_out_pin
 10089 3af8 8081      	.LM878:
 10090 3afa 8064      		ldi r24,lo8(102)
 10091 3afc 8C93      		ldi r22,lo8(2)
 10092               		call reset_pin
 702:main.c        **** 	while((ADCSRA&0x10)==0);
 10093               	,0,718,.LM879-.LFBB40
 10094               	.LM879:
 10095 3afe E6E2      		ldi r24,lo8(97)
 10096 3b00 F0E0      		ldi r22,lo8(0)
 10097 3b02 8081      		call set_pin
 10099 3b06 90E0      	.LM880:
 10100 3b08 8071      		ldi r24,lo8(10)
 10101 3b0a 9070      		ldi r25,hi8(10)
 10102 3b0c 0097      		call delay_ms
 703:main.c        **** 	ADCSRA |= 0x10;
 10104               	i r30,lo8(39)
 10105               		ldi r31,hi8(39)
 10106 3b10 A6E2      		ldi r24,lo8(65)
 10107 3b12 B0E0      		st Z,r24
 10109 3b16 F0E0      	.LM882:
 10110 3b18 8081      		ldi r30,lo8(38)
 10111 3b1a 8061      		ldi r31,hi8(38)
 10112 3b1c 8C93      		ldi r24,lo8(-105)
 704:main.c        **** 	x = ADCL|ADCH<<8;
 10113               	
 10115 3b1e E4E2      	.LM883:
 10116 3b20 F0E0      		ldi r26,lo8(38)
 10117 3b22 8081      		ldi r27,hi8(38)
 10118 3b24 282F      		ldi r30,lo8(38)
 10119 3b26 30E0      		ldi r31,hi8(38)
 10120 3b28 E5E2      		ld r24,Z
 10121 3b2a F0E0      		ori r24,lo8(64)
 10122 3b2c 8081      		st X,r24
 10123 3b2e 882F      	.L317:
 10125 3b32 982F      	.LM884:
 10126 3b34 8827      		ldi r30,lo8(38)
 10127 3b36 822B      		ldi r31,hi8(38)
 10128 3b38 932B      		ld r24,Z
 10129 3b3a 9E83      		mov r24,r24
 10130 3b3c 8D83      		ldi r25,lo8(0)
 705:main.c        **** 	if (x == 0)
 10131               	
 10132               		andi r25,hi8(16)
 10133 3b3e 8D81      		sbiw r24,0
 10134 3b40 9E81      		breq .L317
 10136 3b44 01F4      	.LM885:
 706:main.c        **** 		return 0;
 10137               	r26,lo8(38)
 10138               		ldi r27,hi8(38)
 10139 3b46 1A86      		ldi r30,lo8(38)
 10140 3b48 1986      		ldi r31,hi8(38)
 10141 3b4a 00C0      		ld r24,Z
 10142               		ori r24,lo8(16)
 707:main.c        **** 	x_left = round(427-(y*((float)(427-186)/80.0)));
 10143               	r24
 10145 3b4c 8F81      	.LM886:
 10146 3b4e 9885      		ldi r30,lo8(36)
 10147 3b50 CC01      		ldi r31,hi8(36)
 10148 3b52 A0E0      		ld r24,Z
 10149 3b54 B0E0      		mov r18,r24
 10150 3b56 BC01      		ldi r19,lo8(0)
 10151 3b58 CD01      		ldi r30,lo8(37)
 10152 3b5a 0E94 0000 		ldi r31,hi8(37)
 10153 3b5e DC01      		ld r24,Z
 10154 3b60 CB01      		mov r24,r24
 10155 3b62 BC01      		ldi r25,lo8(0)
 10156 3b64 CD01      		mov r25,r24
 10157 3b66 2DEC      		clr r24
 10158 3b68 3CEC      		or r24,r18
 10159 3b6a 40E4      		or r25,r19
 10160 3b6c 50EC      		subi r24,lo8(-(-262))
 10161 3b6e 0E94 0000 		sbci r25,hi8(-(-262))
 10162 3b72 DC01      		clr r26
 10163 3b74 CB01      		sbrc r25,7
 10164 3b76 BC01      		com r26
 10165 3b78 CD01      		mov r27,r26
 10166 3b7a 20E0      		movw r22,r24
 10167 3b7c 30E8      		movw r24,r26
 10168 3b7e 45ED      		call __floatsisf
 10169 3b80 53E4      		movw r26,r24
 10170 3b82 0E94 0000 		movw r24,r22
 10171 3b86 DC01      		movw r22,r24
 10172 3b88 CB01      		movw r24,r26
 10173 3b8a BC01      		ldi r18,lo8(0x40d00000)
 10174 3b8c CD01      		ldi r19,hi8(0x40d00000)
 10175 3b8e 0E94 0000 		ldi r20,hlo8(0x40d00000)
 10176 3b92 DC01      		ldi r21,hhi8(0x40d00000)
 10177 3b94 CB01      		call __divsf3
 10178 3b96 BC01      		movw r26,r24
 10179 3b98 CD01      		movw r24,r22
 10180 3b9a 0E94 0000 		movw r22,r24
 10181 3b9e DC01      		movw r24,r26
 10182 3ba0 CB01      		call round
 10183 3ba2 9C83      		movw r26,r24
 10184 3ba4 8B83      		movw r24,r22
 708:main.c        **** 	x_right = round(300-(y*((float)(300-110)/80.0)));
 10185               	sfsi
 10186               		movw r26,r24
 10187 3ba6 8F81      		movw r24,r22
 10188 3ba8 9885      	/* epilogue start */
 10190 3bac A0E0      	.LM887:
 10191 3bae B0E0      		pop r28
 10192 3bb0 BC01      		pop r29
 10193 3bb2 CD01      		ret
 10195 3bb8 DC01      	.Lscope40:
 10197 3bbc BC01      	.global	clr_diagram
 10199 3bc0 20E0      	clr_diagram:
 10201 3bc4 48E1      	.LM888:
 10202 3bc6 50EC      	.LFBB41:
 10203 3bc8 0E94 0000 		push r29
 10204 3bcc DC01      		push r28
 10205 3bce CB01      		rcall .
 10206 3bd0 BC01      		in r28,__SP_L__
 10207 3bd2 CD01      		in r29,__SP_H__
 10208 3bd4 20E0      	/* prologue: function */
 10209 3bd6 30E0      	/* frame size = 2 */
 10211 3bda 53E4      	.LM889:
 10212 3bdc 0E94 0000 		std Y+1,__zero_reg__
 10214 3be2 CB01      	.LM890:
 10215 3be4 BC01      		std Y+2,__zero_reg__
 10216 3be6 CD01      		rjmp .L320
 10217 3be8 0E94 0000 	.L323:
 10219 3bee CB01      	.LM891:
 10220 3bf0 BC01      		std Y+1,__zero_reg__
 10221 3bf2 CD01      		rjmp .L321
 10222 3bf4 0E94 0000 	.L322:
 10224 3bfa CB01      	.LM892:
 10225 3bfc 9A83      		ldd r24,Y+2
 10226 3bfe 8983      		mov r20,r24
 709:main.c        **** 	
 710:main.c        **** 	return round(160-((x-x_right)*160.0/(float)(x_left-x_right)));
 10227               		ldi r19,lo8(0)
 10228               		ldi r24,lo8(60)
 10229 3c00 2D81      		ldi r25,hi8(60)
 10230 3c02 3E81      		movw r22,r24
 10231 3c04 8981      		mul r20,r22
 10232 3c06 9A81      		movw r24,r0
 10233 3c08 A901      		mul r20,r23
 10234 3c0a 481B      		add r25,r0
 10235 3c0c 590B      		mul r21,r22
 10236 3c0e CA01      		add r25,r0
 10237 3c10 CC01      		clr r1
 10238 3c12 A0E0      		add r24,r18
 10239 3c14 B0E0      		adc r25,r19
 10240 3c16 BC01      		movw r30,r24
 10241 3c18 CD01      		subi r30,lo8(-(diagram))
 10242 3c1a 0E94 0000 		sbci r31,hi8(-(diagram))
 10243 3c1e DC01      		st Z,__zero_reg__
 10245 3c22 BC01      	.LM893:
 10246 3c24 CD01      		ldd r24,Y+1
 10247 3c26 20E0      		subi r24,lo8(-(1))
 10248 3c28 30E0      		std Y+1,r24
 10249 3c2a 40E2      	.L321:
 10250 3c2c 53EC      		ldd r24,Y+1
 10251 3c2e 0E94 0000 		cpi r24,lo8(60)
 10252 3c32 DC01      		brlo .L322
 10254 3c36 7C01      	.LM894:
 10255 3c38 8D01      		ldd r24,Y+2
 10256 3c3a 2B81      		subi r24,lo8(-(1))
 10257 3c3c 3C81      		std Y+2,r24
 10258 3c3e 8981      	.L320:
 10259 3c40 9A81      		ldd r24,Y+2
 10260 3c42 A901      		cpi r24,lo8(10)
 10261 3c44 481B      		brlo .L323
 10262 3c46 590B      	/* epilogue start */
 10264 3c4a CC01      	.LM895:
 10265 3c4c A0E0      		pop __tmp_reg__
 10266 3c4e B0E0      		pop __tmp_reg__
 10267 3c50 BC01      		pop r28
 10268 3c52 CD01      		pop r29
 10269 3c54 0E94 0000 		ret
 10275 3c64 DC01      	.Lscope41:
 10277 3c68 BC01      	.global	draw_diagram
 10279 3c6c 20E0      	draw_diagram:
 10281 3c70 40E2      	.LM896:
 10282 3c72 53E4      	.LFBB42:
 10283 3c74 0E94 0000 		push r29
 10284 3c78 DC01      		push r28
 10285 3c7a CB01      		rcall .
 10286 3c7c BC01      		rcall .
 10287 3c7e CD01      		push __tmp_reg__
 10288 3c80 0E94 0000 		in r28,__SP_L__
 10289 3c84 DC01      		in r29,__SP_H__
 10290 3c86 CB01      	/* prologue: function */
 10291 3c88 BC01      	/* frame size = 5 */
 10293 3c8c 0E94 0000 	.LM897:
 10294 3c90 DC01      		std Y+4,__zero_reg__
 10296 3c94 9A87      	.LM898:
 10297 3c96 8987      		ldi r24,lo8(7)
 10298               		std Y+3,r24
 10300 3c9a 9A85      	.LM899:
 10301               		ldi r24,lo8(74)
 711:main.c        **** }
 10302               	Y+1,r24
 10304 3c9c 2A96      	.LM901:
 10305 3c9e 0FB6      		std Y+5,__zero_reg__
 10306 3ca0 F894      		rjmp .L326
 10307 3ca2 DEBF      	.L332:
 10309 3ca6 CDBF      	.LM902:
 10310 3ca8 CF91      		std Y+3,__zero_reg__
 10311 3caa DF91      		rjmp .L327
 10312 3cac 1F91      	.L331:
 10314 3cb0 FF90      	.LM903:
 10315 3cb2 EF90      		std Y+4,__zero_reg__
 10316 3cb4 0895      		rjmp .L328
 10317               	.L330:
 10319               	.LM904:
 10320               		ldd r24,Y+5
 10321               		mov r20,r24
 10322               		ldi r21,lo8(0)
 10323               		ldd r24,Y+4
 10324               		mov r18,r24
 10325               		ldi r19,lo8(0)
 10326               		ldi r24,lo8(60)
 10327               		ldi r25,hi8(60)
 712:main.c        **** 
 713:main.c        **** unsigned char get_touch_y(void)
 714:main.c        **** {
 10328               	
 10329               		movw r24,r0
 10330               		mul r20,r23
 10331 3cb6 DF93      		add r25,r0
 10332 3cb8 CF93      		mul r21,r22
 10333 3cba CDB7      		add r25,r0
 10334 3cbc DEB7      		clr r1
 10335               		add r24,r18
 10336               		adc r25,r19
 715:main.c        **** 	init_in_pin('f', 1);	
 10337               	0,r24
 10338               		subi r30,lo8(-(diagram))
 10339 3cbe 86E6      		sbci r31,hi8(-(diagram))
 10340 3cc0 61E0      		ld r24,Z
 10341 3cc2 0E94 0000 		mov r20,r24
 716:main.c        **** 	init_out_pin('f', 2);
 10342               	r21,lo8(0)
 10343               		ldd r24,Y+3
 10344 3cc6 86E6      		mov r18,r24
 10345 3cc8 62E0      		ldi r19,lo8(0)
 10346 3cca 0E94 0000 		ldi r24,lo8(7)
 717:main.c        **** 	reset_pin('f', 2);
 10347               	r25,hi8(7)
 10348               		sub r24,r18
 10349 3cce 86E6      		sbc r25,r19
 10350 3cd0 62E0      		movw r18,r20
 10351 3cd2 0E94 0000 		rjmp 2f
 718:main.c        **** 	set_pin('a', 0);
 10352               	r r19
 10353               		ror r18
 10354 3cd6 81E6      	2:	dec r24
 10355 3cd8 60E0      		brpl 1b
 10356 3cda 0E94 0000 		movw r24,r18
 719:main.c        **** 	delay_ms(10);
 10357               	 r24,lo8(1)
 10358               		andi r25,hi8(1)
 10359 3cde 8AE0      		tst r24
 10360 3ce0 90E0      		breq .L329
 720:main.c        **** 
 721:main.c        **** 	ADMUX = 0x41;				//connect to AD_1
 10362               	5:
 10363               		ldd r24,Y+5
 10364 3ce6 E7E2      		mov r24,r24
 10365 3ce8 F0E0      		ldi r25,lo8(0)
 10366 3cea 81E4      		lsl r24
 10367 3cec 8083      		rol r25
 722:main.c        **** 	ADCSRA = 0x97;				//enable ad converter
 10368               	24
 10369               		rol r25
 10370 3cee E6E2      		lsl r24
 10371 3cf0 F0E0      		rol r25
 10372 3cf2 87E9      		mov r25,r24
 10373 3cf4 8083      		ldd r24,Y+3
 723:main.c        **** 	ADCSRA |= 0x40;				//start converter
 10374               	24,r25
 10375               		mov r18,r24
 10376 3cf6 A6E2      		subi r18,lo8(-(75))
 10377 3cf8 B0E0      		ldi r25,lo8(74)
 10378 3cfa E6E2      		ldd r24,Y+4
 10379 3cfc F0E0      		sub r25,r24
 10380 3cfe 8081      		ldd r24,Y+2
 10381 3d00 8064      		ldd r22,Y+1
 10382 3d02 8C93      		mov r20,r18
 10383               		mov r18,r25
 724:main.c        **** 	while((ADCSRA&0x10)==0);
 10384               	_line
 10386 3d04 E6E2      	.LM906:
 10387 3d06 F0E0      		ldd r24,Y+5
 10388 3d08 8081      		mov r24,r24
 10389 3d0a 882F      		ldi r25,lo8(0)
 10390 3d0c 90E0      		lsl r24
 10391 3d0e 8071      		rol r25
 10392 3d10 9070      		lsl r24
 10393 3d12 0097      		rol r25
 10394 3d14 01F0      		lsl r24
 725:main.c        **** 	ADCSRA |= 0x10;
 10395               	ov r25,r24
 10396               		ldd r24,Y+3
 10397 3d16 A6E2      		add r24,r25
 10398 3d18 B0E0      		subi r24,lo8(-(75))
 10399 3d1a E6E2      		std Y+2,r24
 10401 3d1e 8081      	.LM907:
 10402 3d20 8061      		ldi r25,lo8(74)
 10403 3d22 8C93      		ldd r24,Y+4
 726:main.c        **** 
 727:main.c        **** 	return round(((ADCL|ADCH<<8)-262)/6.5);
 10404               	r25
 10405               		sub r19,r24
 10406 3d24 E4E2      		mov r24,r19
 10407 3d26 F0E0      		std Y+1,r24
 10408 3d28 8081      	.L329:
 10410 3d2c 30E0      	.LM908:
 10411 3d2e E5E2      		ldd r24,Y+4
 10412 3d30 F0E0      		subi r24,lo8(-(1))
 10413 3d32 8081      		std Y+4,r24
 10414 3d34 882F      	.L328:
 10415 3d36 90E0      		ldd r24,Y+4
 10416 3d38 982F      		cpi r24,lo8(60)
 10417 3d3a 8827      		brsh .+2
 10418 3d3c 822B      		rjmp .L330
 10420 3d40 8650      	.LM909:
 10421 3d42 9140      		ldd r24,Y+3
 10422 3d44 AA27      		subi r24,lo8(-(1))
 10423 3d46 97FD      		std Y+3,r24
 10424 3d48 A095      	.L327:
 10425 3d4a BA2F      		ldd r24,Y+3
 10426 3d4c BC01      		cpi r24,lo8(8)
 10427 3d4e CD01      		brsh .+2
 10428 3d50 0E94 0000 		rjmp .L331
 10430 3d56 CB01      	.LM910:
 10431 3d58 BC01      		ldd r24,Y+5
 10432 3d5a CD01      		subi r24,lo8(-(1))
 10433 3d5c 20E0      		std Y+5,r24
 10434 3d5e 30E0      	.L326:
 10435 3d60 40ED      		ldd r24,Y+5
 10436 3d62 50E4      		cpi r24,lo8(10)
 10437 3d64 0E94 0000 		brsh .+2
 10438 3d68 DC01      		rjmp .L332
 10440 3d6c BC01      	.LM911:
 10441 3d6e CD01      		ldi r18,lo8(.LC34)
 10442 3d70 0E94 0000 		ldi r19,hi8(.LC34)
 10443 3d74 DC01      		ldi r24,lo8(151)
 10444 3d76 CB01      		ldi r25,hi8(151)
 10445 3d78 BC01      		ldi r22,lo8(65)
 10446 3d7a CD01      		ldi r23,hi8(65)
 10447 3d7c 0E94 0000 		movw r20,r18
 10448 3d80 DC01      		call g_draw_string
 10449 3d82 CB01      	/* epilogue start */
 728:main.c        **** }
 10451               	__tmp_reg__
 10452               		pop __tmp_reg__
 10453 3d84 CF91      		pop __tmp_reg__
 10454 3d86 DF91      		pop r28
 10455 3d88 0895      		pop r29
 10456               		ret
 729:main.c        **** 
 730:main.c        **** void clr_diagram(void)
 731:main.c        **** {
 10462               	buffer:(0,11)",128,0,0,1
 10465 3d8a DF93      	.Lscope42:
 10471               	.global	draw_line
 732:main.c        **** 	unsigned char x, y = 0;
 10472               	w_line, @function
 10473               	draw_line:
 733:main.c        **** 	
 734:main.c        **** 	for (x = 0; x <= 9; x++)
 10475               	913:
 10476               	.LFBB43:
 10477 3d96 1A82      		push r14
 10478 3d98 00C0      		push r15
 10479               		push r16
 735:main.c        **** 	{
 736:main.c        **** 		for (y = 0; y <= 59; y++)
 10480               	 r17
 10481               		push r29
 10482 3d9a 1982      		push r28
 10483 3d9c 00C0      		in r28,__SP_L__
 10484               		in r29,__SP_H__
 737:main.c        **** 		{
 738:main.c        **** 			diagram[x][y] = 0;
 10485               	 r28,14
 10486               		in __tmp_reg__,__SREG__
 10487 3d9e 8A81      		cli
 10488 3da0 482F      		out __SP_H__,r29
 10489 3da2 50E0      		out __SREG__,__tmp_reg__
 10490 3da4 8981      		out __SP_L__,r28
 10491 3da6 282F      	/* prologue: function */
 10492 3da8 30E0      	/* frame size = 14 */
 10493 3daa 8CE3      		std Y+11,r24
 10494 3dac 90E0      		std Y+12,r22
 10495 3dae BC01      		std Y+13,r20
 10496 3db0 469F      		std Y+14,r18
 10498 3db4 479F      	.LM914:
 10499 3db6 900D      		ldd r25,Y+13
 10500 3db8 569F      		ldd r24,Y+11
 10501 3dba 900D      		mov r18,r25
 10502 3dbc 1124      		sub r18,r24
 10503 3dbe 820F      		mov r24,r18
 10504 3dc0 931F      		std Y+10,r24
 10506 3dc4 E050      	.LM915:
 10507 3dc6 F040      		ldd r25,Y+14
 10508 3dc8 1082      		ldd r24,Y+12
 10509               		mov r18,r25
 10510               		sub r18,r24
 10511 3dca 8981      		mov r24,r18
 10512 3dcc 8F5F      		std Y+9,r24
 10514               	.LM916:
 10515 3dd0 8981      		ldd r24,Y+11
 10516 3dd2 8C33      		mov r20,r24
 10517 3dd4 00F0      		ldi r21,lo8(0)
 10518               		ldd r24,Y+12
 10519               		mov r18,r24
 10520 3dd6 8A81      		ldi r19,lo8(0)
 10521 3dd8 8F5F      		movw r24,r20
 10522 3dda 8A83      		movw r22,r18
 10523               		ldi r20,lo8(-1)
 10524 3ddc 8A81      		call lcd_graphics_plot_pixel
 10526 3de0 00F0      	.LM917:
 10527               		ldd r24,Y+10
 739:main.c        **** 		}
 740:main.c        **** 	}	
 741:main.c        **** }
 10528               		mov r27,r25
 10529               		movw r22,r24
 10530 3de2 0F90      		movw r24,r26
 10531 3de4 0F90      		call __floatsisf
 10532 3de6 CF91      		movw r26,r24
 10533 3de8 DF91      		movw r24,r22
 10534 3dea 0895      		movw r14,r24
 10535               		movw r16,r26
 10536               		clt
 10537               		bld r17,7
 10538               		ldd r24,Y+9
 10539               		clr r25
 10540               		sbrc r24,7
 10541               		com r25
 10542               		mov r26,r25
 10543               		mov r27,r25
 10544               		movw r22,r24
 742:main.c        **** 
 743:main.c        **** void draw_diagram(void)
 744:main.c        **** {
 10545               	ll __floatsisf
 10546               		movw r26,r24
 10547               		movw r24,r22
 10548 3dec DF93      		movw r18,r24
 10549 3dee CF93      		movw r20,r26
 10550 3df0 00D0      		andi r21,0x7f
 10551 3df2 00D0      		movw r24,r16
 10552 3df4 0F92      		movw r22,r14
 10553 3df6 CDB7      		call __gtsf2
 10554 3df8 DEB7      		cp __zero_reg__,r24
 10555               		brlt .+2
 10556               		rjmp .L348
 745:main.c        **** 	unsigned char x, y = 0;
 10557               	bn	68,0,783,.LM918-.LFBB43
 10558               	.LM918:
 10559 3dfa 1C82      		ldd r24,Y+9
 746:main.c        **** 	unsigned char bit = 7;
 10560               	r r25
 10561               		sbrc r24,7
 10562 3dfc 87E0      		com r25
 10563 3dfe 8B83      		mov r26,r25
 747:main.c        **** 	unsigned char x_buffer = 74;
 10564               	 r27,r25
 10565               		movw r22,r24
 10566 3e00 8AE4      		movw r24,r26
 10567 3e02 8A83      		call __floatsisf
 748:main.c        **** 	unsigned char y_buffer = 75;
 10568               	w r14,r22
 10569               		movw r16,r24
 10570 3e04 8BE4      		ldd r24,Y+10
 10571 3e06 8983      		clr r25
 749:main.c        **** 	
 750:main.c        **** 	for (x = 0; x <= 9; x++)
 10572               	c r24,7
 10573               		com r25
 10574 3e08 1D82      		mov r26,r25
 10575 3e0a 00C0      		mov r27,r25
 10576               		movw r22,r24
 751:main.c        **** 	{
 752:main.c        **** 		for (bit = 0; bit <= 7; bit++)
 10577               	 r24,r26
 10578               		call __floatsisf
 10579 3e0c 1B82      		movw r18,r22
 10580 3e0e 00C0      		movw r20,r24
 10581               		movw r24,r16
 753:main.c        **** 		{
 754:main.c        **** 			for (y = 0; y <= 59; y++)
 10582               	 r22,r14
 10583               		call __divsf3
 10584 3e10 1C82      		movw r26,r24
 10585 3e12 00C0      		movw r24,r22
 10586               		std Y+5,r24
 755:main.c        **** 			{
 756:main.c        **** 				if (diagram[x][y] & (1 << ((-1*bit)+7)))
 10587               	Y+6,r25
 10588               		std Y+7,r26
 10589 3e14 8D81      		std Y+8,r27
 10591 3e18 50E0      	.LM919:
 10592 3e1a 8C81      		ldd r24,Y+12
 10593 3e1c 282F      		mov r24,r24
 10594 3e1e 30E0      		ldi r25,lo8(0)
 10595 3e20 8CE3      		clr r26
 10596 3e22 90E0      		sbrc r25,7
 10597 3e24 BC01      		com r26
 10598 3e26 469F      		mov r27,r26
 10599 3e28 C001      		movw r22,r24
 10600 3e2a 479F      		movw r24,r26
 10601 3e2c 900D      		call __floatsisf
 10602 3e2e 569F      		movw r14,r22
 10603 3e30 900D      		movw r16,r24
 10604 3e32 1124      		ldd r24,Y+11
 10605 3e34 820F      		mov r24,r24
 10606 3e36 931F      		ldi r25,lo8(0)
 10607 3e38 FC01      		clr r26
 10608 3e3a E050      		sbrc r25,7
 10609 3e3c F040      		com r26
 10610 3e3e 8081      		mov r27,r26
 10611 3e40 482F      		movw r22,r24
 10612 3e42 50E0      		movw r24,r26
 10613 3e44 8B81      		call __floatsisf
 10614 3e46 282F      		movw r26,r24
 10615 3e48 30E0      		movw r24,r22
 10616 3e4a 87E0      		movw r22,r24
 10617 3e4c 90E0      		movw r24,r26
 10618 3e4e 821B      		ldd r18,Y+5
 10619 3e50 930B      		ldd r19,Y+6
 10620 3e52 9A01      		ldd r20,Y+7
 10621 3e54 00C0      		ldd r21,Y+8
 10622 3e56 3595      		call __mulsf3
 10623 3e58 2795      		movw r26,r24
 10624 3e5a 8A95      		movw r24,r22
 10625 3e5c 02F4      		movw r18,r24
 10626 3e5e C901      		movw r20,r26
 10627 3e60 8170      		movw r24,r16
 10628 3e62 9070      		movw r22,r14
 10629 3e64 8823      		call __subsf3
 10630 3e66 01F0      		movw r26,r24
 757:main.c        **** 				{
 758:main.c        **** 					draw_line(x_buffer, y_buffer, (x*8)+75+bit, (-1*(y))+74);
 10631               	 Y+3,r26
 10632               		std Y+4,r27
 10634 3e6a 882F      	.LM920:
 10635 3e6c 90E0      		ldd r24,Y+10
 10636 3e6e 880F      		tst r24
 10637 3e70 991F      		brge .L337
 10639 3e74 991F      	.LM921:
 10640 3e76 880F      		ldi r24,lo8(-1)
 10641 3e78 991F      		std Y+10,r24
 10642 3e7a 982F      		rjmp .L339
 10643 3e7c 8B81      	.L337:
 10645 3e80 282F      	.LM922:
 10646 3e82 255B      		ldi r24,lo8(1)
 10647 3e84 9AE4      		std Y+10,r24
 10648 3e86 8C81      		rjmp .L339
 10649 3e88 981B      	.L340:
 10651 3e8c 6981      	.LM923:
 10652 3e8e 422F      		ldd r25,Y+10
 10653 3e90 292F      		ldd r24,Y+11
 10654 3e92 0E94 0000 		add r24,r25
 759:main.c        **** 					x_buffer = (x*8)+75+bit;
 10655               	,0,792,.LM924-.LFBB43
 10656               	.LM924:
 10657 3e96 8D81      		ldd r24,Y+11
 10658 3e98 882F      		mov r16,r24
 10659 3e9a 90E0      		ldi r17,lo8(0)
 10660 3e9c 880F      		ldd r24,Y+11
 10661 3e9e 991F      		mov r24,r24
 10662 3ea0 880F      		ldi r25,lo8(0)
 10663 3ea2 991F      		clr r26
 10664 3ea4 880F      		sbrc r25,7
 10665 3ea6 991F      		com r26
 10666 3ea8 982F      		mov r27,r26
 10667 3eaa 8B81      		movw r22,r24
 10668 3eac 890F      		movw r24,r26
 10669 3eae 855B      		call __floatsisf
 10670 3eb0 8A83      		movw r26,r24
 760:main.c        **** 					y_buffer = (-1*(y))+74;
 10671               	ovw r22,r24
 10672               		movw r24,r26
 10673 3eb2 9AE4      		ldd r18,Y+5
 10674 3eb4 8C81      		ldd r19,Y+6
 10675 3eb6 392F      		ldd r20,Y+7
 10676 3eb8 381B      		ldd r21,Y+8
 10677 3eba 832F      		call __mulsf3
 10678 3ebc 8983      		movw r26,r24
 10679               		movw r24,r22
 10680               		movw r22,r24
 10681               		movw r24,r26
 10682 3ebe 8C81      		ldd r18,Y+1
 10683 3ec0 8F5F      		ldd r19,Y+2
 10684 3ec2 8C83      		ldd r20,Y+3
 10685               		ldd r21,Y+4
 10686 3ec4 8C81      		call __addsf3
 10687 3ec6 8C33      		movw r26,r24
 10688 3ec8 00F4      		movw r24,r22
 10689 3eca 00C0      		movw r22,r24
 10690               		movw r24,r26
 10691               		call __fixsfsi
 10692 3ecc 8B81      		movw r26,r24
 10693 3ece 8F5F      		movw r24,r22
 10694 3ed0 8B83      		movw r18,r24
 10695               		movw r24,r16
 10696 3ed2 8B81      		movw r22,r18
 10697 3ed4 8830      		ldi r20,lo8(-1)
 10698 3ed6 00F4      		call lcd_graphics_plot_pixel
 10699 3ed8 00C0      	.L339:
 10701               	.LM925:
 10702 3eda 8D81      		ldd r25,Y+11
 10703 3edc 8F5F      		ldd r24,Y+13
 10704 3ede 8D83      		cp r25,r24
 10705               		brne .L340
 10706 3ee0 8D81      		rjmp .L346
 10707 3ee2 8A30      	.L348:
 10709 3ee6 00C0      	.LM926:
 761:main.c        **** 				}
 762:main.c        **** 				//else
 763:main.c        **** 					//lcd_graphics_plot_pixel((x*8)+75+bit, (-1*(y))+74, PIXEL_OFF);
 764:main.c        **** 			}
 765:main.c        **** 		}
 766:main.c        **** 	}
 767:main.c        **** 	g_draw_string(151, 65, "t");
 10710               	L346
 10712 3ee8 20E0      	.LM927:
 10713 3eea 30E0      		ldd r24,Y+10
 10714 3eec 87E9      		clr r25
 10715 3eee 90E0      		sbrc r24,7
 10716 3ef0 61E4      		com r25
 10717 3ef2 70E0      		mov r26,r25
 10718 3ef4 A901      		mov r27,r25
 10719 3ef6 0E94 0000 		movw r22,r24
 10720               		movw r24,r26
 768:main.c        **** }
 10721               	926-.LFBB43
 10722               	.LM926:
 10723 3efa 0F90      		ldd r24,Y+9
 10724 3efc 0F90      		tst r24
 10725 3efe 0F90      		brne .+2
 10726 3f00 0F90      		rjmp .L346
 10728 3f04 CF91      	.LM927:
 10729 3f06 DF91      		ldd r24,Y+10
 10730 3f08 0895      		clr r25
 10731               		sbrc r24,7
 10732               		com r25
 10733               		mov r26,r25
 10734               		mov r27,r25
 10735               		movw r22,r24
 10736               		movw r24,r26
 10737               		call __floatsisf
 10738               		movw r14,r22
 10739               		movw r16,r24
 10740               		ldd r24,Y+9
 10741               		clr r25
 10742               		sbrc r24,7
 10743               		com r25
 10744               		mov r26,r25
 10745               		mov r27,r25
 10746               		movw r22,r24
 10747               		movw r24,r26
 769:main.c        **** 
 770:main.c        **** void draw_line(unsigned char x_start, unsigned char y_start, unsigned char x_end, unsigned char y_e
 771:main.c        **** {
 10748               	26,r25
 10749               		mov r27,r25
 10750               		movw r22,r24
 10751 3f0a EF92      		movw r24,r26
 10752 3f0c FF92      		call __floatsisf
 10753 3f0e 0F93      		movw r14,r22
 10754 3f10 1F93      		movw r16,r24
 10755 3f12 DF93      		ldd r24,Y+9
 10756 3f14 CF93      		clr r25
 10757 3f16 CDB7      		sbrc r24,7
 10758 3f18 DEB7      		com r25
 10759 3f1a 2E97      		mov r26,r25
 10760 3f1c 0FB6      		mov r27,r25
 10761 3f1e F894      		movw r22,r24
 10762 3f20 DEBF      		movw r24,r26
 10763 3f22 0FBE      		call __floatsisf
 10764 3f24 CDBF      		movw r18,r22
 10765               		movw r20,r24
 10766               		movw r24,r16
 10767 3f26 8B87      		movw r22,r14
 10768 3f28 6C87      		call __divsf3
 10769 3f2a 4D87      		movw r26,r24
 10770 3f2c 2E87      		movw r24,r22
 772:main.c        **** 	signed char dx;
 773:main.c        **** 	signed char dy;
 774:main.c        **** 	float m, n;
 775:main.c        **** 
 776:main.c        **** 	dx = (signed)(x_end - x_start);
 10771               	,7
 10772               		com r25
 10773 3f2e 9D85      		mov r26,r25
 10774 3f30 8B85      		mov r27,r25
 10775 3f32 292F      		movw r22,r24
 10776 3f34 281B      		movw r24,r26
 10777 3f36 822F      		call __floatsisf
 10778 3f38 8A87      		movw r18,r22
 777:main.c        **** 	dy = (signed)(y_end - y_start);
 10779               		movw r24,r26
 10780               		call __floatsisf
 10781 3f3a 9E85      		movw r14,r22
 10782 3f3c 8C85      		movw r16,r24
 10783 3f3e 292F      		ldd r24,Y+9
 10784 3f40 281B      		clr r25
 10785 3f42 822F      		sbrc r24,7
 10786 3f44 8987      		com r25
 778:main.c        **** 	
 779:main.c        **** 	lcd_graphics_plot_pixel(x_start, y_start, PIXEL_ON);
 10787               	.LM927:
 10788               		ldd r24,Y+10
 10789 3f46 8B85      		clr r25
 10790 3f48 482F      		sbrc r24,7
 10791 3f4a 50E0      		com r25
 10792 3f4c 8C85      		mov r26,r25
 10793 3f4e 282F      		mov r27,r25
 10794 3f50 30E0      		movw r22,r24
 10795 3f52 CA01      		movw r24,r26
 10796 3f54 B901      		call __floatsisf
 10797 3f56 4FEF      		movw r14,r22
 10798 3f58 0E94 0000 		movw r16,r24
 780:main.c        **** 
 781:main.c        **** 	if (fabs(dx) > fabs(dy)) 
 10799               	+2
 10800               		rjmp .L346
 10802 3f5e 9927      	.LM927:
 10803 3f60 87FD      		ldd r24,Y+10
 10804 3f62 9095      		clr r25
 10805 3f64 A92F      		sbrc r24,7
 10806 3f66 B92F      		com r25
 10807 3f68 BC01      		mov r26,r25
 10808 3f6a CD01      		mov r27,r25
 10809 3f6c 0E94 0000 		movw r22,r24
 10810 3f70 DC01      		movw r24,r26
 10811 3f72 CB01      		call __floatsisf
 10812 3f74 7C01      		movw r14,r22
 10813 3f76 8D01      		movw r16,r24
 10814 3f78 E894      		ldd r24,Y+9
 10815 3f7a 17F9      		clr r25
 10816 3f7c 8985      		sbrc r24,7
 10817 3f7e 9927      		com r25
 10818 3f80 87FD      		mov r26,r25
 10819 3f82 9095      		mov r27,r25
 10820 3f84 A92F      		movw r22,r24
 10821 3f86 B92F      		movw r24,r26
 10822 3f88 BC01      		call __floatsisf
 10823 3f8a CD01      		movw r18,r22
 10824 3f8c 0E94 0000 		movw r20,r24
 10825 3f90 DC01      		movw r24,r16
 10826 3f92 CB01      		movw r22,r14
 10827 3f94 9C01      		call __divsf3
 10828 3f96 AD01      		movw r26,r24
 10829 3f98 5F77      		movw r24,r22
 10830 3f9a C801      		std Y+5,r24
 10831 3f9c B701      		std Y+6,r25
 10832 3f9e 0E94 0000 		std Y+7,r26
 10833 3fa2 1816      		std Y+8,r27
 10835 3fa6 00C0      	.LM928:
 10836               		ldd r24,Y+11
 782:main.c        **** 	{
 783:main.c        **** 		m = (float) dy / (float) dx;
 10837               	movw r24,r16
 10838               		movw r22,r14
 10839 3fa8 8985      		call __divsf3
 10840 3faa 9927      		movw r26,r24
 10841 3fac 87FD      		movw r24,r22
 10842 3fae 9095      		std Y+5,r24
 10843 3fb0 A92F      		std Y+6,r25
 10844 3fb2 B92F      		std Y+7,r26
 10845 3fb4 BC01      		std Y+8,r27
 10847 3fb8 0E94 0000 	.LM928:
 10848 3fbc 7B01      		ldd r24,Y+11
 10849 3fbe 8C01      		mov r24,r24
 10850 3fc0 8A85      		ldi r25,lo8(0)
 10851 3fc2 9927      		clr r26
 10852 3fc4 87FD      		sbrc r25,7
 10853 3fc6 9095      		com r26
 10854 3fc8 A92F      		mov r27,r26
 10855 3fca B92F      		movw r22,r24
 10856 3fcc BC01      		movw r24,r26
 10857 3fce CD01      		call __floatsisf
 10858 3fd0 0E94 0000 		movw r14,r22
 10859 3fd4 9B01      		movw r16,r24
 10860 3fd6 AC01      		ldd r24,Y+12
 10861 3fd8 C801      		mov r24,r24
 10862 3fda B701      		ldi r25,lo8(0)
 10863 3fdc 0E94 0000 		clr r26
 10864 3fe0 DC01      		sbrc r25,7
 10865 3fe2 CB01      		com r26
 10866 3fe4 8D83      		mov r27,r26
 10867 3fe6 9E83      		movw r22,r24
 10868 3fe8 AF83      		movw r24,r26
 10869 3fea B887      		call __floatsisf
 784:main.c        **** 		n = y_start - (m*x_start);
 10870               	 r14,r22
 10871               		movw r16,r24
 10872 3fec 8C85      		ldd r24,Y+12
 10873 3fee 882F      		mov r24,r24
 10874 3ff0 90E0      		ldi r25,lo8(0)
 10875 3ff2 AA27      		clr r26
 10876 3ff4 97FD      		sbrc r25,7
 10877 3ff6 A095      		com r26
 10878 3ff8 BA2F      		mov r27,r26
 10879 3ffa BC01      		movw r22,r24
 10880 3ffc CD01      		movw r24,r26
 10881 3ffe 0E94 0000 		call __floatsisf
 10882 4002 7B01      		movw r26,r24
 10883 4004 8C01      		movw r24,r22
 10884 4006 8B85      		movw r22,r24
 10885 4008 882F      		movw r24,r26
 10886 400a 90E0      		ldd r18,Y+5
 10887 400c AA27      		ldd r19,Y+6
 10888 400e 97FD      		ldd r20,Y+7
 10889 4010 A095      		ldd r21,Y+8
 10890 4012 BA2F      		call __mulsf3
 10891 4014 BC01      		movw r26,r24
 10892 4016 CD01      		movw r24,r22
 10893 4018 0E94 0000 		movw r18,r24
 10894 401c DC01      		movw r20,r26
 10895 401e CB01      		movw r24,r16
 10896 4020 BC01      		movw r22,r14
 10897 4022 CD01      		call __subsf3
 10898 4024 2D81      		movw r26,r24
 10899 4026 3E81      		movw r24,r22
 10900 4028 4F81      		std Y+1,r24
 10901 402a 5885      		std Y+2,r25
 10902 402c 0E94 0000 		std Y+3,r26
 10903 4030 DC01      		std Y+4,r27
 10905 4034 9C01      	.LM929:
 10906 4036 AD01      		ldd r24,Y+9
 10907 4038 C801      		tst r24
 10908 403a B701      		brge .L342
 10910 4040 DC01      	.LM930:
 10911 4042 CB01      		ldi r24,lo8(-1)
 10912 4044 8983      		std Y+9,r24
 10913 4046 9A83      		rjmp .L344
 10914 4048 AB83      	.L342:
 785:main.c        **** 		if (dx < 0)
 10917               	.LM930:
 10918 404c 8A85      		ldi r24,lo8(-1)
 10919 404e 8823      		std Y+9,r24
 10920 4050 04F4      		rjmp .L344
 786:main.c        **** 			dx = -1;
 10921               	LM929:
 10922               		ldd r24,Y+9
 10923 4052 8FEF      		tst r24
 10924 4054 8A87      		brge .L342
 10926               	.LM930:
 787:main.c        **** 		else
 788:main.c        **** 			dx = 1;
 10927               	std Y+4,r27
 10929 4058 81E0      	.LM929:
 10930 405a 8A87      		ldd r24,Y+9
 10931 405c 00C0      		tst r24
 10932               		brge .L342
 789:main.c        **** 		while (x_start != x_end) 
 790:main.c        **** 		{
 791:main.c        **** 			x_start += dx;
 10933               	2
 10934               		std Y+1,r24
 10935 405e 9A85      		std Y+2,r25
 10936 4060 8B85      		std Y+3,r26
 10937 4062 890F      		std Y+4,r27
 792:main.c        **** 			lcd_graphics_plot_pixel(x_start, (int)(m*x_start + n), PIXEL_ON);
 10939               	,r14
 10940               		call __subsf3
 10941 4066 8B85      		movw r26,r24
 10942 4068 082F      		movw r24,r22
 10943 406a 10E0      		std Y+1,r24
 10944 406c 8B85      		std Y+2,r25
 10945 406e 882F      		std Y+3,r26
 10946 4070 90E0      		std Y+4,r27
 10948 4074 97FD      	.LM929:
 10949 4076 A095      		ldd r24,Y+9
 10950 4078 BA2F      		tst r24
 10951 407a BC01      		brge .L342
 10953 407e 0E94 0000 	.LM930:
 10954 4082 DC01      		ldi r24,lo8(-1)
 10955 4084 CB01      		std Y+9,r24
 10956 4086 BC01      		rjmp .L344
 10957 4088 CD01      	.L342:
 10959 408c 3E81      	.LM931:
 10960 408e 4F81      		ldi r24,lo8(1)
 10961 4090 5885      		std Y+9,r24
 10962 4092 0E94 0000 		rjmp .L344
 10963 4096 DC01      	.L345:
 10965 409a BC01      	.LM932:
 10966 409c CD01      		ldd r25,Y+9
 10967 409e 2981      		ldd r24,Y+12
 10968 40a0 3A81      		add r24,r25
 10969 40a2 4B81      		std Y+12,r24
 10971 40a6 0E94 0000 	.LM933:
 10972 40aa DC01      		ldd r24,Y+12
 10973 40ac CB01      		mov r24,r24
 10974 40ae BC01      		ldi r25,lo8(0)
 10975 40b0 CD01      		clr r26
 10976 40b2 0E94 0000 		sbrc r25,7
 10977 40b6 DC01      		com r26
 10978 40b8 CB01      		mov r27,r26
 10979 40ba 9C01      		movw r22,r24
 10980 40bc C801      		movw r24,r26
 10981 40be B901      		call __floatsisf
 10982 40c0 4FEF      		movw r26,r24
 10983 40c2 0E94 0000 		movw r24,r22
 10984               		movw r22,r24
 10985               		movw r24,r26
 10986               		ldd r18,Y+5
 10987 40c6 9B85      		ldd r19,Y+6
 10988 40c8 8D85      		ldd r20,Y+7
 10989 40ca 9817      		ldd r21,Y+8
 10990 40cc 01F4      		call __mulsf3
 10991 40ce 00C0      		movw r26,r24
 10992               		movw r24,r22
 793:main.c        **** 		}
 794:main.c        **** 	} 
 795:main.c        **** 	else
 796:main.c        **** 		if (dy != 0) 
 10993               	,Y+5
 10994               		ldd r19,Y+6
 10995 40d0 8985      		ldd r20,Y+7
 10996 40d2 8823      		ldd r21,Y+8
 10997 40d4 01F4      		call __mulsf3
 10998 40d6 00C0      		movw r26,r24
 797:main.c        **** 		{
 798:main.c        **** 			m = (float) dx / (float) dy;
 10999               	24,r26
 11000               		ldd r18,Y+5
 11001 40d8 8A85      		ldd r19,Y+6
 11002 40da 9927      		ldd r20,Y+7
 11003 40dc 87FD      		ldd r21,Y+8
 11004 40de 9095      		call __mulsf3
 11005 40e0 A92F      		movw r26,r24
 11006 40e2 B92F      		movw r24,r22
 11007 40e4 BC01      		movw r22,r24
 11008 40e6 CD01      		movw r24,r26
 11009 40e8 0E94 0000 		ldd r18,Y+1
 11010 40ec 7B01      		ldd r19,Y+2
 11011 40ee 8C01      		ldd r20,Y+3
 11012 40f0 8985      		ldd r21,Y+4
 11013 40f2 9927      		call __addsf3
 11014 40f4 87FD      		movw r26,r24
 11015 40f6 9095      		movw r24,r22
 11016 40f8 A92F      		movw r22,r24
 11017 40fa B92F      		movw r24,r26
 11018 40fc BC01      		call __fixsfsi
 11019 40fe CD01      		movw r26,r24
 11020 4100 0E94 0000 		movw r24,r22
 11021 4104 9B01      		movw r20,r24
 11022 4106 AC01      		ldd r24,Y+12
 11023 4108 C801      		mov r18,r24
 11024 410a B701      		ldi r19,lo8(0)
 11025 410c 0E94 0000 		movw r24,r20
 11026 4110 DC01      		movw r22,r18
 11027 4112 CB01      		ldi r20,lo8(-1)
 11028 4114 8D83      		call lcd_graphics_plot_pixel
 11029 4116 9E83      	.L344:
 11031 411a B887      	.LM934:
 799:main.c        **** 			n = x_start - (m*y_start);
 11032               	ics_plot_pixel
 11033               	.L344:
 11035 411e 882F      	.LM934:
 11036 4120 90E0      		ldd r25,Y+12
 11037 4122 AA27      		ldd r24,Y+14
 11038 4124 97FD      		cp r25,r24
 11039 4126 A095      		brne .L345
 11040 4128 BA2F      	.L346:
 11041 412a BC01      	/* epilogue start */
 11043 412e 0E94 0000 	.LM935:
 11044 4132 7B01      		adiw r28,14
 11045 4134 8C01      		in __tmp_reg__,__SREG__
 11046 4136 8C85      		cli
 11047 4138 882F      		out __SP_H__,r29
 11048 413a 90E0      		out __SREG__,__tmp_reg__
 11049 413c AA27      		out __SP_L__,r28
 11050 413e 97FD      		pop r28
 11051 4140 A095      		pop r29
 11052 4142 BA2F      		pop r17
 11053 4144 BC01      		pop r16
 11054 4146 CD01      		pop r15
 11055 4148 0E94 0000 		pop r14
 11056 414c DC01      		ret
 11064 415c 0E94 0000 	.Lscope43:
 11065 4160 DC01      		.comm diagram,600,1
 800:main.c        **** 			if (dy < 0)
 11078               	y:G(0,11)",32,0,0,0
 801:main.c        **** 				dy = -1;
 11083               	0,11)",32,0,0,0
 802:main.c        **** 			else
 803:main.c        **** 				dy = 1;
 11089               	",32,0,0,0
 804:main.c        **** 			while (y_start != y_end) 
 805:main.c        **** 			{
 806:main.c        **** 				y_start += dy;
 11095               	0,0,0
 11099 4192 890F      	.Letext0:
 11100 4194 8C87      	.global __do_copy_data
 807:main.c        **** 				lcd_graphics_plot_pixel((int)(m*y_start + n), y_start, PIXEL_ON);
 11101               	
 11102               	.global __do_clear_bss
 11103 4196 8C85      	...
 808:main.c        **** 			}
 809:main.c        **** 		}
 810:main.c        **** }
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:5      *ABS*:00000034 __CCP__
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:74     .text:00000000 set_pin
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:294    .text:00000168 reset_pin
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:518    .text:000002dc toggle_pin
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:736    .text:00000444 init_out_pin
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:954    .text:000005ac init_in_pin
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1177   .text:00000720 init_out_port
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1323   .text:000007fa init_in_port
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1463   .text:000008c8 USART_Init
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1516   .text:00000906 init_serial
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1565   .text:00000938 init_in_ana
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1609   .text:00000964 get_in_pin
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1760   .text:00000a36 read_adc
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:1828   .data:00000000 Font5x7
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2318   .text:00000a8a g_draw_horizontal_line
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3735   .text:0000118c lcd_graphics_plot_pixel
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2401   .text:00000af6 g_draw_vertical_line
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2483   .text:00000b62 g_draw_rectangle
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2591   .text:00000c08 g_draw_char
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2754   .text:00000cf0 g_draw_string
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2886   .text:00000da4 lcd_strobe_enable
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:2953   .text:00000dda lcd_wait_busy
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3262   .text:00000f7c lcd_write_command
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3442   .text:0000101a lcd_graphics_init
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3574   .text:000010c0 lcd_graphics_move
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3654   .text:00001134 lcd_graphics_draw_byte
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3686   .text:00001150 lcd_graphics_plot_byte
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3804   .text:000011e2 lcd_graphics_clear
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:3863   .text:00001224 delay_ms_long
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:4084   .text:00001348 delay_ms
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:4231   .text:0000141e delay_s
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:4280   .text:00001452 draw_grad
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:4436   .text:0000155a draw_flame
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:5414   .text:00001bde draw_flake
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6202   .data:000001e0 val_ad_bcd
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6207   .data:000001e3 val_min_bcd
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6212   .data:000001e6 val_max_bcd
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6217   .data:000001e9 val_refr_bcd
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6224   .bss:00000000 val_ad
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6230   .bss:00000002 val_min
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6236   .bss:00000004 val_max
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6242   .bss:00000006 val_refr
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6248   .bss:00000008 buffer_touch_ad_x
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6254   .bss:0000000a buffer_touch_ad_y
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6260   .bss:0000000b selected_mode
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6266   .bss:0000000c bar_1_height
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6272   .bss:0000000d val_min_bar
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6278   .bss:0000000e bar_2_height
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6284   .bss:0000000f val_max_bar
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6290   .bss:00000010 bar_3_height
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6296   .bss:00000011 val_refr_bar
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6302   .bss:00000012 button_pressed
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6308   .bss:00000013 num_pad_pressed
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6314   .data:000001f0 num_input_min_temp
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6319   .data:000001f3 num_input_max_temp
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6324   .data:000001f6 num_input_refr_time
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6331   .bss:0000001f num_pad_value_control
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6337   .bss:00000020 num_pad_input_recognised
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6343   .bss:00000021 num_pad_cursor_pos
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6349   .bss:00000022 i_count
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6355   .text:00002112 __vector_21
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6428   .text:0000218c main
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:6848   .text:00002448 call_input_mode_screen
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:7093   .text:000025b2 call_num_pad_mode
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:8554   .text:00003048 call_slider_mode
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:9589   .text:0000378c draw_layout
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:10461  .text:00003d8a clr_diagram
                            *COM*:00000258 diagram
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:10544  .text:00003dec draw_diagram
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:10327  .text:00003cb6 get_touch_y
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:10024  .text:00003a98 get_touch_x
C:\DOCUME~1\ALEXAN~1.WEG\LOCALS~1\Temp/ccfHD8Fy.s:10747  .text:00003f0a draw_line

UNDEFINED SYMBOLS
__mulsf3
__ltsf2
__gtsf2
__divsf3
__fixunssfsi
__mulsi3
__divmodsi4
__floatunsisf
round
__addsf3
__fixsfsi
__divmodhi4
__udivmodqi4
__floatsisf
__subsf3
__do_copy_data
__do_clear_bss


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006e8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	55 c0       	rjmp	.+170    	; 0xdc <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
//LED Blinking
#include <avr/io.h>

int main(void)
{
  34:	df 93       	push	r29
  36:	cf 93       	push	r28
  38:	00 d0       	rcall	.+0      	; 0x3a <main+0x6>
  3a:	00 d0       	rcall	.+0      	; 0x3c <main+0x8>
  3c:	cd b7       	in	r28, 0x3d	; 61
  3e:	de b7       	in	r29, 0x3e	; 62
	unsigned int i, j;
	
	j = 0;
  40:	1a 82       	std	Y+2, r1	; 0x02
  42:	19 82       	std	Y+1, r1	; 0x01
	
	DDRB |= (0x01 << 0);	//PB.0 output
  44:	a7 e3       	ldi	r26, 0x37	; 55
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e7 e3       	ldi	r30, 0x37	; 55
  4a:	f0 e0       	ldi	r31, 0x00	; 0
  4c:	80 81       	ld	r24, Z
  4e:	81 60       	ori	r24, 0x01	; 1
  50:	8c 93       	st	X, r24
	DDRB &= ~(0x01 << 1);	//PB.1 input
  52:	a7 e3       	ldi	r26, 0x37	; 55
  54:	b0 e0       	ldi	r27, 0x00	; 0
  56:	e7 e3       	ldi	r30, 0x37	; 55
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	8d 7f       	andi	r24, 0xFD	; 253
  5e:	8c 93       	st	X, r24
	PORTB |= (0x01 << 1);	//pull-up on
  60:	a8 e3       	ldi	r26, 0x38	; 56
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	e8 e3       	ldi	r30, 0x38	; 56
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	82 60       	ori	r24, 0x02	; 2
  6c:	8c 93       	st	X, r24
  6e:	24 c0       	rjmp	.+72     	; 0xb8 <__SREG__+0x79>
	
	while((PINB & (0x01 << 1)))
	{
		PORTB ^= (0x01 << 0);
  70:	a8 e3       	ldi	r26, 0x38	; 56
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e8 e3       	ldi	r30, 0x38	; 56
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	90 81       	ld	r25, Z
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	89 27       	eor	r24, r25
  7e:	8c 93       	st	X, r24
		//PORTB  |= (0x01 << 0);
		
		for(i = 0; i <= 255; i++)
  80:	1c 82       	std	Y+4, r1	; 0x04
  82:	1b 82       	std	Y+3, r1	; 0x03
  84:	13 c0       	rjmp	.+38     	; 0xac <__SREG__+0x6d>
		{
			for(j = 0; j <= 255; j++)
  86:	1a 82       	std	Y+2, r1	; 0x02
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	05 c0       	rjmp	.+10     	; 0x96 <__SREG__+0x57>
			{
				j = j;
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	9a 81       	ldd	r25, Y+2	; 0x02
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	9a 83       	std	Y+2, r25	; 0x02
  94:	89 83       	std	Y+1, r24	; 0x01
		PORTB ^= (0x01 << 0);
		//PORTB  |= (0x01 << 0);
		
		for(i = 0; i <= 255; i++)
		{
			for(j = 0; j <= 255; j++)
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	91 05       	cpc	r25, r1
  9e:	b1 f3       	breq	.-20     	; 0x8c <__SREG__+0x4d>
  a0:	a8 f3       	brcs	.-22     	; 0x8c <__SREG__+0x4d>
	while((PINB & (0x01 << 1)))
	{
		PORTB ^= (0x01 << 0);
		//PORTB  |= (0x01 << 0);
		
		for(i = 0; i <= 255; i++)
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	9c 81       	ldd	r25, Y+4	; 0x04
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	9c 83       	std	Y+4, r25	; 0x04
  aa:	8b 83       	std	Y+3, r24	; 0x03
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	8f 3f       	cpi	r24, 0xFF	; 255
  b2:	91 05       	cpc	r25, r1
  b4:	41 f3       	breq	.-48     	; 0x86 <__SREG__+0x47>
  b6:	38 f3       	brcs	.-50     	; 0x86 <__SREG__+0x47>
	
	DDRB |= (0x01 << 0);	//PB.0 output
	DDRB &= ~(0x01 << 1);	//PB.1 input
	PORTB |= (0x01 << 1);	//pull-up on
	
	while((PINB & (0x01 << 1)))
  b8:	e6 e3       	ldi	r30, 0x36	; 54
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 2f       	mov	r24, r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	82 70       	andi	r24, 0x02	; 2
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	99 f6       	brne	.-90     	; 0x70 <__SREG__+0x31>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
			{
				j = j;
			}
		}
	}
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
